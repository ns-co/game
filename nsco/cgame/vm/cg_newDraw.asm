data
export drawTeamOverlayModificationCount
align 4
LABELV drawTeamOverlayModificationCount
byte 4 -1
export CG_InitTeamChat
code
proc CG_InitTeamChat 0 12
file "../cg_newDraw.c"
line 26
;1:// every line of code that differs from the quake3:arena SDK
;2:// is property of manfred nerurkar
;3:// no commercial explotation allowed
;4:// you are only allowed to use this code in navy seals: covert operations 
;5:// a quake3 arena modifiation
;6:// defcon-x@ns-co.net
;7:
;8:#include "cg_local.h"
;9:#include "../ui/ui_shared.h"
;10:#include "variables.h"
;11:
;12:extern displayContextDef_t cgDC;
;13:
;14:void CG_ForceCvar( const char *cvar, int value );
;15:
;16:// set in CG_ParseTeamInfo
;17:
;18://static int sortedTeamPlayers[TEAM_MAXOVERLAY];
;19://static int numSortedTeamPlayers;
;20:int drawTeamOverlayModificationCount = -1;
;21:
;22://static char systemChat[256];
;23://static char teamChat1[256];
;24://static char teamChat2[256];
;25:
;26:void CG_InitTeamChat() {
line 27
;27:  memset(teamChat1, 0, sizeof(teamChat1));
ADDRGP4 teamChat1
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 28
;28:  memset(teamChat2, 0, sizeof(teamChat2));
ADDRGP4 teamChat2
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 29
;29:  memset(systemChat, 0, sizeof(systemChat));
ADDRGP4 systemChat
ARGP4
CNSTI4 0
ARGI4
CNSTI4 256
ARGI4
ADDRGP4 memset
CALLP4
pop
line 30
;30:}
LABELV $93
endproc CG_InitTeamChat 0 12
export CG_SetPrintString
proc CG_SetPrintString 0 8
line 32
;31:
;32:void CG_SetPrintString(int type, const char *p) {
line 33
;33:  if (type == SYSTEM_PRINT) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $95
line 34
;34:    strcpy(systemChat, p);
ADDRGP4 systemChat
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 35
;35:  } else {
ADDRGP4 $96
JUMPV
LABELV $95
line 36
;36:    strcpy(teamChat2, teamChat1);
ADDRGP4 teamChat2
ARGP4
ADDRGP4 teamChat1
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 37
;37:    strcpy(teamChat1, p);
ADDRGP4 teamChat1
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 38
;38:  }
LABELV $96
line 39
;39:} 
LABELV $94
endproc CG_SetPrintString 0 8
proc CG_DrawPlayerArmorIcon 40 0
line 40
;40:static void CG_DrawPlayerArmorIcon( rectDef_t *rect, qboolean draw2D ) {
line 46
;41:	centity_t	*cent;
;42:	playerState_t	*ps;
;43:	vec3_t		angles;
;44:	vec3_t		origin;
;45:
;46:  if ( cg_drawStatus.integer == 0 ) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $98
line 47
;47:		return;
ADDRGP4 $97
JUMPV
LABELV $98
line 50
;48:	}
;49:
;50:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 51
;51:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 53
;52:
;53:	if ( draw2D || !cg_draw3dIcons.integer && cg_drawIcons.integer ) {
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRFP4 4
INDIRI4
ADDRLP4 32
INDIRI4
NEI4 $107
ADDRGP4 cg_draw3dIcons+12
INDIRI4
ADDRLP4 32
INDIRI4
NEI4 $103
ADDRGP4 cg_drawIcons+12
INDIRI4
ADDRLP4 32
INDIRI4
EQI4 $103
LABELV $107
line 55
;54:	//	CG_DrawPic( rect->x, rect->y + rect->h/2 + 1, rect->w, rect->h, cgs.media.armorIcon );
;55:  } else if (cg_draw3dIcons.integer) {
ADDRGP4 $104
JUMPV
LABELV $103
ADDRGP4 cg_draw3dIcons+12
INDIRI4
CNSTI4 0
EQI4 $108
line 56
;56:	  VectorClear( angles );
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 36
INDIRF4
ASGNF4
line 57
;57:    origin[0] = 90;
ADDRLP4 20
CNSTF4 1119092736
ASGNF4
line 58
;58:  	origin[1] = 0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 59
;59:  	origin[2] = -10;
ADDRLP4 20+8
CNSTF4 3240099840
ASGNF4
line 60
;60:  	angles[YAW] = ( cg.time & 2047 ) * 360 / 2048.0;
ADDRLP4 8+4
CNSTI4 360
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2047
BANDI4
MULI4
CVIF4 4
CNSTF4 1157627904
DIVF4
ASGNF4
line 63
;61:  
;62:   // CG_Draw3DModel( rect->x, rect->y, rect->w, rect->h, cgs.media.armorModel, 0, origin, angles );
;63:  }
LABELV $108
LABELV $104
line 65
;64:
;65:}
LABELV $97
endproc CG_DrawPlayerArmorIcon 40 0
proc CG_DrawPlayerArmorValue 40 32
line 67
;66:
;67:static void CG_DrawPlayerArmorValue(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 73
;68:	char	num[16];
;69:  int value;
;70:	centity_t	*cent;
;71:	playerState_t	*ps;
;72:
;73:  cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 20
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 74
;74:	ps = &cg.snap->ps;
ADDRLP4 24
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 76
;75:
;76:	value = cg.snap->ps.stats[STAT_ROUNDS]; 
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ASGNI4
line 78
;77:
;78:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $121
line 79
;79:    trap_R_SetColor( color );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 80
;80:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 81
;81:	  trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 82
;82:	} else {
ADDRGP4 $122
JUMPV
LABELV $121
line 86
;83:		// BLUTENGEL:
;84:		// is this the occurence of the ammo displayed wrong? probably
;85:		// yes!
;86:		Com_sprintf (num, sizeof(num), "%i", (value > 0 ? value : 0));
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $125
ADDRLP4 28
ADDRLP4 0
INDIRI4
ASGNI4
ADDRGP4 $126
JUMPV
LABELV $125
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $126
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 87
;87:		value = CG_Text_Width(num, scale, 0);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 32
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRI4
ASGNI4
line 88
;88:	  CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1073741824
DIVF4
ADDF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 89
;89:	}
LABELV $122
line 90
;90:}
LABELV $117
endproc CG_DrawPlayerArmorValue 40 32
data
align 4
LABELV healthColors
byte 4 1065353216
byte 4 1060152279
byte 4 0
byte 4 1065353216
byte 4 1065353216
byte 4 1045220557
byte 4 1045220557
byte 4 1065353216
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
code
proc CG_DrawPlayerAmmoValue 44 32
line 101
;91:
;92:static float healthColors[4][4] = { 
;93://		{ 0.2, 1.0, 0.2, 1.0 } , { 1.0, 0.2, 0.2, 1.0 }, {0.5, 0.5, 0.5, 1} };
;94:		{ 1, 0.69f, 0, 1.0f } ,		// normal
;95:		{ 1.0f, 0.2f, 0.2f, 1.0f },		// low health
;96:		{0.5f, 0.5f, 0.5f, 1},			// weapon firing
;97:		{ 1, 1, 1, 1 } 
;98:};			// health > 100
;99: 
;100:
;101:static void CG_DrawPlayerAmmoValue(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 107
;102:	char	num[16];
;103:	int value;
;104:	centity_t	*cent;
;105:	playerState_t	*ps;
;106:
;107:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 0
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 108
;108:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 110
;109:
;110:	if ( cent->currentState.weapon ) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $130
line 113
;111:		gitem_t *it;
;112:
;113:		it = BG_FindItemForWeapon( cent->currentState.weapon );
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 28
ADDRLP4 32
INDIRP4
ASGNP4
line 115
;114:
;115:		if ( !it )
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $132
line 116
;116:			return;
ADDRGP4 $127
JUMPV
LABELV $132
line 118
;117:
;118:		value = ps->ammo[it->giAmmoTag];
ADDRLP4 8
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
line 120
;119:
;120:		if ( value > -1 ) {
ADDRLP4 8
INDIRI4
CNSTI4 -1
LEI4 $134
line 121
;121:			if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $136
line 122
;122:		    trap_R_SetColor( color );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 123
;123:				CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 124
;124:			  trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 125
;125:			} else {
ADDRGP4 $137
JUMPV
LABELV $136
line 126
;126:				Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 127
;127:				value = CG_Text_Width(num, scale, 0);
ADDRLP4 12
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 36
INDIRI4
ASGNI4
line 128
;128:				CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1073741824
DIVF4
ADDF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 129
;129:			}
LABELV $137
line 130
;130:		}
LABELV $134
line 131
;131:	}
LABELV $130
line 133
;132:
;133:}
LABELV $127
endproc CG_DrawPlayerAmmoValue 44 32
proc CG_DrawPlayerHead 60 24
line 137
;134:
;135:
;136:
;137:static void CG_DrawPlayerHead(rectDef_t *rect, qboolean draw2D) {
line 141
;138:	vec3_t		angles;
;139:	float		size, stretch;
;140:	float		frac;
;141:	float		x = rect->x;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 143
;142:
;143:	VectorClear( angles );
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 28
INDIRF4
ASGNF4
line 145
;144:
;145:	if ( cg.damageTime && cg.time - cg.damageTime < cg.damageDuration  ) {
ADDRGP4 cg+115312
INDIRF4
CNSTF4 0
EQF4 $141
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg+115312
INDIRF4
SUBF4
ADDRGP4 cg+117872
INDIRI4
CVIF4 4
GEF4 $141
line 146
;146:		frac = (float)(cg.time - cg.damageTime ) / cg.damageDuration;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg+115312
INDIRF4
SUBF4
ADDRGP4 cg+117872
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 147
;147:		size = rect->w * 1.25 * ( 1.5 - frac * 0.5 );
ADDRLP4 20
CNSTF4 1067450368
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
CNSTF4 1069547520
CNSTF4 1056964608
ADDRLP4 0
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 149
;148:
;149:		stretch = size - rect->w * 1.25;
ADDRLP4 24
ADDRLP4 20
INDIRF4
CNSTF4 1067450368
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 151
;150:		// kick in the direction of damage
;151:		x -= stretch * 0.5 + cg.damageX * stretch * 0.5;
ADDRLP4 32
CNSTF4 1056964608
ASGNF4
ADDRLP4 36
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 32
INDIRF4
ADDRGP4 cg+115316
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
MULF4
ADDF4
SUBF4
ASGNF4
line 153
;152:
;153:		cg.headStartYaw = 180 + cg.damageX * 45;
ADDRGP4 cg+115348
CNSTF4 1110704128
ADDRGP4 cg+115316
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 155
;154:
;155:		cg.headEndYaw = 180 + 20 * cos( crandom()*M_PI );
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 44
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+115336
CNSTF4 1101004800
ADDRLP4 44
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 156
;156:		cg.headEndPitch = 5 * cos( crandom()*M_PI );
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 52
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+115332
CNSTF4 1084227584
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
line 158
;157:
;158:		cg.headStartTime = cg.time;
ADDRGP4 cg+115352
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 159
;159:		cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+115340
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
CNSTF4 1157234688
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 160
;160:	} else {
ADDRGP4 $142
JUMPV
LABELV $141
line 161
;161:		if ( cg.time >= cg.headEndTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+115340
INDIRI4
LTI4 $159
line 163
;162:			// select a new head angle
;163:			cg.headStartYaw = cg.headEndYaw;
ADDRGP4 cg+115348
ADDRGP4 cg+115336
INDIRF4
ASGNF4
line 164
;164:			cg.headStartPitch = cg.headEndPitch;
ADDRGP4 cg+115344
ADDRGP4 cg+115332
INDIRF4
ASGNF4
line 165
;165:			cg.headStartTime = cg.headEndTime;
ADDRGP4 cg+115352
ADDRGP4 cg+115340
INDIRI4
ASGNI4
line 166
;166:			cg.headEndTime = cg.time + 100 + random() * 2000;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg+115340
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
CNSTF4 1157234688
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 168
;167:
;168:			cg.headEndYaw = 180 + 20 * cos( crandom()*M_PI );
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 40
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+115336
CNSTF4 1101004800
ADDRLP4 40
INDIRF4
MULF4
CNSTF4 1127481344
ADDF4
ASGNF4
line 169
;169:			cg.headEndPitch = 5 * cos( crandom()*M_PI );
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ARGF4
ADDRLP4 48
ADDRGP4 cos
CALLF4
ASGNF4
ADDRGP4 cg+115332
CNSTF4 1084227584
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 170
;170:		}
LABELV $159
line 172
;171:
;172:		size = rect->w * 1.25;
ADDRLP4 20
CNSTF4 1067450368
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 173
;173:	}
LABELV $142
line 176
;174:
;175:	// if the server was frozen for a while we may have a bad head start time
;176:	if ( cg.headStartTime > cg.time ) {
ADDRGP4 cg+115352
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $173
line 177
;177:		cg.headStartTime = cg.time;
ADDRGP4 cg+115352
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 178
;178:	}
LABELV $173
line 180
;179:
;180:	frac = ( cg.time - cg.headStartTime ) / (float)( cg.headEndTime - cg.headStartTime );
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+115352
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+115340
INDIRI4
ADDRGP4 cg+115352
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 181
;181:	frac = frac * frac * ( 3 - 2 * frac );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1077936128
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
SUBF4
MULF4
ASGNF4
line 182
;182:	angles[YAW] = cg.headStartYaw + ( cg.headEndYaw - cg.headStartYaw ) * frac;
ADDRLP4 4+4
ADDRGP4 cg+115348
INDIRF4
ADDRGP4 cg+115336
INDIRF4
ADDRGP4 cg+115348
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 183
;183:	angles[PITCH] = cg.headStartPitch + ( cg.headEndPitch - cg.headStartPitch ) * frac;
ADDRLP4 4
ADDRGP4 cg+115344
INDIRF4
ADDRGP4 cg+115332
INDIRF4
ADDRGP4 cg+115344
INDIRF4
SUBF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 185
;184:
;185:	CG_DrawHead( x, rect->y, rect->w, rect->h, cg.snap->ps.clientNum, angles );
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_DrawHead
CALLV
pop
line 186
;186:}
LABELV $138
endproc CG_DrawPlayerHead 60 24
export CG_StatusHandle
proc CG_StatusHandle 4 0
line 189
;187: 
;188: 
;189:qhandle_t CG_StatusHandle(int task) {
line 190
;190:	qhandle_t h = cgs.media.bloodHitShader; 
ADDRLP4 0
ADDRGP4 cgs+205084+684
INDIRI4
ASGNI4
line 193
;191:
;192:
;193:	return h;
ADDRLP4 0
INDIRI4
RETI4
LABELV $191
endproc CG_StatusHandle 4 0
proc CG_DrawPlayerStatus 16 20
line 196
;194:}
;195: 
;196:static void CG_DrawPlayerStatus( rectDef_t *rect ) {
line 197
;197:	clientInfo_t *ci = &cgs.clientinfo[cg.snap->ps.clientNum];
ADDRLP4 0
CNSTI4 2484
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 198
;198:	if (ci) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $197
line 199
;199:		qhandle_t h = CG_StatusHandle(ci->teamTask);
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 200
;200:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h, h);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 201
;201:	}
LABELV $197
line 202
;202:}
LABELV $194
endproc CG_DrawPlayerStatus 16 20
proc CG_DrawPlayerLocation 20 32
line 206
;203:
;204: 
;205:
;206:static void CG_DrawPlayerLocation( rectDef_t *rect, float scale, vec4_t color, int textStyle  ) {
line 207
;207:	clientInfo_t *ci = &cgs.clientinfo[cg.snap->ps.clientNum];
ADDRLP4 0
CNSTI4 2484
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 208
;208:  if (ci) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $202
line 209
;209:		const char *p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 612
ADDI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 210
;210:		if (!p || !*p) {
ADDRLP4 12
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $206
ADDRLP4 12
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $204
LABELV $206
line 211
;211:			p = "unknown";
ADDRLP4 4
ADDRGP4 $207
ASGNP4
line 212
;212:		}
LABELV $204
line 213
;213:    CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, p, 0, 0, textStyle);
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 214
;214:  }
LABELV $202
line 215
;215:}
LABELV $199
endproc CG_DrawPlayerLocation 20 32
proc CG_DrawPlayerScore 28 32
line 218
;216: 
;217:
;218:static void CG_DrawPlayerScore( rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 220
;219:  char num[16];
;220:  int value = cg.snap->ps.persistant[PERS_SCORE];
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 296
ADDP4
INDIRI4
ASGNI4
line 222
;221:
;222:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $210
line 223
;223:		trap_R_SetColor( color );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 224
;224:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 225
;225:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 226
;226:	} else {
ADDRGP4 $211
JUMPV
LABELV $210
line 227
;227:		Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 228
;228:		value = CG_Text_Width(num, scale, 0);
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 229
;229:	  CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1073741824
DIVF4
ADDF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 230
;230:	}
LABELV $211
line 231
;231:}
LABELV $208
endproc CG_DrawPlayerScore 28 32
proc CG_DrawPlayerItem 0 0
line 233
;232:
;233:static void CG_DrawPlayerItem( rectDef_t *rect, float scale, qboolean draw2D) {
line 254
;234://	int		value;
;235://  vec3_t origin, angles;
;236:/*
;237:	value = cg.snap->ps.stats[STAT_HOLDABLE_ITEM];
;238:	if ( value ) {
;239:		CG_RegisterItemVisuals( value );
;240:
;241:		if (qtrue) {
;242:		  CG_RegisterItemVisuals( value );
;243:		  CG_DrawPic( rect->x, rect->y, rect->w, rect->h, cg_items[ value ].icon );
;244:		} else {
;245: 			VectorClear( angles );
;246:			origin[0] = 90;
;247:  		origin[1] = 0;
;248:   		origin[2] = -10;
;249:  		angles[YAW] = ( cg.time & 2047 ) * 360 / 2048.0;
;250:			CG_Draw3DModel(rect->x, rect->y, rect->w, rect->h, cg_items[ value ].models[0], 0, origin, angles );
;251:		}
;252:	}
;253:*/
;254:}
LABELV $212
endproc CG_DrawPlayerItem 0 0
proc CG_DrawPlayerHealth 32 32
line 259
;255: 
;256:
;257: 
;258:
;259:static void CG_DrawPlayerHealth(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 264
;260:	playerState_t	*ps;
;261:  int value;
;262:	char	num[16];
;263:
;264:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 266
;265:
;266:	value = ps->stats[STAT_HEALTH];
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 268
;267:
;268:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $215
line 269
;269:		trap_R_SetColor( color );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 270
;270:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 271
;271:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 272
;272:	} else {
ADDRGP4 $216
JUMPV
LABELV $215
line 273
;273:		Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 8
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 274
;274:	  value = CG_Text_Width(num, scale, 0);
ADDRLP4 8
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 24
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 275
;275:	  CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1073741824
DIVF4
ADDF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 276
;276:	}
LABELV $216
line 277
;277:}
LABELV $213
endproc CG_DrawPlayerHealth 32 32
proc CG_DrawRedScore 28 32
line 280
;278:
;279:
;280:static void CG_DrawRedScore(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 283
;281:	int value;
;282:	char num[16];
;283:	if ( cgs.scores1 == SCORE_NOT_PRESENT ) {
ADDRGP4 cgs+32492
INDIRI4
CNSTI4 -9999
NEI4 $218
line 284
;284:		Com_sprintf (num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $221
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 285
;285:	}
ADDRGP4 $219
JUMPV
LABELV $218
line 286
;286:	else {
line 287
;287:		Com_sprintf (num, sizeof(num), "%i", cgs.scores1);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRGP4 cgs+32492
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 288
;288:	}
LABELV $219
line 289
;289:	value = CG_Text_Width(num, scale, 0);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 290
;290:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 291
;291:}
LABELV $217
endproc CG_DrawRedScore 28 32
proc CG_DrawBlueScore 28 32
line 293
;292:
;293:static void CG_DrawBlueScore(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 297
;294:	int value;
;295:	char num[16];
;296:
;297:	if ( cgs.scores2 == SCORE_NOT_PRESENT ) {
ADDRGP4 cgs+32496
INDIRI4
CNSTI4 -9999
NEI4 $224
line 298
;298:		Com_sprintf (num, sizeof(num), "-");
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $221
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 299
;299:	}
ADDRGP4 $225
JUMPV
LABELV $224
line 300
;300:	else {
line 301
;301:		Com_sprintf (num, sizeof(num), "%i", cgs.scores2);
ADDRLP4 0
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRGP4 cgs+32496
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 302
;302:	}
LABELV $225
line 303
;303:	value = CG_Text_Width(num, scale, 0);
ADDRLP4 0
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 304
;304:	CG_Text_Paint(rect->x + rect->w - value, rect->y + rect->h, scale, color, num, 0, 0, textStyle);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
SUBF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 305
;305:}
LABELV $223
endproc CG_DrawBlueScore 28 32
proc CG_DrawTeamColor 8 24
line 315
;306:
;307:  
;308:
;309:
;310:  
;311: 
;312:
;313:
;314:
;315:static void CG_DrawTeamColor(rectDef_t *rect, vec4_t color) {
line 316
;316:	CG_DrawTeamBackground(rect->x, rect->y, rect->w, rect->h, color[3], cg.snap->ps.persistant[PERS_TEAM]);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 4
CNSTI4 12
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamBackground
CALLV
pop
line 317
;317:}
LABELV $228
endproc CG_DrawTeamColor 8 24
proc CG_DrawAreaPowerUp 236 32
line 319
;318:
;319:static void CG_DrawAreaPowerUp(rectDef_t *rect, int align, float special, float scale, vec4_t color) {
line 331
;320:	char num[16];
;321:	int		sorted[MAX_POWERUPS];
;322:	int		sortedTime[MAX_POWERUPS];
;323:	int		i, j, k;
;324:	int		active;
;325:	playerState_t	*ps;
;326:	int		t;
;327:	gitem_t	*item;
;328:	float	f;
;329:	rectDef_t r2;
;330:	float *inc;
;331:	r2.x = rect->x;
ADDRLP4 148
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 332
;332:	r2.y = rect->y;
ADDRLP4 148+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 333
;333:	r2.w = rect->w;
ADDRLP4 148+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 334
;334:	r2.h = rect->h;
ADDRLP4 148+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 336
;335:
;336:	inc = (align == HUD_VERTICAL) ? &r2.y : &r2.x;
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $236
ADDRLP4 200
ADDRLP4 148+4
ASGNP4
ADDRGP4 $237
JUMPV
LABELV $236
ADDRLP4 200
ADDRLP4 148
ASGNP4
LABELV $237
ADDRLP4 196
ADDRLP4 200
INDIRP4
ASGNP4
line 338
;337:
;338:	ps = &cg.snap->ps;
ADDRLP4 168
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 340
;339:
;340:	if ( ps->stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 168
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $239
line 341
;341:		return;
ADDRGP4 $230
JUMPV
LABELV $239
line 345
;342:	}
;343:
;344:	// sort the list by time remaining
;345:	active = 0;
ADDRLP4 136
CNSTI4 0
ASGNI4
line 346
;346:	for ( i = 0 ; i < MAX_POWERUPS ; i++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $241
line 347
;347:		if ( !ps->powerups[ i ] ) {
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 168
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $245
line 348
;348:			continue;
ADDRGP4 $242
JUMPV
LABELV $245
line 350
;349:		}
;350:		t = ps->powerups[ i ] - cg.time;
ADDRLP4 140
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 168
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 353
;351:		// ZOID--don't draw if the power up has unlimited time (999 seconds)
;352:		// This is true of the CTF flags
;353:		if ( t <= 0 || t >= 999000) {
ADDRLP4 140
INDIRI4
CNSTI4 0
LEI4 $250
ADDRLP4 140
INDIRI4
CNSTI4 999000
LTI4 $248
LABELV $250
line 354
;354:			continue;
ADDRGP4 $242
JUMPV
LABELV $248
line 358
;355:		}
;356:
;357:		// insert into the list
;358:		for ( j = 0 ; j < active ; j++ ) {
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRGP4 $254
JUMPV
LABELV $251
line 359
;359:			if ( sortedTime[j] >= t ) {
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
LTI4 $255
line 360
;360:				for ( k = active - 1 ; k >= j ; k-- ) {
ADDRLP4 0
ADDRLP4 136
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $260
JUMPV
LABELV $257
line 361
;361:					sorted[k+1] = sorted[k];
ADDRLP4 208
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 208
INDIRI4
ADDRLP4 68+4
ADDP4
ADDRLP4 208
INDIRI4
ADDRLP4 68
ADDP4
INDIRI4
ASGNI4
line 362
;362:					sortedTime[k+1] = sortedTime[k];
ADDRLP4 212
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 212
INDIRI4
ADDRLP4 4+4
ADDP4
ADDRLP4 212
INDIRI4
ADDRLP4 4
ADDP4
INDIRI4
ASGNI4
line 363
;363:				}
LABELV $258
line 360
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $260
ADDRLP4 0
INDIRI4
ADDRLP4 132
INDIRI4
GEI4 $257
line 364
;364:				break;
ADDRGP4 $253
JUMPV
LABELV $255
line 366
;365:			}
;366:		}
LABELV $252
line 358
ADDRLP4 132
ADDRLP4 132
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $254
ADDRLP4 132
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $251
LABELV $253
line 367
;367:		sorted[j] = i;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 368
;368:		sortedTime[j] = t;
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 369
;369:		active++;
ADDRLP4 136
ADDRLP4 136
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 370
;370:	}
LABELV $242
line 346
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 16
LTI4 $241
line 373
;371:
;372:	// draw the icons and timers
;373:	for ( i = 0 ; i < active ; i++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRGP4 $266
JUMPV
LABELV $263
line 374
;374:		item = BG_FindItemForPowerup( sorted[i] );
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 204
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 172
ADDRLP4 204
INDIRP4
ASGNP4
line 376
;375:
;376:		if (item) {
ADDRLP4 172
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $267
line 377
;377:			t = ps->powerups[ sorted[i] ];
ADDRLP4 208
CNSTI4 2
ASGNI4
ADDRLP4 140
ADDRLP4 144
INDIRI4
ADDRLP4 208
INDIRI4
LSHI4
ADDRLP4 68
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
LSHI4
ADDRLP4 168
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ASGNI4
line 378
;378:			if ( t - cg.time >= POWERUP_BLINKS * POWERUP_BLINK_TIME ) {
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 5000
LTI4 $269
line 379
;379:				trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 380
;380:			} else {
ADDRGP4 $270
JUMPV
LABELV $269
line 383
;381:				vec4_t	modulate;
;382:
;383:				f = (float)( t - cg.time ) / POWERUP_BLINK_TIME;
ADDRLP4 192
ADDRLP4 140
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 384
;384:				f -= (int)f;
ADDRLP4 192
ADDRLP4 192
INDIRF4
ADDRLP4 192
INDIRF4
CVFI4 4
CVIF4 4
SUBF4
ASGNF4
line 385
;385:				modulate[0] = modulate[1] = modulate[2] = modulate[3] = f;
ADDRLP4 212+12
ADDRLP4 192
INDIRF4
ASGNF4
ADDRLP4 212+8
ADDRLP4 192
INDIRF4
ASGNF4
ADDRLP4 212+4
ADDRLP4 192
INDIRF4
ASGNF4
ADDRLP4 212
ADDRLP4 192
INDIRF4
ASGNF4
line 386
;386:				trap_R_SetColor( modulate );
ADDRLP4 212
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 387
;387:			}
LABELV $270
line 389
;388:
;389:			CG_DrawPic( r2.x, r2.y, r2.w * .75, r2.h, trap_R_RegisterShader( item->icon ) );
ADDRLP4 172
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148+4
INDIRF4
ARGF4
CNSTF4 1061158912
ADDRLP4 148+8
INDIRF4
MULF4
ARGF4
ADDRLP4 148+12
INDIRF4
ARGF4
ADDRLP4 212
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 391
;390:
;391:			Com_sprintf (num, sizeof(num), "%i", sortedTime[i] / 1000);
ADDRLP4 176
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRLP4 144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRI4
CNSTI4 1000
DIVI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 392
;392:			CG_Text_Paint(r2.x + (r2.w * .75) + 3 , r2.y + r2.h, scale, color, num, 0, 0, 0);
ADDRLP4 148
INDIRF4
CNSTF4 1061158912
ADDRLP4 148+8
INDIRF4
MULF4
ADDF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 148+4
INDIRF4
ADDRLP4 148+12
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 176
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 216
CNSTI4 0
ASGNI4
ADDRLP4 216
INDIRI4
ARGI4
ADDRLP4 216
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 393
;393:			*inc += r2.w + special;
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 148+8
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ADDF4
ASGNF4
line 394
;394:		}
LABELV $267
line 396
;395:
;396:	}
LABELV $264
line 373
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $266
ADDRLP4 144
INDIRI4
ADDRLP4 136
INDIRI4
LTI4 $263
line 397
;397:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 399
;398:
;399:}
LABELV $230
endproc CG_DrawAreaPowerUp 236 32
export CG_GetValue
proc CG_GetValue 32 4
line 401
;400:
;401:float CG_GetValue(int ownerDraw) {
line 405
;402:	centity_t	*cent; 
;403:	playerState_t	*ps;
;404:
;405:	cent = &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 4
CNSTI4 728
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 406
;406:	ps = &cg.snap->ps;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 408
;407:
;408:	switch (ownerDraw) 
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
CNSTI4 20
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $294
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
GTI4 $302
LABELV $301
ADDRLP4 16
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 2
EQI4 $288
ADDRLP4 16
INDIRI4
CNSTI4 4
EQI4 $296
ADDRLP4 16
INDIRI4
CNSTI4 6
EQI4 $289
ADDRGP4 $287
JUMPV
LABELV $302
ADDRLP4 20
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 27
EQI4 $299
ADDRLP4 20
INDIRI4
CNSTI4 28
EQI4 $297
ADDRGP4 $287
JUMPV
line 409
;409:	{ 
LABELV $288
line 411
;410:		case CG_PLAYER_ROUNDS_VALUE:
;411:			return ps->stats[STAT_ROUNDS];
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 412
;412:			break;
LABELV $289
line 414
;413:		case CG_PLAYER_AMMO_VALUE:
;414:			if ( cent->currentState.weapon ) {
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $287
line 417
;415:				gitem_t *it;
;416:
;417:				it = BG_FindItemForWeapon( cent->currentState.weapon );
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 24
ADDRLP4 28
INDIRP4
ASGNP4
line 419
;418:
;419:				if (!it)
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $292
line 420
;420:					return 0;
CNSTF4 0
RETF4
ADDRGP4 $283
JUMPV
LABELV $292
line 422
;421:
;422:				return ps->ammo[it->giAmmoTag];
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 424
;423:			}
;424:			break;
LABELV $294
line 426
;425:		case CG_PLAYER_SCORE:
;426:			return cg.snap->ps.persistant[PERS_SCORE];
ADDRGP4 cg+36
INDIRP4
CNSTI4 296
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 427
;427:			break;
LABELV $296
line 429
;428:		case CG_PLAYER_HEALTH:
;429:			return ps->stats[STAT_HEALTH];
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 430
;430:			break;
LABELV $297
line 432
;431:		case CG_RED_SCORE:
;432:			return cgs.scores1;
ADDRGP4 cgs+32492
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 433
;433:			break;
LABELV $299
line 435
;434:		case CG_BLUE_SCORE:
;435:			return cgs.scores2;
ADDRGP4 cgs+32496
INDIRI4
CVIF4 4
RETF4
ADDRGP4 $283
JUMPV
line 436
;436:			break;
line 438
;437:		default:
;438:			break;
LABELV $287
line 440
;439:	}
;440:	return -1;
CNSTF4 3212836864
RETF4
LABELV $283
endproc CG_GetValue 32 4
export CG_OwnerDrawVisible
proc CG_OwnerDrawVisible 8 0
line 446
;441:}
;442:  
;443:
;444:// THINKABOUTME: should these be exclusive or inclusive.. 
;445:// 
;446:qboolean CG_OwnerDrawVisible(int flags) {
line 450
;447:  
;448:
;449:	// only show if we're on the waiting line
;450:	if (flags & CG_SHOW_SPECTATOR ) {
ADDRFP4 0
INDIRI4
CNSTI4 536870912
BANDI4
CNSTI4 0
EQI4 $304
line 451
;451:		return ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP );
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $313
ADDRLP4 4
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $313
ADDRGP4 cg+36
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $310
LABELV $313
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRGP4 $311
JUMPV
LABELV $310
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $311
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $303
JUMPV
LABELV $304
line 453
;452:	}
;453:	if (flags & CG_SHOW_NO_SPECTATOR ) {
ADDRFP4 0
INDIRI4
CNSTI4 1073741824
BANDI4
CNSTI4 0
EQI4 $314
line 454
;454:		if ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP )
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $322
ADDRLP4 0
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $322
ADDRGP4 cg+36
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $316
LABELV $322
line 455
;455:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $303
JUMPV
LABELV $316
line 457
;456:
;457:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $314
line 460
;458:	}
;459:	
;460: 	if (flags & (CG_SHOW_BLUE_TEAM_HAS_REDFLAG | CG_SHOW_RED_TEAM_HAS_BLUEFLAG)) {
ADDRFP4 0
INDIRI4
CNSTI4 3
BANDI4
CNSTI4 0
EQI4 $323
line 461
;461:		if (flags & CG_SHOW_BLUE_TEAM_HAS_REDFLAG && (cgs.redflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_RED)) {
ADDRLP4 0
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRI4
ADDRLP4 0
INDIRI4
BANDI4
CNSTI4 0
EQI4 $325
ADDRGP4 cgs+32500
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $329
ADDRGP4 cgs+32508
INDIRI4
CNSTI4 2
NEI4 $325
LABELV $329
line 462
;462:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $325
line 463
;463:		} else if (flags & CG_SHOW_RED_TEAM_HAS_BLUEFLAG && (cgs.blueflag == FLAG_TAKEN || cgs.flagStatus == FLAG_TAKEN_BLUE)) {
ADDRFP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $330
ADDRGP4 cgs+32504
INDIRI4
CNSTI4 1
EQI4 $334
ADDRGP4 cgs+32508
INDIRI4
CNSTI4 3
NEI4 $330
LABELV $334
line 464
;464:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $330
line 466
;465:		}
;466:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $303
JUMPV
LABELV $323
line 469
;467:	}
;468:
;469:	if (flags & CG_SHOW_ANYTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $335
line 470
;470:		if( cgs.gametype >= GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
LTI4 $337
line 471
;471:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $337
line 473
;472:		}
;473:	}
LABELV $335
line 475
;474:
;475:	if (flags & CG_SHOW_ANYNONTEAMGAME) {
ADDRFP4 0
INDIRI4
CNSTI4 524288
BANDI4
CNSTI4 0
EQI4 $340
line 476
;476:		if( cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
GEI4 $342
line 477
;477:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $342
line 479
;478:		}
;479:	}
LABELV $340
line 481
;480:
;481:	if (flags & CG_SHOW_HEALTHCRITICAL) {
ADDRFP4 0
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $345
line 482
;482:		if (cg.snap->ps.stats[STAT_HEALTH] < 25) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 25
GEI4 $347
line 483
;483:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $347
line 485
;484:		}
;485:	}
LABELV $345
line 487
;486:
;487:	if (flags & CG_SHOW_HEALTHOK) {
ADDRFP4 0
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $350
line 488
;488:		if (cg.snap->ps.stats[STAT_HEALTH] > 25) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 25
LEI4 $352
line 489
;489:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $352
line 491
;490:		}
;491:	} 
LABELV $350
line 493
;492:
;493:	if (flags & CG_SHOW_DURINGINCOMINGVOICE) {
ADDRFP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $355
line 494
;494:	}
LABELV $355
line 496
;495:
;496:	if ( flags & CG_SHOW_IF_PLAYER_HAS_FLAG) {
ADDRFP4 0
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $357
line 497
;497:		if ( cg.snap->ps.powerups[PW_BRIEFCASE]  ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 0
EQI4 $359
line 498
;498:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $303
JUMPV
LABELV $359
line 500
;499:		}
;500:	}
LABELV $357
line 501
;501:	return qfalse;
CNSTI4 0
RETI4
LABELV $303
endproc CG_OwnerDrawVisible 8 0
proc CG_DrawAreaSystemChat 8 32
line 507
;502:}
;503:
;504:
;505:
;506:
;507:static void CG_DrawAreaSystemChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 508
;508:  CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, systemChat, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 systemChat
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 509
;509:}
LABELV $362
endproc CG_DrawAreaSystemChat 8 32
proc CG_DrawAreaTeamChat 8 32
line 511
;510:
;511:static void CG_DrawAreaTeamChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 512
;512:  CG_Text_Paint(rect->x, rect->y + rect->h, scale, color,teamChat1, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat1
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 513
;513:}
LABELV $363
endproc CG_DrawAreaTeamChat 8 32
proc CG_DrawAreaChat 8 32
line 515
;514:
;515:static void CG_DrawAreaChat(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 516
;516:  CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, teamChat2, 0, 0, 0);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 teamChat2
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 517
;517:}
LABELV $364
endproc CG_DrawAreaChat 8 32
export CG_GetKillerText
proc CG_GetKillerText 8 8
line 519
;518:
;519:const char *CG_GetKillerText() {
line 520
;520:	const char *s = "";
ADDRLP4 0
ADDRGP4 $366
ASGNP4
line 521
;521:	if ( cg.killerName[0] ) {
ADDRGP4 cg+112908
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $367
line 522
;522:		s = va("Fragged by %s", cg.killerName );
ADDRGP4 $370
ARGP4
ADDRGP4 cg+112908
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 523
;523:	}
LABELV $367
line 524
;524:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $365
endproc CG_GetKillerText 8 8
proc CG_DrawKiller 24 32
line 528
;525:}
;526:
;527:
;528:static void CG_DrawKiller(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 530
;529:	// fragged by ... line
;530:	if ( cg.killerName[0] ) {
ADDRGP4 cg+112908
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $373
line 531
;531:		int x = rect->x + rect->w / 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1073741824
DIVF4
ADDF4
CVFI4 4
ASGNI4
line 532
;532:	  CG_Text_Paint(x - CG_Text_Width(CG_GetKillerText(), scale, 0) / 2, rect->y + rect->h, scale, color, CG_GetKillerText(), 0, 0, textStyle);
ADDRLP4 8
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 12
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 16
ADDRGP4 CG_GetKillerText
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 533
;533:	}
LABELV $373
line 535
;534:	
;535:}
LABELV $372
endproc CG_DrawKiller 24 32
proc CG_DrawCapFragLimit 12 32
line 538
;536:
;537:
;538:static void CG_DrawCapFragLimit(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 539
;539:	int limit = cgs.teampointlimit;
ADDRLP4 0
ADDRGP4 cgs+214072
INDIRI4
ASGNI4
line 540
;540:	CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", limit),0, 0, textStyle); 
ADDRGP4 $378
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 541
;541:}
LABELV $376
endproc CG_DrawCapFragLimit 12 32
proc CG_Draw1stPlace 8 32
line 543
;542:
;543:static void CG_Draw1stPlace(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 544
;544:	if (cgs.scores1 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32492
INDIRI4
CNSTI4 -9999
EQI4 $380
line 545
;545:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores1),0, 0, textStyle); 
ADDRGP4 $378
ARGP4
ADDRGP4 cgs+32492
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 546
;546:	}
LABELV $380
line 547
;547:}
LABELV $379
endproc CG_Draw1stPlace 8 32
proc CG_Draw2ndPlace 8 32
line 549
;548:
;549:static void CG_Draw2ndPlace(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 550
;550:	if (cgs.scores2 != SCORE_NOT_PRESENT) {
ADDRGP4 cgs+32496
INDIRI4
CNSTI4 -9999
EQI4 $385
line 551
;551:		CG_Text_Paint(rect->x, rect->y, scale, color, va("%2i", cgs.scores2),0, 0, textStyle); 
ADDRGP4 $378
ARGP4
ADDRGP4 cgs+32496
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 552
;552:	}
LABELV $385
line 553
;553:}
LABELV $384
endproc CG_Draw2ndPlace 8 32
export CG_GetGameStatusText
proc CG_GetGameStatusText 12 12
line 555
;554:
;555:const char *CG_GetGameStatusText() {
line 556
;556:	const char *s = "";
ADDRLP4 0
ADDRGP4 $366
ASGNP4
line 557
;557:	if ( cgs.gametype < GT_TEAM) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
GEI4 $390
line 558
;558:		if (cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $391
line 559
;559:			s = va("%s place with %i",CG_PlaceString( cg.snap->ps.persistant[PERS_RANK] + 1 ),cg.snap->ps.persistant[PERS_SCORE] );
ADDRGP4 cg+36
INDIRP4
CNSTI4 300
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_PlaceString
CALLP4
ASGNP4
ADDRGP4 $396
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 296
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 560
;560:		}
line 561
;561:	} else {
ADDRGP4 $391
JUMPV
LABELV $390
line 562
;562:		if ( cg.teamScores[0] == cg.teamScores[1] ) {
ADDRGP4 cg+110840
INDIRI4
ADDRGP4 cg+110840+4
INDIRI4
NEI4 $399
line 563
;563:			s = va("Teams are tied at %i", cg.teamScores[0] );
ADDRGP4 $404
ARGP4
ADDRGP4 cg+110840
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 564
;564:		} else if ( cg.teamScores[0] >= cg.teamScores[1] ) {
ADDRGP4 $400
JUMPV
LABELV $399
ADDRGP4 cg+110840
INDIRI4
ADDRGP4 cg+110840+4
INDIRI4
LTI4 $406
line 565
;565:			s = va("Seals lead Tangos, %i to %i", cg.teamScores[0], cg.teamScores[1] );
ADDRGP4 $411
ARGP4
ADDRGP4 cg+110840
INDIRI4
ARGI4
ADDRGP4 cg+110840+4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 566
;566:		} else {
ADDRGP4 $407
JUMPV
LABELV $406
line 567
;567:			s = va("Tangos lead Seals, %i to %i", cg.teamScores[1], cg.teamScores[0] );
ADDRGP4 $415
ARGP4
ADDRGP4 cg+110840+4
INDIRI4
ARGI4
ADDRGP4 cg+110840
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 568
;568:		}
LABELV $407
LABELV $400
line 569
;569:	}
LABELV $391
line 570
;570:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $389
endproc CG_GetGameStatusText 12 12
proc CG_DrawGameStatus 8 32
line 573
;571:}
;572:	
;573:static void CG_DrawGameStatus(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 574
;574:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, CG_GetGameStatusText(), 0, 0, textStyle);
ADDRLP4 0
ADDRGP4 CG_GetGameStatusText
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 575
;575:}
LABELV $419
endproc CG_DrawGameStatus 8 32
export CG_GameTypeString
proc CG_GameTypeString 0 0
line 577
;576:
;577:const char *CG_GameTypeString() {
line 578
;578:	if ( cgs.gametype == GT_FFA ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 0
NEI4 $421
line 579
;579:		return "Free For All";
ADDRGP4 $424
RETP4
ADDRGP4 $420
JUMPV
LABELV $421
line 580
;580:	} else if ( cgs.gametype == GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
NEI4 $425
line 581
;581:		return "Free Teamplay";
ADDRGP4 $428
RETP4
ADDRGP4 $420
JUMPV
LABELV $425
line 582
;582:	}/* else if ( cgs.gametype == GT_TRAINING ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
NEI4 $429
line 585
;583:		return "Training";
;584:	}*/ else if ( cgs.gametype == GT_LTS) {
;585:		return "Mission Objective";
ADDRGP4 $432
RETP4
ADDRGP4 $420
JUMPV
LABELV $429
line 587
;586:	} 
;587:	return "";
ADDRGP4 $366
RETP4
LABELV $420
endproc CG_GameTypeString 0 0
proc CG_DrawGameType 8 32
line 589
;588:}
;589:static void CG_DrawGameType(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle ) {
line 590
;590:	CG_Text_Paint(rect->x, rect->y + rect->h, scale, color, CG_GameTypeString(), 0, 0, textStyle);
ADDRLP4 0
ADDRGP4 CG_GameTypeString
CALLP4
ASGNP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 591
;591:}
LABELV $433
endproc CG_DrawGameType 8 32
proc CG_Text_Paint_Limit 76 40
line 593
;592:
;593:static void CG_Text_Paint_Limit(float *maxX, float x, float y, float scale, vec4_t color, const char* text, float adjust, int limit) {
line 597
;594:  int len, count;
;595:	vec4_t newColor;
;596:	glyphInfo_t *glyph;
;597:  if (text) {
ADDRFP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $435
line 598
;598:		const char *s = text;
ADDRLP4 28
ADDRFP4 20
INDIRP4
ASGNP4
line 599
;599:		float max = *maxX;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRF4
ASGNF4
line 601
;600:		float useScale;
;601:		fontInfo_t *font = &cgDC.Assets.textFont;
ADDRLP4 36
ADDRGP4 cgDC+232+12
ASGNP4
line 602
;602:		if (scale <= cg_smallFont.value) {
ADDRFP4 12
INDIRF4
ADDRGP4 cg_smallFont+8
INDIRF4
GTF4 $439
line 603
;603:			font = &cgDC.Assets.smallFont;
ADDRLP4 36
ADDRGP4 cgDC+232+20560
ASGNP4
line 604
;604:		} else if (scale > cg_bigFont.value) {
ADDRGP4 $440
JUMPV
LABELV $439
ADDRFP4 12
INDIRF4
ADDRGP4 cg_bigFont+8
INDIRF4
LEF4 $444
line 605
;605:			font = &cgDC.Assets.bigFont;
ADDRLP4 36
ADDRGP4 cgDC+232+41108
ASGNP4
line 606
;606:		}
LABELV $444
LABELV $440
line 607
;607:		useScale = scale * font->glyphScale;
ADDRLP4 32
ADDRFP4 12
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 20480
ADDP4
INDIRF4
MULF4
ASGNF4
line 608
;608:		trap_R_SetColor( color );
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 609
;609:    len = strlen(text);					 
ADDRFP4 20
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ASGNI4
line 610
;610:		if (limit > 0 && len > limit) {
ADDRLP4 48
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
LEI4 $449
ADDRLP4 24
INDIRI4
ADDRLP4 48
INDIRI4
LEI4 $449
line 611
;611:			len = limit;
ADDRLP4 24
ADDRFP4 28
INDIRI4
ASGNI4
line 612
;612:		}
LABELV $449
line 613
;613:		count = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $452
JUMPV
LABELV $451
line 614
;614:		while (s && *s && count < len) {
line 615
;615:			glyph = &font->glyphs[*s];
ADDRLP4 0
CNSTI4 80
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
MULI4
ADDRLP4 36
INDIRP4
ADDP4
ASGNP4
line 616
;616:			if ( Q_IsColorString( s ) ) {
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $454
ADDRLP4 56
CNSTI4 94
ASGNI4
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 56
INDIRI4
NEI4 $454
ADDRLP4 60
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $454
ADDRLP4 60
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $454
line 617
;617:				memcpy( newColor, g_color_table[ColorIndex(*(s+1))], sizeof( newColor ) );
ADDRLP4 4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
CNSTI4 63
BANDI4
CNSTI4 4
LSHI4
ADDRGP4 g_color_table
ADDP4
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 618
;618:				newColor[3] = color[3];
ADDRLP4 4+12
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 619
;619:				trap_R_SetColor( newColor );
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 620
;620:				s += 2;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 2
ADDP4
ASGNP4
line 621
;621:				continue;
ADDRGP4 $452
JUMPV
LABELV $454
line 622
;622:			} else {
line 623
;623:	      float yadj = useScale * glyph->top;
ADDRLP4 64
ADDRLP4 32
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 624
;624:				if (CG_Text_Width(s, useScale, 1) + x > max) {
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 68
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRF4
ADDF4
ADDRLP4 40
INDIRF4
LEF4 $457
line 625
;625:					*maxX = 0;
ADDRFP4 0
INDIRP4
CNSTF4 0
ASGNF4
line 626
;626:					break;
ADDRGP4 $453
JUMPV
LABELV $457
line 628
;627:				}
;628:		    CG_Text_PaintChar(x, y - yadj, 
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Text_PaintChar
CALLV
pop
line 637
;629:			                    glyph->imageWidth,
;630:				                  glyph->imageHeight,
;631:					                useScale, 
;632:						              glyph->s,
;633:							            glyph->t,
;634:								          glyph->s2,
;635:									        glyph->t2,
;636:										      glyph->glyph);
;637:	      x += (glyph->xSkip * useScale) + adjust;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
MULF4
ADDRFP4 24
INDIRF4
ADDF4
ADDF4
ASGNF4
line 638
;638:				*maxX = x;
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRF4
ASGNF4
line 639
;639:				count++;
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 640
;640:				s++;
ADDRLP4 28
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 641
;641:	    }
line 642
;642:		}
LABELV $452
line 614
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $460
ADDRLP4 28
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $460
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $451
LABELV $460
LABELV $453
line 643
;643:	  trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 644
;644:  }
LABELV $435
line 646
;645:
;646:}
LABELV $434
endproc CG_Text_Paint_Limit 76 40
export CG_DrawNewTeamInfo
proc CG_DrawNewTeamInfo 96 32
line 652
;647:
;648:
;649:
;650:#define PIC_WIDTH 12
;651:
;652:void CG_DrawNewTeamInfo(rectDef_t *rect, float text_x, float text_y, float scale, vec4_t color, qhandle_t shader) {
line 664
;653:	int xx;
;654:	float y;
;655:	int i, j, len, count;
;656:	const char *p;
;657:	vec4_t		hcolor;
;658:	float pwidth, lwidth, maxx, leftOver;
;659:	clientInfo_t *ci;
;660:	gitem_t	*item;
;661:	qhandle_t h;
;662:
;663:	// max player name width
;664:	pwidth = 0;
ADDRLP4 64
CNSTF4 0
ASGNF4
line 665
;665:	count = (numSortedTeamPlayers > 8) ? 8 : numSortedTeamPlayers;
ADDRGP4 numSortedTeamPlayers
INDIRI4
CNSTI4 8
LEI4 $463
ADDRLP4 72
CNSTI4 8
ASGNI4
ADDRGP4 $464
JUMPV
LABELV $463
ADDRLP4 72
ADDRGP4 numSortedTeamPlayers
INDIRI4
ASGNI4
LABELV $464
ADDRLP4 32
ADDRLP4 72
INDIRI4
ASGNI4
line 666
;666:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $468
JUMPV
LABELV $465
line 667
;667:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
CNSTI4 2484
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 668
;668:		if ( ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $470
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $470
line 669
;669:			len = CG_Text_Width( ci->name, scale, 0);
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 80
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 80
INDIRI4
ASGNI4
line 670
;670:			if (len > pwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 64
INDIRF4
LEF4 $473
line 671
;671:				pwidth = len;
ADDRLP4 64
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $473
line 672
;672:		}
LABELV $470
line 673
;673:	}
LABELV $466
line 666
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $468
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $465
line 676
;674:
;675:	// max location name width
;676:	lwidth = 0;
ADDRLP4 68
CNSTF4 0
ASGNF4
line 677
;677:	for (i = 1; i < MAX_LOCATIONS; i++) {
ADDRLP4 8
CNSTI4 1
ASGNI4
LABELV $475
line 678
;678:		p = CG_ConfigString(CS_LOCATIONS + i);
ADDRLP4 8
INDIRI4
CNSTI4 612
ADDI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 76
INDIRP4
ASGNP4
line 679
;679:		if (p && *p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $479
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $479
line 680
;680:			len = CG_Text_Width(p, scale, 0);
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 84
INDIRI4
ASGNI4
line 681
;681:			if (len > lwidth)
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 68
INDIRF4
LEF4 $481
line 682
;682:				lwidth = len;
ADDRLP4 68
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
LABELV $481
line 683
;683:		}
LABELV $479
line 684
;684:	}
LABELV $476
line 677
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LTI4 $475
line 686
;685:
;686:	y = rect->y;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 688
;687:
;688:	for (i = 0; i < count; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $486
JUMPV
LABELV $483
line 689
;689:		ci = cgs.clientinfo + sortedTeamPlayers[i];
ADDRLP4 4
CNSTI4 2484
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 690
;690:		if ( ci->infoValid && ci->team == cg.snap->ps.persistant[PERS_TEAM]) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $488
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $488
line 692
;691:
;692:			xx = rect->x + 1;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 693
;693:			for (j = 0; j <= PW_NUM_POWERUPS; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $491
line 694
;694:				if (ci->powerups & (1 << j)) {
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $495
line 696
;695:
;696:					item = BG_FindItemForPowerup( j );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 80
INDIRP4
ASGNP4
line 698
;697:
;698:					if (item) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $497
line 699
;699:						CG_DrawPic( xx, y, PIC_WIDTH, PIC_WIDTH, trap_R_RegisterShader( item->icon ) );
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 88
CNSTF4 1094713344
ASGNF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 700
;700:						xx += PIC_WIDTH;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 12
ADDI4
ASGNI4
line 701
;701:					}
LABELV $497
line 702
;702:				}
LABELV $495
line 703
;703:			}
LABELV $492
line 693
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 12
LEI4 $491
line 706
;704:
;705:			// FIXME: max of 3 powerups shown properly
;706:			xx = rect->x + (PIC_WIDTH * 3) + 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1108344832
ADDF4
CNSTF4 1073741824
ADDF4
CVFI4 4
ASGNI4
line 708
;707:
;708:			CG_GetColorForHealth( ci->health, ci->armor, hcolor );
ADDRLP4 4
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 709
;709:			trap_R_SetColor(hcolor);
ADDRLP4 48
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 716
;710://			CG_DrawPic( xx, y + 1, PIC_WIDTH - 2, PIC_WIDTH - 2, cgs.media.heartShader );
;711:
;712:			//Com_sprintf (st, sizeof(st), "%3i %3i", ci->health,	ci->armor);
;713:			//CG_Text_Paint(xx, y + text_y, scale, hcolor, st, 0, 0); 
;714:
;715:			// draw weapon icon
;716:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 727
;717:
;718:// weapon used is not that useful, use the space for task
;719:#if 0
;720:			if ( cg_weapons[ci->curWeapon].weaponIcon ) {
;721:				CG_DrawPic( xx, y, PIC_WIDTH, PIC_WIDTH, cg_weapons[ci->curWeapon].weaponIcon );
;722:			} else {
;723:				CG_DrawPic( xx, y, PIC_WIDTH, PIC_WIDTH, cgs.media.deferShader );
;724:			}
;725:#endif
;726:
;727:			trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 728
;728:			if (cgs.orderPending) {
ADDRGP4 cgs+205040
INDIRI4
CNSTI4 0
EQI4 $499
line 730
;729:				// blink the icon
;730:				if ( cg.time > cgs.orderTime - 2500 && (cg.time >> 9 ) & 1 ) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+205044
INDIRI4
CNSTI4 2500
SUBI4
LEI4 $502
ADDRGP4 cg+107604
INDIRI4
CNSTI4 9
RSHI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $502
line 731
;731:					h = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 732
;732:				} else {
ADDRGP4 $500
JUMPV
LABELV $502
line 733
;733:					h = CG_StatusHandle(cgs.currentOrder);
ADDRGP4 cgs+205036
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 734
;734:				}
line 735
;735:			}	else {
ADDRGP4 $500
JUMPV
LABELV $499
line 736
;736:				h = CG_StatusHandle(ci->teamTask);
ADDRLP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_StatusHandle
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 84
INDIRI4
ASGNI4
line 737
;737:			}
LABELV $500
line 739
;738:
;739:			if (h) {
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $508
line 740
;740:				CG_DrawPic( xx, y, PIC_WIDTH, PIC_WIDTH, h);
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 84
CNSTF4 1094713344
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 741
;741:			}
LABELV $508
line 743
;742:
;743:			xx += PIC_WIDTH + 1;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 13
ADDI4
ASGNI4
line 745
;744:
;745:			leftOver = rect->w - xx;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 746
;746:			maxx = xx + leftOver / 3;
ADDRLP4 36
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1077936128
DIVF4
ADDF4
ASGNF4
line 750
;747:
;748:
;749:
;750:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, ci->name, 0, 0); 
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 752
;751:
;752:			p = CG_ConfigString(CS_LOCATIONS + ci->location);
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 612
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 84
INDIRP4
ASGNP4
line 753
;753:			if (!p || !*p) {
ADDRLP4 20
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $512
ADDRLP4 20
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $510
LABELV $512
line 754
;754:				p = "unknown";
ADDRLP4 20
ADDRGP4 $207
ASGNP4
line 755
;755:			}
LABELV $510
line 757
;756:
;757:			xx += leftOver / 3 + 2;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
CNSTF4 1077936128
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
CVFI4 4
ASGNI4
line 758
;758:			maxx = rect->w - 4;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 760
;759:
;760:			CG_Text_Paint_Limit(&maxx, xx, y + text_y, scale, color, p, 0, 0); 
ADDRLP4 36
ARGP4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 761
;761:			y += text_y + 2;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
line 762
;762:			if ( y + text_y + 2 > rect->y + rect->h ) {
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
CNSTF4 1073741824
ADDF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
LEF4 $513
line 763
;763:				break;
ADDRGP4 $485
JUMPV
LABELV $513
line 766
;764:			}
;765:
;766:		}
LABELV $488
line 767
;767:	}
LABELV $484
line 688
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $486
ADDRLP4 8
INDIRI4
ADDRLP4 32
INDIRI4
LTI4 $483
LABELV $485
line 768
;768:}
LABELV $461
endproc CG_DrawNewTeamInfo 96 32
export CG_DrawTeamSpectators
proc CG_DrawTeamSpectators 24 32
line 771
;769:
;770:
;771:void CG_DrawTeamSpectators(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader) {
line 772
;772:	if (cg.spectatorLen) 
ADDRGP4 cg+113964
INDIRI4
CNSTI4 0
EQI4 $516
line 773
;773:	{
line 776
;774:		float maxX;
;775:
;776:		if (cg.spectatorWidth == -1) {
ADDRGP4 cg+113968
INDIRF4
CNSTF4 3212836864
NEF4 $519
line 777
;777:			cg.spectatorWidth = 0;
ADDRGP4 cg+113968
CNSTF4 0
ASGNF4
line 778
;778:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+113976
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 779
;779:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+113980
CNSTI4 -1
ASGNI4
line 780
;780:		}
LABELV $519
line 782
;781:
;782:		if (cg.spectatorOffset > cg.spectatorLen) {
ADDRGP4 cg+113984
INDIRI4
ADDRGP4 cg+113964
INDIRI4
LEI4 $525
line 783
;783:			cg.spectatorOffset = 0;
ADDRGP4 cg+113984
CNSTI4 0
ASGNI4
line 784
;784:			cg.spectatorPaintX = rect->x + 1;
ADDRGP4 cg+113976
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 785
;785:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+113980
CNSTI4 -1
ASGNI4
line 786
;786:		}
LABELV $525
line 788
;787:
;788:		if (cg.time > cg.spectatorTime) {
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+113972
INDIRI4
LEI4 $532
line 789
;789:			cg.spectatorTime = cg.time + 10;
ADDRGP4 cg+113972
ADDRGP4 cg+107604
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 790
;790:			if (cg.spectatorPaintX <= rect->x + 2) {
ADDRGP4 cg+113976
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDF4
GTF4 $538
line 791
;791:				if (cg.spectatorOffset < cg.spectatorLen) {
ADDRGP4 cg+113984
INDIRI4
ADDRGP4 cg+113964
INDIRI4
GEI4 $541
line 792
;792:					cg.spectatorPaintX += CG_Text_Width(&cg.spectatorList[cg.spectatorOffset], scale, 1) - 1;
ADDRGP4 cg+113984
INDIRI4
ADDRGP4 cg+112940
ADDP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 8
ADDRGP4 cg+113976
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ADDI4
ASGNI4
line 793
;793:					cg.spectatorOffset++;
ADDRLP4 12
ADDRGP4 cg+113984
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 794
;794:				} else {
ADDRGP4 $539
JUMPV
LABELV $541
line 795
;795:					cg.spectatorOffset = 0;
ADDRGP4 cg+113984
CNSTI4 0
ASGNI4
line 796
;796:					if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+113980
INDIRI4
CNSTI4 0
LTI4 $550
line 797
;797:						cg.spectatorPaintX = cg.spectatorPaintX2;
ADDRGP4 cg+113976
ADDRGP4 cg+113980
INDIRI4
ASGNI4
line 798
;798:					} else {
ADDRGP4 $551
JUMPV
LABELV $550
line 799
;799:						cg.spectatorPaintX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+113976
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 800
;800:					}
LABELV $551
line 801
;801:					cg.spectatorPaintX2 = -1;
ADDRGP4 cg+113980
CNSTI4 -1
ASGNI4
line 802
;802:				}
line 803
;803:			} else {
ADDRGP4 $539
JUMPV
LABELV $538
line 804
;804:				cg.spectatorPaintX--;
ADDRLP4 4
ADDRGP4 cg+113976
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 805
;805:				if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+113980
INDIRI4
CNSTI4 0
LTI4 $558
line 806
;806:					cg.spectatorPaintX2--;
ADDRLP4 8
ADDRGP4 cg+113980
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 807
;807:				}
LABELV $558
line 808
;808:			}
LABELV $539
line 809
;809:		}
LABELV $532
line 811
;810:
;811:		maxX = rect->x + rect->w - 2;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 812
;812:		CG_Text_Paint_Limit(&maxX, cg.spectatorPaintX, rect->y + rect->h - 3, scale, color, &cg.spectatorList[cg.spectatorOffset], 0, 0); 
ADDRLP4 0
ARGP4
ADDRGP4 cg+113976
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+113984
INDIRI4
ADDRGP4 cg+112940
ADDP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 813
;813:		if (cg.spectatorPaintX2 >= 0) {
ADDRGP4 cg+113980
INDIRI4
CNSTI4 0
LTI4 $565
line 814
;814:			float maxX2 = rect->x + rect->w - 2;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 815
;815:			CG_Text_Paint_Limit(&maxX2, cg.spectatorPaintX2, rect->y + rect->h - 3, scale, color, cg.spectatorList, 0, cg.spectatorOffset); 
ADDRLP4 12
ARGP4
ADDRGP4 cg+113980
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
CNSTF4 1077936128
SUBF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 cg+112940
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 cg+113984
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint_Limit
CALLV
pop
line 816
;816:		}
LABELV $565
line 817
;817:		if (cg.spectatorOffset && maxX > 0) {
ADDRGP4 cg+113984
INDIRI4
CNSTI4 0
EQI4 $571
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $571
line 819
;818:			// if we have an offset ( we are skipping the first part of the string ) and we fit the string
;819:			if (cg.spectatorPaintX2 == -1) {
ADDRGP4 cg+113980
INDIRI4
CNSTI4 -1
NEI4 $572
line 820
;820:				cg.spectatorPaintX2 = rect->x + rect->w - 2;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+113980
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 821
;821:			}
line 822
;822:		} else {
ADDRGP4 $572
JUMPV
LABELV $571
line 823
;823:			cg.spectatorPaintX2 = -1;
ADDRGP4 cg+113980
CNSTI4 -1
ASGNI4
line 824
;824:		}
LABELV $572
line 826
;825:
;826:	}
LABELV $516
line 827
;827:}
LABELV $515
endproc CG_DrawTeamSpectators 24 32
proc CG_DrawStaminaBarVert 12 20
line 831
;828:
;829:#define STAMINA_MAX	300
;830:
;831:static void CG_DrawStaminaBarVert( rectDef_t *rect , vec4_t color, qhandle_t shader) {
line 834
;832: 
;833:	int height; 
;834:	int stamina = cg.snap->ps.stats[STAT_STAMINA];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ASGNI4
line 836
;835:
;836:	height = ( rect->h / STAMINA_MAX ) * stamina;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
CNSTF4 1133903872
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 839
;837:	
;838:
;839:	trap_R_SetColor(color);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 840
;840:	CG_DrawPic( rect->x, rect->y, rect->w, height, shader );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 841
;841:	trap_R_SetColor(NULL); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 843
;842: 
;843:}
LABELV $579
endproc CG_DrawStaminaBarVert 12 20
proc CG_DrawStaminaBarHor 12 20
line 845
;844:
;845:static void CG_DrawStaminaBarHor( rectDef_t *rect , vec4_t color, qhandle_t shader) {
line 848
;846: 
;847:	int width; 
;848:	int stamina = cg.snap->ps.stats[STAT_STAMINA];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ASGNI4
line 850
;849:
;850:	width = ( rect->w / STAMINA_MAX ) * stamina;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1133903872
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 853
;851:	
;852:
;853:	trap_R_SetColor(color);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 854
;854:	CG_DrawPic( rect->x, rect->y, width, rect->h, shader );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 855
;855:	trap_R_SetColor(NULL); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 857
;856: 
;857:}
LABELV $581
endproc CG_DrawStaminaBarHor 12 20
proc CG_DrawAmmoBarHor 28 20
line 861
;858:
;859:int BG_GetMaxRoundForWeapon( int weapon );
;860:
;861:static void CG_DrawAmmoBarHor( rectDef_t *rect , vec4_t color, qhandle_t shader) {
line 864
;862: 
;863:	int width;
;864:	int maxrnd = BG_GetMaxRoundForWeapon( cg.snap->ps.weapon );
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_GetMaxRoundForWeapon
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 865
;865:	int rnds = cg.snap->ps.stats[STAT_ROUNDS];
ADDRLP4 8
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ASGNI4
line 867
;866:
;867:	if ( BG_IsGrenade( cg.snap->ps.weapon ) || BG_IsMelee( cg.snap->ps.weapon ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $590
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $586
LABELV $590
line 868
;868:		return;
ADDRGP4 $583
JUMPV
LABELV $586
line 870
;869:
;870:	width = ( rect->w / maxrnd ) * rnds;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
DIVF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 873
;871:	
;872:
;873:	trap_R_SetColor(color);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 874
;874:	CG_DrawPic( rect->x, rect->y, width, rect->h, shader );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 875
;875:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 878
;876:
;877: 
;878:}
LABELV $583
endproc CG_DrawAmmoBarHor 28 20
proc CG_DrawAmmoBarVert 28 20
line 880
;879:
;880:static void CG_DrawAmmoBarVert( rectDef_t *rect , vec4_t color, qhandle_t shader) {
line 883
;881: 
;882:	int height;
;883:	int maxrnd = BG_GetMaxRoundForWeapon( cg.snap->ps.weapon );
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_GetMaxRoundForWeapon
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 884
;884:	int rnds = cg.snap->ps.stats[STAT_ROUNDS];
ADDRLP4 8
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ASGNI4
line 886
;885:
;886:	if ( BG_IsGrenade( cg.snap->ps.weapon ) || BG_IsMelee( cg.snap->ps.weapon ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $598
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $594
LABELV $598
line 887
;887:		return;
ADDRGP4 $591
JUMPV
LABELV $594
line 889
;888:
;889:	height = ( rect->h / maxrnd ) * rnds;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 4
INDIRI4
CVIF4 4
DIVF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 892
;890:	
;891:
;892:	trap_R_SetColor(color);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 893
;893:	CG_DrawPic( rect->x, rect->y, rect->w, height, shader );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 894
;894:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 897
;895:
;896: 
;897:} 
LABELV $591
endproc CG_DrawAmmoBarVert 28 20
proc CG_DrawClipGfx 76 20
line 899
;898:
;899:static void CG_DrawClipGfx( rectDef_t *rect ) {
line 901
;900:
;901:	int weapon = cg.snap->ps.weapon;
ADDRLP4 8
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 905
;902:	int value;
;903:	playerState_t	*ps;
;904:
;905:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 907
;906:
;907:	if ( BG_IsGrenade( cg.snap->ps.weapon ) || BG_IsMelee( cg.snap->ps.weapon ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $606
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $602
LABELV $606
line 908
;908:		return;
ADDRGP4 $599
JUMPV
LABELV $602
line 913
;909:
;910:	//
;911:	// rounds
;912:	//
;913:	if (  weapon > WP_FLASHBANG &&
ADDRLP4 8
INDIRI4
CNSTI4 5
LEI4 $607
ADDRLP4 8
INDIRI4
CNSTI4 16
EQI4 $610
ADDRLP4 8
INDIRI4
CNSTI4 15
NEI4 $611
LABELV $610
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $611
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 28
INDIRI4
NEI4 $607
LABELV $611
ADDRLP4 8
INDIRI4
CNSTI4 16
EQI4 $613
ADDRLP4 8
INDIRI4
CNSTI4 15
NEI4 $614
LABELV $613
ADDRLP4 36
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 40
INDIRI4
EQI4 $614
ADDRLP4 36
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 40
INDIRI4
NEI4 $607
LABELV $614
line 916
;914:		!( ( weapon == WP_M4 ||  weapon == WP_AK47) && (ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) ) && ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ) ) ) &&
;915:		!( ( weapon == WP_M4 ||  weapon == WP_AK47) && (ps->stats[STAT_WEAPONMODE] & ( 1 << WM_BAYONET ) ) && ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ) ) ) ) 
;916:	{
line 919
;917:		
;918:		int i,x1 ;
;919:		int times = 0;
ADDRLP4 52
CNSTI4 0
ASGNI4
line 921
;920:
;921:		value = ps->stats[STAT_ROUNDS]; // dX 
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 923
;922:
;923:		if ( cg.predictedPlayerState.weaponstate == WEAPON_FIRING
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $615
ADDRGP4 cg+107636+44
INDIRI4
CNSTI4 50
LEI4 $615
line 925
;924:			&& cg.predictedPlayerState.weaponTime > 50 )
;925:			trap_R_SetColor( colorBlue );
ADDRGP4 colorBlue
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $630
JUMPV
LABELV $615
line 926
;926:		else if ( cg.predictedPlayerState.weaponstate == WEAPON_RELOADING
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 7
NEI4 $621
ADDRGP4 cg+107636+44
INDIRI4
CNSTI4 100
LEI4 $621
line 928
;927:			&& cg.predictedPlayerState.weaponTime > 100 )
;928:			trap_R_SetColor( colorGreen );
ADDRGP4 colorGreen
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $630
JUMPV
LABELV $621
line 929
;929:		else {
line 930
;930:			if (value <= 5)
ADDRLP4 0
INDIRI4
CNSTI4 5
GTI4 $627
line 931
;931:				trap_R_SetColor( colorRed );
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $630
JUMPV
LABELV $627
line 933
;932:			else
;933:				trap_R_SetColor( colorWhite );
ADDRGP4 colorWhite
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 934
;934:		} 
ADDRGP4 $630
JUMPV
LABELV $629
line 937
;935:
;936:		while (value > 15) 
;937:		{ 
line 938
;938:			times++;
ADDRLP4 52
ADDRLP4 52
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 939
;939:			value -= 15; 
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 15
SUBI4
ASGNI4
line 940
;940:		}
LABELV $630
line 936
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $629
line 942
;941:
;942:		x1 = rect->x;  
ADDRLP4 48
ADDRFP4 0
INDIRP4
INDIRF4
CVFI4 4
ASGNI4
line 944
;943:
;944:		for (i=0;i<15;i++)
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $632
line 945
;945:		{ 
line 946
;946:			if ( i < value ) {
ADDRLP4 44
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $636
line 947
;947:				if ( cg.predictedPlayerState.weaponstate == WEAPON_FIRING
ADDRGP4 cg+107636+148
INDIRI4
CNSTI4 3
NEI4 $637
ADDRGP4 cg+107636+44
INDIRI4
CNSTI4 50
LEI4 $637
line 949
;948:					&& cg.predictedPlayerState.weaponTime > 50 )
;949:					trap_R_SetColor( colorBlue ); 
ADDRGP4 colorBlue
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 950
;950:			}
ADDRGP4 $637
JUMPV
LABELV $636
line 952
;951:			else
;952:				trap_R_SetColor( colorBlack );
ADDRGP4 colorBlack
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
LABELV $637
line 954
;953:
;954:			if ( BG_IsRifle( ps->weapon ) )
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $644
line 955
;955:				CG_DrawPic( x1, rect->y , 16, rect->h, cgs.media.ammoMag_bullet[1] );
ADDRLP4 48
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+776+4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
ADDRGP4 $645
JUMPV
LABELV $644
line 956
;956:			else if ( BG_IsShotgun( ps->weapon ) )
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $649
line 957
;957:				CG_DrawPic( x1, rect->y , 16, rect->h , cgs.media.ammoMag_bullet[2] );
ADDRLP4 48
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 68
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+776+8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
ADDRGP4 $650
JUMPV
LABELV $649
line 959
;958:			else
;959:				CG_DrawPic( x1, rect->y , 16, rect->h, cgs.media.ammoMag_bullet[0] );
ADDRLP4 48
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+776
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
LABELV $650
LABELV $645
line 961
;960:
;961:			x1 += 16;
ADDRLP4 48
ADDRLP4 48
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 963
;962:
;963:			if ( i==14)
ADDRLP4 44
INDIRI4
CNSTI4 14
NEI4 $656
line 964
;964:				break;
ADDRGP4 $634
JUMPV
LABELV $656
line 965
;965:		}
LABELV $633
line 944
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 15
LTI4 $632
LABELV $634
line 967
;966:
;967:	} 
LABELV $607
line 968
;968:}
LABELV $599
endproc CG_DrawClipGfx 76 20
proc CG_DrawDigits2 64 20
line 977
;969:
;970:/*
;971:==============
;972:CG_DrawDigits
;973:
;974:Draws Digits for Hud
;975:==============
;976:*/
;977:static void CG_DrawDigits2 (int x, int y, int width,int value) {
line 982
;978:	char	num[16], *ptr;
;979:	int		l;
;980:	int		frame;
;981:
;982:	if ( width < 1 ) {
ADDRFP4 8
INDIRI4
CNSTI4 1
GEI4 $659
line 983
;983:		return;
ADDRGP4 $658
JUMPV
LABELV $659
line 987
;984:	}
;985:
;986:	// draw number string
;987:	if ( width > 5 ) {
ADDRFP4 8
INDIRI4
CNSTI4 5
LEI4 $661
line 988
;988:		width = 5;
ADDRFP4 8
CNSTI4 5
ASGNI4
line 989
;989:	}
LABELV $661
line 991
;990:
;991:	switch ( width ) {
ADDRLP4 28
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 1
LTI4 $663
ADDRLP4 28
INDIRI4
CNSTI4 4
GTI4 $663
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $708-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $708
address $665
address $672
address $682
address $694
code
LABELV $665
line 993
;992:	case 1:
;993:		value = value > 9 ? 9 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9
LEI4 $667
ADDRLP4 32
CNSTI4 9
ASGNI4
ADDRGP4 $668
JUMPV
LABELV $667
ADDRLP4 32
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $668
ADDRFP4 12
ADDRLP4 32
INDIRI4
ASGNI4
line 994
;994:		value = value < 0 ? 0 : value;
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $670
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $671
JUMPV
LABELV $670
ADDRLP4 36
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $671
ADDRFP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 995
;995:		Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 996
;996:		break;
ADDRGP4 $664
JUMPV
LABELV $672
line 998
;997:	case 2:
;998:		value = value > 99 ? 99 : value;
ADDRFP4 12
INDIRI4
CNSTI4 99
LEI4 $674
ADDRLP4 40
CNSTI4 99
ASGNI4
ADDRGP4 $675
JUMPV
LABELV $674
ADDRLP4 40
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $675
ADDRFP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 999
;999:		value = value < -9 ? -9 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -9
GEI4 $677
ADDRLP4 44
CNSTI4 -9
ASGNI4
ADDRGP4 $678
JUMPV
LABELV $677
ADDRLP4 44
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $678
ADDRFP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 1001
;1000:		
;1001:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $679
line 1002
;1002:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $681
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $679
line 1004
;1003:		else
;1004:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1005
;1005:		break;
ADDRGP4 $664
JUMPV
LABELV $682
line 1007
;1006:	case 3:
;1007:		value = value > 999 ? 999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 999
LEI4 $684
ADDRLP4 48
CNSTI4 999
ASGNI4
ADDRGP4 $685
JUMPV
LABELV $684
ADDRLP4 48
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $685
ADDRFP4 12
ADDRLP4 48
INDIRI4
ASGNI4
line 1008
;1008:		value = value < -99 ? -99 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -99
GEI4 $687
ADDRLP4 52
CNSTI4 -99
ASGNI4
ADDRGP4 $688
JUMPV
LABELV $687
ADDRLP4 52
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $688
ADDRFP4 12
ADDRLP4 52
INDIRI4
ASGNI4
line 1009
;1009:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $689
line 1010
;1010:			Com_sprintf (num, sizeof(num), "00%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $691
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $689
line 1011
;1011:		else if ( value < 100 )
ADDRFP4 12
INDIRI4
CNSTI4 100
GEI4 $692
line 1012
;1012:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $681
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $692
line 1014
;1013:		else
;1014:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1015
;1015:		break;
ADDRGP4 $664
JUMPV
LABELV $694
line 1017
;1016:	case 4:
;1017:		value = value > 9999 ? 9999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9999
LEI4 $696
ADDRLP4 56
CNSTI4 9999
ASGNI4
ADDRGP4 $697
JUMPV
LABELV $696
ADDRLP4 56
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $697
ADDRFP4 12
ADDRLP4 56
INDIRI4
ASGNI4
line 1018
;1018:		value = value < -999 ? -999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -999
GEI4 $699
ADDRLP4 60
CNSTI4 -999
ASGNI4
ADDRGP4 $700
JUMPV
LABELV $699
ADDRLP4 60
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $700
ADDRFP4 12
ADDRLP4 60
INDIRI4
ASGNI4
line 1019
;1019:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $701
line 1020
;1020:			Com_sprintf (num, sizeof(num), "000%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $703
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $701
line 1021
;1021:		else if ( value < 100 )
ADDRFP4 12
INDIRI4
CNSTI4 100
GEI4 $704
line 1022
;1022:			Com_sprintf (num, sizeof(num), "00%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $691
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $704
line 1023
;1023:		else if ( value < 1000 )
ADDRFP4 12
INDIRI4
CNSTI4 1000
GEI4 $706
line 1024
;1024:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $681
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $664
JUMPV
LABELV $706
line 1026
;1025:		else
;1026:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $123
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 1027
;1027:		break;
LABELV $663
LABELV $664
line 1030
;1028:	}
;1029:
;1030:	l = strlen(num);
ADDRLP4 12
ARGP4
ADDRLP4 32
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 1031
;1031:	if (l > width)
ADDRLP4 4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $710
line 1032
;1032:		l = width;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
LABELV $710
line 1033
;1033:	x += 2 + 24*(width - l);
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 24
ADDRFP4 8
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
MULI4
CNSTI4 2
ADDI4
ADDI4
ASGNI4
line 1035
;1034:
;1035:	ptr = num;
ADDRLP4 0
ADDRLP4 12
ASGNP4
ADDRGP4 $713
JUMPV
LABELV $712
line 1037
;1036:	while (*ptr && l)
;1037:	{
line 1038
;1038:		if (*ptr == '-')
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 45
NEI4 $715
line 1039
;1039:			frame = STAT_MINUS;
ADDRLP4 8
CNSTI4 10
ASGNI4
ADDRGP4 $716
JUMPV
LABELV $715
line 1041
;1040:		else
;1041:			frame = *ptr -'0';
ADDRLP4 8
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
LABELV $716
line 1043
;1042:
;1043:		CG_DrawPic( x,y, 24, 32, cgs.media.digitalNumberShaders[frame] );
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1103101952
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+500
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1044
;1044:		x += 24;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 24
ADDI4
ASGNI4
line 1045
;1045:		ptr++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 1046
;1046:		l--;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1047
;1047:	}
LABELV $713
line 1036
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $719
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $712
LABELV $719
line 1048
;1048:}
LABELV $658
endproc CG_DrawDigits2 64 20
proc CG_DrawClipValue 24 20
line 1051
;1049:
;1050:static void CG_DrawClipValue( rectDef_t *rect ) 
;1051:{ 
line 1053
;1052:	int value;
;1053:	int times = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1055
;1054:
;1055:	value = cg.snap->ps.stats[STAT_ROUNDS]; // dX 
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ASGNI4
line 1057
;1056: 
;1057:	if ( BG_IsGrenade( cg.snap->ps.weapon ) || BG_IsMelee( cg.snap->ps.weapon ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $726
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $728
LABELV $726
line 1058
;1058:		return;
ADDRGP4 $720
JUMPV
LABELV $727
line 1061
;1059:
;1060:	while (value > 15) 
;1061:	{ 
line 1062
;1062:		times++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1063
;1063:		value -= 15; 
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 15
SUBI4
ASGNI4
line 1064
;1064:	}
LABELV $728
line 1060
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $727
line 1066
;1065:
;1066:	trap_R_SetColor(colorWhite);
ADDRGP4 colorWhite
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1068
;1067:
;1068:	CG_DrawPic(  rect->x, rect->y, 16, rect->h, cgs.media.slashIcon ); 
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+588
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1069
;1069:	CG_DrawDigits2 (  rect->x + 16 , rect->y , 2 , times); 
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1098907648
ADDF4
CVFI4 4
ARGI4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawDigits2
CALLV
pop
line 1071
;1070: 
;1071:	trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1073
;1072:
;1073:}
LABELV $720
endproc CG_DrawClipValue 24 20
proc CG_DrawDamageLoc 80 20
line 1075
;1074:
;1075:static void CG_DrawDamageLoc ( rectDef_t *rect, int special ) { 
line 1078
;1076:	vec4_t		hcolor;
;1077:	playerState_t	*ps;
;1078:	float pulse = sin( cg.time / 25  );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 25
DIVI4
CVIF4 4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 24
INDIRF4
ASGNF4
line 1080
;1079:
;1080:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1082
;1081:  
;1082:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH] - ps->stats[STAT_CHEST_DAMAGE] , 0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1083
;1083:	if ( cg.flashDmgLocTime[0] > cg.time && ( cg.flashDmgLocTime[0] - cg.time ) > 0  )
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $735
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $735
line 1084
;1084:	{
line 1085
;1085:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $741
line 1086
;1086:		{
line 1092
;1087:			/*
;1088:			hcolor[0] = colorWhite[0];
;1089:			hcolor[1] = colorWhite[1];
;1090:			hcolor[2] = colorWhite[2]; 
;1091:			*/
;1092:		}
ADDRGP4 $742
JUMPV
LABELV $741
line 1094
;1093:		else
;1094:		{
line 1095
;1095:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1096
;1096:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1097
;1097:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1098
;1098:		}
LABELV $742
line 1099
;1099:	}
LABELV $735
line 1100
;1100:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1101
;1101:	CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_chestIcon);			
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+632
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1102
;1102:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1104
;1103:
;1104:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_STOMACH_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1105
;1105:	if ( cg.flashDmgLocTime[1] > cg.time && ( cg.flashDmgLocTime[1] - cg.time ) > 0  )
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $749
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $749
line 1106
;1106:	{
line 1107
;1107:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $757
line 1108
;1108:		{
line 1113
;1109:			/*
;1110:			hcolor[0] = colorWhite[0];
;1111:			hcolor[1] = colorWhite[1];
;1112:			hcolor[2] = colorWhite[2]; */
;1113:		}
ADDRGP4 $758
JUMPV
LABELV $757
line 1115
;1114:		else
;1115:		{
line 1116
;1116:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1117
;1117:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1118
;1118:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1119
;1119:		}
LABELV $758
line 1120
;1120:	}
LABELV $749
line 1121
;1121: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1122
;1122:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_stomachIcon);	 
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+628
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1123
;1123:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1125
;1124:
;1125:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_ARM_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1126
;1126:	if ( cg.flashDmgLocTime[2] > cg.time && ( cg.flashDmgLocTime[2] - cg.time ) > 0  )
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $765
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $765
line 1127
;1127:	{
line 1128
;1128:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $773
line 1129
;1129:		{
line 1134
;1130:			/*
;1131:			hcolor[0] = colorWhite[0];
;1132:			hcolor[1] = colorWhite[1];
;1133:			hcolor[2] = colorWhite[2]; */
;1134:		}
ADDRGP4 $774
JUMPV
LABELV $773
line 1136
;1135:		else
;1136:		{
line 1137
;1137:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1138
;1138:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1139
;1139:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1140
;1140:		}
LABELV $774
line 1141
;1141:	}  
LABELV $765
line 1142
;1142:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1143
;1143:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_leftArmIcon);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
INDIRF4
ARGF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 48
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+612
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1144
;1144:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_rightArmIcon);
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
INDIRF4
ARGF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+616
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1145
;1145:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1147
;1146:
;1147:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_LEG_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1148
;1148: 	if ( cg.time < cg.flashDmgLocTime[3] && ( cg.flashDmgLocTime[3] - cg.time ) > 0 )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+117948+12
INDIRI4
GEI4 $783
ADDRGP4 cg+117948+12
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $783
line 1149
;1149:	{
line 1150
;1150:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $791
line 1151
;1151:		{
line 1156
;1152:			/*
;1153:			hcolor[0] = colorWhite[0];
;1154:			hcolor[1] = colorWhite[1];
;1155:			hcolor[2] = colorWhite[2]; */
;1156:		}
ADDRGP4 $792
JUMPV
LABELV $791
line 1158
;1157:		else
;1158:		{
line 1159
;1159:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1160
;1160:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1161
;1161:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1162
;1162:		}
LABELV $792
line 1168
;1163:		/*
;1164:		hcolor[0] *= sin( cg.time / PULSE_DIVISOR );
;1165:		hcolor[1] *= sin( cg.time / PULSE_DIVISOR );
;1166:		hcolor[2] *= sin( cg.time / PULSE_DIVISOR );
;1167:		*/
;1168:	}
LABELV $783
line 1169
;1169: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1170
;1170:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_leftLegIcon);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
INDIRF4
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+620
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1171
;1171:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_rightLegIcon);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
INDIRF4
ARGF4
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 64
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+624
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1172
;1172:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1174
;1173:
;1174:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_HEAD_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1175
;1175:	if ( cg.flashDmgLocTime[4] > cg.time && ( cg.flashDmgLocTime[4] - cg.time ) > 0 )
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $801
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $801
line 1176
;1176:	{
line 1177
;1177:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $809
line 1178
;1178:		{
line 1183
;1179:			/*
;1180:			hcolor[0] = colorWhite[0];
;1181:			hcolor[1] = colorWhite[1];
;1182:			hcolor[2] = colorWhite[2]; */
;1183:		}
ADDRGP4 $810
JUMPV
LABELV $809
line 1185
;1184:		else
;1185:		{
line 1186
;1186:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1187
;1187:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1188
;1188:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1189
;1189:		}
LABELV $810
line 1190
;1190:	}
LABELV $801
line 1191
;1191: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1192
;1192:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_headIcon);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
INDIRF4
ARGF4
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+608
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1193
;1193:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1195
;1194:
;1195:	trap_R_SetColor( g_color_table[ColorIndex(COLOR_BLACK)] );
ADDRGP4 g_color_table
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1196
;1196:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h ,cgs.media.loc_bodyLines);		
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
INDIRF4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRGP4 cgs+205084+636
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1197
;1197:	trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1198
;1198:}
LABELV $732
endproc CG_DrawDamageLoc 80 20
proc CG_DrawWeaponIcon 24 20
line 1199
;1199:static void CG_DrawWeaponIcon( rectDef_t *rect, int special ) {
line 1200
;1200:	qhandle_t	icon = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1201
;1201:	qboolean	weapon = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 1202
;1202:	qboolean	item = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1203
;1203:	int			wNum = WP_NONE;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1205
;1204:
;1205:	if ( special )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $820
line 1206
;1206:	{
line 1207
;1207:		wNum = special;
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
line 1208
;1208:	}
LABELV $820
line 1210
;1209:
;1210:	if (!weapon&&!item)
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $822
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $822
line 1211
;1211:		return;
ADDRGP4 $819
JUMPV
LABELV $822
line 1213
;1212:
;1213:	if ( weapon )
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $824
line 1214
;1214:	{
line 1216
;1215:		
;1216:		icon = cg_weapons[wNum].weaponIcon;
ADDRLP4 0
CNSTI4 296
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 cg_weapons+232
ADDP4
INDIRI4
ASGNI4
line 1217
;1217:	}
LABELV $824
line 1219
;1218:
;1219:	if ( icon ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $827
line 1220
;1220:		CG_DrawPic( rect->x, rect->y, rect->w, rect->h, icon );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1221
;1221:	}
LABELV $827
line 1222
;1222:}
LABELV $819
endproc CG_DrawWeaponIcon 24 20
proc CG_DrawClipIcon 32 20
line 1224
;1223:	
;1224:static void CG_DrawClipIcon( rectDef_t *rect ) {
line 1226
;1225: 	playerState_t	*ps;
;1226:	int	weapon = cg.snap->ps.weapon;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1228
;1227:
;1228:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1231
;1229:
;1230:
;1231:	if ( weapon > WP_SEALKNIFE) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LEI4 $832
line 1232
;1232: 		int		clipGfx = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1237
;1233:
;1234:		// background layer for clips + ammo
;1235:	//	CG_DrawTeamBackground( 88, 447, 640, 40, 0.33f, cg.snap->ps.persistant[PERS_TEAM] );
;1236:
;1237:		if ( BG_IsShotgun( weapon ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $834
line 1238
;1238:			clipGfx = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $835
JUMPV
LABELV $834
line 1239
;1239:		else if ( weapon == WP_GRENADE )
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $836
line 1240
;1240:			clipGfx = 2;
ADDRLP4 8
CNSTI4 2
ASGNI4
ADDRGP4 $837
JUMPV
LABELV $836
line 1241
;1241:		else if ( weapon == WP_FLASHBANG || weapon == WP_SMOKE )
ADDRLP4 0
INDIRI4
CNSTI4 5
EQI4 $840
ADDRLP4 0
INDIRI4
CNSTI4 25
NEI4 $838
LABELV $840
line 1242
;1242:			clipGfx = 3;
ADDRLP4 8
CNSTI4 3
ASGNI4
ADDRGP4 $839
JUMPV
LABELV $838
line 1243
;1243:		else if (ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
ADDRLP4 20
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $841
ADDRLP4 20
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $841
line 1244
;1244:			clipGfx = 4;
ADDRLP4 8
CNSTI4 4
ASGNI4
LABELV $841
LABELV $839
LABELV $837
LABELV $835
line 1247
;1245:
;1246: 		// draw the bullet pic 
;1247:		trap_R_SetColor(colorWhite);
ADDRGP4 colorWhite
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1248
;1248:		CG_DrawPic( rect->x, rect->y , rect->w, rect->h, cgs.media.clipIcon[clipGfx] );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+548
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1249
;1249:		trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1250
;1250:	} 
LABELV $832
line 1252
;1251: 
;1252:}
LABELV $829
endproc CG_DrawClipIcon 32 20
proc CG_DrawClipDigitValue 40 16
line 1254
;1253:
;1254:static void CG_DrawClipDigitValue( rectDef_t *rect ) {
line 1256
;1255: 	playerState_t	*ps;
;1256:	int	value = -1;
ADDRLP4 0
CNSTI4 -1
ASGNI4
line 1257
;1257:	int weapon = cg.snap->ps.weapon ;
ADDRLP4 8
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1259
;1258:
;1259:	ps = &cg.snap->ps;
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1262
;1260:
;1261:
;1262:	if ( weapon > WP_SEALKNIFE) {
ADDRLP4 8
INDIRI4
CNSTI4 2
LEI4 $848
line 1265
;1263:		gitem_t *item;
;1264: 
;1265:		item = BG_FindItemForWeapon( weapon );
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 1267
;1266:
;1267:		if (ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
ADDRLP4 20
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $850
ADDRLP4 20
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $850
line 1268
;1268:			value = ps->ammo[ AM_40MMGRENADES ]; // dX
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $851
JUMPV
LABELV $850
line 1270
;1269:		else
;1270:			value = ps->ammo[ item->giAmmoTag ]; // dX
ADDRLP4 0
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
LABELV $851
line 1272
;1271: 
;1272:		if ( value > -1 ) {	 		
ADDRLP4 0
INDIRI4
CNSTI4 -1
LEI4 $852
line 1274
;1273:
;1274:			if ( value <= 1 && ( (cg.time >> 8) & 1 && value <= 1)) 
ADDRLP4 28
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 32
INDIRI4
GTI4 $854
ADDRGP4 cg+107604
INDIRI4
CNSTI4 8
RSHI4
ADDRLP4 32
INDIRI4
BANDI4
CNSTI4 0
EQI4 $854
ADDRLP4 28
INDIRI4
ADDRLP4 32
INDIRI4
GTI4 $854
line 1275
;1275:				trap_R_SetColor(colorRed);  
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $855
JUMPV
LABELV $854
line 1277
;1276:			else
;1277:				trap_R_SetColor(colorWhite);
ADDRGP4 colorWhite
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
LABELV $855
line 1280
;1278:
;1279:			//CG_DrawDigits2 (  rect->x + 16 , rect->y , 2, rect->h - (rect->h/3), rect->h, times); 
;1280:			CG_DrawDigits2 ( rect->x , rect->y , 2 , value);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawDigits2
CALLV
pop
line 1282
;1281:
;1282:			trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1283
;1283:		}  
LABELV $852
line 1284
;1284:	} 
LABELV $848
line 1285
;1285:}
LABELV $845
endproc CG_DrawClipDigitValue 40 16
proc CG_ScanForCrosshairEntity 104 28
line 1294
;1286:
;1287:
;1288:void CG_NewbieMessage( const char *str, int y, float charHeight );
;1289:/*
;1290:=================
;1291:CG_ScanForCrosshairEntity
;1292:=================
;1293:*/
;1294:static void CG_ScanForCrosshairEntity( void ) {
line 1299
;1295:	trace_t		trace;
;1296:	vec3_t		start, end;
;1297:	int			content;
;1298:
;1299:	VectorCopy( cg.refdef.vieworg, start );
ADDRLP4 56
ADDRGP4 cg+109044+24
INDIRB
ASGNB 12
line 1300
;1300:	VectorMA( start, 512, cg.refdef.viewaxis[0], end );
ADDRLP4 84
CNSTF4 1140850688
ASGNF4
ADDRLP4 68
ADDRLP4 56
INDIRF4
ADDRLP4 84
INDIRF4
ADDRGP4 cg+109044+36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRGP4 cg+109044+36+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68+8
ADDRLP4 56+8
INDIRF4
CNSTF4 1140850688
ADDRGP4 cg+109044+36+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1302
;1301:
;1302:	CG_Trace( &trace, start, vec3_origin, vec3_origin, end, 
ADDRLP4 0
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 88
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 -1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1304
;1303:		cg.snap->ps.clientNum, MASK_ALL );
;1304:	if ( trace.entityNum >= MAX_CLIENTS &&
ADDRLP4 0+52
INDIRI4
CNSTI4 64
LTI4 $873
ADDRLP4 92
CNSTI4 728
ASGNI4
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 15
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 18
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 19
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 20
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 21
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 22
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 23
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 24
EQI4 $873
ADDRLP4 92
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 25
EQI4 $873
line 1313
;1305:		cg_entities[trace.entityNum].currentState.eType != ET_DOOR && 
;1306:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT0 &&
;1307:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT1 &&
;1308:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT2 &&
;1309:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT3 &&
;1310:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT4 &&
;1311:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT5 &&
;1312:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT6 &&
;1313:		cg_entities[trace.entityNum].currentState.eType != ET_ELEVBUT7 ) {
line 1314
;1314:		return;
ADDRGP4 $857
JUMPV
LABELV $873
line 1316
;1315:	}
;1316:	if ( cg_entities[trace.entityNum].currentState.eType == ET_DOOR )
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 15
NEI4 $894
line 1317
;1317:	{
line 1318
;1318:		if ( Distance( trace.endpos, cg.refdef.vieworg ) > 128 )
ADDRLP4 0+12
ARGP4
ADDRGP4 cg+109044+24
ARGP4
ADDRLP4 96
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 96
INDIRF4
CNSTF4 1124073472
LEF4 $895
line 1319
;1319:			return;
ADDRGP4 $857
JUMPV
line 1320
;1320:	} else if ( cg_entities[trace.entityNum].currentState.eType >= ET_ELEVBUT0 &&
LABELV $894
ADDRLP4 96
CNSTI4 728
ASGNI4
ADDRLP4 96
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 18
LTI4 $903
ADDRLP4 96
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 25
GTI4 $903
line 1321
;1321:	            cg_entities[trace.entityNum].currentState.eType <= ET_ELEVBUT7 ) {
line 1322
;1322:		if ( Distance( trace.endpos, cg.refdef.vieworg ) > 32 )
ADDRLP4 0+12
ARGP4
ADDRGP4 cg+109044+24
ARGP4
ADDRLP4 100
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 100
INDIRF4
CNSTF4 1107296256
LEF4 $909
line 1323
;1323:			return;
ADDRGP4 $857
JUMPV
LABELV $909
line 1324
;1324:	}
LABELV $903
LABELV $895
line 1328
;1325:	
;1326:
;1327:	// if the player is in fog, don't show it
;1328:	content = trap_CM_PointContents( trace.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 100
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 100
INDIRI4
ASGNI4
line 1329
;1329:	if ( content & CONTENTS_FOG ) {
ADDRLP4 80
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $915
line 1330
;1330:		return;
ADDRGP4 $857
JUMPV
LABELV $915
line 1333
;1331:	}
;1332:
;1333:	if ( cg.FlashTime - cg.time  >= 250 )
ADDRGP4 cg+116284
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 250
LTI4 $917
line 1334
;1334:		return;
ADDRGP4 $857
JUMPV
LABELV $917
line 1345
;1335:
;1336:	// if the player is invisible, don't show it
;1337:#if 0
;1338:	if ( cg_entities[ trace.entityNum ].currentState.powerups & ( 1 << PW_INVIS ) ) {
;1339:		return;
;1340:	}
;1341:#endif
;1342:
;1343:	
;1344:	// update the fade timer
;1345:	cg.crosshairClientNum = trace.entityNum;
ADDRGP4 cg+115036
ADDRLP4 0+52
INDIRI4
ASGNI4
line 1346
;1346:	cg.crosshairClientTime = cg.time;
ADDRGP4 cg+115040
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1347
;1347:}
LABELV $857
endproc CG_ScanForCrosshairEntity 104 28
proc CG_DrawCrosshairEntity 44 32
line 1349
;1348:
;1349:static void CG_DrawCrosshairEntity(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 1355
;1350:	float		*newcolor;
;1351:	vec4_t		vec_color;
;1352:	char		*name;
;1353:	int			x;
;1354: 
;1355: 	if ( !cg_drawCrosshair.integer ) {
ADDRGP4 cg_drawCrosshair+12
INDIRI4
CNSTI4 0
NEI4 $926
line 1356
;1356:		return;
ADDRGP4 $925
JUMPV
LABELV $926
line 1358
;1357:	}
;1358:	if ( !cg_drawCrosshairNames.integer ) {
ADDRGP4 cg_drawCrosshairNames+12
INDIRI4
CNSTI4 0
NEI4 $929
line 1359
;1359:		return;
ADDRGP4 $925
JUMPV
LABELV $929
line 1361
;1360:	}
;1361:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $932
line 1362
;1362:		return;
ADDRGP4 $925
JUMPV
LABELV $932
line 1366
;1363:	}
;1364:
;1365:	// scan the known entities to see if the crosshair is sighted on one
;1366:	CG_ScanForCrosshairEntity();
ADDRGP4 CG_ScanForCrosshairEntity
CALLV
pop
line 1369
;1367:
;1368:	// draw the name of the player being looked at
;1369:	if ( cg.crosshairClientNum >= MAX_CLIENTS )
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $935
line 1370
;1370:		newcolor = CG_FadeColor( cg.crosshairClientTime, 250 );
ADDRGP4 cg+115040
INDIRI4
ARGI4
CNSTI4 250
ARGI4
ADDRLP4 28
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 28
INDIRP4
ASGNP4
ADDRGP4 $936
JUMPV
LABELV $935
line 1372
;1371:	else
;1372:		newcolor = CG_FadeColor( cg.crosshairClientTime, 500 );
ADDRGP4 cg+115040
INDIRI4
ARGI4
CNSTI4 500
ARGI4
ADDRLP4 32
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 32
INDIRP4
ASGNP4
LABELV $936
line 1373
;1373:	if ( !newcolor ) {
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $940
line 1374
;1374:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1375
;1375:		return;
ADDRGP4 $925
JUMPV
LABELV $940
line 1380
;1376:	}
;1377:	
;1378://	newcolor[3] *= 0.5;
;1379:
;1380:	vec_color[0] = 0.3f;
ADDRLP4 0
CNSTF4 1050253722
ASGNF4
line 1381
;1381:	vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1382
;1382:	vec_color[2] = 0.3f;
ADDRLP4 0+8
CNSTF4 1050253722
ASGNF4
line 1383
;1383:	vec_color[3] = newcolor[3];
ADDRLP4 0+12
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ASGNF4
line 1385
;1384:
;1385:	if ( cg.snap->ps.pm_type == PM_SPECTATOR )
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 2
NEI4 $945
line 1386
;1386:	{
line 1387
;1387:		vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1388
;1388:		vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1389
;1389:		vec_color[2] = 1;   
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1391
;1390:
;1391: 		name = va("%s", cgs.clientinfo[ cg.crosshairClientNum ].name );
ADDRGP4 $950
ARGP4
CNSTI4 2484
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cgs+38664+4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1392
;1392: 	}
ADDRGP4 $946
JUMPV
LABELV $945
line 1393
;1393:	else if ( cgs.gametype >= GT_TEAM )
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
LTI4 $925
line 1394
;1394:	{
line 1395
;1395:		if ( cg.crosshairClientNum >= MAX_CLIENTS &&
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $957
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 15
NEI4 $957
line 1397
;1396:			cg_entities[cg.crosshairClientNum].currentState.eType == ET_DOOR )
;1397:		{
line 1398
;1398:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1399
;1399:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1400
;1400:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1402
;1401:
;1402:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Open Door"); 
ADDRGP4 $964
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1404
;1403:
;1404:			if ( !cg.ns_newbiehelp.w_doorSpotted )
ADDRGP4 cg+116724+100
INDIRI4
CNSTI4 0
NEI4 $955
line 1405
;1405:			{
line 1406
;1406:				cg.ns_newbiehelp.w_doorSpotted = 1;
ADDRGP4 cg+116724+100
CNSTI4 1
ASGNI4
line 1407
;1407:				CG_NewbieMessage(S_COLOR_GREEN "You're infront of a door,\npress and hold your USE key to open it.", SCREEN_HEIGHT * 0.60, cg_newbeeHeight.value );
ADDRGP4 $971
ARGP4
CNSTI4 287
ARGI4
ADDRGP4 cg_newbeeHeight+8
INDIRF4
ARGF4
ADDRGP4 CG_NewbieMessage
CALLV
pop
line 1408
;1408:			} 
line 1409
;1409:		}
ADDRGP4 $955
JUMPV
LABELV $957
line 1410
;1410:		else if ( cgs.clientinfo[ cg.crosshairClientNum ].team == cg.snap->ps.persistant[PERS_TEAM] )
CNSTI4 2484
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cgs+38664+68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $973
line 1411
;1411:		{
line 1412
;1412:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1413
;1413:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1414
;1414:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1415
;1415:			name = va(S_COLOR_GREEN"Mate:"S_COLOR_WHITE" %s", cgs.clientinfo[ cg.crosshairClientNum ].name );
ADDRGP4 $981
ARGP4
CNSTI4 2484
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cgs+38664+4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1417
;1416:
;1417:			if ( !cg.ns_newbiehelp.w_friendSpotted  )
ADDRGP4 cg+116724+96
INDIRI4
CNSTI4 0
NEI4 $955
line 1418
;1418:			{
line 1419
;1419:				cg.ns_newbiehelp.w_friendSpotted = 1;
ADDRGP4 cg+116724+96
CNSTI4 1
ASGNI4
line 1420
;1420:				CG_NewbieMessage(S_COLOR_GREEN "You've spotted a team-mate.", SCREEN_HEIGHT * 0.60, cg_newbeeHeight.value );
ADDRGP4 $991
ARGP4
CNSTI4 287
ARGI4
ADDRGP4 cg_newbeeHeight+8
INDIRF4
ARGF4
ADDRGP4 CG_NewbieMessage
CALLV
pop
line 1421
;1421:			}
line 1422
;1422:		}
ADDRGP4 $955
JUMPV
LABELV $973
line 1423
;1423:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT0 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $993
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 18
NEI4 $993
line 1424
;1424:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1425
;1425:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1426
;1426:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1428
;1427:			
;1428:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 0"); 
ADDRGP4 $1000
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1429
;1429:		} 
ADDRGP4 $955
JUMPV
LABELV $993
line 1430
;1430:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT1 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1001
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 19
NEI4 $1001
line 1431
;1431:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1432
;1432:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1433
;1433:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1435
;1434:			
;1435:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 1"); 
ADDRGP4 $1008
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1436
;1436:		} 
ADDRGP4 $955
JUMPV
LABELV $1001
line 1437
;1437:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT2 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1009
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 20
NEI4 $1009
line 1438
;1438:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1439
;1439:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1440
;1440:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1442
;1441:			
;1442:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 2"); 
ADDRGP4 $1016
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1443
;1443:		} 
ADDRGP4 $955
JUMPV
LABELV $1009
line 1444
;1444:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT3 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1017
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 21
NEI4 $1017
line 1445
;1445:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1446
;1446:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1447
;1447:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1449
;1448:			
;1449:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 3"); 
ADDRGP4 $1024
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1450
;1450:		} 
ADDRGP4 $955
JUMPV
LABELV $1017
line 1451
;1451:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT4 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1025
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 22
NEI4 $1025
line 1452
;1452:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1453
;1453:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1454
;1454:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1456
;1455:			
;1456:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 4"); 
ADDRGP4 $1032
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1457
;1457:		} 
ADDRGP4 $955
JUMPV
LABELV $1025
line 1458
;1458:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT5 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1033
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 23
NEI4 $1033
line 1459
;1459:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1460
;1460:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1461
;1461:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1463
;1462:			
;1463:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 5"); 
ADDRGP4 $1040
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1464
;1464:		} 
ADDRGP4 $955
JUMPV
LABELV $1033
line 1465
;1465:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT6 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1041
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 24
NEI4 $1041
line 1466
;1466:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1467
;1467:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1468
;1468:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1470
;1469:			
;1470:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 6"); 
ADDRGP4 $1048
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1471
;1471:		} 
ADDRGP4 $955
JUMPV
LABELV $1041
line 1472
;1472:		else if ( cg.crosshairClientNum >= MAX_CLIENTS && cg_entities[ cg.crosshairClientNum ].currentState.eType == ET_ELEVBUT7 ) {
ADDRGP4 cg+115036
INDIRI4
CNSTI4 64
LTI4 $1049
CNSTI4 728
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 25
NEI4 $1049
line 1473
;1473:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1474
;1474:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1475
;1475:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1477
;1476:			
;1477:			name = va(S_COLOR_YELLOW"Use:"S_COLOR_WHITE" Level 7"); 
ADDRGP4 $1056
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1478
;1478:		} 
ADDRGP4 $955
JUMPV
LABELV $1049
line 1480
;1479:		else
;1480:		{
line 1481
;1481:			vec_color[0] = 1;
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 1482
;1482:			vec_color[1] = 1;
ADDRLP4 0+4
CNSTF4 1065353216
ASGNF4
line 1483
;1483:			vec_color[2] = 1;  
ADDRLP4 0+8
CNSTF4 1065353216
ASGNF4
line 1487
;1484:
;1485:
;1486:#if SEALS_DRAW_NOT_ENEMY_NAME
;1487:			return;
ADDRGP4 $925
JUMPV
line 1489
;1488:#endif
;1489:			name = va(S_COLOR_RED"Enemy:"S_COLOR_WHITE" %s", cgs.clientinfo[ cg.crosshairClientNum ].name );
ADDRGP4 $1059
ARGP4
CNSTI4 2484
ADDRGP4 cg+115036
INDIRI4
MULI4
ADDRGP4 cgs+38664+4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 36
INDIRP4
ASGNP4
line 1491
;1490:
;1491:			if ( !cg.ns_newbiehelp.w_enemySpotted )
ADDRGP4 cg+116724+92
INDIRI4
CNSTI4 0
NEI4 $955
line 1492
;1492:			{
line 1493
;1493:				cg.ns_newbiehelp.w_enemySpotted = 1;
ADDRGP4 cg+116724+92
CNSTI4 1
ASGNI4
line 1494
;1494:				CG_NewbieMessage(S_COLOR_GREEN "You've spotted an enemy.", SCREEN_HEIGHT * 0.60, cg_newbeeHeight.value );
ADDRGP4 $1069
ARGP4
CNSTI4 287
ARGI4
ADDRGP4 cg_newbeeHeight+8
INDIRF4
ARGF4
ADDRGP4 CG_NewbieMessage
CALLV
pop
line 1495
;1495:			}
line 1496
;1496:		}
line 1498
;1497:
;1498:	}
line 1500
;1499:	else 
;1500:		return;
LABELV $955
LABELV $946
line 1502
;1501:
;1502:	x = rect->x + rect->w/2 - CG_Text_Width( name,scale,0 )/2;
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 36
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1073741824
DIVF4
ADDF4
ADDRLP4 36
INDIRI4
CNSTI4 2
DIVI4
CVIF4 4
SUBF4
CVFI4 4
ASGNI4
line 1504
;1503: 
;1504:	CG_Text_Paint( x, rect->y, scale, vec_color, name, 0, 0, textStyle);  
ADDRLP4 24
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRLP4 0
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1505
;1505:}
LABELV $925
endproc CG_DrawCrosshairEntity 44 32
proc CG_DrawWeaponStatus 68 32
line 1507
;1506:
;1507:static void CG_DrawWeaponStatus(rectDef_t *rect, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 1509
;1508:   	playerState_t	*ps;
;1509:	char *mode = ""; 
ADDRLP4 8
ADDRGP4 $366
ASGNP4
line 1513
;1510:	int	weaponmode ;
;1511:	int	weapon;
;1512:
;1513: 	ps = &cg.snap->ps;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1514
;1514: 	weaponmode = ps->stats[STAT_WEAPONMODE];
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
line 1515
;1515:	weapon = ps->weapon;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 1518
;1516:
;1517:
;1518:	if ( ps->weaponstate == WEAPON_BANDAGING_START || 
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 12
EQI4 $1076
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1076
ADDRLP4 16
INDIRI4
CNSTI4 14
NEI4 $1073
LABELV $1076
line 1521
;1519:		ps->weaponstate == WEAPON_BANDAGING_END || 
;1520:		ps->weaponstate == WEAPON_BANDAGING )
;1521:		mode = "Bandaging";	
ADDRLP4 8
ADDRGP4 $1077
ASGNP4
ADDRGP4 $1074
JUMPV
LABELV $1073
line 1522
;1522:	else if ( (weapon == WP_M4 || weapon == WP_AK47) && (weaponmode & ( 1 << WM_GRENADELAUNCHER ) ) && ( weaponmode & ( 1 << WM_WEAPONMODE2 ) ) )
ADDRLP4 4
INDIRI4
CNSTI4 16
EQI4 $1080
ADDRLP4 4
INDIRI4
CNSTI4 15
NEI4 $1078
LABELV $1080
ADDRLP4 24
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $1078
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $1078
line 1523
;1523:	{
line 1524
;1524:		mode = "GrenadeLauncher";
ADDRLP4 8
ADDRGP4 $1081
ASGNP4
line 1525
;1525:	}
ADDRGP4 $1079
JUMPV
LABELV $1078
line 1526
;1526:	else if ( (weapon == WP_M4 || weapon == WP_AK47) && (weaponmode & ( 1 << WM_BAYONET ) ) && ( weaponmode & ( 1 << WM_WEAPONMODE2 ) ) )
ADDRLP4 4
INDIRI4
CNSTI4 16
EQI4 $1084
ADDRLP4 4
INDIRI4
CNSTI4 15
NEI4 $1082
LABELV $1084
ADDRLP4 36
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 40
INDIRI4
EQI4 $1082
ADDRLP4 36
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 40
INDIRI4
EQI4 $1082
line 1527
;1527:	{
line 1528
;1528:		mode = "Stab Mode";
ADDRLP4 8
ADDRGP4 $1085
ASGNP4
line 1529
;1529:	} /*
ADDRGP4 $1083
JUMPV
LABELV $1082
line 1547
;1530:	else if ( (weapon == WP_PSG1 || weapon == WP_MACMILLAN ) && (( weaponmode & ( 1 << WM_ZOOM4X) )||( weaponmode & ( 1 << WM_ZOOM2X) )) ) // got 4x zoom
;1531:	{
;1532:		// if i want to switch to 
;1533:		if ( weaponmode & ( 1 << WM_ZOOM4X) )
;1534:			mode = "4x Zoom";
;1535:		else if ( weaponmode & (1 << WM_ZOOM2X) )
;1536:			mode = "2x Zoom";				
;1537:	}
;1538:	else if ( weaponmode & (1 << WM_SCOPE ) && ( weaponmode & (1 << WM_ZOOM2X) ) ) // scope add-on only2x
;1539:	{
;1540:		mode = "2x Zoom";
;1541:	}*/
;1542:	/*
;1543:	else if ( weaponmode & (1 << WM_LASER ) && ( weaponmode & (1 << WM_LACTIVE) ) ) // can't have scope + lasersight
;1544:	{ 
;1545:		mode = "Laser On";
;1546:	}		*/
;1547:	else if ( BG_IsGrenade( weapon ) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $1086
line 1548
;1548:	{
line 1549
;1549:		int sec = 3;
ADDRLP4 48
CNSTI4 3
ASGNI4
line 1551
;1550:
;1551:		if ( weapon == WP_FLASHBANG )
ADDRLP4 4
INDIRI4
CNSTI4 5
NEI4 $1088
line 1552
;1552:		{
line 1553
;1553:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1090
line 1554
;1554:				sec = 2;
ADDRLP4 48
CNSTI4 2
ASGNI4
ADDRGP4 $1089
JUMPV
LABELV $1090
line 1555
;1555:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1089
line 1556
;1556:				sec = 1;
ADDRLP4 48
CNSTI4 1
ASGNI4
line 1557
;1557:		}
ADDRGP4 $1089
JUMPV
LABELV $1088
line 1558
;1558:		else if (weapon == WP_SMOKE ) {
ADDRLP4 4
INDIRI4
CNSTI4 25
NEI4 $1094
line 1559
;1559:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1096
line 1560
;1560:				sec = 2;
ADDRLP4 48
CNSTI4 2
ASGNI4
ADDRGP4 $1095
JUMPV
LABELV $1096
line 1561
;1561:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1095
line 1562
;1562:				sec = 1;
ADDRLP4 48
CNSTI4 1
ASGNI4
line 1563
;1563:		} else {
ADDRGP4 $1095
JUMPV
LABELV $1094
line 1564
;1564:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1100
line 1565
;1565:				sec = 4;
ADDRLP4 48
CNSTI4 4
ASGNI4
ADDRGP4 $1101
JUMPV
LABELV $1100
line 1566
;1566:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1102
line 1567
;1567:				sec = 5;
ADDRLP4 48
CNSTI4 5
ASGNI4
LABELV $1102
LABELV $1101
line 1568
;1568:		}
LABELV $1095
LABELV $1089
line 1570
;1569:
;1570:		if ( weaponmode & ( 1 << WM_GRENADEROLL ) )			
ADDRLP4 12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1104
line 1571
;1571:			mode = va( "%is Roll", sec ); 
ADDRGP4 $1106
ARGP4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 52
INDIRP4
ASGNP4
ADDRGP4 $1087
JUMPV
LABELV $1104
line 1573
;1572:		else 
;1573:			mode = va( "%is Throw", sec ); 
ADDRGP4 $1107
ARGP4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
ASGNP4
line 1574
;1574:	}/*
ADDRGP4 $1087
JUMPV
LABELV $1086
line 1579
;1575:	else if ( weapon == WP_PDW && ( weaponmode & ( 1 << WM_WEAPONMODE2 ) ) )
;1576:	{ 
;1577:		mode = "Recoilcatcher";			
;1578:	} */
;1579:	else if ( weapon == WP_M4 || weapon == WP_M249 || weapon == WP_M14 || weapon == WP_MAC10 || weapon == WP_AK47 || weapon == WP_MP5 || weapon == WP_PDW ||
ADDRLP4 4
INDIRI4
CNSTI4 16
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 23
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 22
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 13
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 15
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 14
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 12
EQI4 $1116
ADDRLP4 4
INDIRI4
CNSTI4 21
NEI4 $1108
LABELV $1116
line 1581
;1580:		weapon == WP_SPAS15 )
;1581:	{ 
line 1583
;1582:		// if i want to switch to 
;1583:		if ( weaponmode & ( 1 << WM_SINGLE) )			
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1117
line 1584
;1584:			mode = "Single Shot";
ADDRLP4 8
ADDRGP4 $1119
ASGNP4
ADDRGP4 $1109
JUMPV
LABELV $1117
line 1586
;1585:		else
;1586:			mode = "Full Auto";  
ADDRLP4 8
ADDRGP4 $1120
ASGNP4
line 1587
;1587:	}
ADDRGP4 $1109
JUMPV
LABELV $1108
line 1588
;1588:	else if ( !BG_IsMelee(weapon) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $1121
line 1589
;1589:		mode = "Single Shot";
ADDRLP4 8
ADDRGP4 $1119
ASGNP4
LABELV $1121
LABELV $1109
LABELV $1087
LABELV $1083
LABELV $1079
LABELV $1074
line 1592
;1590:
;1591:
;1592:	if (shader) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $1123
line 1593
;1593:		trap_R_SetColor( color );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1594
;1594:		CG_DrawPic(rect->x, rect->y, rect->w, rect->h, shader);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ARGF4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1595
;1595:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1596
;1596:	} else { 
ADDRGP4 $1124
JUMPV
LABELV $1123
line 1597
;1597:		int value = CG_Text_Width(mode, scale, 0);
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 60
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 60
INDIRI4
ASGNI4
line 1598
;1598:		CG_Text_Paint(rect->x + (rect->w - value) / 2, rect->y + rect->h, scale, color, mode, 0, 0, textStyle);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 56
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1073741824
DIVF4
ADDF4
ARGF4
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 1599
;1599:	}
LABELV $1124
line 1600
;1600:}
LABELV $1071
endproc CG_DrawWeaponStatus 68 32
export CG_GetStringForTimer
proc CG_GetStringForTimer 12 0
line 1603
;1601:
;1602:const char *CG_GetStringForTimer( int timer )
;1603:{
line 1604
;1604:	switch (timer) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
CNSTI4 272
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1128
ADDRLP4 0
INDIRI4
CNSTI4 273
EQI4 $1130
ADDRLP4 0
INDIRI4
CNSTI4 274
EQI4 $1132
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $1126
LABELV $1142
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 295
LTI4 $1126
ADDRLP4 8
INDIRI4
CNSTI4 298
GTI4 $1126
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1143-1180
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1143
address $1134
address $1136
address $1138
address $1140
code
LABELV $1128
line 1606
;1605:		case CG_TIMER_WORLD:
;1606:			return "ui_roundtimerworld";
ADDRGP4 $1129
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1130
line 1608
;1607:		case CG_TIMER_VIP:
;1608:			return "ui_viptimer";
ADDRGP4 $1131
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1132
line 1610
;1609:		case CG_TIMER_ASSAULT1:
;1610:			return "ui_assaulttimer1";
ADDRGP4 $1133
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1134
line 1612
;1611:		case CG_TIMER_ASSAULT2:
;1612:			return "ui_assaulttimer2";
ADDRGP4 $1135
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1136
line 1614
;1613:		case CG_TIMER_ASSAULT3:
;1614:			return "ui_assaulttimer3";
ADDRGP4 $1137
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1138
line 1616
;1615:		case CG_TIMER_ASSAULT4:
;1616:			return "ui_assaulttimer4";
ADDRGP4 $1139
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1140
line 1618
;1617:		case CG_TIMER_BOMB:
;1618:			return "ui_bombtimer";
ADDRGP4 $1141
RETP4
ADDRGP4 $1125
JUMPV
LABELV $1126
line 1620
;1619:		default:
;1620:			return "ui_roundtimerworld";
ADDRGP4 $1129
RETP4
LABELV $1125
endproc CG_GetStringForTimer 12 0
export CG_GetBlockCvarForTimer
proc CG_GetBlockCvarForTimer 12 0
line 1624
;1621:	} 
;1622:}
;1623:const char *CG_GetBlockCvarForTimer( int timer )
;1624:{
line 1625
;1625:	switch (timer) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
CNSTI4 274
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1148
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $1146
LABELV $1157
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 295
EQI4 $1150
ADDRLP4 8
INDIRI4
CNSTI4 296
EQI4 $1152
ADDRLP4 8
INDIRI4
CNSTI4 297
EQI4 $1154
ADDRGP4 $1146
JUMPV
LABELV $1148
line 1627
;1626:		case CG_TIMER_ASSAULT1:
;1627:			return "ui_assaultblocked1";
ADDRGP4 $1149
RETP4
ADDRGP4 $1145
JUMPV
LABELV $1150
line 1629
;1628:		case CG_TIMER_ASSAULT2:
;1629:			return "ui_assaultblocked2";
ADDRGP4 $1151
RETP4
ADDRGP4 $1145
JUMPV
LABELV $1152
line 1631
;1630:		case CG_TIMER_ASSAULT3:
;1631:			return "ui_assaultblocked3";
ADDRGP4 $1153
RETP4
ADDRGP4 $1145
JUMPV
LABELV $1154
line 1633
;1632:		case CG_TIMER_ASSAULT4:
;1633:			return "ui_assaultblocked4"; 
ADDRGP4 $1155
RETP4
ADDRGP4 $1145
JUMPV
LABELV $1146
line 1635
;1634:		default:
;1635:			return "wrong";
ADDRGP4 $1156
RETP4
LABELV $1145
endproc CG_GetBlockCvarForTimer 12 0
proc CG_DrawTimerDigit 184 20
line 1640
;1636:	} 
;1637:}
;1638:
;1639:
;1640:static void CG_DrawTimerDigit( rectDef_t *rect, int timer ) {
line 1643
;1641:	int			mins, seconds ;
;1642:	int			msec;
;1643:	int			starttime = cgs.levelStartTime;
ADDRLP4 8
ADDRGP4 cgs+32488
INDIRI4
ASGNI4
line 1644
;1644:	qboolean	assaultfield_taken = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1647
;1645://	qhandle_t	icon;
;1646:
;1647:	switch (timer) {
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 24
CNSTI4 272
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $1162
ADDRLP4 20
INDIRI4
CNSTI4 273
EQI4 $1164
ADDRLP4 20
INDIRI4
CNSTI4 274
EQI4 $1166
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $1160
LABELV $1187
ADDRLP4 28
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 295
LTI4 $1160
ADDRLP4 28
INDIRI4
CNSTI4 298
GTI4 $1160
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1188-1180
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1188
address $1169
address $1174
address $1179
address $1184
code
LABELV $1162
line 1649
;1648:		case CG_TIMER_WORLD:
;1649:			starttime = cgs.levelRoundStartTime;  
ADDRLP4 8
ADDRGP4 cgs+214076
INDIRI4
ASGNI4
line 1651
;1650:		//	icon = cgs.media.clockIcon;
;1651:			break;
ADDRGP4 $1161
JUMPV
LABELV $1164
line 1653
;1652:		case CG_TIMER_VIP:
;1653:			starttime = cgs.levelVipStartTime; 
ADDRLP4 8
ADDRGP4 cgs+214084
INDIRI4
ASGNI4
line 1655
;1654:		//	icon = cgs.media.vipIcon;
;1655:			break;
ADDRGP4 $1161
JUMPV
LABELV $1166
line 1657
;1656:		case CG_TIMER_ASSAULT1:
;1657:			starttime = cgs.levelAssaultStartTime[0]; 
ADDRLP4 8
ADDRGP4 cgs+214088
INDIRI4
ASGNI4
line 1658
;1658:			assaultfield_taken = cgs.assaultFieldsCaptured[0];
ADDRLP4 16
ADDRGP4 cgs+214116
INDIRI4
ASGNI4
line 1660
;1659:		//	icon = cgs.media.assaultIcon;
;1660:			break;
ADDRGP4 $1161
JUMPV
LABELV $1169
line 1662
;1661:		case CG_TIMER_ASSAULT2:
;1662:			starttime = cgs.levelAssaultStartTime[1];
ADDRLP4 8
ADDRGP4 cgs+214088+4
INDIRI4
ASGNI4
line 1663
;1663:			assaultfield_taken = cgs.assaultFieldsCaptured[1];
ADDRLP4 16
ADDRGP4 cgs+214116+4
INDIRI4
ASGNI4
line 1665
;1664:		//	icon = cgs.media.assaultIcon;
;1665:			break;
ADDRGP4 $1161
JUMPV
LABELV $1174
line 1667
;1666:		case CG_TIMER_ASSAULT3:
;1667:			starttime = cgs.levelAssaultStartTime[2];
ADDRLP4 8
ADDRGP4 cgs+214088+8
INDIRI4
ASGNI4
line 1668
;1668:			assaultfield_taken = cgs.assaultFieldsCaptured[2];
ADDRLP4 16
ADDRGP4 cgs+214116+8
INDIRI4
ASGNI4
line 1670
;1669:		//	icon = cgs.media.assaultIcon;
;1670:			break;
ADDRGP4 $1161
JUMPV
LABELV $1179
line 1672
;1671:		case CG_TIMER_ASSAULT4:
;1672:			starttime = cgs.levelAssaultStartTime[3];
ADDRLP4 8
ADDRGP4 cgs+214088+12
INDIRI4
ASGNI4
line 1673
;1673:			assaultfield_taken = cgs.assaultFieldsCaptured[3];
ADDRLP4 16
ADDRGP4 cgs+214116+12
INDIRI4
ASGNI4
line 1675
;1674:		//	icon = cgs.media.assaultIcon;
;1675:			break;
ADDRGP4 $1161
JUMPV
LABELV $1184
line 1677
;1676:		case CG_TIMER_BOMB:
;1677:			starttime = cgs.levelBombStartTime;
ADDRLP4 8
ADDRGP4 cgs+214104
INDIRI4
ASGNI4
line 1679
;1678:		//	icon = cgs.media.bombIcon;
;1679:			break;
ADDRGP4 $1161
JUMPV
LABELV $1160
line 1681
;1680:		default:
;1681:			starttime = cgs.levelStartTime; 
ADDRLP4 8
ADDRGP4 cgs+32488
INDIRI4
ASGNI4
line 1683
;1682:		//	icon = cgs.media.clockIcon;
;1683:			break;
LABELV $1161
line 1687
;1684:	}
;1685:
;1686:  	// this field has been deactivated.
;1687:	if ( assaultfield_taken )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1190
line 1688
;1688:	{
line 1691
;1689:		char buf[128];
;1690:
;1691:		trap_Cvar_VariableStringBuffer( CG_GetBlockCvarForTimer( timer), buf, sizeof(buf ) );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 160
ADDRGP4 CG_GetBlockCvarForTimer
CALLP4
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1694
;1692:
;1693://		CG_Printf("timer %s is %s\n", CG_GetBlockCvarForTimer(timer),buf );
;1694:		if ( atoi(buf) != 1 )
ADDRLP4 32
ARGP4
ADDRLP4 164
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 1
EQI4 $1192
line 1695
;1695:			trap_Cvar_Set( CG_GetBlockCvarForTimer( timer ) , "1" );		
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_GetBlockCvarForTimer
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRGP4 $1194
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
LABELV $1192
line 1697
;1696:
;1697:		trap_Cvar_VariableStringBuffer( CG_GetStringForTimer( timer), buf, sizeof(buf ) );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1700
;1698:
;1699://		CG_Printf("timer %s is %s\n", CG_GetStringForTimer(timer),buf );
;1700:		if ( atoi(buf) != 1 )
ADDRLP4 32
ARGP4
ADDRLP4 176
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 1
EQI4 $1158
line 1701
;1701:			trap_Cvar_Set( CG_GetStringForTimer( timer ) , "2" );		
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 180
INDIRP4
ARGP4
ADDRGP4 $1197
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1703
;1702:
;1703:		return;
ADDRGP4 $1158
JUMPV
LABELV $1190
line 1706
;1704:	}
;1705:
;1706:	msec = ( starttime + 1000 ) - cg.time;
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 1000
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 1709
;1707: 
;1708:	// show server start time - if we're not in LTS
;1709:	if ( timer == CG_TIMER_WORLD && cgs.gametype < GT_LTS )
ADDRFP4 4
INDIRI4
CNSTI4 272
NEI4 $1199
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
GEI4 $1199
line 1710
;1710:		msec = cg.time - cgs.levelStartTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cgs+32488
INDIRI4
SUBI4
ASGNI4
LABELV $1199
line 1712
;1711:
;1712:	seconds = msec / 1000;
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 1713
;1713:	mins = seconds / 60;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 1714
;1714:	seconds -= mins * 60; 
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 60
ADDRLP4 4
INDIRI4
MULI4
SUBI4
ASGNI4
line 1716
;1715:
;1716:	if ( seconds < 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $1204
line 1717
;1717:		seconds = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1204
line 1718
;1718:	if ( mins < 0 )
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1206
line 1719
;1719:		mins = 0; 
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $1206
line 1724
;1720: 
;1721:
;1722:
;1723:	// timer is empty... render?
;1724:	if ( !seconds && !mins && timer != CG_TIMER_WORLD )
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 32
INDIRI4
NEI4 $1208
ADDRLP4 4
INDIRI4
ADDRLP4 32
INDIRI4
NEI4 $1208
ADDRFP4 4
INDIRI4
CNSTI4 272
EQI4 $1208
line 1725
;1725:	{
line 1728
;1726:		char buf[128];
;1727:
;1728:		trap_Cvar_VariableStringBuffer( CG_GetStringForTimer( timer), buf, sizeof(buf ) );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 36
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1730
;1729:
;1730:		if ( atoi(buf) != 0 )
ADDRLP4 36
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $1158
line 1731
;1731:			trap_Cvar_Set( CG_GetStringForTimer( timer ) , "0" );		
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 $1212
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1733
;1732:
;1733:		return;
ADDRGP4 $1158
JUMPV
LABELV $1208
line 1736
;1734:	}
;1735:	else
;1736:	{ // activate timer. set the corresponding cvar to 1 so the ui can draw it
line 1739
;1737:		char buf[128];
;1738:
;1739:		trap_Cvar_VariableStringBuffer( CG_GetStringForTimer( timer), buf, sizeof(buf ) );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 36
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 1741
;1740:
;1741:		if ( atoi(buf) != 1 )
ADDRLP4 36
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 1
EQI4 $1213
line 1742
;1742:			trap_Cvar_Set( CG_GetStringForTimer( timer ) , "1" );
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_GetStringForTimer
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 $1194
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
LABELV $1213
line 1743
;1743:	}
line 1744
;1744:	CG_DrawDigits2( rect->x, rect->y, 1, mins );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawDigits2
CALLV
pop
line 1745
;1745:	CG_DrawPic( rect->x + 22, rect->y, 16,32 , cgs.media.colonIcon );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1102053376
ADDF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
CNSTF4 1098907648
ARGF4
CNSTF4 1107296256
ARGF4
ADDRGP4 cgs+205084+572
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1746
;1746:	CG_DrawDigits2( rect->x + 40 , rect->y, 2, seconds );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1109393408
ADDF4
CVFI4 4
ARGI4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawDigits2
CALLV
pop
line 1749
;1747://	CG_DrawPic( rect->x + 88, rect->y, 32,32, icon );
;1748: 
;1749:}
LABELV $1158
endproc CG_DrawTimerDigit 184 20
export CG_OwnerDraw
proc CG_OwnerDraw 1052 20
line 1752
;1750:
;1751://
;1752:void CG_OwnerDraw(float x, float y, float w, float h, float text_x, float text_y, int ownerDraw, int ownerDrawFlags, int align, float special, float scale, vec4_t color, qhandle_t shader, int textStyle) {
line 1756
;1753:	rectDef_t rect; 
;1754:
;1755:
;1756:	if ( cg_drawStatus.integer == 0 ) {
ADDRGP4 cg_drawStatus+12
INDIRI4
CNSTI4 0
NEI4 $1218
line 1757
;1757:		return;
ADDRGP4 $1217
JUMPV
LABELV $1218
line 1764
;1758:	}
;1759:
;1760:	//if (ownerDrawFlags != 0 && !CG_OwnerDrawVisible(ownerDrawFlags)) {
;1761:	//	return;
;1762:	//}
;1763:
;1764:	rect.x = x;
ADDRLP4 0
ADDRFP4 0
INDIRF4
ASGNF4
line 1765
;1765:	rect.y = y;
ADDRLP4 0+4
ADDRFP4 4
INDIRF4
ASGNF4
line 1766
;1766:	rect.w = w;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
ASGNF4
line 1767
;1767:	rect.h = h;
ADDRLP4 0+12
ADDRFP4 12
INDIRF4
ASGNF4
line 1770
;1768:
;1769:  	
;1770:	if (ownerDraw == CG_PRIMARY || ownerDraw == CG_SECONDARY )
ADDRLP4 20
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 258
EQI4 $1226
ADDRLP4 20
INDIRI4
CNSTI4 259
NEI4 $1224
LABELV $1226
line 1771
;1771:	{
line 1774
;1772:		char		var[MAX_TOKEN_CHARS]; 
;1773:
;1774:		if (ownerDraw == CG_PRIMARY)
ADDRFP4 24
INDIRI4
CNSTI4 258
NEI4 $1227
line 1775
;1775:			trap_Cvar_VariableStringBuffer("inven_primary", var , sizeof( var ) );
ADDRGP4 $1229
ARGP4
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
ADDRGP4 $1228
JUMPV
LABELV $1227
line 1777
;1776:		else
;1777:			trap_Cvar_VariableStringBuffer("inven_secondary", var , sizeof( var ) );
ADDRGP4 $1230
ARGP4
ADDRLP4 24
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
LABELV $1228
line 1780
;1778:
;1779:		// set the "special to our current weapon"
;1780:		special = atoi(var);
ADDRLP4 24
ARGP4
ADDRLP4 1048
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 36
ADDRLP4 1048
INDIRI4
CVIF4 4
ASGNF4
line 1781
;1781:	}
LABELV $1224
line 1783
;1782:
;1783:	switch (ownerDraw) {
ADDRLP4 24
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 28
CNSTI4 60
ASGNI4
ADDRLP4 24
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $1266
ADDRLP4 24
INDIRI4
ADDRLP4 28
INDIRI4
GTI4 $1271
LABELV $1270
ADDRLP4 32
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 19
EQI4 $1251
ADDRLP4 36
CNSTI4 20
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $1252
ADDRLP4 32
INDIRI4
ADDRLP4 36
INDIRI4
GTI4 $1273
LABELV $1272
ADDRLP4 40
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 1
LTI4 $1232
ADDRLP4 40
INDIRI4
CNSTI4 6
GTI4 $1232
ADDRLP4 40
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1274-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1274
address $1246
address $1248
address $1250
address $1253
address $1232
address $1249
code
LABELV $1273
ADDRLP4 44
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 27
LTI4 $1232
ADDRLP4 44
INDIRI4
CNSTI4 51
GTI4 $1232
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1276-108
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1276
address $1255
address $1254
address $1232
address $1232
address $1232
address $1232
address $1256
address $1257
address $1232
address $1258
address $1232
address $1232
address $1263
address $1232
address $1232
address $1259
address $1232
address $1232
address $1232
address $1260
address $1261
address $1262
address $1264
address $1265
address $1247
code
LABELV $1271
ADDRLP4 48
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 257
LTI4 $1278
ADDRLP4 48
INDIRI4
CNSTI4 277
GTI4 $1279
ADDRLP4 48
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1280-1028
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1280
address $1245
address $1245
address $1245
address $1232
address $1232
address $1232
address $1232
address $1232
address $1244
address $1243
address $1242
address $1241
address $1240
address $1236
address $1237
address $1233
address $1233
address $1233
address $1239
address $1238
address $1234
code
LABELV $1278
ADDRLP4 52
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 66
EQI4 $1267
ADDRLP4 52
INDIRI4
CNSTI4 67
EQI4 $1268
ADDRLP4 52
INDIRI4
CNSTI4 68
EQI4 $1269
ADDRGP4 $1232
JUMPV
LABELV $1279
ADDRLP4 56
ADDRFP4 24
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 295
LTI4 $1232
ADDRLP4 56
INDIRI4
CNSTI4 298
GTI4 $1282
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1283-1180
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1283
address $1233
address $1233
address $1233
address $1233
code
LABELV $1282
ADDRFP4 24
INDIRI4
CNSTI4 322
EQI4 $1235
ADDRGP4 $1232
JUMPV
LABELV $1233
line 1791
;1784:	case CG_TIMER_WORLD:
;1785:	case CG_TIMER_VIP:
;1786:	case CG_TIMER_ASSAULT1:
;1787:	case CG_TIMER_ASSAULT2:
;1788:	case CG_TIMER_ASSAULT3:
;1789:	case CG_TIMER_ASSAULT4:
;1790:	case CG_TIMER_BOMB:
;1791:		CG_DrawTimerDigit( &rect, ownerDraw);
ADDRLP4 0
ARGP4
ADDRFP4 24
INDIRI4
ARGI4
ADDRGP4 CG_DrawTimerDigit
CALLV
pop
line 1792
;1792:		break;
ADDRGP4 $1232
JUMPV
LABELV $1234
line 1794
;1793:	case CG_PLAYER_WEAPONSTATUS:
;1794:		CG_DrawWeaponStatus( &rect, scale, color, shader, textStyle );
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawWeaponStatus
CALLV
pop
line 1795
;1795:		break;
ADDRGP4 $1232
JUMPV
LABELV $1235
line 1797
;1796:	case CG_PLAYER_ENEMY:
;1797:		CG_DrawCrosshairEntity( &rect, scale, color, shader, textStyle );
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawCrosshairEntity
CALLV
pop
line 1798
;1798:		break;
ADDRGP4 $1232
JUMPV
LABELV $1236
line 1800
;1799:	case CG_PLAYER_CLIPS_ICON:
;1800:		CG_DrawClipIcon( &rect );
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawClipIcon
CALLV
pop
line 1801
;1801:		break;
ADDRGP4 $1232
JUMPV
LABELV $1237
line 1803
;1802:	case CG_PLAYER_CLIPS_VALUE:
;1803:		CG_DrawClipDigitValue( &rect );
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawClipDigitValue
CALLV
pop
line 1804
;1804:		break;
ADDRGP4 $1232
JUMPV
LABELV $1238
line 1806
;1805:	case CG_PLAYER_STAMINABAR_VERT:
;1806:		CG_DrawStaminaBarVert(&rect, color, shader );
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawStaminaBarVert
CALLV
pop
line 1807
;1807:		break;
ADDRGP4 $1232
JUMPV
LABELV $1239
line 1809
;1808:	case CG_PLAYER_STAMINABAR_HOR:
;1809:		CG_DrawStaminaBarHor( &rect, color, shader );
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawStaminaBarHor
CALLV
pop
line 1810
;1810:		break;
ADDRGP4 $1232
JUMPV
LABELV $1240
line 1812
;1811:	case CG_PLAYER_AMMOBAR_VERT:
;1812:		CG_DrawAmmoBarVert( &rect, color, shader );
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAmmoBarVert
CALLV
pop
line 1813
;1813:		break;
ADDRGP4 $1232
JUMPV
LABELV $1241
line 1815
;1814:	case CG_PLAYER_AMMOBAR_HOR:
;1815:		CG_DrawAmmoBarHor(&rect, color, shader );
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAmmoBarHor
CALLV
pop
line 1816
;1816:		break;
ADDRGP4 $1232
JUMPV
LABELV $1242
line 1818
;1817:	case CG_PLAYER_DAMAGELOC:
;1818:		CG_DrawDamageLoc( &rect, special );
ADDRLP4 0
ARGP4
ADDRFP4 36
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 CG_DrawDamageLoc
CALLV
pop
line 1819
;1819:		break;
ADDRGP4 $1232
JUMPV
LABELV $1243
line 1821
;1820:	case CG_PLAYER_CLIPVALUE:
;1821:		CG_DrawClipValue( &rect );
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawClipValue
CALLV
pop
line 1822
;1822:		break;
ADDRGP4 $1232
JUMPV
LABELV $1244
line 1824
;1823:	case CG_PLAYER_CLIPGFX:
;1824:		CG_DrawClipGfx( &rect );
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawClipGfx
CALLV
pop
line 1825
;1825:		break; 
ADDRGP4 $1232
JUMPV
LABELV $1245
line 1829
;1826:	case CG_PRIMARY: 
;1827:	case CG_SECONDARY: 
;1828:	case CG_PICKUP:
;1829:		CG_DrawWeaponIcon( &rect, special );
ADDRLP4 0
ARGP4
ADDRFP4 36
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 CG_DrawWeaponIcon
CALLV
pop
line 1830
;1830:	break;
ADDRGP4 $1232
JUMPV
LABELV $1246
line 1833
;1831:
;1832:	case CG_PLAYER_ROUNDS_ICON:
;1833:		CG_DrawPlayerArmorIcon(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1834
;1834:	break;
ADDRGP4 $1232
JUMPV
LABELV $1247
line 1836
;1835:	case CG_PLAYER_ARMOR_ICON2D:
;1836:		CG_DrawPlayerArmorIcon(&rect, qtrue);
ADDRLP4 0
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_DrawPlayerArmorIcon
CALLV
pop
line 1837
;1837:	break;
ADDRGP4 $1232
JUMPV
LABELV $1248
line 1839
;1838:	case CG_PLAYER_ROUNDS_VALUE:
;1839:		CG_DrawPlayerArmorValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerArmorValue
CALLV
pop
line 1840
;1840:	break;
ADDRGP4 $1232
JUMPV
LABELV $1249
line 1842
;1841:	case CG_PLAYER_AMMO_VALUE:
;1842:		CG_DrawPlayerAmmoValue(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerAmmoValue
CALLV
pop
line 1843
;1843:	break; 
ADDRGP4 $1232
JUMPV
LABELV $1250
line 1845
;1844:	case CG_PLAYER_HEAD:
;1845:	CG_DrawPlayerHead(&rect, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerHead
CALLV
pop
line 1846
;1846:	break;
ADDRGP4 $1232
JUMPV
LABELV $1251
line 1848
;1847:	case CG_PLAYER_ITEM:
;1848:	CG_DrawPlayerItem(&rect, scale, ownerDrawFlags & CG_SHOW_2DONLY);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 28
INDIRI4
CNSTI4 268435456
BANDI4
ARGI4
ADDRGP4 CG_DrawPlayerItem
CALLV
pop
line 1849
;1849:	break;
ADDRGP4 $1232
JUMPV
LABELV $1252
line 1851
;1850:	case CG_PLAYER_SCORE:
;1851:	CG_DrawPlayerScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerScore
CALLV
pop
line 1852
;1852:	break;
ADDRGP4 $1232
JUMPV
LABELV $1253
line 1854
;1853:	case CG_PLAYER_HEALTH:
;1854:	CG_DrawPlayerHealth(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerHealth
CALLV
pop
line 1855
;1855:	break;
ADDRGP4 $1232
JUMPV
LABELV $1254
line 1857
;1856:	case CG_RED_SCORE:
;1857:	CG_DrawRedScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawRedScore
CALLV
pop
line 1858
;1858:	break;
ADDRGP4 $1232
JUMPV
LABELV $1255
line 1860
;1859:	case CG_BLUE_SCORE:
;1860:	CG_DrawBlueScore(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawBlueScore
CALLV
pop
line 1861
;1861:	break;
ADDRGP4 $1232
JUMPV
LABELV $1256
line 1863
;1862: 	case CG_PLAYER_LOCATION:
;1863:	CG_DrawPlayerLocation(&rect, scale, color, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPlayerLocation
CALLV
pop
line 1864
;1864:	break;
ADDRGP4 $1232
JUMPV
LABELV $1257
line 1866
;1865:	case CG_TEAM_COLOR:
;1866:	CG_DrawTeamColor(&rect, color);
ADDRLP4 0
ARGP4
ADDRFP4 44
INDIRP4
ARGP4
ADDRGP4 CG_DrawTeamColor
CALLV
pop
line 1867
;1867:	break;
ADDRGP4 $1232
JUMPV
LABELV $1258
line 1869
;1868:	case CG_AREA_POWERUP:
;1869:		CG_DrawAreaPowerUp(&rect, align, special, scale, color);
ADDRLP4 0
ARGP4
ADDRFP4 32
INDIRI4
ARGI4
ADDRFP4 36
INDIRF4
ARGF4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRGP4 CG_DrawAreaPowerUp
CALLV
pop
line 1870
;1870:	break;
ADDRGP4 $1232
JUMPV
LABELV $1259
line 1872
;1871:	case CG_PLAYER_STATUS:
;1872:	CG_DrawPlayerStatus(&rect);
ADDRLP4 0
ARGP4
ADDRGP4 CG_DrawPlayerStatus
CALLV
pop
line 1873
;1873:	break;
ADDRGP4 $1232
JUMPV
LABELV $1260
line 1875
;1874:	case CG_AREA_SYSTEMCHAT:
;1875:	CG_DrawAreaSystemChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaSystemChat
CALLV
pop
line 1876
;1876:	break;
ADDRGP4 $1232
JUMPV
LABELV $1261
line 1878
;1877:	case CG_AREA_TEAMCHAT:
;1878:	CG_DrawAreaTeamChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaTeamChat
CALLV
pop
line 1879
;1879:	break;
ADDRGP4 $1232
JUMPV
LABELV $1262
line 1881
;1880:	case CG_AREA_CHAT:
;1881:	CG_DrawAreaChat(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawAreaChat
CALLV
pop
line 1882
;1882:	break;
ADDRGP4 $1232
JUMPV
LABELV $1263
line 1884
;1883:	case CG_GAME_TYPE:
;1884:	CG_DrawGameType(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameType
CALLV
pop
line 1885
;1885:	break;
ADDRGP4 $1232
JUMPV
LABELV $1264
line 1887
;1886:	case CG_GAME_STATUS:
;1887:	CG_DrawGameStatus(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawGameStatus
CALLV
pop
line 1888
;1888:		break;
ADDRGP4 $1232
JUMPV
LABELV $1265
line 1890
;1889:	case CG_KILLER:
;1890:	CG_DrawKiller(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawKiller
CALLV
pop
line 1891
;1891:		break;
ADDRGP4 $1232
JUMPV
LABELV $1266
line 1893
;1892: 	case CG_SPECTATORS:
;1893:		CG_DrawTeamSpectators(&rect, scale, color, shader);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawTeamSpectators
CALLV
pop
line 1894
;1894:		break; 
ADDRGP4 $1232
JUMPV
LABELV $1267
line 1896
;1895:	case CG_CAPFRAGLIMIT:
;1896:	CG_DrawCapFragLimit(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawCapFragLimit
CALLV
pop
line 1897
;1897:		break;
ADDRGP4 $1232
JUMPV
LABELV $1268
line 1899
;1898:	case CG_1STPLACE:
;1899:	CG_Draw1stPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_Draw1stPlace
CALLV
pop
line 1900
;1900:		break;
ADDRGP4 $1232
JUMPV
LABELV $1269
line 1902
;1901:	case CG_2NDPLACE:
;1902:	CG_Draw2ndPlace(&rect, scale, color, shader, textStyle);
ADDRLP4 0
ARGP4
ADDRFP4 40
INDIRF4
ARGF4
ADDRFP4 44
INDIRP4
ARGP4
ADDRFP4 48
INDIRI4
ARGI4
ADDRFP4 52
INDIRI4
ARGI4
ADDRGP4 CG_Draw2ndPlace
CALLV
pop
line 1903
;1903:		break;
line 1905
;1904:	default:
;1905:	break;
LABELV $1232
line 1907
;1906:	}
;1907:}
LABELV $1217
endproc CG_OwnerDraw 1052 20
export CG_MouseEvent
proc CG_MouseEvent 16 12
line 1909
;1908:
;1909:void CG_MouseEvent(int x, int y) {
line 1917
;1910:	int n;
;1911:/*
;1912:	if ( (cg.predictedPlayerState.pm_type == PM_NORMAL || cg.predictedPlayerState.pm_type == PM_SPECTATOR) && cg.showScores == qfalse) {
;1913:    trap_Key_SetCatcher(0);
;1914:		return;
;1915:	}
;1916:*/
;1917:	cgs.cursorX+= x;
ADDRLP4 4
ADDRGP4 cgs+205008
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRI4
ADDI4
ASGNI4
line 1918
;1918:	if (cgs.cursorX < 0)
ADDRGP4 cgs+205008
INDIRI4
CNSTI4 0
GEI4 $1287
line 1919
;1919:		cgs.cursorX = 0;
ADDRGP4 cgs+205008
CNSTI4 0
ASGNI4
ADDRGP4 $1288
JUMPV
LABELV $1287
line 1920
;1920:	else if (cgs.cursorX > 640)
ADDRGP4 cgs+205008
INDIRI4
CNSTI4 640
LEI4 $1291
line 1921
;1921:		cgs.cursorX = 640;
ADDRGP4 cgs+205008
CNSTI4 640
ASGNI4
LABELV $1291
LABELV $1288
line 1923
;1922:
;1923:	cgs.cursorY += y;
ADDRLP4 8
ADDRGP4 cgs+205012
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 1924
;1924:	if (cgs.cursorY < 0)
ADDRGP4 cgs+205012
INDIRI4
CNSTI4 0
GEI4 $1296
line 1925
;1925:		cgs.cursorY = 0;
ADDRGP4 cgs+205012
CNSTI4 0
ASGNI4
ADDRGP4 $1297
JUMPV
LABELV $1296
line 1926
;1926:	else if (cgs.cursorY > 480)
ADDRGP4 cgs+205012
INDIRI4
CNSTI4 480
LEI4 $1300
line 1927
;1927:		cgs.cursorY = 480;
ADDRGP4 cgs+205012
CNSTI4 480
ASGNI4
LABELV $1300
LABELV $1297
line 1929
;1928:
;1929:	n = Display_CursorType(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+205008
INDIRI4
ARGI4
ADDRGP4 cgs+205012
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 Display_CursorType
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 1930
;1930:	cgs.activeCursor = 0;
ADDRGP4 cgs+205032
CNSTI4 0
ASGNI4
line 1931
;1931:	if (n == CURSOR_ARROW) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $1307
line 1932
;1932:		cgs.activeCursor = cgs.media.selectCursor;
ADDRGP4 cgs+205032
ADDRGP4 cgs+205084+1096
INDIRI4
ASGNI4
line 1933
;1933:	} else if (n == CURSOR_SIZER) {
ADDRGP4 $1308
JUMPV
LABELV $1307
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $1312
line 1934
;1934:		cgs.activeCursor = cgs.media.sizeCursor;
ADDRGP4 cgs+205032
ADDRGP4 cgs+205084+1092
INDIRI4
ASGNI4
line 1935
;1935:	}
LABELV $1312
LABELV $1308
line 1937
;1936:
;1937:  if (cgs.capturedItem) {
ADDRGP4 cgs+205028
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1317
line 1938
;1938:	  Display_MouseMove(cgs.capturedItem, x, y);
ADDRGP4 cgs+205028
INDIRP4
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1939
;1939:  } else {
ADDRGP4 $1318
JUMPV
LABELV $1317
line 1940
;1940:	  Display_MouseMove(NULL, cgs.cursorX, cgs.cursorY);
CNSTP4 0
ARGP4
ADDRGP4 cgs+205008
INDIRI4
ARGI4
ADDRGP4 cgs+205012
INDIRI4
ARGI4
ADDRGP4 Display_MouseMove
CALLI4
pop
line 1941
;1941:  }
LABELV $1318
line 1943
;1942: 
;1943:}
LABELV $1285
endproc CG_MouseEvent 16 12
export CG_HideRadioMenu
proc CG_HideRadioMenu 0 4
line 1951
;1944:
;1945:/*
;1946:==================
;1947:CG_HideRadioMenus
;1948:==================
;1949:
;1950:*/
;1951:void CG_HideRadioMenu() {
line 1952
;1952:  Menus_CloseByName("ingame_radio"); 
ADDRGP4 $1324
ARGP4
ADDRGP4 Menus_CloseByName
CALLV
pop
line 1953
;1953:}
LABELV $1323
endproc CG_HideRadioMenu 0 4
export CG_ShowRadioMenus
proc CG_ShowRadioMenus 0 4
line 1961
;1954:
;1955:/*
;1956:==================
;1957:CG_ShowRadioMenus
;1958:==================
;1959:
;1960:*/
;1961:void CG_ShowRadioMenus() {
line 1962
;1962:  Menus_OpenByName("ingame_radio");
ADDRGP4 $1324
ARGP4
ADDRGP4 Menus_OpenByName
CALLV
pop
line 1963
;1963:}
LABELV $1325
endproc CG_ShowRadioMenus 0 4
export CG_EventHandling
proc CG_EventHandling 0 0
line 1977
;1964:
;1965:
;1966:
;1967:
;1968:/*
;1969:==================
;1970:CG_EventHandling
;1971:==================
;1972: type 0 - no event handling
;1973:      1 - team menu
;1974:      2 - hud editor
;1975:
;1976:*/
;1977:void CG_EventHandling(int type) {
line 1978
;1978:	cgs.eventHandling = type;
ADDRGP4 cgs+205016
ADDRFP4 0
INDIRI4
ASGNI4
line 1979
;1979:  if (type == CGAME_EVENT_NONE) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1328
line 1980
;1980:    CG_HideRadioMenu();
ADDRGP4 CG_HideRadioMenu
CALLV
pop
line 1981
;1981:  } else if (type == CGAME_EVENT_RADIOMENU) {
ADDRGP4 $1329
JUMPV
LABELV $1328
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $1330
line 1982
;1982:     CG_ShowRadioMenus();
ADDRGP4 CG_ShowRadioMenus
CALLV
pop
line 1983
;1983:  } else if (type == CGAME_EVENT_SCOREBOARD) {
ADDRGP4 $1331
JUMPV
LABELV $1330
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $1332
line 1984
;1984:  }
LABELV $1332
LABELV $1331
LABELV $1329
line 1986
;1985:
;1986:}
LABELV $1326
endproc CG_EventHandling 0 0
export CG_KeyEvent
proc CG_KeyEvent 16 12
line 1995
;1987:
;1988:void CG_EditRadar_HandleKey ( int key );
;1989:extern	vmCvar_t cg_hudStyle;
;1990:extern	vmCvar_t	cg_hud1PosX;
;1991:extern	vmCvar_t	cg_hud1PosY;
;1992:extern	vmCvar_t	cg_hud2PosX;
;1993:extern	vmCvar_t	cg_hud2PosY;
;1994:
;1995:void CG_KeyEvent(int key, qboolean down) {
line 1997
;1996:
;1997:	if (!down) {
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1335
line 1998
;1998:		return;
ADDRGP4 $1334
JUMPV
LABELV $1335
line 2001
;1999:	}  
;2000: 
;2001:	if ( cgs.eventHandling == CGAME_EVENT_EDITHUD ) 
ADDRGP4 cgs+205016
INDIRI4
CNSTI4 3
NEI4 $1337
line 2002
;2002:	{
line 2005
;2003:	 
;2004:
;2005:		if ( down )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1340
line 2006
;2006:		{
line 2007
;2007:			if ( key == K_MOUSE1 )
ADDRFP4 0
INDIRI4
CNSTI4 178
NEI4 $1342
line 2008
;2008:			{
line 2009
;2009:				int x = cgs.cursorX * ( 1024.0f/640 );
ADDRLP4 0
CNSTF4 1070386381
ADDRGP4 cgs+205008
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 2010
;2010:				int y = cgs.cursorY * ( 768.0f/480 );
ADDRLP4 4
CNSTF4 1070386381
ADDRGP4 cgs+205012
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 2012
;2011:
;2012:				if ( cg_hudStyle.integer == 1 )
ADDRGP4 cg_hudStyle+12
INDIRI4
CNSTI4 1
NEI4 $1346
line 2013
;2013:				{
line 2014
;2014:					trap_Cvar_Set( "cg_hud1PosX", va("%i", x ) );
ADDRGP4 $123
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1349
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2015
;2015:					trap_Cvar_Set( "cg_hud1PosY", va("%i", y ) );
ADDRGP4 $123
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1350
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2016
;2016:				}
ADDRGP4 $1343
JUMPV
LABELV $1346
line 2017
;2017:				else if ( cg_hudStyle.integer == 2 )
ADDRGP4 cg_hudStyle+12
INDIRI4
CNSTI4 2
NEI4 $1343
line 2018
;2018:				{
line 2019
;2019:					trap_Cvar_Set( "cg_hud2PosX", va("%i", x ) );
ADDRGP4 $123
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1354
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2020
;2020:					trap_Cvar_Set( "cg_hud2PosY", va("%i", y ) );
ADDRGP4 $123
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1355
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2021
;2021:				}
line 2022
;2022:			}
ADDRGP4 $1343
JUMPV
LABELV $1342
line 2023
;2023:			else if ( key == K_MOUSE2 )
ADDRFP4 0
INDIRI4
CNSTI4 179
NEI4 $1356
line 2024
;2024:			{
line 2025
;2025:				CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 2026
;2026:				trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 2027
;2027:			}
LABELV $1356
LABELV $1343
line 2028
;2028:		}
LABELV $1340
line 2029
;2029:	}
LABELV $1337
line 2030
;2030:	if ( cgs.eventHandling == CGAME_EVENT_EDITRADARPOS )
ADDRGP4 cgs+205016
INDIRI4
CNSTI4 6
NEI4 $1358
line 2031
;2031:	{
line 2033
;2032: 
;2033:		if ( down )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1361
line 2034
;2034:		{
line 2035
;2035:			if ( key == K_MOUSE1 )
ADDRFP4 0
INDIRI4
CNSTI4 178
NEI4 $1363
line 2036
;2036:			{  
line 2037
;2037:				trap_Cvar_Set( "cg_radarX", va("%i",cgs.cursorX ) );
ADDRGP4 $123
ARGP4
ADDRGP4 cgs+205008
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1365
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2038
;2038:				trap_Cvar_Set( "cg_radarY", va("%i",cgs.cursorY ) ); 
ADDRGP4 $123
ARGP4
ADDRGP4 cgs+205012
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1367
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2039
;2039:			}
ADDRGP4 $1364
JUMPV
LABELV $1363
line 2040
;2040:			else if ( key == K_MOUSE2 )
ADDRFP4 0
INDIRI4
CNSTI4 179
NEI4 $1369
line 2041
;2041:			{
line 2042
;2042:				CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 2043
;2043:				trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 2044
;2044:			}
LABELV $1369
LABELV $1364
line 2045
;2045:		}
LABELV $1361
line 2046
;2046:	}
LABELV $1358
line 2048
;2047:
;2048:	if ( cgs.eventHandling == CGAME_EVENT_EDITRADAR && key == K_MOUSE1 && down )
ADDRGP4 cgs+205016
INDIRI4
CNSTI4 5
NEI4 $1371
ADDRFP4 0
INDIRI4
CNSTI4 178
NEI4 $1371
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1371
line 2049
;2049:	{
line 2050
;2050:		CG_EditRadar_HandleKey( key );
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_EditRadar_HandleKey
CALLV
pop
line 2051
;2051:		return;
ADDRGP4 $1334
JUMPV
LABELV $1371
line 2053
;2052:	}
;2053:	if ( cgs.eventHandling == CGAME_EVENT_EDITQCMD && key == K_MOUSE1 )
ADDRGP4 cgs+205016
INDIRI4
CNSTI4 4
NEI4 $1374
ADDRFP4 0
INDIRI4
CNSTI4 178
NEI4 $1374
line 2054
;2054:	{
line 2055
;2055:		cg_qcmd_posx.integer = cgs.cursorX;
ADDRGP4 cg_qcmd_posx+12
ADDRGP4 cgs+205008
INDIRI4
ASGNI4
line 2056
;2056:		cg_qcmd_posy.integer = cgs.cursorY;
ADDRGP4 cg_qcmd_posy+12
ADDRGP4 cgs+205012
INDIRI4
ASGNI4
line 2057
;2057:		CG_Printf("Set X^2%i^7 Y^2%i^7 as the Top-Left Corner for the Q-Command Menu.\n", cg_qcmd_posx.integer , cg_qcmd_posy.integer );
ADDRGP4 $1381
ARGP4
ADDRGP4 cg_qcmd_posx+12
INDIRI4
ARGI4
ADDRGP4 cg_qcmd_posy+12
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 2058
;2058:		CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 2059
;2059:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 2060
;2060:		trap_Cvar_Set( "cg_qcmd_posx", va("%i",cg_qcmd_posx.integer ) );
ADDRGP4 $123
ARGP4
ADDRGP4 cg_qcmd_posx+12
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1384
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2061
;2061:		trap_Cvar_Set( "cg_qcmd_posy", va("%i",cg_qcmd_posy.integer ) );
ADDRGP4 $123
ARGP4
ADDRGP4 cg_qcmd_posy+12
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1386
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2062
;2062:		return;
ADDRGP4 $1334
JUMPV
LABELV $1374
line 2081
;2063:	}
;2064:/*
;2065:	if ( cg.predictedPlayerState.pm_type == PM_NORMAL || (cg.predictedPlayerState.pm_type == PM_SPECTATOR && cg.showScores == qfalse)) {
;2066:		CG_EventHandling(CGAME_EVENT_NONE);
;2067:    trap_Key_SetCatcher(0);
;2068:		return;
;2069:	}
;2070:*/
;2071:  //if (key == trap_Key_GetKey("teamMenu") || !Display_CaptureItem(cgs.cursorX, cgs.cursorY)) {
;2072:    // if we see this then we should always be visible
;2073:  //  CG_EventHandling(CGAME_EVENT_NONE);
;2074:  //  trap_Key_SetCatcher(0);
;2075:  //}
;2076:
;2077:
;2078:
;2079://	Display_HandleKey(key, down, cgs.cursorX, cgs.cursorY);
;2080:
;2081:	if (Menu_Count() > 0) {
ADDRLP4 0
ADDRGP4 Menu_Count
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1388
line 2082
;2082:		menuDef_t *menu = Menu_GetFocused();
ADDRLP4 8
ADDRGP4 Menu_GetFocused
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 2083
;2083:		if (menu) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1389
line 2084
;2084:			if (key == K_ESCAPE && down && !Menus_AnyFullScreenVisible()) {
ADDRFP4 0
INDIRI4
CNSTI4 27
NEI4 $1392
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1392
ADDRLP4 12
ADDRGP4 Menus_AnyFullScreenVisible
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $1392
line 2085
;2085:				Menus_CloseAll();
ADDRGP4 Menus_CloseAll
CALLV
pop
line 2086
;2086:				CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 2087
;2087:				trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 2088
;2088:			} else {
ADDRGP4 $1389
JUMPV
LABELV $1392
line 2089
;2089:				Menu_HandleKey(menu, key, down );
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 Menu_HandleKey
CALLV
pop
line 2090
;2090:			}
line 2091
;2091:		} else {  
line 2093
;2092:			// dumm....
;2093:		}
line 2094
;2094:	}
ADDRGP4 $1389
JUMPV
LABELV $1388
line 2096
;2095:	else
;2096:	{
line 2097
;2097:		CG_EventHandling(CGAME_EVENT_NONE);
CNSTI4 0
ARGI4
ADDRGP4 CG_EventHandling
CALLV
pop
line 2098
;2098:		trap_Key_SetCatcher(0);
CNSTI4 0
ARGI4
ADDRGP4 trap_Key_SetCatcher
CALLV
pop
line 2099
;2099:	}
LABELV $1389
line 2101
;2100:
;2101:	if (cgs.capturedItem) {
ADDRGP4 cgs+205028
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1394
line 2102
;2102:		cgs.capturedItem = NULL;
ADDRGP4 cgs+205028
CNSTP4 0
ASGNP4
line 2103
;2103:	}	else {
ADDRGP4 $1395
JUMPV
LABELV $1394
line 2104
;2104:		if (key == K_MOUSE2 && down) {
ADDRFP4 0
INDIRI4
CNSTI4 179
NEI4 $1398
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1398
line 2105
;2105:			cgs.capturedItem = Display_CaptureItem(cgs.cursorX, cgs.cursorY);
ADDRGP4 cgs+205008
INDIRI4
ARGI4
ADDRGP4 cgs+205012
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 Display_CaptureItem
CALLP4
ASGNP4
ADDRGP4 cgs+205028
ADDRLP4 4
INDIRP4
ASGNP4
line 2106
;2106:		}
LABELV $1398
line 2107
;2107:	}
LABELV $1395
line 2108
;2108:}
LABELV $1334
endproc CG_KeyEvent 16 12
export CG_ClientNumFromName
proc CG_ClientNumFromName 12 8
line 2110
;2109:
;2110:int CG_ClientNumFromName(const char *p) {
line 2112
;2111:  int i;
;2112:  for (i = 0; i < cgs.maxclients; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1407
JUMPV
LABELV $1404
line 2113
;2113:    if (cgs.clientinfo[i].infoValid && Q_stricmp(cgs.clientinfo[i].name, p) == 0) {
ADDRLP4 4
CNSTI4 2484
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+38664
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1409
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+38664+4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1409
line 2114
;2114:      return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $1403
JUMPV
LABELV $1409
line 2116
;2115:    }
;2116:  }
LABELV $1405
line 2112
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1407
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $1404
line 2117
;2117:  return -1;
CNSTI4 -1
RETI4
LABELV $1403
endproc CG_ClientNumFromName 12 8
export CG_GetTeamColor
proc CG_GetTeamColor 8 0
line 2120
;2118:}
;2119:  
;2120:void CG_GetTeamColor(vec4_t *color) {
line 2121
;2121:  if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_RED) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1415
line 2122
;2122:    (*color)[0] = 1;
ADDRFP4 0
INDIRP4
CNSTF4 1065353216
ASGNF4
line 2123
;2123:    (*color)[3] = .25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 2124
;2124:    (*color)[1] = (*color)[2] = 0;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2125
;2125:  } else if (cg.snap->ps.persistant[PERS_TEAM] == TEAM_BLUE) {
ADDRGP4 $1416
JUMPV
LABELV $1415
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1418
line 2126
;2126:    (*color)[0] = (*color)[1] = 0;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2127
;2127:    (*color)[2] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 2128
;2128:    (*color)[3] = .25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 2129
;2129:  } else {
ADDRGP4 $1419
JUMPV
LABELV $1418
line 2130
;2130:    (*color)[0] = (*color)[2] = 0;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2131
;2131:    (*color)[1] = .17f;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1043207291
ASGNF4
line 2132
;2132:    (*color)[3] = .25f;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1048576000
ASGNF4
line 2133
;2133:	}
LABELV $1419
LABELV $1416
line 2134
;2134:} 
LABELV $1414
endproc CG_GetTeamColor 8 0
import cg_hud2PosY
import cg_hud2PosX
import cg_hud1PosY
import cg_hud1PosX
import cg_hudStyle
import CG_EditRadar_HandleKey
import BG_GetMaxRoundForWeapon
import cgDC
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Display_ExpandMacros
import Init_Display
import String_Report
import String_Init
import String_Alloc
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1386
byte 1 99
byte 1 103
byte 1 95
byte 1 113
byte 1 99
byte 1 109
byte 1 100
byte 1 95
byte 1 112
byte 1 111
byte 1 115
byte 1 121
byte 1 0
align 1
LABELV $1384
byte 1 99
byte 1 103
byte 1 95
byte 1 113
byte 1 99
byte 1 109
byte 1 100
byte 1 95
byte 1 112
byte 1 111
byte 1 115
byte 1 120
byte 1 0
align 1
LABELV $1381
byte 1 83
byte 1 101
byte 1 116
byte 1 32
byte 1 88
byte 1 94
byte 1 50
byte 1 37
byte 1 105
byte 1 94
byte 1 55
byte 1 32
byte 1 89
byte 1 94
byte 1 50
byte 1 37
byte 1 105
byte 1 94
byte 1 55
byte 1 32
byte 1 97
byte 1 115
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 84
byte 1 111
byte 1 112
byte 1 45
byte 1 76
byte 1 101
byte 1 102
byte 1 116
byte 1 32
byte 1 67
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 116
byte 1 104
byte 1 101
byte 1 32
byte 1 81
byte 1 45
byte 1 67
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $1367
byte 1 99
byte 1 103
byte 1 95
byte 1 114
byte 1 97
byte 1 100
byte 1 97
byte 1 114
byte 1 89
byte 1 0
align 1
LABELV $1365
byte 1 99
byte 1 103
byte 1 95
byte 1 114
byte 1 97
byte 1 100
byte 1 97
byte 1 114
byte 1 88
byte 1 0
align 1
LABELV $1355
byte 1 99
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 100
byte 1 50
byte 1 80
byte 1 111
byte 1 115
byte 1 89
byte 1 0
align 1
LABELV $1354
byte 1 99
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 100
byte 1 50
byte 1 80
byte 1 111
byte 1 115
byte 1 88
byte 1 0
align 1
LABELV $1350
byte 1 99
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 100
byte 1 49
byte 1 80
byte 1 111
byte 1 115
byte 1 89
byte 1 0
align 1
LABELV $1349
byte 1 99
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 100
byte 1 49
byte 1 80
byte 1 111
byte 1 115
byte 1 88
byte 1 0
align 1
LABELV $1324
byte 1 105
byte 1 110
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 95
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 111
byte 1 0
align 1
LABELV $1230
byte 1 105
byte 1 110
byte 1 118
byte 1 101
byte 1 110
byte 1 95
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 97
byte 1 114
byte 1 121
byte 1 0
align 1
LABELV $1229
byte 1 105
byte 1 110
byte 1 118
byte 1 101
byte 1 110
byte 1 95
byte 1 112
byte 1 114
byte 1 105
byte 1 109
byte 1 97
byte 1 114
byte 1 121
byte 1 0
align 1
LABELV $1212
byte 1 48
byte 1 0
align 1
LABELV $1197
byte 1 50
byte 1 0
align 1
LABELV $1194
byte 1 49
byte 1 0
align 1
LABELV $1156
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1155
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 52
byte 1 0
align 1
LABELV $1153
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $1151
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 50
byte 1 0
align 1
LABELV $1149
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 49
byte 1 0
align 1
LABELV $1141
byte 1 117
byte 1 105
byte 1 95
byte 1 98
byte 1 111
byte 1 109
byte 1 98
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1139
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 52
byte 1 0
align 1
LABELV $1137
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 51
byte 1 0
align 1
LABELV $1135
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 50
byte 1 0
align 1
LABELV $1133
byte 1 117
byte 1 105
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 49
byte 1 0
align 1
LABELV $1131
byte 1 117
byte 1 105
byte 1 95
byte 1 118
byte 1 105
byte 1 112
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1129
byte 1 117
byte 1 105
byte 1 95
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 119
byte 1 111
byte 1 114
byte 1 108
byte 1 100
byte 1 0
align 1
LABELV $1120
byte 1 70
byte 1 117
byte 1 108
byte 1 108
byte 1 32
byte 1 65
byte 1 117
byte 1 116
byte 1 111
byte 1 0
align 1
LABELV $1119
byte 1 83
byte 1 105
byte 1 110
byte 1 103
byte 1 108
byte 1 101
byte 1 32
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $1107
byte 1 37
byte 1 105
byte 1 115
byte 1 32
byte 1 84
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $1106
byte 1 37
byte 1 105
byte 1 115
byte 1 32
byte 1 82
byte 1 111
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $1085
byte 1 83
byte 1 116
byte 1 97
byte 1 98
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1081
byte 1 71
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 76
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1077
byte 1 66
byte 1 97
byte 1 110
byte 1 100
byte 1 97
byte 1 103
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1069
byte 1 94
byte 1 50
byte 1 89
byte 1 111
byte 1 117
byte 1 39
byte 1 118
byte 1 101
byte 1 32
byte 1 115
byte 1 112
byte 1 111
byte 1 116
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 101
byte 1 110
byte 1 101
byte 1 109
byte 1 121
byte 1 46
byte 1 0
align 1
LABELV $1059
byte 1 94
byte 1 49
byte 1 69
byte 1 110
byte 1 101
byte 1 109
byte 1 121
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $1056
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 55
byte 1 0
align 1
LABELV $1048
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 54
byte 1 0
align 1
LABELV $1040
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 53
byte 1 0
align 1
LABELV $1032
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 52
byte 1 0
align 1
LABELV $1024
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 51
byte 1 0
align 1
LABELV $1016
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 50
byte 1 0
align 1
LABELV $1008
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $1000
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 32
byte 1 48
byte 1 0
align 1
LABELV $991
byte 1 94
byte 1 50
byte 1 89
byte 1 111
byte 1 117
byte 1 39
byte 1 118
byte 1 101
byte 1 32
byte 1 115
byte 1 112
byte 1 111
byte 1 116
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 45
byte 1 109
byte 1 97
byte 1 116
byte 1 101
byte 1 46
byte 1 0
align 1
LABELV $981
byte 1 94
byte 1 50
byte 1 77
byte 1 97
byte 1 116
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $971
byte 1 94
byte 1 50
byte 1 89
byte 1 111
byte 1 117
byte 1 39
byte 1 114
byte 1 101
byte 1 32
byte 1 105
byte 1 110
byte 1 102
byte 1 114
byte 1 111
byte 1 110
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 97
byte 1 32
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 44
byte 1 10
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 115
byte 1 32
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 104
byte 1 111
byte 1 108
byte 1 100
byte 1 32
byte 1 121
byte 1 111
byte 1 117
byte 1 114
byte 1 32
byte 1 85
byte 1 83
byte 1 69
byte 1 32
byte 1 107
byte 1 101
byte 1 121
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 111
byte 1 112
byte 1 101
byte 1 110
byte 1 32
byte 1 105
byte 1 116
byte 1 46
byte 1 0
align 1
LABELV $964
byte 1 94
byte 1 51
byte 1 85
byte 1 115
byte 1 101
byte 1 58
byte 1 94
byte 1 55
byte 1 32
byte 1 79
byte 1 112
byte 1 101
byte 1 110
byte 1 32
byte 1 68
byte 1 111
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $950
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $703
byte 1 48
byte 1 48
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $691
byte 1 48
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $681
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $432
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 79
byte 1 98
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $428
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 0
align 1
LABELV $424
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 32
byte 1 70
byte 1 111
byte 1 114
byte 1 32
byte 1 65
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $415
byte 1 84
byte 1 97
byte 1 110
byte 1 103
byte 1 111
byte 1 115
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 83
byte 1 101
byte 1 97
byte 1 108
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $411
byte 1 83
byte 1 101
byte 1 97
byte 1 108
byte 1 115
byte 1 32
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 32
byte 1 84
byte 1 97
byte 1 110
byte 1 103
byte 1 111
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $404
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 115
byte 1 32
byte 1 97
byte 1 114
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $396
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 99
byte 1 101
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $378
byte 1 37
byte 1 50
byte 1 105
byte 1 0
align 1
LABELV $370
byte 1 70
byte 1 114
byte 1 97
byte 1 103
byte 1 103
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $366
byte 1 0
align 1
LABELV $221
byte 1 45
byte 1 0
align 1
LABELV $207
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $123
byte 1 37
byte 1 105
byte 1 0
