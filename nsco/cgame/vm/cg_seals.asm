bss
align 4
LABELV $85
skip 4
align 1
LABELV $86
skip 256
export vtos
code
proc vtos 12 24
file "../cg_seals.c"
line 19
;1:#include "cg_local.h"  
;2:
;3:
;4://
;5:// all code in this file is property of manfred nerurkar
;6:// no commercial explotation allowed
;7:// you are only allowed to use this code in navy seals: covert operations 
;8:// a quake3 arena modifiation
;9:// defcon-x@ns-co.net
;10:
;11:/*
;12:=============
;13:VectorToString
;14:
;15:This is just a convenience function
;16:for printing vectors
;17:=============
;18:*/
;19:char	*vtos( const vec3_t v ) {
line 25
;20:	static	int		index;
;21:	static	char	str[8][32];
;22:	char	*s;
;23:
;24:	// use an array so that multiple vtos won't collide
;25:	s = str[index];
ADDRLP4 0
ADDRGP4 $85
INDIRI4
CNSTI4 5
LSHI4
ADDRGP4 $86
ADDP4
ASGNP4
line 26
;26:	index = (index + 1)&7;
ADDRLP4 4
ADDRGP4 $85
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 7
BANDI4
ASGNI4
line 28
;27:
;28:	Com_sprintf (s, 32, "(%i %i %i)", (int)v[0], (int)v[1], (int)v[2]);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 $87
ARGP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 30
;29:
;30:	return s;
ADDRLP4 0
INDIRP4
RETP4
LABELV $84
endproc vtos 12 24
export CG_LaunchParticle
proc CG_LaunchParticle 44 8
line 45
;31:}
;32:
;33:
;34:#define	CRATE_PARTICLES	250 
;35:
;36:/*
;37:===================
;38:NSQ3 CG_LaunchParticle
;39:by: dX
;40:date:  6.feb.2000
;41:function: Generates One particle (model) with the given values
;42:===================
;43:*/
;44:
;45:void CG_LaunchParticle( vec3_t origin, vec3_t baseangle, vec3_t dir, qhandle_t hModel, int sound, int bouncefactor ) {
line 49
;46:	localEntity_t	*le;
;47:	refEntity_t		*re;
;48:
;49:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 50
;50:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 52
;51:
;52:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 53
;53:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 54
;54:	le->endTime = le->startTime + cg_particleTime.integer ;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_particleTime+12
INDIRI4
ADDI4
ASGNI4
line 57
;55:
;56:	
;57:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 58
;58:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 59
;59:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 61
;60:
;61:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 62
;62:	VectorCopy( origin, le->pos.trBase ); 
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 63
;63:	le->pos.trTime = cg.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 64
;64: 	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 65
;65:	le->angles.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 5
ASGNI4
line 66
;66:	le->angles.trTime = cg.time + 50; 
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 68
;67:
;68:	le->angles.trBase[0] = baseangle[0];
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ASGNF4
line 69
;69:	le->angles.trBase[1] = baseangle[1];
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 70
;70:	le->angles.trBase[2] = baseangle[2];
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 72
;71:
;72:	le->angles.trDelta[0] = rand() % 150;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 16
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 73
;73:	le->angles.trDelta[1] = rand() % 150;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 20
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 74
;74:	le->angles.trDelta[2] = rand() % 150;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 76
;75:
;76:	re->rotation = rand() % 360;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 28
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 79
;77:	
;78://	VectorCopy( dir, le->pos.trDelta );
;79:	if (dir)
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $93
line 80
;80:		VectorScale( dir, 140 + random()*30, le->pos.trDelta );
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1124859904
ADDF4
MULF4
ASGNF4
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1124859904
ADDF4
MULF4
ASGNF4
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1124859904
ADDF4
MULF4
ASGNF4
LABELV $93
line 82
;81:
;82:	if (bouncefactor == BOUNCE_LIGHT)
ADDRFP4 20
INDIRI4
CNSTI4 1
NEI4 $95
line 83
;83:		le->bounceFactor = 0.2f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
ADDRGP4 $96
JUMPV
LABELV $95
line 84
;84:	else if (bouncefactor == BOUNCE_MEDIUM)
ADDRFP4 20
INDIRI4
CNSTI4 2
NEI4 $97
line 85
;85:		le->bounceFactor = 0.4f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1053609165
ASGNF4
ADDRGP4 $98
JUMPV
LABELV $97
line 86
;86:	else if (bouncefactor == BOUNCE_HEAVY)
ADDRFP4 20
INDIRI4
CNSTI4 3
NEI4 $99
line 87
;87:		le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ASGNF4
LABELV $99
LABELV $98
LABELV $96
line 90
;88: 
;89:
;90:	le->leMarkType = LEMT_NONE; 
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 92
;91:
;92:}
LABELV $88
endproc CG_LaunchParticle 44 8
export CG_BleederTrail
proc CG_BleederTrail 48 48
line 102
;93:
;94:/*
;95:================
;96:NSQ3 CG_BleederTrail
;97:by: dX
;98:date: 14-feb-2k
;99:desc: Mostly the same as CG_Bloodtrail, but with smaller drops
;100:================
;101:*/
;102:void CG_BleederTrail( localEntity_t *le ) {
line 109
;103:	int		t;
;104:	int		t2;
;105:	int		step;
;106:	vec3_t	newOrigin;
;107:	localEntity_t	*blood;
;108:
;109:	if (!cg_blood.integer)
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $102
line 110
;110:		return;
ADDRGP4 $101
JUMPV
LABELV $102
line 112
;111:
;112:	step = 20; // original *=3
ADDRLP4 20
CNSTI4 20
ASGNI4
line 113
;113:	t = step * ( (cg.time - cg.frametime + step ) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 114
;114:	t2 = step * ( cg.time / step );
ADDRLP4 24
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 116
;115:
;116:	for ( ; t <= t2; t += step ) {
ADDRGP4 $111
JUMPV
LABELV $108
line 117
;117:		BG_EvaluateTrajectory( &le->pos, t, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 120
;118: 
;119:
;120:		blood = CG_SmokePuff( newOrigin, vec3_origin, 
ADDRLP4 8
ARGP4
ADDRGP4 vec3_origin
ARGP4
CNSTF4 1073741824
ARGF4
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
CNSTF4 1053609165
ARGF4
CNSTF4 1132068864
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 cgs+205084+220
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 44
INDIRP4
ASGNP4
line 128
;121:					  2,		// radius : original = 20
;122:					  1, 1, 1, 0.4f,	// color
;123:					  250,		// trailTime [²000 = 2scs]
;124:					  cg.time,		// startTime
;125:					  0,0,		// flags
;126:					  cgs.media.bloodExplosionShader );
;127:		// use the optimized version
;128:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 130
;129:		// drop a total of 40 units over its lifetime
;130:		blood->pos.trDelta[2] = 40;
ADDRLP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1109393408
ASGNF4
line 131
;131:	}
LABELV $109
line 116
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $111
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $108
line 132
;132:}
LABELV $101
endproc CG_BleederTrail 48 48
export CG_SparkTrail
proc CG_SparkTrail 72 12
line 142
;133:
;134:/*
;135:================
;136:NSQ3 CG_SparkTrail
;137:by: dX
;138:date: 14-feb-2k
;139:desc: Creates sparks
;140:================
;141:*/
;142:void CG_SparkTrail( localEntity_t *le ) {
line 146
;143:	int num,i;
;144:	vec3_t	origin; 
;145:
;146:	num = (int)(random()*4);
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
CNSTF4 1082130432
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 148
;147:
;148:	for (i=0;i<num;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $119
JUMPV
LABELV $116
line 149
;149:	{
line 153
;150:		vec3_t dir;
;151:		refEntity_t		*re;
;152:
;153:		dir[0] = crandom();
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 154
;154:		dir[1] = crandom();
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24+4
CNSTF4 1073741824
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 155
;155:		dir[2] = crandom();
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24+8
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 157
;156:
;157:		BG_EvaluateTrajectory( &le->pos, cg.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 159
;158: 
;159:		le = CG_AllocLocalEntity();
ADDRLP4 52
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRFP4 0
ADDRLP4 52
INDIRP4
ASGNP4
line 160
;160:		re = &le->refEntity;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 162
;161:
;162:		VectorCopy( origin, le->pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 163
;163:		VectorScale(dir, 150 + crandom()*30, le->pos.trDelta);
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 24
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 24+4
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 24+8
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
line 164
;164:		le->pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 165
;165:		le->pos.trTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 166
;166:		le->leType = LE_SHRAPNEL;
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 167
;167:		le->startTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 168
;168:		le->endTime = cg.time + 150;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 150
ADDI4
ASGNI4
line 169
;169:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 68
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 68
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 170
;170:		le->radius = 1;
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1065353216
ASGNF4
line 171
;171:		le->leFlags = cgs.media.sparkShader;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1080
INDIRI4
ASGNI4
line 172
;172:		le->bounceFactor = 0.7f;	
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1060320051
ASGNF4
line 173
;173:	}
LABELV $117
line 148
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $119
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $116
line 174
;174:}
LABELV $115
endproc CG_SparkTrail 72 12
export CG_CreateBleeder
proc CG_CreateBleeder 28 20
line 186
;175:
;176:/*
;177:=================
;178:NS CreateBleeder
;179:author: dX
;180:date: 11-02-99
;181:function: creates bleeder @ origin (Called over cg_event.c / CG_EntityEvent (...) )
;182:=================
;183:*/
;184:void CG_PlayerBleed( int weapon, int clientNum, int damage, vec3_t origin, vec3_t dir );
;185:
;186:void CG_CreateBleeder( vec3_t origin , int damage, int playerNum ) {
line 193
;187://	localEntity_t	*le;
;188://	refEntity_t		*re;
;189://	int a;
;190:	centity_t	*cent;
;191:	vec3_t dir;
;192:
;193:	cent = &cg_entities[ playerNum ];
ADDRLP4 12
CNSTI4 728
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 195
;194:
;195:	if (!cent)
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $131
line 196
;196:		return;
ADDRGP4 $130
JUMPV
LABELV $131
line 198
;197:
;198:	if (!cg_blood.integer)
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $133
line 199
;199:		return;
ADDRGP4 $130
JUMPV
LABELV $133
line 201
;200:
;201:	AngleVectors( cent->lerpAngles, dir, NULL,NULL );
ADDRLP4 12
INDIRP4
CNSTI4 712
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 16
CNSTP4 0
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 204
;202:
;203:	// add a little random factor
;204:	dir[0] += -0.5 + random();
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 3204448256
ADDF4
ADDF4
ASGNF4
line 205
;205:	dir[1] += -0.5 + random();
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 3204448256
ADDF4
ADDF4
ASGNF4
line 207
;206:
;207:	CG_PlayerBleed( WP_M4, playerNum, damage*2, origin, dir );
CNSTI4 16
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
CNSTI4 1
LSHI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_PlayerBleed
CALLV
pop
line 249
;208:
;209:		// old bloodcode goes here
;210:		/*
;211:	le = CG_AllocLocalEntity();
;212:	re = &le->refEntity;
;213: 
;214:	VectorCopy( origin, le->pos.trBase );
;215://	VectorScale(dir, 125, le->pos.trDelta);
;216:	le->pos.trType = TR_GRAVITY;
;217:	le->pos.trTime = cg.time;
;218:	le->leType = LE_SHRAPNEL;
;219:	le->startTime = cg.time;
;220:	le->endTime = cg.time + 500;
;221:	le->lifeRate = 1.0 / ( le->endTime - le->startTime ); 
;222:
;223:	damage *= 3; 
;224:
;225:	
;226:	if ( damage < 5) {
;227:		le->radius = 0.5  * damage + random(); // base is 0.5 max is 1.5
;228:		le->leFlags = cgs.media.bloodparticleShaders[0];
;229:	}		
;230:	else if ( damage < 10 ) {
;231:			le->radius = 1 * damage + random();   // base is 1 max is 2
;232:			le->leFlags = cgs.media.bloodparticleShaders[1];
;233:	}		
;234:	else if ( damage < 15) {
;235:			le->radius = 1.5  * damage + random(); // base is 1.5 max is 2.5
;236:			le->leFlags = cgs.media.bloodparticleShaders[2];
;237:	}
;238:	else {
;239:		le->radius = 2 * damage + random();   // base is 2 max is 3
;240:		le->leFlags = cgs.media.bloodparticleShaders[3];
;241:	} 
;242: 
;243:	le->radius = re->radius ;
;244:
;245:	le->bounceFactor = 0.1f;
;246:	
;247:	le->leMarkType = LEMT_BLOOD;
;248:	*/
;249:}
LABELV $130
endproc CG_CreateBleeder 28 20
export CG_BloodOnWallMark
proc CG_BloodOnWallMark 32 44
line 261
;250:
;251:
;252:/*
;253:=================
;254:NSQ3 Blood On Wall Mark
;255:author: dX
;256:date: 15-02-99
;257:description: renders Mark on wall 
;258:=================
;259:*/ 
;260:
;261:void CG_BloodOnWallMark( vec3_t end, vec3_t normal, int damage, qboolean brain ) {
line 264
;262:	int i;
;263:	qhandle_t shader;
;264:	int max = 14;
ADDRLP4 4
CNSTI4 14
ASGNI4
line 266
;265:
;266:	if (!cg_blood.integer)
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $138
line 267
;267:		return;
ADDRGP4 $137
JUMPV
LABELV $138
line 269
;268:
;269:	if (damage > 20)
ADDRFP4 8
INDIRI4
CNSTI4 20
LEI4 $141
line 270
;270:		damage = 20;  
ADDRFP4 8
CNSTI4 20
ASGNI4
LABELV $141
line 271
;271:	if (damage <= 6)
ADDRFP4 8
INDIRI4
CNSTI4 6
GTI4 $143
line 272
;272:		max = 4;
ADDRLP4 4
CNSTI4 4
ASGNI4
LABELV $143
line 274
;273: 
;274:	i = random()*max;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 276
;275:
;276:	if (i>max)
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $145
line 277
;277:		i=max;	
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $146
JUMPV
LABELV $145
line 278
;278:	else if (i<0)
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $147
line 279
;279:		i=0; 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $147
LABELV $146
line 281
;280:
;281:	if (damage <= 6)
ADDRFP4 8
INDIRI4
CNSTI4 6
GTI4 $149
line 282
;282:		shader = cgs.media.ns_bloodStainSmall[i]; 
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+384
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $150
JUMPV
LABELV $149
line 284
;283:	else
;284:		shader = cgs.media.ns_bloodStain[i]; 		
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+324
ADDP4
INDIRI4
ASGNI4
LABELV $150
line 290
;285:
;286:#if DEBUG_BUILD
;287:	CG_Printf("Blood Mark On Wall: damage = %i shader# %i brain: %s\n",damage, i, (brain)?"yes":"no");
;288:#endif
;289:  
;290:	if (brain) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $155
line 291
;291:		int i = random()*4;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
CNSTF4 1082130432
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 293
;292:
;293:		if (i>4)
ADDRLP4 16
INDIRI4
CNSTI4 4
LEI4 $157
line 294
;294:			i=random()*4;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
CNSTF4 1082130432
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
LABELV $157
line 296
;295:
;296:		damage = 24 - random()*4;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 8
CNSTF4 1103101952
CNSTF4 1082130432
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 298
;297:
;298:		shader = cgs.media.ns_brainStain[i];
ADDRLP4 8
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+404
ADDP4
INDIRI4
ASGNI4
line 299
;299:	}
LABELV $155
line 301
;300:
;301:	CG_ImpactMark( shader, end, normal, random()*360,1,1,1,0.6 + random()/3,qtrue,damage,qfalse); 
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1058642330
ADDF4
ARGF4
CNSTI4 1
ARGI4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 302
;302:}
LABELV $137
endproc CG_BloodOnWallMark 32 44
export CG_ReloadClipWarning
proc CG_ReloadClipWarning 0 16
line 312
;303:
;304:/*
;305:=================
;306:NSQ3 Reload Empty Clip Warning
;307:author: dX
;308:date: 23-02-2k
;309:descr: prints a reload string and plays a sound
;310:=================
;311:*/
;312:void CG_ReloadClipWarning( void ) {
line 315
;313:
;314:	// play 'click' sound
;315:	if ((cg.DeafTime < cg.time)) {
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $162
line 316
;316:		trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_AUTO, cgs.media.noAmmoSound );
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+205084+1460
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 318
;317:
;318:		CG_Printf(S_COLOR_RED"Reload...\n");
ADDRGP4 $169
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 319
;319:	}
LABELV $162
line 321
;320:	
;321:}
LABELV $161
endproc CG_ReloadClipWarning 0 16
export CG_GetColorForBodyPart
proc CG_GetColorForBodyPart 16 0
line 328
;322:
;323: /*
;324:=================
;325:CG_GetColorForBodyPart
;326:=================
;327:*/
;328:void CG_GetColorForBodyPart( int health, int armor, vec4_t hcolor ) {
line 334
;329:	int		count;
;330:	int		max;
;331:
;332:	// calculate the total points of damage that can
;333:	// be sustained at the current health / armor level
;334:	if ( health <= 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
GTI4 $171
line 335
;335:		VectorClear( hcolor );	// black
ADDRLP4 8
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRF4
ASGNF4
line 336
;336:		hcolor[3] = 1;
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 337
;337:		return;
ADDRGP4 $170
JUMPV
LABELV $171
line 339
;338:	}
;339:	count = armor;
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
line 340
;340:	max = health;
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
line 341
;341:	if ( max < count ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $173
line 342
;342:		count = max;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 343
;343:	}
LABELV $173
line 344
;344:	health += count;
ADDRFP4 0
ADDRFP4 0
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 347
;345:
;346:	// set the color based on health
;347:	hcolor[0] = 1.0;
ADDRFP4 8
INDIRP4
CNSTF4 1065353216
ASGNF4
line 348
;348:	hcolor[3] = 1.0;
ADDRFP4 8
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1065353216
ASGNF4
line 349
;349:	if ( health <= 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
GTI4 $175
line 350
;350:		hcolor[2] = 1.0;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 351
;351:	} else if ( health > 66 ) {
ADDRGP4 $176
JUMPV
LABELV $175
ADDRFP4 0
INDIRI4
CNSTI4 66
LEI4 $177
line 352
;352:		hcolor[2] = 0;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 0
ASGNF4
line 353
;353:	} else {
ADDRGP4 $178
JUMPV
LABELV $177
line 354
;354:		hcolor[2] = ( health - 66 ) / 33.0;
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRI4
CNSTI4 66
SUBI4
CVIF4 4
CNSTF4 1107558400
DIVF4
ASGNF4
line 355
;355:	}
LABELV $178
LABELV $176
line 357
;356:
;357:	if ( health < 30 ) {
ADDRFP4 0
INDIRI4
CNSTI4 30
GEI4 $179
line 358
;358:		hcolor[1] = 1.0;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
line 359
;359:	} else if ( health > 60 ) {
ADDRGP4 $180
JUMPV
LABELV $179
ADDRFP4 0
INDIRI4
CNSTI4 60
LEI4 $181
line 360
;360:		hcolor[1] = 0;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
line 361
;361:	} else {
ADDRGP4 $182
JUMPV
LABELV $181
line 362
;362:		hcolor[1] = ( health - 30 ) / 30.0;
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRI4
CNSTI4 30
SUBI4
CVIF4 4
CNSTF4 1106247680
DIVF4
ASGNF4
line 363
;363:	}
LABELV $182
LABELV $180
line 364
;364:}
LABELV $170
endproc CG_GetColorForBodyPart 16 0
export CG_LockBreak
proc CG_LockBreak 84 24
line 370
;365:void CG_DeleteDirectMark( int entityNum );
;366:
;367:#define LOCKBREAK_PIECES	4
;368:
;369:void CG_LockBreak( centity_t *cent )
;370:{
line 375
;371:	vec3_t  origin;
;372:	vec3_t	dir;
;373:	int i;
;374:
;375:	VectorCopy( cent->currentState.pos.trBase , cent->currentState.origin );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 377
;376:	
;377:	for ( i=0; i < LOCKBREAK_PIECES; i++ )
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $184
line 378
;378:	{
line 380
;379:		vec3_t randangle;
;380:		VectorCopy( cent->currentState.origin , origin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 382
;381:
;382:		randangle[0] = (rand() % 360) - 180;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 383
;383:		randangle[1] = (rand() % 360) - 180;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32+4
ADDRLP4 48
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 384
;384:		randangle[2] = (rand() % 360) - 180;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32+8
ADDRLP4 52
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 386
;385:
;386:		dir[0] = crandom()*100;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 387
;387:		dir[1] = crandom()*100;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 388
;388:		dir[2] = crandom()*100;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 390
;389:
;390:		origin[0] += -0.25 + random()/2;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
CNSTF4 3196059648
ADDF4
ADDF4
ASGNF4
line 391
;391:		origin[1] += -0.25 + random()/2;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
CNSTF4 3196059648
ADDF4
ADDF4
ASGNF4
line 392
;392:		origin[2] += -0.25 + random()/2;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
CNSTF4 3196059648
ADDF4
ADDF4
ASGNF4
line 394
;393:
;394:		VectorNormalize( dir );
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 396
;395:
;396:		CG_LaunchParticle( origin, randangle, dir, cgs.media.metalSmall,SOUND_NONE, 0.2f );
ADDRLP4 0
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 cgs+205084+268
INDIRI4
ARGI4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRGP4 CG_LaunchParticle
CALLV
pop
line 397
;397:	}	
LABELV $185
line 377
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 4
LTI4 $184
line 399
;398:
;399:	VectorCopy( cent->currentState.origin , origin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 401
;400:
;401:	if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, cent->currentState.number, CHAN_AUTO, cgs.media.sfxMetal[ (int)(random()*5) ] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $196
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTF4 1084227584
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1048
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $196
line 402
;402:}
LABELV $183
endproc CG_LockBreak 84 24
export NS_CG_LaunchFuncExplosive
proc NS_CG_LaunchFuncExplosive 160 24
line 406
;403:
;404:
;405:void NS_CG_LaunchFuncExplosive ( centity_t *cent )
;406:{
line 407
;407:	sfxHandle_t		sfx = 0;
ADDRLP4 96
CNSTI4 0
ASGNI4
line 410
;408:	qhandle_t	model;
;409:	vec3_t dir, origin,maxs,mins;
;410:	qboolean	flatobject = qfalse;
ADDRLP4 60
CNSTI4 0
ASGNI4
line 412
;411:	float *xpos, *ypos, miny;  
;412:	int			bouncefactor, best, border, height, width,i, step = 5,random = 0;
ADDRLP4 92
CNSTI4 5
ASGNI4
ADDRLP4 40
CNSTI4 0
ASGNI4
line 413
;413: 	int		spawnflags = cent->currentState.eventParm;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 416
;414:	vec3_t randangle;
;415:
;416:	VectorCopy( cent->currentState.origin , maxs );
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 417
;417:	VectorCopy( cent->currentState.origin2 , mins );
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 420
;418:  
;419:	// find the thinnest axis, which will be the one we expand
;420:	best = 0;
ADDRLP4 44
CNSTI4 0
ASGNI4
line 421
;421:	for ( i = 1 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $203
line 422
;422:		if ( maxs[i] - mins[i] < maxs[best] - mins[best] ) {
ADDRLP4 120
CNSTI4 2
ASGNI4
ADDRLP4 124
ADDRLP4 0
INDIRI4
ADDRLP4 120
INDIRI4
LSHI4
ASGNI4
ADDRLP4 128
ADDRLP4 44
INDIRI4
ADDRLP4 120
INDIRI4
LSHI4
ASGNI4
ADDRLP4 124
INDIRI4
ADDRLP4 48
ADDP4
INDIRF4
ADDRLP4 124
INDIRI4
ADDRLP4 28
ADDP4
INDIRF4
SUBF4
ADDRLP4 128
INDIRI4
ADDRLP4 48
ADDP4
INDIRF4
ADDRLP4 128
INDIRI4
ADDRLP4 28
ADDP4
INDIRF4
SUBF4
GEF4 $207
line 423
;423:			best = i;
ADDRLP4 44
ADDRLP4 0
INDIRI4
ASGNI4
line 424
;424:		}
LABELV $207
line 425
;425:	}
LABELV $204
line 421
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $203
line 427
;426:
;427:	if ( maxs[best] - mins[best] < 6.0f )
ADDRLP4 120
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 120
INDIRI4
ADDRLP4 48
ADDP4
INDIRF4
ADDRLP4 120
INDIRI4
ADDRLP4 28
ADDP4
INDIRF4
SUBF4
CNSTF4 1086324736
GEF4 $209
line 428
;428:	{
line 429
;429:		flatobject = qtrue;
ADDRLP4 60
CNSTI4 1
ASGNI4
line 431
;430://		CG_Printf("flatobject: %i - %f %f %f\n", best, maxs[0]-mins[0], maxs[1]-mins[1], maxs[2]-mins[2] );
;431:	}
LABELV $209
line 432
;432:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 435
;433:
;434:
;435:	VectorSubtract( maxs, mins, origin);  
ADDRLP4 16
ADDRLP4 48
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 48+4
INDIRF4
ADDRLP4 28+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 48+8
INDIRF4
ADDRLP4 28+8
INDIRF4
SUBF4
ASGNF4
line 437
;436:
;437:	height = (int)origin[2]; 
ADDRLP4 112
ADDRLP4 16+8
INDIRF4
CVFI4 4
ASGNI4
line 439
;438:  
;439:	if(origin[0] > origin[1]){
ADDRLP4 16
INDIRF4
ADDRLP4 16+4
INDIRF4
LEF4 $218
line 440
;440:		xpos = &origin[0];
ADDRLP4 84
ADDRLP4 16
ASGNP4
line 441
;441:		ypos = &origin[1];
ADDRLP4 100
ADDRLP4 16+4
ASGNP4
line 443
;442:
;443:		width = (int)origin[1];
ADDRLP4 116
ADDRLP4 16+4
INDIRF4
CVFI4 4
ASGNI4
line 444
;444:		miny = mins[1];
ADDRLP4 104
ADDRLP4 28+4
INDIRF4
ASGNF4
line 446
;445:
;446:		border = *xpos/step;
ADDRLP4 108
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 92
INDIRI4
CVIF4 4
DIVF4
CVFI4 4
ASGNI4
line 448
;447:
;448:		VectorScale(origin, 0.5, origin);
ADDRLP4 124
CNSTF4 1056964608
ASGNF4
ADDRLP4 16
ADDRLP4 124
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 124
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1056964608
ADDRLP4 16+8
INDIRF4
MULF4
ASGNF4
line 449
;449:		VectorAdd(mins, origin, origin);
ADDRLP4 16
ADDRLP4 28
INDIRF4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDF4
ASGNF4
line 451
;450:
;451:		*xpos = mins[0];
ADDRLP4 84
INDIRP4
ADDRLP4 28
INDIRF4
ASGNF4
line 452
;452:	} else {
ADDRGP4 $219
JUMPV
LABELV $218
line 453
;453:		xpos = &origin[1];
ADDRLP4 84
ADDRLP4 16+4
ASGNP4
line 454
;454:		ypos = &origin[0];
ADDRLP4 100
ADDRLP4 16
ASGNP4
line 456
;455:
;456:		width = (int)origin[0];
ADDRLP4 116
ADDRLP4 16
INDIRF4
CVFI4 4
ASGNI4
line 457
;457:		miny = mins[0];
ADDRLP4 104
ADDRLP4 28
INDIRF4
ASGNF4
line 459
;458:
;459:		border = *xpos/step; // xpos/step
ADDRLP4 108
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 92
INDIRI4
CVIF4 4
DIVF4
CVFI4 4
ASGNI4
line 461
;460:
;461:		VectorScale(origin, 0.5, origin);
ADDRLP4 124
CNSTF4 1056964608
ASGNF4
ADDRLP4 16
ADDRLP4 124
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 124
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1056964608
ADDRLP4 16+8
INDIRF4
MULF4
ASGNF4
line 462
;462:		VectorAdd  (mins, origin, origin);
ADDRLP4 16
ADDRLP4 28
INDIRF4
ADDRLP4 16
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDF4
ASGNF4
line 464
;463:
;464:		*xpos = mins[1];
ADDRLP4 84
INDIRP4
ADDRLP4 28+4
INDIRF4
ASGNF4
line 465
;465:	}	
LABELV $219
line 466
;466:	VectorClear(dir);
ADDRLP4 124
CNSTF4 0
ASGNF4
ADDRLP4 68+8
ADDRLP4 124
INDIRF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 124
INDIRF4
ASGNF4
ADDRLP4 68
ADDRLP4 124
INDIRF4
ASGNF4
line 468
;467:
;468:	VectorCopy( cent->currentState.apos.trBase , dir );
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 470
;469: 
;470:	for(i = 0; i < border; i++){ 
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $251
JUMPV
LABELV $248
line 473
;471:
;472:	//	VectorClear(dir);
;473:		if ( flatobject )
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $252
line 474
;474:		{ 
line 475
;475:			randangle[0] = 	randangle[1] = randangle[2] = 0;
ADDRLP4 128
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 128
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 128
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 128
INDIRF4
ASGNF4
line 477
;476:
;477:			switch ( best )
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $258
ADDRLP4 44
INDIRI4
CNSTI4 1
EQI4 $260
ADDRLP4 44
INDIRI4
CNSTI4 2
EQI4 $262
ADDRGP4 $253
JUMPV
line 478
;478:			{
LABELV $258
line 480
;479:			case 0:
;480:				randangle[0] = 80 + random()*20;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1101004800
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1117782016
ADDF4
ASGNF4
line 481
;481:				randangle[2] = -30 + random()*(30*2);
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+8
CNSTF4 1114636288
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3253731328
ADDF4
ASGNF4
line 482
;482:				break;
ADDRGP4 $253
JUMPV
LABELV $260
line 484
;483:			case 1:
;484:				randangle[2] = 80 + random()*20;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+8
CNSTF4 1101004800
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1117782016
ADDF4
ASGNF4
line 485
;485:				randangle[0] = -30 + random()*(30*2);
ADDRLP4 148
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1114636288
ADDRLP4 148
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3253731328
ADDF4
ASGNF4
line 486
;486:				break;
ADDRGP4 $253
JUMPV
LABELV $262
line 488
;487:			case 2:
;488:				randangle[1] = 80 + random()*20;
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+4
CNSTF4 1101004800
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1117782016
ADDF4
ASGNF4
line 489
;489:				randangle[2] = -30 + random()*(30*2);
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+8
CNSTF4 1114636288
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3253731328
ADDF4
ASGNF4
line 490
;490:				break;
line 492
;491:			default:
;492:				break;
line 494
;493:			}
;494:		}
ADDRGP4 $253
JUMPV
LABELV $252
line 496
;495:		else
;496:		{
line 497
;497:			randangle[0] = (rand() % 360) - 180;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 128
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 498
;498:			randangle[1] = (rand() % 360) - 180;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+4
ADDRLP4 132
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 499
;499:			randangle[2] = (rand() % 360) - 180;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+8
ADDRLP4 136
INDIRI4
CNSTI4 360
MODI4
CNSTI4 180
SUBI4
CVIF4 4
ASGNF4
line 500
;500:		}
LABELV $253
line 508
;501:
;502:	//	dir[0] = (rand() % 360) - 180;
;503:	//	dir[1] = (rand() % 360) - 180;
;504:	//	dir[2] = (rand() % 360) - 180;
;505:
;506://		VectorNormalize( dir );
;507:
;508:		*xpos += step;
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 92
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 509
;509:		*ypos = miny + rand()%width;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRF4
ADDRLP4 132
INDIRI4
ADDRLP4 116
INDIRI4
MODI4
CVIF4 4
ADDF4
ASGNF4
line 510
;510:		origin[2] = mins[2] + rand()%height;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 136
INDIRI4
ADDRLP4 112
INDIRI4
MODI4
CVIF4 4
ADDF4
ASGNF4
line 512
;511:	
;512:		if(spawnflags & 1) {
ADDRLP4 64
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $269
line 513
;513:			sfx = cgs.media.sfxWood[ (int)(random()*3) ];
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
CNSTF4 1077936128
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1016
ADDP4
INDIRI4
ASGNI4
line 514
;514:			random = (int)(random()*2);
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 516
;515:
;516:			if ( flatobject && random > 1 )
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $273
ADDRLP4 40
INDIRI4
CNSTI4 1
LEI4 $273
line 517
;517:				random = 1;
ADDRLP4 40
CNSTI4 1
ASGNI4
LABELV $273
line 518
;518:			switch (random ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $277
ADDRLP4 40
INDIRI4
CNSTI4 1
EQI4 $280
ADDRLP4 40
INDIRI4
CNSTI4 2
EQI4 $283
ADDRGP4 $275
JUMPV
LABELV $277
line 520
;519:				case 0:
;520:					model = cgs.media.woodSmall;
ADDRLP4 80
ADDRGP4 cgs+205084+244
INDIRI4
ASGNI4
line 521
;521:					bouncefactor = BOUNCE_MEDIUM;
ADDRLP4 88
CNSTI4 2
ASGNI4
line 522
;522:					break;
ADDRGP4 $270
JUMPV
LABELV $280
line 524
;523:				case 1:
;524:					model = cgs.media.woodMedium;
ADDRLP4 80
ADDRGP4 cgs+205084+248
INDIRI4
ASGNI4
line 525
;525:					bouncefactor = BOUNCE_LIGHT;
ADDRLP4 88
CNSTI4 1
ASGNI4
line 526
;526:					break;
ADDRGP4 $270
JUMPV
LABELV $283
LABELV $275
line 529
;527:				case 2:
;528:				default:
;529:					model = cgs.media.woodBig;
ADDRLP4 80
ADDRGP4 cgs+205084+252
INDIRI4
ASGNI4
line 530
;530:					bouncefactor = BOUNCE_LIGHT;
ADDRLP4 88
CNSTI4 1
ASGNI4
line 531
;531:					break;
line 534
;532:			}
;533:			// fire_woodgib(self, origin, dir);
;534:		} else if(spawnflags & 2) {
ADDRGP4 $270
JUMPV
LABELV $269
ADDRLP4 64
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $286
line 535
;535:			sfx = cgs.media.sfxMetal[ (int)(random()*3) ];
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
CNSTF4 1077936128
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1048
ADDP4
INDIRI4
ASGNI4
line 536
;536:			random = (int)(random()*2);
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 538
;537:
;538:			if ( flatobject && random > 1)
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $290
ADDRLP4 40
INDIRI4
CNSTI4 1
LEI4 $290
line 539
;539:				random = 1;
ADDRLP4 40
CNSTI4 1
ASGNI4
LABELV $290
line 541
;540:
;541:			switch ( random ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $294
ADDRLP4 40
INDIRI4
CNSTI4 1
EQI4 $297
ADDRLP4 40
INDIRI4
CNSTI4 2
EQI4 $300
ADDRGP4 $292
JUMPV
LABELV $294
line 543
;542:				case 0:
;543:					model = cgs.media.metalSmall;
ADDRLP4 80
ADDRGP4 cgs+205084+268
INDIRI4
ASGNI4
line 544
;544:					bouncefactor = BOUNCE_MEDIUM;
ADDRLP4 88
CNSTI4 2
ASGNI4
line 545
;545:					break;
ADDRGP4 $287
JUMPV
LABELV $297
line 547
;546:				case 1:
;547:					model = cgs.media.metalMedium;
ADDRLP4 80
ADDRGP4 cgs+205084+272
INDIRI4
ASGNI4
line 548
;548:					bouncefactor = BOUNCE_LIGHT;
ADDRLP4 88
CNSTI4 1
ASGNI4
line 549
;549:					break;
ADDRGP4 $287
JUMPV
LABELV $300
LABELV $292
line 552
;550:				case 2:
;551:				default:
;552:					model = cgs.media.metalBig;
ADDRLP4 80
ADDRGP4 cgs+205084+276
INDIRI4
ASGNI4
line 553
;553:					bouncefactor = BOUNCE_LIGHT;
ADDRLP4 88
CNSTI4 1
ASGNI4
line 554
;554:					break;
line 557
;555:			}
;556:			//fire_metalgib(self, origin, dir);
;557:		}  else if(spawnflags & 4) {
ADDRGP4 $287
JUMPV
LABELV $286
ADDRLP4 64
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $303
line 558
;558:			sfx = cgs.media.sfxMetal[ (int)(random()*3) ];
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
CNSTF4 1077936128
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1048
ADDP4
INDIRI4
ASGNI4
line 559
;559:			random = (int)(random()*2);
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 561
;560:
;561:			if ( flatobject && random > 1 )
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $307
ADDRLP4 40
INDIRI4
CNSTI4 1
LEI4 $307
line 562
;562:				random = 1;
ADDRLP4 40
CNSTI4 1
ASGNI4
LABELV $307
line 564
;563:
;564:			switch ( random ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $311
ADDRLP4 40
INDIRI4
CNSTI4 1
EQI4 $314
ADDRLP4 40
INDIRI4
CNSTI4 2
EQI4 $317
ADDRGP4 $309
JUMPV
LABELV $311
line 566
;565:				case 0:
;566:					model = cgs.media.stoneSmall;
ADDRLP4 80
ADDRGP4 cgs+205084+280
INDIRI4
ASGNI4
line 567
;567:					bouncefactor = 0;
ADDRLP4 88
CNSTI4 0
ASGNI4
line 568
;568:					break;
ADDRGP4 $304
JUMPV
LABELV $314
line 570
;569:				case 1:
;570:					model = cgs.media.stoneMedium;
ADDRLP4 80
ADDRGP4 cgs+205084+284
INDIRI4
ASGNI4
line 571
;571:					bouncefactor = 0;
ADDRLP4 88
CNSTI4 0
ASGNI4
line 572
;572:					break;
ADDRGP4 $304
JUMPV
LABELV $317
LABELV $309
line 575
;573:				case 2:
;574:				default:
;575:					model = cgs.media.stoneBig;
ADDRLP4 80
ADDRGP4 cgs+205084+288
INDIRI4
ASGNI4
line 576
;576:					bouncefactor = 0;
ADDRLP4 88
CNSTI4 0
ASGNI4
line 577
;577:					break;
line 580
;578:			}
;579:			//fire_metalgib(self, origin, dir);
;580:		}
ADDRGP4 $304
JUMPV
LABELV $303
line 581
;581:		else{
line 582
;582:			sfx = cgs.media.sfxGlass[ (int)(random()*3)];
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
CNSTF4 1077936128
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1032
ADDP4
INDIRI4
ASGNI4
line 583
;583:			random = (int)(random()*2);
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 585
;584:
;585:			if ( flatobject && random > 1 )
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $322
ADDRLP4 40
INDIRI4
CNSTI4 1
LEI4 $322
line 586
;586:				random = 1;
ADDRLP4 40
CNSTI4 1
ASGNI4
LABELV $322
line 588
;587:
;588:			switch ( random ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $326
ADDRLP4 40
INDIRI4
CNSTI4 1
EQI4 $329
ADDRLP4 40
INDIRI4
CNSTI4 2
EQI4 $332
ADDRGP4 $324
JUMPV
LABELV $326
line 590
;589:				case 0:
;590:					model = cgs.media.glassSmall;
ADDRLP4 80
ADDRGP4 cgs+205084+256
INDIRI4
ASGNI4
line 591
;591:					bouncefactor = BOUNCE_MEDIUM;
ADDRLP4 88
CNSTI4 2
ASGNI4
line 592
;592:					break;
ADDRGP4 $325
JUMPV
LABELV $329
line 594
;593:				case 1:
;594:					model = cgs.media.glassMedium;
ADDRLP4 80
ADDRGP4 cgs+205084+260
INDIRI4
ASGNI4
line 595
;595:					bouncefactor = BOUNCE_MEDIUM;
ADDRLP4 88
CNSTI4 2
ASGNI4
line 596
;596:					break;
ADDRGP4 $325
JUMPV
LABELV $332
LABELV $324
line 599
;597:				case 2:
;598:				default:
;599:					model = cgs.media.glassBig;
ADDRLP4 80
ADDRGP4 cgs+205084+264
INDIRI4
ASGNI4
line 600
;600:					bouncefactor = BOUNCE_LIGHT;
ADDRLP4 88
CNSTI4 1
ASGNI4
line 601
;601:					break;
LABELV $325
line 603
;602:			}
;603:		} 
LABELV $304
LABELV $287
LABELV $270
line 605
;604:
;605:			CG_LaunchParticle( origin, randangle, dir, model,SOUND_NONE, bouncefactor );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 80
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 88
INDIRI4
ARGI4
ADDRGP4 CG_LaunchParticle
CALLV
pop
line 608
;606:		//	CG_Printf("spawned particle @ %s\n", vtos(origin ) );
;607:		
;608:		}	
LABELV $249
line 470
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $251
ADDRLP4 0
INDIRI4
ADDRLP4 108
INDIRI4
LTI4 $248
line 611
;609: 
;610:		
;611:	if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $335
ADDRLP4 16
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $335
line 612
;612:}
LABELV $202
endproc NS_CG_LaunchFuncExplosive 160 24
export CG_ForceCvar
proc CG_ForceCvar 136 12
line 615
;613: 
;614:void CG_ForceCvar( const char *cvar, int value )
;615:{
line 618
;616:	char var[128];
;617:
;618:	trap_Cvar_VariableStringBuffer( cvar, var , sizeof( var ) );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 620
;619:
;620:	if( atoi(var) != value )
ADDRLP4 0
ARGP4
ADDRLP4 128
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
ADDRFP4 4
INDIRI4
EQI4 $340
line 621
;621:		trap_Cvar_Set( cvar, va("%i",value) ); 
ADDRGP4 $342
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 132
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
LABELV $340
line 622
;622:}
LABELV $339
endproc CG_ForceCvar 136 12
export CG_ButtonPushed
proc CG_ButtonPushed 32 8
line 625
;623:
;624:qboolean CG_ButtonPushed(int button)
;625:{
line 629
;626:	usercmd_t	cmd;
;627:	int			cmdNum;
;628:
;629:	cmdNum = trap_GetCurrentCmdNumber();
ADDRLP4 28
ADDRGP4 trap_GetCurrentCmdNumber
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 28
INDIRI4
ASGNI4
line 630
;630:	trap_GetUserCmd( cmdNum, &cmd );
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_GetUserCmd
CALLI4
pop
line 633
;631:
;632: 
;633:	if (cmd.buttons & button)
ADDRLP4 0+16
INDIRI4
ADDRFP4 0
INDIRI4
BANDI4
CNSTI4 0
EQI4 $344
line 634
;634:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $343
JUMPV
LABELV $344
line 636
;635:
;636:	return qfalse; 
CNSTI4 0
RETI4
LABELV $343
endproc CG_ButtonPushed 32 8
export CG_LastButtonPushed
proc CG_LastButtonPushed 32 8
line 639
;637:}
;638:qboolean CG_LastButtonPushed(int button)
;639:{
line 643
;640:	usercmd_t	cmd;
;641:	int			cmdNum;
;642:
;643:	cmdNum = trap_GetCurrentCmdNumber();
ADDRLP4 28
ADDRGP4 trap_GetCurrentCmdNumber
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 28
INDIRI4
ASGNI4
line 644
;644:	trap_GetUserCmd( cmdNum-1, &cmd );
ADDRLP4 24
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_GetUserCmd
CALLI4
pop
line 647
;645:
;646: 
;647:	if (cmd.buttons & button)
ADDRLP4 0+16
INDIRI4
ADDRFP4 0
INDIRI4
BANDI4
CNSTI4 0
EQI4 $348
line 648
;648:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $347
JUMPV
LABELV $348
line 650
;649:
;650:	return qfalse; 
CNSTI4 0
RETI4
LABELV $347
endproc CG_LastButtonPushed 32 8
export CG_FollowCycle
proc CG_FollowCycle 12 0
line 652
;651:}
;652:int CG_FollowCycle( int dir ) {
line 656
;653:	int		clientnum;
;654:	int		original;
;655:
;656:	if ( dir != 1 && dir != -1 ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 1
EQI4 $352
ADDRLP4 8
INDIRI4
CNSTI4 -1
EQI4 $352
line 657
;657:		return cg.cameraFollowNumber;
ADDRGP4 cg+116660
INDIRI4
RETI4
ADDRGP4 $351
JUMPV
LABELV $352
line 660
;658:	}
;659:
;660:	clientnum = cg.cameraFollowNumber;
ADDRLP4 0
ADDRGP4 cg+116660
INDIRI4
ASGNI4
line 661
;661:	original = clientnum;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $356
line 662
;662:	do {
line 663
;663:		clientnum += dir;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRI4
ADDI4
ASGNI4
line 664
;664:		if ( clientnum >= cgs.maxclients ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $359
line 665
;665:			clientnum = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 666
;666:		}
LABELV $359
line 667
;667:		if ( clientnum < 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $362
line 668
;668:			clientnum = cgs.maxclients - 1;
ADDRLP4 0
ADDRGP4 cgs+31476
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 669
;669:		}
LABELV $362
line 678
;670:
;671:		
;672:		// how can we detect dead players?
;673:		/*
;674:		if ( cg_entities[clientnum].currentState.eFlags & EF_DEAD )
;675:			continue;*/
;676:
;677:		// can only follow connected clients
;678:		if ( cg_entities[clientnum].currentState.eType != ET_PLAYER ) {
CNSTI4 728
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $365
line 679
;679:			continue;
ADDRGP4 $357
JUMPV
LABELV $365
line 683
;680:		} 
;681:
;682:		// this is good, we can use it
;683:		return clientnum; 
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $351
JUMPV
LABELV $357
line 684
;684:	} while ( clientnum != original );
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $356
line 686
;685:
;686:	return original;
ADDRLP4 4
INDIRI4
RETI4
LABELV $351
endproc CG_FollowCycle 12 0
export CG_GoChase
proc CG_GoChase 8 4
line 692
;687:	// leave it where it was
;688:}
;689:
;690:
;691:int CG_GoChase( void )
;692:{
line 696
;693:	int chasetarget;
;694: 
;695:
;696:	cg.cameraFollowNumber = cg.snap->ps.clientNum;
ADDRGP4 cg+116660
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 698
;697:
;698:	chasetarget = CG_FollowCycle(1);
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_FollowCycle
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 700
;699:	
;700:	if (chasetarget == cg.snap->ps.clientNum )
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $371
line 701
;701:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $368
JUMPV
LABELV $371
line 703
;702:
;703:	if ( cg.cameraActive ) {
ADDRGP4 cg+116652
INDIRI4
CNSTI4 0
EQI4 $374
line 704
;704:		cg.cameraActive = qfalse;
ADDRGP4 cg+116652
CNSTI4 0
ASGNI4
line 705
;705:		CG_Printf("Camera Disabled.\n");
ADDRGP4 $378
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 706
;706:	}
ADDRGP4 $375
JUMPV
LABELV $374
line 707
;707:	else {
line 708
;708:		cg.cameraActive = qtrue;
ADDRGP4 cg+116652
CNSTI4 1
ASGNI4
line 709
;709:		CG_Printf("Camera Enabled.\n");
ADDRGP4 $380
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 710
;710:	}
LABELV $375
line 712
;711:
;712:	cg.cameraFollowNumber = chasetarget;
ADDRGP4 cg+116660
ADDRLP4 0
INDIRI4
ASGNI4
line 713
;713:	cg.cameraZoom = 35.0f;
ADDRGP4 cg+116668
CNSTF4 1108082688
ASGNF4
line 714
;714:	cg.cameraUsed = qfalse;
ADDRGP4 cg+116672
CNSTI4 0
ASGNI4
line 715
;715:	cg.cameraRemainTime = cg.time + 300000; // remain 5m at the chase
ADDRGP4 cg+116656
ADDRGP4 cg+107604
INDIRI4
CNSTI4 300000
ADDI4
ASGNI4
line 717
;716:
;717:	return 0;
CNSTI4 0
RETI4
LABELV $368
endproc CG_GoChase 8 4
export CG_QCmd_HandleMenu
proc CG_QCmd_HandleMenu 232 32
line 733
;718:	
;719:}
;720:
;721:/*
;722:===============
;723:Qcmd Showmenu
;724:
;725:shows the menu, saves 1-0 key bindings to a buffer and binds these keys new
;726:===============
;727:*/
;728:#include "../ui/ui_shared.h"
;729:
;730:extern vmCvar_t	cg_qcmd_close;
;731:
;732:void CG_QCmd_HandleMenu( void )
;733:{
line 734
;734:	int		x		= cg_qcmd_posx.integer, 
ADDRLP4 156
ADDRGP4 cg_qcmd_posx+12
INDIRI4
ASGNI4
line 735
;735:			y		= cg_qcmd_posy.integer;
ADDRLP4 160
ADDRGP4 cg_qcmd_posy+12
INDIRI4
ASGNI4
line 736
;736:	float	size	= cg_qcmd_size.value;
ADDRLP4 132
ADDRGP4 cg_qcmd_size+8
INDIRF4
ASGNF4
line 743
;737:	int		cur_y;
;738:	vec4_t	color;
;739:	int		i;
;740:	char	command[128];
;741:
;742:
;743:	if ( trap_Key_IsDown( '1' ) ) {
CNSTI4 49
ARGI4
ADDRLP4 164
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
EQI4 $399
line 744
;744:		trap_SendConsoleCommand( va("%s ; %s",cg_qcmd_cmd1.string, cg_qcmd_close.string ) );
ADDRGP4 $401
ARGP4
ADDRGP4 cg_qcmd_cmd1+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 168
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 745
;745:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $399
line 747
;746:	}
;747:	else if ( trap_Key_IsDown( '2' ) ) {
CNSTI4 50
ARGI4
ADDRLP4 168
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $405
line 748
;748:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd2.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd2+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 172
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 749
;749:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $405
line 751
;750:	}
;751:	else if ( trap_Key_IsDown( '3' ) ) {
CNSTI4 51
ARGI4
ADDRLP4 172
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
EQI4 $411
line 752
;752:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd3.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd3+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 176
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 753
;753:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $411
line 755
;754:	}
;755:	else if ( trap_Key_IsDown( '4' ) ) {
CNSTI4 52
ARGI4
ADDRLP4 176
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
EQI4 $416
line 756
;756:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd4.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd4+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 180
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 180
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 757
;757:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $416
line 759
;758:	}
;759:	else if ( trap_Key_IsDown( '5' ) ) {
CNSTI4 53
ARGI4
ADDRLP4 180
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
EQI4 $421
line 760
;760:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd5.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd5+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 184
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 761
;761:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $421
line 763
;762:	}
;763:	else if ( trap_Key_IsDown( '6' ) ) {
CNSTI4 54
ARGI4
ADDRLP4 184
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $426
line 764
;764:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd6.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd6+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 188
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 765
;765:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $426
line 767
;766:	}
;767:	else if ( trap_Key_IsDown( '7' ) ) {
CNSTI4 55
ARGI4
ADDRLP4 188
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
EQI4 $431
line 768
;768:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd7.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd7+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 192
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 769
;769:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $431
line 771
;770:	}
;771:	else if ( trap_Key_IsDown( '8' ) ) {	
CNSTI4 56
ARGI4
ADDRLP4 192
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $436
line 772
;772:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd8.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd8+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 196
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 773
;773:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $436
line 775
;774:	}
;775:	else if ( trap_Key_IsDown( '9' ) ) {
CNSTI4 57
ARGI4
ADDRLP4 196
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
EQI4 $441
line 776
;776:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd9.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd9+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 200
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 777
;777:		cg.viewCmd = qfalse; return;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
ADDRGP4 $395
JUMPV
LABELV $441
line 779
;778:	}
;779:	else if ( trap_Key_IsDown( '0' ) ) {
CNSTI4 48
ARGI4
ADDRLP4 200
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
EQI4 $446
line 780
;780:		trap_SendConsoleCommand( va("%s ; %s ;", cg_qcmd_cmd0.string, cg_qcmd_close.string ) );
ADDRGP4 $407
ARGP4
ADDRGP4 cg_qcmd_cmd0+16
ARGP4
ADDRGP4 cg_qcmd_close+16
ARGP4
ADDRLP4 204
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 204
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 781
;781:		cg.viewCmd = qfalse;
ADDRGP4 cg+171500
CNSTI4 0
ASGNI4
line 782
;782:		return;
ADDRGP4 $395
JUMPV
LABELV $446
line 785
;783:	}
;784:	
;785:	cur_y = y;
ADDRLP4 136
ADDRLP4 160
INDIRI4
ASGNI4
line 787
;786:
;787:	color[0] = cg_qcmd_r.value;
ADDRLP4 140
ADDRGP4 cg_qcmd_r+8
INDIRF4
ASGNF4
line 788
;788:	color[1] = cg_qcmd_g.value;
ADDRLP4 140+4
ADDRGP4 cg_qcmd_g+8
INDIRF4
ASGNF4
line 789
;789:	color[2] = cg_qcmd_b.value;
ADDRLP4 140+8
ADDRGP4 cg_qcmd_b+8
INDIRF4
ASGNF4
line 790
;790:	color[3] = cg_qcmd_a.value;
ADDRLP4 140+12
ADDRGP4 cg_qcmd_a+8
INDIRF4
ASGNF4
line 792
;791: 
;792:	for (i=0;i<10;i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $458
line 793
;793:	{
line 794
;794:		trap_Cvar_VariableStringBuffer(va("cg_qcmd_dscr%i",(i==9)?0:i+1), command,sizeof(command) );
ADDRGP4 $462
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $464
ADDRLP4 204
CNSTI4 0
ASGNI4
ADDRGP4 $465
JUMPV
LABELV $464
ADDRLP4 204
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $465
ADDRLP4 204
INDIRI4
ARGI4
ADDRLP4 208
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 796
;795:
;796:		if ( strlen ( command ) <= 0 )
ADDRLP4 4
ARGP4
ADDRLP4 212
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
GTI4 $466
line 797
;797:		{
line 798
;798:			if ( i == 9 )
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $459
line 799
;799:				CG_Text_Paint( x, cur_y, size, color, va("%i. Quit", (i==9)?0:i+1 ) , 0,0, 0 );//ITEM_TEXTSTYLE_OUTLINED);				
ADDRGP4 $470
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $472
ADDRLP4 216
CNSTI4 0
ASGNI4
ADDRGP4 $473
JUMPV
LABELV $472
ADDRLP4 216
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $473
ADDRLP4 216
INDIRI4
ARGI4
ADDRLP4 220
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 156
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 136
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 140
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 224
CNSTI4 0
ASGNI4
ADDRLP4 224
INDIRI4
ARGI4
ADDRLP4 224
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 801
;800:
;801:			continue;
ADDRGP4 $459
JUMPV
LABELV $466
line 804
;802:		}
;803:
;804:		CG_Text_Paint( x, cur_y, size, color, va("%i. %s", (i==9)?0:i+1, command) , 0,0, 0 );//ITEM_TEXTSTYLE_OUTLINED);
ADDRGP4 $474
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $476
ADDRLP4 216
CNSTI4 0
ASGNI4
ADDRGP4 $477
JUMPV
LABELV $476
ADDRLP4 216
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $477
ADDRLP4 216
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRLP4 220
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 156
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 136
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 140
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 224
CNSTI4 0
ASGNI4
ADDRLP4 224
INDIRI4
ARGI4
ADDRLP4 224
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint
CALLV
pop
line 806
;805:
;806:		cur_y += CG_Text_Height("A", size, 0 ) + 2;
ADDRGP4 $478
ARGP4
ADDRLP4 132
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 CG_Text_Height
CALLI4
ASGNI4
ADDRLP4 136
ADDRLP4 136
INDIRI4
ADDRLP4 228
INDIRI4
CNSTI4 2
ADDI4
ADDI4
ASGNI4
line 807
;807:	}
LABELV $459
line 792
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $458
line 809
;808:	
;809:}
LABELV $395
endproc CG_QCmd_HandleMenu 232 32
export CG_DrawPic2
proc CG_DrawPic2 8 36
line 823
;810:
;811:extern	vmCvar_t	cg_timerPosY;
;812:extern	vmCvar_t	cg_timerPosX;
;813:extern	vmCvar_t	cg_hudScale;
;814:
;815:/*
;816:===============
;817:Draw Pic2
;818:
;819:another version of cg_drawpic
;820:===============
;821:*/
;822:void CG_DrawPic2( float x, float y, float width, float height, qhandle_t hShader ) 
;823:{ 
line 825
;824://	if ( cgs.glconfig.vidWidth < 1024 )
;825:	{
line 826
;826:		x = x * ( (float)cgs.glconfig.vidWidth/1024.0f ) * cg_hudScale.value;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRGP4 cgs+20100+11304
INDIRI4
CVIF4 4
CNSTF4 1149239296
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 827
;827:		y = y * ( (float)cgs.glconfig.vidHeight/768.0f ) * cg_hudScale.value;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRGP4 cgs+20100+11308
INDIRI4
CVIF4 4
CNSTF4 1145044992
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 828
;828:		width = width * ( (float)cgs.glconfig.vidWidth/1024.0f ) * cg_hudScale.value;
ADDRFP4 8
ADDRFP4 8
INDIRF4
ADDRGP4 cgs+20100+11304
INDIRI4
CVIF4 4
CNSTF4 1149239296
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 829
;829:		height = height * ( (float)cgs.glconfig.vidHeight/768.0f ) * cg_hudScale.value; 
ADDRFP4 12
ADDRFP4 12
INDIRF4
ADDRGP4 cgs+20100+11308
INDIRI4
CVIF4 4
CNSTF4 1145044992
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 830
;830:	}
line 832
;831:
;832:	trap_R_DrawStretchPic( x, y, width, height, 0, 0, 1, 1, hShader );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 833
;833:}
LABELV $479
endproc CG_DrawPic2 8 36
export CG_DrawPic3
proc CG_DrawPic3 8 36
line 861
;834:/*
;835:===============
;836:Draw Pic3
;837:
;838:another version of cg_drawpic
;839:
;840:just because demo is too dumb to do shit right.
;841:
;842:angegebene X coordinate ist VON rechts!
;843:	gesamte breite des imaginären rechtecks - width - angegebenes X = richtiges X
;844:
;845:höhe eines BACKGROUND STREIFEN mit zwischenabstand ist (24+2)=26
;846:
;847:Schiebt sich also ein streifen nach oben, dann wird so gerechnet:
;848:	angebenes Y - (anzahl der verschiebungen nach oben x 26) = neues Y
;849:
;850:	read this and accept his dumbness.he's doing it, but he's never doing it right.
;851:	omg he sucks badly.
;852:
;853:	basturd
;854:
;855:	instead of going from left to right it's going from fucking right to fucking left
;856:	things like this are just fucking not necessary.
;857:
;858:===============
;859:*/
;860:void CG_DrawPic3( float x, float y, float width, float height, qhandle_t hShader ) 
;861:{ 
line 863
;862:
;863:	x = 1024 - width - x;
ADDRFP4 0
CNSTF4 1149239296
ADDRFP4 8
INDIRF4
SUBF4
ADDRFP4 0
INDIRF4
SUBF4
ASGNF4
line 867
;864://	y = 768 - height - y;
;865:
;866://	if ( cgs.glconfig.vidWidth < 1024 )
;867:	{
line 868
;868:		x = x * ( (float)cgs.glconfig.vidWidth/1024.0f );// * cg_hudScale.value;
ADDRFP4 0
ADDRFP4 0
INDIRF4
ADDRGP4 cgs+20100+11304
INDIRI4
CVIF4 4
CNSTF4 1149239296
DIVF4
MULF4
ASGNF4
line 869
;869:		y = y * ( (float)cgs.glconfig.vidHeight/768.0f );// * cg_hudScale.value;
ADDRFP4 4
ADDRFP4 4
INDIRF4
ADDRGP4 cgs+20100+11308
INDIRI4
CVIF4 4
CNSTF4 1145044992
DIVF4
MULF4
ASGNF4
line 870
;870:		width = width * ( (float)cgs.glconfig.vidWidth/1024.0f ) * cg_hudScale.value;
ADDRFP4 8
ADDRFP4 8
INDIRF4
ADDRGP4 cgs+20100+11304
INDIRI4
CVIF4 4
CNSTF4 1149239296
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 871
;871:		height = height * ( (float)cgs.glconfig.vidHeight/768.0f ) * cg_hudScale.value; 
ADDRFP4 12
ADDRFP4 12
INDIRF4
ADDRGP4 cgs+20100+11308
INDIRI4
CVIF4 4
CNSTF4 1145044992
DIVF4
MULF4
ADDRGP4 cg_hudScale+8
INDIRF4
MULF4
ASGNF4
line 872
;872:	}
line 875
;873:
;874:
;875:	trap_R_DrawStretchPic( x, y, width, height, 0, 0, 1, 1, hShader );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 4
INDIRF4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRFP4 12
INDIRF4
ARGF4
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 876
;876:}
LABELV $492
endproc CG_DrawPic3 8 36
proc CG_DrawSmallField 64 20
line 881
;877:
;878:#define SMALLDIGIT_WIDTH	12
;879:#define SMALLDIGIT_HEIGHT	20
;880:
;881:static void CG_DrawSmallField (int x, int y, int width, int value) {
line 886
;882:	char	num[16], *ptr;
;883:	int		l;
;884:	int		frame;
;885:
;886:	if ( width < 1 ) {
ADDRFP4 8
INDIRI4
CNSTI4 1
GEI4 $504
line 887
;887:		return;
ADDRGP4 $503
JUMPV
LABELV $504
line 891
;888:	}
;889:
;890:	// draw number string
;891:	if ( width > 5 ) {
ADDRFP4 8
INDIRI4
CNSTI4 5
LEI4 $506
line 892
;892:		width = 5;
ADDRFP4 8
CNSTI4 5
ASGNI4
line 893
;893:	}
LABELV $506
line 895
;894:
;895:	if ( value < 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $508
line 896
;896:		value = 0;
ADDRFP4 12
CNSTI4 0
ASGNI4
LABELV $508
line 898
;897:
;898:	switch ( width ) {
ADDRLP4 28
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 1
LTI4 $510
ADDRLP4 28
INDIRI4
CNSTI4 4
GTI4 $510
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $555-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $555
address $512
address $519
address $529
address $541
code
LABELV $512
line 900
;899:	case 1:
;900:		value = value > 9 ? 9 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9
LEI4 $514
ADDRLP4 32
CNSTI4 9
ASGNI4
ADDRGP4 $515
JUMPV
LABELV $514
ADDRLP4 32
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $515
ADDRFP4 12
ADDRLP4 32
INDIRI4
ASGNI4
line 901
;901:		value = value < 0 ? 0 : value;
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $517
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 $518
JUMPV
LABELV $517
ADDRLP4 36
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $518
ADDRFP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 902
;902:		Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $342
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 903
;903:		break;
ADDRGP4 $511
JUMPV
LABELV $519
line 905
;904:	case 2:
;905:		value = value > 99 ? 99 : value;
ADDRFP4 12
INDIRI4
CNSTI4 99
LEI4 $521
ADDRLP4 40
CNSTI4 99
ASGNI4
ADDRGP4 $522
JUMPV
LABELV $521
ADDRLP4 40
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $522
ADDRFP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 906
;906:		value = value < -9 ? -9 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -9
GEI4 $524
ADDRLP4 44
CNSTI4 -9
ASGNI4
ADDRGP4 $525
JUMPV
LABELV $524
ADDRLP4 44
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $525
ADDRFP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 908
;907:		
;908:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $526
line 909
;909:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $528
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $526
line 911
;910:		else
;911:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $342
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 912
;912:		break;
ADDRGP4 $511
JUMPV
LABELV $529
line 914
;913:	case 3:
;914:		value = value > 999 ? 999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 999
LEI4 $531
ADDRLP4 48
CNSTI4 999
ASGNI4
ADDRGP4 $532
JUMPV
LABELV $531
ADDRLP4 48
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $532
ADDRFP4 12
ADDRLP4 48
INDIRI4
ASGNI4
line 915
;915:		value = value < -99 ? -99 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -99
GEI4 $534
ADDRLP4 52
CNSTI4 -99
ASGNI4
ADDRGP4 $535
JUMPV
LABELV $534
ADDRLP4 52
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $535
ADDRFP4 12
ADDRLP4 52
INDIRI4
ASGNI4
line 916
;916:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $536
line 917
;917:			Com_sprintf (num, sizeof(num), "00%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $538
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $536
line 918
;918:		else if ( value < 100 )
ADDRFP4 12
INDIRI4
CNSTI4 100
GEI4 $539
line 919
;919:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $528
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $539
line 921
;920:		else
;921:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $342
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 922
;922:		break;
ADDRGP4 $511
JUMPV
LABELV $541
line 924
;923:	case 4:
;924:		value = value > 9999 ? 9999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 9999
LEI4 $543
ADDRLP4 56
CNSTI4 9999
ASGNI4
ADDRGP4 $544
JUMPV
LABELV $543
ADDRLP4 56
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $544
ADDRFP4 12
ADDRLP4 56
INDIRI4
ASGNI4
line 925
;925:		value = value < -999 ? -999 : value;
ADDRFP4 12
INDIRI4
CNSTI4 -999
GEI4 $546
ADDRLP4 60
CNSTI4 -999
ASGNI4
ADDRGP4 $547
JUMPV
LABELV $546
ADDRLP4 60
ADDRFP4 12
INDIRI4
ASGNI4
LABELV $547
ADDRFP4 12
ADDRLP4 60
INDIRI4
ASGNI4
line 926
;926:		if ( value < 10 )
ADDRFP4 12
INDIRI4
CNSTI4 10
GEI4 $548
line 927
;927:			Com_sprintf (num, sizeof(num), "000%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $550
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $548
line 928
;928:		else if ( value < 100 )
ADDRFP4 12
INDIRI4
CNSTI4 100
GEI4 $551
line 929
;929:			Com_sprintf (num, sizeof(num), "00%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $538
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $551
line 930
;930:		else if ( value < 1000 )
ADDRFP4 12
INDIRI4
CNSTI4 1000
GEI4 $553
line 931
;931:			Com_sprintf (num, sizeof(num), "0%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $528
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $511
JUMPV
LABELV $553
line 933
;932:		else
;933:			Com_sprintf (num, sizeof(num), "%i", value);
ADDRLP4 12
ARGP4
CNSTI4 16
ARGI4
ADDRGP4 $342
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 934
;934:		break;
LABELV $510
LABELV $511
line 937
;935:	}
;936:
;937:	l = strlen(num);
ADDRLP4 12
ARGP4
ADDRLP4 32
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 938
;938:	if (l > width)
ADDRLP4 4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $557
line 939
;939:		l = width;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
LABELV $557
line 942
;940:	/* x += 2 + SMALLDIGIT_WIDTH*(width - l); */
;941:
;942:	ptr = num;
ADDRLP4 0
ADDRLP4 12
ASGNP4
ADDRGP4 $560
JUMPV
LABELV $559
line 944
;943:	while (*ptr && l)
;944:	{
line 945
;945:		if (*ptr == '-')
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 45
NEI4 $562
line 946
;946:			frame = STAT_MINUS;
ADDRLP4 8
CNSTI4 10
ASGNI4
ADDRGP4 $563
JUMPV
LABELV $562
line 948
;947:		else
;948:			frame = *ptr -'0';
ADDRLP4 8
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
LABELV $563
line 950
;949:
;950:		CG_DrawPic3( x,y, SMALLDIGIT_WIDTH, SMALLDIGIT_HEIGHT, cgs.media.smalldigitalNumberShaders[frame] );
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1094713344
ARGF4
CNSTF4 1101004800
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+456
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 951
;951:		x -= SMALLDIGIT_WIDTH;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 12
SUBI4
ASGNI4
line 952
;952:		ptr++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 953
;953:		l--;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 954
;954:	}
LABELV $560
line 943
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
EQI4 $566
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $559
LABELV $566
line 956
;955: 
;956:}
LABELV $503
endproc CG_DrawSmallField 64 20
proc CG_DrawSmallTimer 20 20
line 963
;957:
;958:/*
;959:=================
;960:CG_DrawSmallTimer
;961:=================
;962:*/
;963:static void CG_DrawSmallTimer( int x, int y, int timer ) {
line 966
;964:	int			mins, seconds;
;965:	int			msec;
;966:	qhandle_t	smallColon = trap_R_RegisterShader( "gfx/2d/hud/timer/number_colon.tga" );
ADDRGP4 $568
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ASGNI4
line 978
;967:	/*
;968:	if ( cgs.gametype == GT_LTS ) {
;969:		if ( !cgs.levelRoundStartTime )
;970:			return y;
;971:
;972:		msec = ( cgs.levelRoundStartTime ) - cg.time;
;973:	}
;974:	else
;975:	
;976:	msec = cg.time - cgs.levelStartTime;
;977:	*/
;978:	msec = timer - cg.time;
ADDRLP4 8
ADDRFP4 8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 980
;979:
;980:	seconds = msec / 1000;
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 981
;981:	mins = seconds / 60;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 982
;982:	seconds -= mins * 60;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 60
ADDRLP4 4
INDIRI4
MULI4
SUBI4
ASGNI4
line 985
;983:
;984:
;985:	CG_DrawSmallField( x + SMALLDIGIT_WIDTH * 4 - 2, y, 1, mins );
ADDRFP4 0
INDIRI4
CNSTI4 48
ADDI4
CNSTI4 2
SUBI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 986
;986:	CG_DrawPic3( x + SMALLDIGIT_WIDTH * 3, y, 8, 20, smallColon );
ADDRFP4 0
INDIRI4
CNSTI4 36
ADDI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1090519040
ARGF4
CNSTF4 1101004800
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 987
;987:	CG_DrawSmallField( x + SMALLDIGIT_WIDTH * 2 , y, 2, seconds );
ADDRFP4 0
INDIRI4
CNSTI4 24
ADDI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 990
;988://	CG_DrawPic( 640 - 2 * 16, y, 32,32, cgs.media.clockIcon );
;989: 
;990:}
LABELV $567
endproc CG_DrawSmallTimer 20 20
proc CC_DrawStatusBar_AssaultField 48 20
line 993
;991:
;992:static int CC_DrawStatusBar_AssaultField( int y, int number )
;993:{
line 996
;994://	int misc;
;995://	int	y2;
;996:	int base_x = cg_timerPosX.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 998
;997:
;998:	qhandle_t layer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 999
;999:	qhandle_t timer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_timer.tga" );
ADDRGP4 $573
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 1001
;1000:
;1001:	qhandle_t assault_blocked	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/mission_assault_blocked.tga" );
ADDRGP4 $574
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1002
;1002:	qhandle_t assault_icon		=	trap_R_RegisterShaderNoMip( va("gfx/2d/hud/timer/mission_assault_%i.tga",number+1) );
ADDRGP4 $575
ARGP4
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 36
INDIRI4
ASGNI4
line 1004
;1003:
;1004:	if ( cgs.mi_assaultFields == 0 )
ADDRGP4 cgs+214168
INDIRI4
CNSTI4 0
NEI4 $576
line 1005
;1005:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $576
line 1007
;1006:
;1007:	if ( cgs.mi_assaultFields == 1 && number > 0 )
ADDRGP4 cgs+214168
INDIRI4
CNSTI4 1
NEI4 $579
ADDRFP4 4
INDIRI4
CNSTI4 0
LEI4 $579
line 1008
;1008:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $579
line 1009
;1009:	if ( cgs.mi_assaultFields == 2 && number > 1 )
ADDRGP4 cgs+214168
INDIRI4
CNSTI4 2
NEI4 $582
ADDRFP4 4
INDIRI4
CNSTI4 1
LEI4 $582
line 1010
;1010:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $582
line 1011
;1011:	if ( cgs.mi_assaultFields == 3 && number > 2 )
ADDRGP4 cgs+214168
INDIRI4
CNSTI4 3
NEI4 $585
ADDRFP4 4
INDIRI4
CNSTI4 2
LEI4 $585
line 1012
;1012:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $585
line 1013
;1013:	if ( cgs.mi_assaultFields == 4 && number > 3 )
ADDRGP4 cgs+214168
INDIRI4
CNSTI4 4
NEI4 $588
ADDRFP4 4
INDIRI4
CNSTI4 3
LEI4 $588
line 1014
;1014:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $588
line 1016
;1015:
;1016:	CG_DrawPic3( base_x, y, 26,24, layer_back );
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1104150528
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1018
;1017:
;1018:	if ( cgs.assaultFieldsCaptured[number] ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+214116
ADDP4
INDIRI4
CNSTI4 0
EQI4 $591
line 1019
;1019:		CG_DrawPic3( base_x + 4, y+2, 20,20, assault_blocked );
ADDRLP4 0
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 40
CNSTF4 1101004800
ASGNF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1020
;1020:		return y + 26;
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
RETI4
ADDRGP4 $570
JUMPV
LABELV $591
line 1023
;1021:	}
;1022:	else
;1023:		CG_DrawPic3( base_x + 4, y+2, 20,20, assault_icon );
ADDRLP4 0
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 40
CNSTF4 1101004800
ASGNF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1025
;1024:
;1025:	CG_DrawPic3( base_x+26, y, 55,24, timer_back );
ADDRLP4 0
INDIRI4
CNSTI4 26
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1113325568
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1027
;1026:
;1027:	CG_DrawSmallTimer( base_x+20, y+2, cgs.levelAssaultStartTime[number] );
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 44
CNSTI4 2
ASGNI4
ADDRFP4 0
INDIRI4
ADDRLP4 44
INDIRI4
ADDI4
ARGI4
ADDRFP4 4
INDIRI4
ADDRLP4 44
INDIRI4
LSHI4
ADDRGP4 cgs+214088
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallTimer
CALLV
pop
line 1029
;1028:
;1029:	y += 26;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
ASGNI4
line 1031
;1030:	
;1031:	return y;
ADDRFP4 0
INDIRI4
RETI4
LABELV $570
endproc CC_DrawStatusBar_AssaultField 48 20
proc CC_DrawStatusBar_Bomb 32 20
line 1050
;1032:	/* TODO: ADD TIMER */
;1033:
;1034:	/*	
;1035:	MISSION - AFIELD1 BACKGROUND STREIFEN
;1036:		0, 110, 26, 24, gfx/2d/hud/timer/background.tga
;1037:
;1038:	MISSION - AFIELD1 ICON
;1039:		 4, 112, 20, 20, gfx/2d/hud/timer/mission_assault_1.tga
;1040:		 4, 112, 20, 20, gfx/2d/hud/timer/mission_assault_blocked.tga
;1041:
;1042:	MISSION - AFIELD1 TIMER BACKGROUND
;1043:		 6, 110, 55, 24, gfx/2d/hud/timer/background_timer.tga
;1044:
;1045:	MISSION - AFIELD1 TIMER
;1046:		liegt auf timer background
;1047:		*/
;1048:}
;1049:static int CC_DrawStatusBar_Bomb( int y )
;1050:{
line 1053
;1051://	int misc;
;1052://	int	y2;
;1053:	int base_x = cg_timerPosX.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1055
;1054:
;1055:	qhandle_t layer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 1056
;1056:	qhandle_t timer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_timer.tga" );
ADDRGP4 $573
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 20
INDIRI4
ASGNI4
line 1057
;1057: 	qhandle_t bomb_icon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/mission_bomb.tga" );
ADDRGP4 $597
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 24
INDIRI4
ASGNI4
line 1059
;1058: 
;1059:	if ( cgs.levelBombStartTime <= 0 )
ADDRGP4 cgs+214104
INDIRI4
CNSTI4 0
GTI4 $598
line 1060
;1060:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $595
JUMPV
LABELV $598
line 1062
;1061:
;1062:	CG_DrawPic3( base_x, y, 26, 24, layer_back ); 
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1104150528
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1063
;1063: 	CG_DrawPic3( base_x + 4, y+2, 20, 20, bomb_icon );
ADDRLP4 0
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1101004800
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1065
;1064:
;1065:	CG_DrawPic3( base_x+26, y, 55, 24, timer_back );
ADDRLP4 0
INDIRI4
CNSTI4 26
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1113325568
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1067
;1066:
;1067:  	CG_DrawSmallTimer( base_x+20, y+2, cgs.levelBombStartTime );
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
ADDRGP4 cgs+214104
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallTimer
CALLV
pop
line 1069
;1068:
;1069:	return y + 26; 
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
RETI4
LABELV $595
endproc CC_DrawStatusBar_Bomb 32 20
proc CC_DrawStatusBar_MissionItems 84 20
line 1072
;1070:}
;1071:static int CC_DrawStatusBar_MissionItems( int y )
;1072:{
line 1073
;1073:	int misc = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1075
;1074://	int	y2;
;1075:	int base_x = cg_timerPosX.integer;
ADDRLP4 4
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1077
;1076:
;1077:	qhandle_t layer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
line 1078
;1078:	qhandle_t timer_back		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_timer.tga" );
ADDRGP4 $573
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 32
INDIRI4
ASGNI4
line 1079
;1079: 	qhandle_t briefcase_icon	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/mission_briefcase.tga" );
ADDRGP4 $604
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 36
INDIRI4
ASGNI4
line 1080
;1080:  	qhandle_t bomb_icon			=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/mission_bomb.tga" );
ADDRGP4 $597
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 40
INDIRI4
ASGNI4
line 1081
;1081:	qhandle_t layer_end			=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_end.tga" );
ADDRGP4 $605
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 1083
;1082:
;1083:	if ( ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $612
ADDRLP4 48
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $612
ADDRGP4 cg+36
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $606
LABELV $612
line 1084
;1084:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $602
JUMPV
LABELV $606
line 1086
;1085:
;1086:	if ( cg.predictedPlayerState.powerups[PW_BRIEFCASE] > 0 )
ADDRGP4 cg+107636+312+32
INDIRI4
CNSTI4 0
LEI4 $613
line 1087
;1087:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $613
line 1088
;1088:	if ( BG_GotWeapon( WP_C4, cg.predictedPlayerState.stats ) || ( cg.snap->ps.pm_flags & PMF_BOMBRANGE ) )
CNSTI4 3
ARGI4
ADDRGP4 cg+107636+184
ARGP4
ADDRLP4 52
ADDRGP4 BG_GotWeapon
CALLI4
ASGNI4
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
NEI4 $623
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 56
INDIRI4
EQI4 $618
LABELV $623
line 1089
;1089:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $618
line 1091
;1090:
;1091:	if ( misc == 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $624
line 1092
;1092:		CG_DrawPic3( base_x, y, 28, 24, layer_back );	
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1105199104
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1093
;1093:		CG_DrawPic3( base_x+28, y, 4, 24, layer_end ); 
ADDRLP4 4
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1094
;1094:	}
LABELV $624
line 1095
;1095:	if ( misc == 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $626
line 1096
;1096:		CG_DrawPic3( base_x, y, 56, 24, layer_back );	
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1113587712
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1097
;1097:		CG_DrawPic3( base_x+56, y, 4, 24, layer_end );
ADDRLP4 4
INDIRI4
CNSTI4 56
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1098
;1098:	}
LABELV $626
line 1100
;1099:
;1100:	if ( misc == 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $628
line 1101
;1101:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $602
JUMPV
LABELV $628
line 1103
;1102:
;1103:	misc = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1105
;1104:
;1105:	if ( cg.predictedPlayerState.powerups[PW_BRIEFCASE] > 0 ) 
ADDRGP4 cg+107636+312+32
INDIRI4
CNSTI4 0
LEI4 $630
line 1106
;1106:	{
line 1107
;1107:		trap_R_SetColor( colorRed );
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1108
;1108:		CG_DrawPic3( base_x+4, y+2, 20, 20, briefcase_icon );
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1109
;1109:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1111
;1110:
;1111:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1112
;1112:	}
LABELV $630
line 1113
;1113:	if ( BG_GotWeapon( WP_C4, cg.predictedPlayerState.stats ) ||
CNSTI4 3
ARGI4
ADDRGP4 cg+107636+184
ARGP4
ADDRLP4 60
ADDRGP4 BG_GotWeapon
CALLI4
ASGNI4
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
NEI4 $640
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 64
INDIRI4
EQI4 $635
LABELV $640
line 1115
;1114:		( cg.snap->ps.pm_flags & PMF_BOMBRANGE ) )
;1115:	{
line 1116
;1116:		float pulse = sin( cg.time / 25  );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 25
DIVI4
CVIF4 4
ARGF4
ADDRLP4 72
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 68
ADDRLP4 72
INDIRF4
ASGNF4
line 1118
;1117:		
;1118:		if ( cg.snap->ps.pm_flags & PMF_BOMBRANGE )
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $642
line 1119
;1119:		{
line 1120
;1120: 			if ( pulse < 0.0 )
ADDRLP4 68
INDIRF4
CNSTF4 0
GEF4 $645
line 1121
;1121:				trap_R_SetColor( colorBlack );
ADDRGP4 colorBlack
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $643
JUMPV
LABELV $645
line 1123
;1122:			else
;1123:				trap_R_SetColor( colorRed );
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1124
;1124:		}
ADDRGP4 $643
JUMPV
LABELV $642
line 1126
;1125:		else
;1126:			trap_R_SetColor( colorRed );
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
LABELV $643
line 1128
;1127:
;1128:		if ( misc == 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $647
line 1129
;1129:			CG_DrawPic3( base_x+4, y+2, 20, 20, bomb_icon );	
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 76
CNSTF4 1101004800
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
ADDRGP4 $648
JUMPV
LABELV $647
line 1131
;1130:		else 
;1131:			CG_DrawPic3( base_x+32, y+2, 20, 20, bomb_icon );	
ADDRLP4 4
INDIRI4
CNSTI4 32
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 80
CNSTF4 1101004800
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
LABELV $648
line 1132
;1132:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1134
;1133:
;1134:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1135
;1135:	}
LABELV $635
line 1137
;1136: 
;1137:	if ( misc <= 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $649
line 1138
;1138:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $602
JUMPV
LABELV $649
line 1140
;1139:  
;1140:	return y + 26; 
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
RETI4
LABELV $602
endproc CC_DrawStatusBar_MissionItems 84 20
proc CG_DrawStatusBar_Grenades 64 20
line 1144
;1141:}
;1142:
;1143:static int CG_DrawStatusBar_Grenades( int y )
;1144:{
line 1147
;1145:	int misc;
;1146:	int	y2;
;1147:	int base_x = cg_timerPosX.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1150
;1148:
;1149:
;1150:	qhandle_t layer_back	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 32
INDIRI4
ASGNI4
line 1152
;1151:
;1152:	qhandle_t ammo_40mm		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/grenade_40mm.tga" );
ADDRGP4 $653
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 36
INDIRI4
ASGNI4
line 1153
;1153:	qhandle_t ammo_frag		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/grenade_frag.tga" );
ADDRGP4 $654
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 40
INDIRI4
ASGNI4
line 1154
;1154:	qhandle_t ammo_flash	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/grenade_flash.tga" );
ADDRGP4 $655
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 44
INDIRI4
ASGNI4
line 1155
;1155:	qhandle_t layer_end			=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_end.tga" );
ADDRGP4 $605
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 48
INDIRI4
ASGNI4
line 1157
;1156:
;1157:	misc = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1159
;1158:
;1159:	if ( ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $662
ADDRLP4 52
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $662
ADDRGP4 cg+36
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $656
LABELV $662
line 1160
;1160:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $651
JUMPV
LABELV $656
line 1162
;1161:
;1162:	if ( cg.predictedPlayerState.ammo[AM_GRENADES] > 0 )
ADDRGP4 cg+107636+376+40
INDIRI4
CNSTI4 0
LEI4 $663
line 1163
;1163:		misc++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $663
line 1164
;1164:	if ( cg.predictedPlayerState.ammo[AM_FLASHBANGS] > 0 )
ADDRGP4 cg+107636+376+44
INDIRI4
CNSTI4 0
LEI4 $668
line 1165
;1165:		misc++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $668
line 1166
;1166:	if ( cg.predictedPlayerState.ammo[AM_40MMGRENADES] > 0 )
ADDRGP4 cg+107636+376+52
INDIRI4
CNSTI4 0
LEI4 $673
line 1167
;1167:		misc++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $673
line 1169
;1168:
;1169:	if ( misc == 0 )
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $678
line 1170
;1170:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $651
JUMPV
LABELV $678
line 1172
;1171:	
;1172:	if ( misc == 1 ) {
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $680
line 1173
;1173:		CG_DrawPic3( base_x, y, 52, 24, layer_back );	
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1112539136
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1174
;1174:		CG_DrawPic3( base_x + 52, y, 4, 24, layer_end );
ADDRLP4 0
INDIRI4
CNSTI4 52
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1175
;1175:	}
LABELV $680
line 1176
;1176:	if ( misc == 2 ) {
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $682
line 1177
;1177:		CG_DrawPic3( base_x, y, 100, 24, layer_back );	
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1178
;1178:		CG_DrawPic3( base_x + 100, y, 4, 24, layer_end );
ADDRLP4 0
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1179
;1179:	}
LABELV $682
line 1180
;1180:	if ( misc == 3 ) {
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $684
line 1181
;1181:		CG_DrawPic3( base_x, y, 148, 24, layer_back );	
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1125384192
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1182
;1182:		CG_DrawPic3( base_x + 148, y, 4, 24, layer_end );
ADDRLP4 0
INDIRI4
CNSTI4 148
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1183
;1183:	}
LABELV $684
line 1185
;1184:
;1185:	y2 = 52;
ADDRLP4 8
CNSTI4 52
ASGNI4
line 1187
;1186:
;1187:	if ( cg.predictedPlayerState.ammo[AM_GRENADES] > 0 )
ADDRGP4 cg+107636+376+40
INDIRI4
CNSTI4 0
LEI4 $686
line 1188
;1188:	{
line 1189
;1189:		int ammo = cg.predictedPlayerState.ammo[AM_GRENADES];
ADDRLP4 56
ADDRGP4 cg+107636+376+40
INDIRI4
ASGNI4
line 1191
;1190:  
;1191:		CG_DrawPic3( base_x+28, y+2, 20, 20, ammo_frag );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1192
;1192:		CG_DrawSmallField( base_x+28 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1194
;1193:
;1194:		y2 += 48;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 48
ADDI4
ASGNI4
line 1195
;1195:	}
LABELV $686
line 1197
;1196:
;1197:	if ( cg.predictedPlayerState.ammo[AM_FLASHBANGS] > 0  )
ADDRGP4 cg+107636+376+44
INDIRI4
CNSTI4 0
LEI4 $694
line 1198
;1198:	{
line 1199
;1199:		int ammo = cg.predictedPlayerState.ammo[AM_FLASHBANGS];
ADDRLP4 56
ADDRGP4 cg+107636+376+44
INDIRI4
ASGNI4
line 1201
;1200:  
;1201:		if ( y2 == 52 )
ADDRLP4 8
INDIRI4
CNSTI4 52
NEI4 $702
line 1202
;1202:		{
line 1203
;1203:			CG_DrawPic3( base_x+28, y+2, 20, 20, ammo_flash );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1204
;1204:			CG_DrawSmallField( base_x+28 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1205
;1205:		}
ADDRGP4 $703
JUMPV
LABELV $702
line 1207
;1206:		else 
;1207:		{
line 1208
;1208:			CG_DrawPic3( base_x+76, y+2, 20, 20, ammo_flash );
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1209
;1209:			CG_DrawSmallField( base_x+76 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1210
;1210:		} 
LABELV $703
line 1212
;1211:
;1212:		y2 += 48; 
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 48
ADDI4
ASGNI4
line 1213
;1213:	}
LABELV $694
line 1215
;1214:
;1215:	if ( cg.predictedPlayerState.ammo[AM_40MMGRENADES] > 0 )
ADDRGP4 cg+107636+376+52
INDIRI4
CNSTI4 0
LEI4 $704
line 1216
;1216:	{
line 1217
;1217:		int ammo = cg.predictedPlayerState.ammo[AM_40MMGRENADES];
ADDRLP4 56
ADDRGP4 cg+107636+376+52
INDIRI4
ASGNI4
line 1219
;1218:
;1219:		if ( y2 == 52 )
ADDRLP4 8
INDIRI4
CNSTI4 52
NEI4 $712
line 1220
;1220:		{
line 1221
;1221:			CG_DrawPic3( base_x+28, y+2, 20, 20, ammo_40mm );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1222
;1222:			CG_DrawSmallField( base_x+28 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1223
;1223:		}
ADDRGP4 $713
JUMPV
LABELV $712
line 1224
;1224:		else if ( y2 == 100 )
ADDRLP4 8
INDIRI4
CNSTI4 100
NEI4 $714
line 1225
;1225:		{
line 1226
;1226:			CG_DrawPic3( base_x+76, y+2, 20, 20, ammo_40mm );
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1227
;1227:			CG_DrawSmallField( base_x+76 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1228
;1228:		}
ADDRGP4 $715
JUMPV
LABELV $714
line 1230
;1229:		else
;1230:		{
line 1231
;1231:			CG_DrawPic3( base_x+124, y+2, 20, 20, ammo_40mm );
ADDRLP4 0
INDIRI4
CNSTI4 124
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 60
CNSTF4 1101004800
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1232
;1232:			CG_DrawSmallField( base_x+124 - 20, y+2, 1, ammo );
ADDRLP4 0
INDIRI4
CNSTI4 124
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1233
;1233:		} 
LABELV $715
LABELV $713
line 1235
;1234:
;1235:		y2 += 48;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 48
ADDI4
ASGNI4
line 1236
;1236:	} 
LABELV $704
line 1237
;1237:	if ( y2 == 52 )
ADDRLP4 8
INDIRI4
CNSTI4 52
NEI4 $716
line 1238
;1238:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $651
JUMPV
LABELV $716
line 1240
;1239:
;1240:	return y + 26;
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
RETI4
LABELV $651
endproc CG_DrawStatusBar_Grenades 64 20
export CG_GetPrimaryAmmoCount
proc CG_GetPrimaryAmmoCount 16 4
line 1247
;1241:}
;1242:
;1243:int		BG_GetPrimary( int stats [ ] );
;1244:int		BG_GetSecondary( int stats [ ] );
;1245:
;1246:int CG_GetPrimaryAmmoCount( void )
;1247:{
line 1248
;1248:	int weapon = BG_GetPrimary( cg.snap->ps.stats );
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 BG_GetPrimary
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1251
;1249:	gitem_t	*item;
;1250:
;1251:	if ( weapon == WP_NONE )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $720
line 1252
;1252:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $718
JUMPV
LABELV $720
line 1254
;1253:	
;1254:	item = BG_FindItemForWeapon( weapon );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ASGNP4
line 1256
;1255:
;1256:	if ( !item )
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $722
line 1257
;1257:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $718
JUMPV
LABELV $722
line 1259
;1258:
;1259:	return cg.predictedPlayerState.ammo[ item->giAmmoTag ];
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+107636+376
ADDP4
INDIRI4
RETI4
LABELV $718
endproc CG_GetPrimaryAmmoCount 16 4
export CG_GetSecondaryAmmoCount
proc CG_GetSecondaryAmmoCount 16 4
line 1262
;1260:}
;1261:int CG_GetSecondaryAmmoCount( void )
;1262:{
line 1263
;1263:	int weapon = BG_GetSecondary( cg.snap->ps.stats );
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 BG_GetSecondary
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 1266
;1264:	gitem_t	*item;
;1265:
;1266:	if ( weapon == WP_NONE )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $728
line 1267
;1267:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $726
JUMPV
LABELV $728
line 1269
;1268:	
;1269:	item = BG_FindItemForWeapon( weapon );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ASGNP4
line 1271
;1270:
;1271:	if ( !item )
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $730
line 1272
;1272:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $726
JUMPV
LABELV $730
line 1274
;1273:
;1274:	return cg.predictedPlayerState.ammo[ item->giAmmoTag ];
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+107636+376
ADDP4
INDIRI4
RETI4
LABELV $726
endproc CG_GetSecondaryAmmoCount 16 4
export CG_GetAmmoCountForWeapon
proc CG_GetAmmoCountForWeapon 12 4
line 1277
;1275:}
;1276:int CG_GetAmmoCountForWeapon( int weapon )
;1277:{
line 1280
;1278:	gitem_t	*item;
;1279:
;1280:	if ( weapon == WP_NONE || weapon >= WP_NUM_WEAPONS )
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $737
ADDRLP4 4
INDIRI4
CNSTI4 26
LTI4 $735
LABELV $737
line 1281
;1281:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $734
JUMPV
LABELV $735
line 1283
;1282:	
;1283:	item = BG_FindItemForWeapon( weapon );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1285
;1284:
;1285:	if ( !item )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $738
line 1286
;1286:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $734
JUMPV
LABELV $738
line 1288
;1287:
;1288:	return cg.predictedPlayerState.ammo[ item->giAmmoTag ];
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+107636+376
ADDP4
INDIRI4
RETI4
LABELV $734
endproc CG_GetAmmoCountForWeapon 12 4
proc CG_DrawStatusBar_Ammo 72 20
line 1292
;1289:}
;1290:
;1291:static int	CG_DrawStatusBar_Ammo ( int y )
;1292:{
line 1293
;1293:	qhandle_t ammo_prim		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/ammo_primary.tga" );
ADDRGP4 $743
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRI4
ASGNI4
line 1294
;1294:	qhandle_t ammo_seco		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/ammo_secondary.tga" );
ADDRGP4 $744
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
line 1295
;1295:	qhandle_t layer_back	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 32
INDIRI4
ASGNI4
line 1296
;1296:	qhandle_t layer_end			=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_end.tga" );
ADDRGP4 $605
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 36
INDIRI4
ASGNI4
line 1298
;1297:	
;1298:	int base_x = cg_timerPosX.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1299
;1299:	int base_y = cg_timerPosY.integer; 
ADDRLP4 20
ADDRGP4 cg_timerPosY+12
INDIRI4
ASGNI4
line 1301
;1300:
;1301:	if ( ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $753
ADDRLP4 40
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $753
ADDRGP4 cg+36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $747
LABELV $753
line 1302
;1302:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $742
JUMPV
LABELV $747
line 1304
;1303:
;1304:	CG_DrawPic3( base_x, y, 100, 24, layer_back );
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1305
;1305:	CG_DrawPic3( base_x+100, y, 4, 24, layer_end );
ADDRLP4 0
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1307
;1306:
;1307:	CG_DrawPic3( base_x+76, y+2, 20, 20, ammo_prim );
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 44
CNSTF4 1101004800
ASGNF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1308
;1308:	if ( CG_GetPrimaryAmmoCount() < 10 )
ADDRLP4 48
ADDRGP4 CG_GetPrimaryAmmoCount
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 10
GEI4 $754
line 1309
;1309:		CG_DrawSmallField( base_x+76 - 20, y+2, 1, CG_GetPrimaryAmmoCount() );
ADDRLP4 52
ADDRGP4 CG_GetPrimaryAmmoCount
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
ADDRGP4 $755
JUMPV
LABELV $754
line 1311
;1310:	else
;1311:		CG_DrawSmallField( base_x+76 - 15, y+2, 2, CG_GetPrimaryAmmoCount() );
ADDRLP4 56
ADDRGP4 CG_GetPrimaryAmmoCount
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 76
ADDI4
CNSTI4 15
SUBI4
ARGI4
ADDRLP4 60
CNSTI4 2
ASGNI4
ADDRFP4 0
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
LABELV $755
line 1313
;1312:
;1313:	CG_DrawPic3( base_x+28, y+2, 20, 20, ammo_seco );
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 64
CNSTF4 1101004800
ASGNF4
ADDRLP4 64
INDIRF4
ARGF4
ADDRLP4 64
INDIRF4
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1314
;1314:	CG_DrawSmallField( base_x+28 - 20, y+2, 1, CG_GetSecondaryAmmoCount() );
ADDRLP4 68
ADDRGP4 CG_GetSecondaryAmmoCount
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 28
ADDI4
CNSTI4 20
SUBI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 68
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallField
CALLV
pop
line 1316
;1315: 
;1316:	y += 26;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
ASGNI4
line 1318
;1317:
;1318:	return y;
ADDRFP4 0
INDIRI4
RETI4
LABELV $742
endproc CG_DrawStatusBar_Ammo 72 20
proc CG_DrawStatusBar_Armor 56 20
line 1322
;1319:}
;1320:
;1321:static int CG_DrawStatusBar_Armor ( int y )
;1322:{
line 1323
;1323:	qhandle_t item_helm		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/item_helmet.tga" );
ADDRGP4 $757
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 28
INDIRI4
ASGNI4
line 1324
;1324:	qhandle_t item_vest		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/item_vest.tga" );
ADDRGP4 $758
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 32
INDIRI4
ASGNI4
line 1325
;1325:	qhandle_t layer_back	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 36
INDIRI4
ASGNI4
line 1326
;1326:	qhandle_t layer_end			=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_end.tga" );
ADDRGP4 $605
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 1327
;1327:	int base_x = cg_timerPosX.integer;
ADDRLP4 4
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1328
;1328:	int base_y = cg_timerPosY.integer;
ADDRLP4 24
ADDRGP4 cg_timerPosY+12
INDIRI4
ASGNI4
line 1331
;1329:	int	misc; 
;1330:
;1331:	misc = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1333
;1332:
;1333:	if ( ( cg.snap->ps.persistant[PERS_TEAM] == TEAM_SPECTATOR || cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $767
ADDRLP4 44
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $767
ADDRGP4 cg+36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $761
LABELV $767
line 1334
;1334:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $756
JUMPV
LABELV $761
line 1336
;1335:
;1336:	if ( cg.predictedPlayerState.powerups[PW_VEST] )
ADDRGP4 cg+107636+312+24
INDIRI4
CNSTI4 0
EQI4 $768
line 1337
;1337:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $768
line 1338
;1338:	if ( cg.predictedPlayerState.powerups[PW_HELMET] )
ADDRGP4 cg+107636+312+28
INDIRI4
CNSTI4 0
EQI4 $773
line 1339
;1339:		misc++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $773
line 1341
;1340:
;1341:	if ( misc == 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $778
line 1342
;1342:		CG_DrawPic3( base_x, y, 28, 24, layer_back );	
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1105199104
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1343
;1343:		CG_DrawPic3( base_x + 28, y, 4, 24, layer_end );
ADDRLP4 4
INDIRI4
CNSTI4 28
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1344
;1344:	}
LABELV $778
line 1345
;1345:	if ( misc == 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $780
line 1346
;1346:		CG_DrawPic3( base_x, y, 56, 24, layer_back );	
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1113587712
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1347
;1347:		CG_DrawPic3( base_x + 56, y, 4, 24, layer_end );
ADDRLP4 4
INDIRI4
CNSTI4 56
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1082130432
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1348
;1348:	}
LABELV $780
line 1350
;1349:
;1350:	if ( misc == 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $782
line 1351
;1351:		return y;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $756
JUMPV
LABELV $782
line 1353
;1352:
;1353:	misc = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1355
;1354:
;1355:	if ( cg.predictedPlayerState.powerups[PW_VEST] )
ADDRGP4 cg+107636+312+24
INDIRI4
CNSTI4 0
EQI4 $784
line 1356
;1356:	{
line 1357
;1357:		CG_DrawPic3( base_x+4, y+2, 20, 20, item_vest );
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 48
CNSTF4 1101004800
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1358
;1358:		misc = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1359
;1359:	}
LABELV $784
line 1360
;1360:	if ( cg.predictedPlayerState.powerups[PW_HELMET] )
ADDRGP4 cg+107636+312+28
INDIRI4
CNSTI4 0
EQI4 $789
line 1361
;1361:	{
line 1362
;1362:		if ( misc == 0 )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $794
line 1363
;1363:			CG_DrawPic3( base_x+4, y+2, 20, 20, item_helm );	
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 48
CNSTF4 1101004800
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
ADDRGP4 $795
JUMPV
LABELV $794
line 1365
;1364:		else 
;1365:			CG_DrawPic3( base_x+32, y+2, 20, 20, item_helm );	
ADDRLP4 4
INDIRI4
CNSTI4 32
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 52
CNSTF4 1101004800
ASGNF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
LABELV $795
line 1366
;1366:	}
LABELV $789
line 1368
;1367:
;1368:	return y + 26;
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
RETI4
LABELV $756
endproc CG_DrawStatusBar_Armor 56 20
proc CG_DrawStatusBar_Timer 48 20
line 1372
;1369:}
;1370:
;1371:static int CG_DrawStatusBar_Timer ( int y )
;1372:{
line 1373
;1373: 	int base_x = cg_timerPosX.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosX+12
INDIRI4
ASGNI4
line 1374
;1374:	int base_y = cg_timerPosY.integer;
ADDRLP4 20
ADDRGP4 cg_timerPosY+12
INDIRI4
ASGNI4
line 1375
;1375: 	qhandle_t layer_back	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background.tga" );
ADDRGP4 $572
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRI4
ASGNI4
line 1376
;1376:	qhandle_t timer_clock	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/timer_clock.tga" );
ADDRGP4 $799
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1377
;1377:	qhandle_t timer_vip		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/timer_vip.tga" );
ADDRGP4 $800
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 32
INDIRI4
ASGNI4
line 1378
;1378:	qhandle_t timer_back	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/timer/background_timer.tga" );
ADDRGP4 $573
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 36
INDIRI4
ASGNI4
line 1380
;1379:
;1380:	CG_DrawPic3( base_x, y, 26, 24, layer_back );
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1104150528
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1382
;1381:    
;1382:	if ( cgs.mi_vipTime )
ADDRGP4 cgs+214180
INDIRI4
CNSTI4 0
EQI4 $801
line 1383
;1383:		CG_DrawPic3( base_x+4, y+2, 20, 20, timer_vip );
ADDRLP4 0
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 40
CNSTF4 1101004800
ASGNF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
ADDRGP4 $802
JUMPV
LABELV $801
line 1385
;1384:	else
;1385:		CG_DrawPic3( base_x+4, y+2, 20, 20, timer_clock );   
ADDRLP4 0
INDIRI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 44
CNSTF4 1101004800
ASGNF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
LABELV $802
line 1387
;1386:
;1387:	CG_DrawPic3( base_x+26, y, 55, 24, timer_back );
ADDRLP4 0
INDIRI4
CNSTI4 26
ADDI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1113325568
ARGF4
CNSTF4 1103101952
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic3
CALLV
pop
line 1389
;1388:
;1389:	if ( cgs.gametype != GT_LTS )
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
EQI4 $804
line 1390
;1390:		CG_DrawSmallTimer( base_x+20, y+2, cgs.levelStartTime );
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
ADDRGP4 cgs+32488
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallTimer
CALLV
pop
ADDRGP4 $805
JUMPV
LABELV $804
line 1392
;1391:	else
;1392:		CG_DrawSmallTimer( base_x+20, y+2, cgs.levelRoundStartTime );
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRFP4 0
INDIRI4
CNSTI4 2
ADDI4
ARGI4
ADDRGP4 cgs+214076
INDIRI4
ARGI4
ADDRGP4 CG_DrawSmallTimer
CALLV
pop
LABELV $805
line 1394
;1393:
;1394:	y += 26;
ADDRFP4 0
ADDRFP4 0
INDIRI4
CNSTI4 26
ADDI4
ASGNI4
line 1396
;1395:
;1396:	return y;
ADDRFP4 0
INDIRI4
RETI4
LABELV $796
endproc CG_DrawStatusBar_Timer 48 20
proc CG_DrawHudStatusBar 44 8
line 1404
;1397:}
;1398:
;1399:
;1400:
;1401:extern vmCvar_t	cg_timerCustom;
;1402: 
;1403:static void  CG_DrawHudStatusBar ( void )
;1404:{
line 1407
;1405: 	int y;  
;1406:
;1407:	if ( cg_timerCustom.integer == -1 )
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 -1
NEI4 $810
line 1408
;1408:		return;
ADDRGP4 $809
JUMPV
LABELV $810
line 1411
;1409: 
;1410:
;1411:	y = 12 + cg_timerPosY.integer;
ADDRLP4 0
ADDRGP4 cg_timerPosY+12
INDIRI4
CNSTI4 12
ADDI4
ASGNI4
line 1413
;1412:
;1413:	y = CG_DrawStatusBar_Timer( y );  
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_DrawStatusBar_Timer
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 1415
;1414:	
;1415:	if ( cg_timerCustom.integer == 1 || 
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 1
EQI4 $820
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 2
EQI4 $820
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 3
NEI4 $814
LABELV $820
line 1418
;1416:		cg_timerCustom.integer == 2 ||
;1417:		cg_timerCustom.integer == 3 )
;1418:		y = CG_DrawStatusBar_Ammo( y ); 
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 CG_DrawStatusBar_Ammo
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $814
line 1420
;1419:
;1420:	if ( cg_timerCustom.integer == 2 ||
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 2
EQI4 $825
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 3
NEI4 $821
LABELV $825
line 1422
;1421:		cg_timerCustom.integer == 3 )
;1422:		y = CG_DrawStatusBar_Grenades( y );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_DrawStatusBar_Grenades
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
LABELV $821
line 1424
;1423:
;1424:	if ( cg_timerCustom.integer == 3 )
ADDRGP4 cg_timerCustom+12
INDIRI4
CNSTI4 3
NEI4 $826
line 1425
;1425:		y = CG_DrawStatusBar_Armor( y );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_DrawStatusBar_Armor
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ASGNI4
LABELV $826
line 1428
;1426:
;1427:	// mission helpers
;1428:	if ( cgs.gametype == GT_LTS ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 3
NEI4 $829
line 1429
;1429:		y = CC_DrawStatusBar_AssaultField( y , 0 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 CC_DrawStatusBar_AssaultField
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 1430
;1430:		y = CC_DrawStatusBar_AssaultField( y , 1 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 24
ADDRGP4 CC_DrawStatusBar_AssaultField
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 1431
;1431:		y = CC_DrawStatusBar_AssaultField( y , 2 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 28
ADDRGP4 CC_DrawStatusBar_AssaultField
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 1432
;1432:		y = CC_DrawStatusBar_AssaultField( y , 3 );
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 32
ADDRGP4 CC_DrawStatusBar_AssaultField
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRI4
ASGNI4
line 1434
;1433:
;1434:		y = CC_DrawStatusBar_Bomb( y );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CC_DrawStatusBar_Bomb
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRI4
ASGNI4
line 1436
;1435:
;1436:		y = CC_DrawStatusBar_MissionItems( y );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 CC_DrawStatusBar_MissionItems
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
ASGNI4
line 1437
;1437:	} 
LABELV $829
line 1438
;1438:}
LABELV $809
endproc CG_DrawHudStatusBar 44 8
proc CG_DrawHudLocator 48 20
line 1452
;1439:
;1440:/*
;1441:===============
;1442:Scrutch Hud
;1443:
;1444:draws scrutchs version of the HUD
;1445:===============
;1446:*/
;1447:int BG_GetMaxRoundForWeapon( int weapon );
;1448:void CG_Text_Paint2(float x, float y, float scale, vec4_t color, const char *text, float adjust, int limit, int style);
;1449:
;1450:// 96x192
;1451:static void  CG_DrawHudLocator ( int x, int y, int w, int h )
;1452:{
line 1455
;1453:	vec4_t		hcolor;
;1454:	playerState_t	*ps;
;1455:	float pulse = sin( cg.time / 25  );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 25
DIVI4
CVIF4 4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 24
INDIRF4
ASGNF4
line 1457
;1456:
;1457:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1459
;1458:  
;1459:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH] - ps->stats[STAT_CHEST_DAMAGE] , 0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1460
;1460:	if ( cg.flashDmgLocTime[0] > cg.time && ( cg.flashDmgLocTime[0] - cg.time ) > 0  )
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $835
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $835
line 1461
;1461:	{
line 1462
;1462:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $841
line 1463
;1463:		{
line 1469
;1464:			/*
;1465:			hcolor[0] = colorWhite[0];
;1466:			hcolor[1] = colorWhite[1];
;1467:			hcolor[2] = colorWhite[2]; 
;1468:			*/
;1469:		}
ADDRGP4 $842
JUMPV
LABELV $841
line 1471
;1470:		else
;1471:		{
line 1472
;1472:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1473
;1473:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1474
;1474:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1475
;1475:		}
LABELV $842
line 1476
;1476:	}
LABELV $835
line 1477
;1477:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1478
;1478:	CG_DrawPic2( x, y, w, h ,cgs.media.loc_chestIcon);			
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+632
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1479
;1479:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1481
;1480:
;1481:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_STOMACH_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1482
;1482:	if ( cg.flashDmgLocTime[1] > cg.time && ( cg.flashDmgLocTime[1] - cg.time ) > 0  )
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $849
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $849
line 1483
;1483:	{
line 1484
;1484:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $857
line 1485
;1485:		{
line 1490
;1486:			/*
;1487:			hcolor[0] = colorWhite[0];
;1488:			hcolor[1] = colorWhite[1];
;1489:			hcolor[2] = colorWhite[2]; */
;1490:		}
ADDRGP4 $858
JUMPV
LABELV $857
line 1492
;1491:		else
;1492:		{
line 1493
;1493:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1494
;1494:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1495
;1495:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1496
;1496:		}
LABELV $858
line 1497
;1497:	}
LABELV $849
line 1498
;1498: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1499
;1499:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_stomachIcon);	 
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+628
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1500
;1500:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1502
;1501:
;1502:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_ARM_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1503
;1503:	if ( cg.flashDmgLocTime[2] > cg.time && ( cg.flashDmgLocTime[2] - cg.time ) > 0  )
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $865
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $865
line 1504
;1504:	{
line 1505
;1505:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $873
line 1506
;1506:		{
line 1511
;1507:			/*
;1508:			hcolor[0] = colorWhite[0];
;1509:			hcolor[1] = colorWhite[1];
;1510:			hcolor[2] = colorWhite[2]; */
;1511:		}
ADDRGP4 $874
JUMPV
LABELV $873
line 1513
;1512:		else
;1513:		{
line 1514
;1514:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1515
;1515:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1516
;1516:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1517
;1517:		}
LABELV $874
line 1518
;1518:	}  
LABELV $865
line 1519
;1519:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1520
;1520:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_leftArmIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+612
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1521
;1521:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_rightArmIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+616
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1522
;1522:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1524
;1523:
;1524:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_LEG_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1525
;1525: 	if ( cg.time < cg.flashDmgLocTime[3] && ( cg.flashDmgLocTime[3] - cg.time ) > 0 )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+117948+12
INDIRI4
GEI4 $883
ADDRGP4 cg+117948+12
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $883
line 1526
;1526:	{
line 1527
;1527:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $891
line 1528
;1528:		{
line 1533
;1529:			/*
;1530:			hcolor[0] = colorWhite[0];
;1531:			hcolor[1] = colorWhite[1];
;1532:			hcolor[2] = colorWhite[2]; */
;1533:		}
ADDRGP4 $892
JUMPV
LABELV $891
line 1535
;1534:		else
;1535:		{
line 1536
;1536:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1537
;1537:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1538
;1538:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1539
;1539:		}
LABELV $892
line 1545
;1540:		/*
;1541:		hcolor[0] *= sin( cg.time / PULSE_DIVISOR );
;1542:		hcolor[1] *= sin( cg.time / PULSE_DIVISOR );
;1543:		hcolor[2] *= sin( cg.time / PULSE_DIVISOR );
;1544:		*/
;1545:	}
LABELV $883
line 1546
;1546: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1547
;1547:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_leftLegIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+620
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1548
;1548:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_rightLegIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+624
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1549
;1549:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1551
;1550:
;1551:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_HEAD_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1552
;1552:	if ( cg.flashDmgLocTime[4] > cg.time && ( cg.flashDmgLocTime[4] - cg.time ) > 0 )
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $901
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $901
line 1553
;1553:	{
line 1554
;1554:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $909
line 1555
;1555:		{
line 1560
;1556:			/*
;1557:			hcolor[0] = colorWhite[0];
;1558:			hcolor[1] = colorWhite[1];
;1559:			hcolor[2] = colorWhite[2]; */
;1560:		}
ADDRGP4 $910
JUMPV
LABELV $909
line 1562
;1561:		else
;1562:		{
line 1563
;1563:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1564
;1564:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1565
;1565:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1566
;1566:		}
LABELV $910
line 1567
;1567:	}
LABELV $901
line 1568
;1568: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1569
;1569:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_headIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+608
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1570
;1570:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1572
;1571:
;1572:	trap_R_SetColor( g_color_table[ColorIndex(COLOR_BLACK)] );
ADDRGP4 g_color_table
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1573
;1573:		CG_DrawPic2( x, y, w, h ,cgs.media.loc_bodyLines);		
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cgs+205084+636
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1574
;1574:	trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1575
;1575:}
LABELV $832
endproc CG_DrawHudLocator 48 20
proc CG_DrawHudLocatorSmall 112 20
line 1578
;1576:
;1577:static void  CG_DrawHudLocatorSmall ( int x, int y, int w, int h )
;1578:{
line 1579
;1579:	qhandle_t loc_small_headIcon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/head.tga" );
ADDRGP4 $920
ARGP4
ADDRLP4 56
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 56
INDIRI4
ASGNI4
line 1580
;1580:	qhandle_t loc_small_leftArmIcon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/larm.tga" );
ADDRGP4 $921
ARGP4
ADDRLP4 60
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 60
INDIRI4
ASGNI4
line 1581
;1581:	qhandle_t loc_small_rightArmIcon	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/rarm.tga" );
ADDRGP4 $922
ARGP4
ADDRLP4 64
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 64
INDIRI4
ASGNI4
line 1582
;1582:	qhandle_t loc_small_leftLegIcon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/lleg.tga" );
ADDRGP4 $923
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 68
INDIRI4
ASGNI4
line 1583
;1583:	qhandle_t loc_small_rightLegIcon	=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/rleg.tga" );
ADDRGP4 $924
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 72
INDIRI4
ASGNI4
line 1584
;1584:	qhandle_t loc_small_stomachIcon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/stomach.tga" );
ADDRGP4 $925
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 76
INDIRI4
ASGNI4
line 1585
;1585:	qhandle_t loc_small_chestIcon		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/chest.tga" );
ADDRGP4 $926
ARGP4
ADDRLP4 80
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 80
INDIRI4
ASGNI4
line 1586
;1586:	qhandle_t loc_small_bodyLines		=	trap_R_RegisterShaderNoMip( "gfx/2d/hud/defcon/loc/loc_lines.tga" );
ADDRGP4 $927
ARGP4
ADDRLP4 84
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 84
INDIRI4
ASGNI4
line 1590
;1587:
;1588:	vec4_t		hcolor;
;1589:	playerState_t	*ps;
;1590:	float pulse = sin( cg.time / 25  );
ADDRGP4 cg+107604
INDIRI4
CNSTI4 25
DIVI4
CVIF4 4
ARGF4
ADDRLP4 88
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 88
INDIRF4
ASGNF4
line 1592
;1591:
;1592:	ps = &cg.snap->ps;
ADDRLP4 16
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1594
;1593:  
;1594:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH] - ps->stats[STAT_CHEST_DAMAGE] , 0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1595
;1595:	if ( cg.flashDmgLocTime[0] > cg.time && ( cg.flashDmgLocTime[0] - cg.time ) > 0  )
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $930
ADDRGP4 cg+117948
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $930
line 1596
;1596:	{
line 1597
;1597:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $936
line 1598
;1598:		{
line 1604
;1599:			/*
;1600:			hcolor[0] = colorWhite[0];
;1601:			hcolor[1] = colorWhite[1];
;1602:			hcolor[2] = colorWhite[2]; 
;1603:			*/
;1604:		}
ADDRGP4 $937
JUMPV
LABELV $936
line 1606
;1605:		else
;1606:		{
line 1607
;1607:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1608
;1608:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1609
;1609:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1610
;1610:		}
LABELV $937
line 1611
;1611:	}
LABELV $930
line 1612
;1612:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1613
;1613:	CG_DrawPic2( x, y, w, h ,loc_small_chestIcon);			
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 48
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1614
;1614:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1616
;1615:
;1616:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_STOMACH_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1617
;1617:	if ( cg.flashDmgLocTime[1] > cg.time && ( cg.flashDmgLocTime[1] - cg.time ) > 0  )
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $942
ADDRGP4 cg+117948+4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $942
line 1618
;1618:	{
line 1619
;1619:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $950
line 1620
;1620:		{
line 1625
;1621:			/*
;1622:			hcolor[0] = colorWhite[0];
;1623:			hcolor[1] = colorWhite[1];
;1624:			hcolor[2] = colorWhite[2]; */
;1625:		}
ADDRGP4 $951
JUMPV
LABELV $950
line 1627
;1626:		else
;1627:		{
line 1628
;1628:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1629
;1629:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1630
;1630:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1631
;1631:		}
LABELV $951
line 1632
;1632:	}
LABELV $942
line 1633
;1633: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1634
;1634:		CG_DrawPic2( x, y, w, h ,loc_small_stomachIcon);	 
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1635
;1635:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1637
;1636:
;1637:	CG_GetColorForHealth( /* 1 0 0 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_ARM_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1638
;1638:	if ( cg.flashDmgLocTime[2] > cg.time && ( cg.flashDmgLocTime[2] - cg.time ) > 0  )
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $956
ADDRGP4 cg+117948+8
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $956
line 1639
;1639:	{
line 1640
;1640:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $964
line 1641
;1641:		{
line 1646
;1642:			/*
;1643:			hcolor[0] = colorWhite[0];
;1644:			hcolor[1] = colorWhite[1];
;1645:			hcolor[2] = colorWhite[2]; */
;1646:		}
ADDRGP4 $965
JUMPV
LABELV $964
line 1648
;1647:		else
;1648:		{
line 1649
;1649:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1650
;1650:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1651
;1651:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1652
;1652:		}
LABELV $965
line 1653
;1653:	}  
LABELV $956
line 1654
;1654:	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1655
;1655:		CG_DrawPic2( x, y, w, h ,loc_small_leftArmIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1656
;1656:		CG_DrawPic2( x, y, w, h ,loc_small_rightArmIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1657
;1657:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1659
;1658:
;1659:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_LEG_DAMAGE] ,0, hcolor ); 
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1660
;1660: 	if ( cg.time < cg.flashDmgLocTime[3] && ( cg.flashDmgLocTime[3] - cg.time ) > 0 )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+117948+12
INDIRI4
GEI4 $970
ADDRGP4 cg+117948+12
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $970
line 1661
;1661:	{
line 1662
;1662:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $978
line 1663
;1663:		{
line 1668
;1664:			/*
;1665:			hcolor[0] = colorWhite[0];
;1666:			hcolor[1] = colorWhite[1];
;1667:			hcolor[2] = colorWhite[2]; */
;1668:		}
ADDRGP4 $979
JUMPV
LABELV $978
line 1670
;1669:		else
;1670:		{
line 1671
;1671:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1672
;1672:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1673
;1673:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1674
;1674:		}
LABELV $979
line 1680
;1675:		/*
;1676:		hcolor[0] *= sin( cg.time / PULSE_DIVISOR );
;1677:		hcolor[1] *= sin( cg.time / PULSE_DIVISOR );
;1678:		hcolor[2] *= sin( cg.time / PULSE_DIVISOR );
;1679:		*/
;1680:	}
LABELV $970
line 1681
;1681: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1682
;1682:		CG_DrawPic2( x, y, w, h ,loc_small_leftLegIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1683
;1683:		CG_DrawPic2( x, y, w, h ,loc_small_rightLegIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1684
;1684:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1686
;1685:
;1686:	CG_GetColorForHealth( /* 100 - */ ps->stats[STAT_HEALTH]  - ps->stats[STAT_HEAD_DAMAGE] ,0, hcolor );
ADDRLP4 16
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
SUBI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_GetColorForHealth
CALLV
pop
line 1687
;1687:	if ( cg.flashDmgLocTime[4] > cg.time && ( cg.flashDmgLocTime[4] - cg.time ) > 0 )
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $984
ADDRGP4 cg+117948+16
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $984
line 1688
;1688:	{
line 1689
;1689:		if ( pulse < 0.0 )
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $992
line 1690
;1690:		{
line 1695
;1691:			/*
;1692:			hcolor[0] = colorWhite[0];
;1693:			hcolor[1] = colorWhite[1];
;1694:			hcolor[2] = colorWhite[2]; */
;1695:		}
ADDRGP4 $993
JUMPV
LABELV $992
line 1697
;1696:		else
;1697:		{
line 1698
;1698:			hcolor[0] = colorBlack[0];
ADDRLP4 0
ADDRGP4 colorBlack
INDIRF4
ASGNF4
line 1699
;1699:			hcolor[1] = colorBlack[1];
ADDRLP4 0+4
ADDRGP4 colorBlack+4
INDIRF4
ASGNF4
line 1700
;1700:			hcolor[2] = colorBlack[2];
ADDRLP4 0+8
ADDRGP4 colorBlack+8
INDIRF4
ASGNF4
line 1701
;1701:		}
LABELV $993
line 1702
;1702:	}
LABELV $984
line 1703
;1703: 	trap_R_SetColor( hcolor ); 
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1704
;1704:		CG_DrawPic2( x, y, w, h ,loc_small_headIcon);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1705
;1705:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1707
;1706:
;1707:	trap_R_SetColor( g_color_table[ColorIndex(COLOR_BLACK)] );
ADDRGP4 g_color_table
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1708
;1708:		CG_DrawPic2( x, y, w, h ,loc_small_bodyLines);		
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1709
;1709:	trap_R_SetColor( NULL ); 
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1710
;1710:}
LABELV $919
endproc CG_DrawHudLocatorSmall 112 20
proc CG_DrawWeaponStatus2 48 32
line 1711
;1711:static void CG_DrawWeaponStatus2( int x,int y, float scale ) {
line 1713
;1712:   	playerState_t	*ps;
;1713:	char *mode = ""; 
ADDRLP4 8
ADDRGP4 $999
ASGNP4
line 1717
;1714:	int	weaponmode ;
;1715:	int	weapon;
;1716:
;1717: 	ps = &cg.snap->ps;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
line 1718
;1718: 	weaponmode = ps->stats[STAT_WEAPONMODE];
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
line 1719
;1719:	weapon = ps->weapon;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
line 1722
;1720:
;1721:
;1722:	if ( ps->weaponstate == WEAPON_BANDAGING_START || 
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 12
EQI4 $1004
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $1004
ADDRLP4 16
INDIRI4
CNSTI4 14
NEI4 $1001
LABELV $1004
line 1725
;1723:		ps->weaponstate == WEAPON_BANDAGING_END || 
;1724:		ps->weaponstate == WEAPON_BANDAGING )
;1725:		mode = "Bandaging";	/*
ADDRLP4 8
ADDRGP4 $1005
ASGNP4
ADDRGP4 $1002
JUMPV
LABELV $1001
line 1730
;1726:	else if ( (weapon == WP_M4 || weapon == WP_AK47) && (weaponmode & ( 1 << WM_GRENADELAUNCHER ) ) && ( weaponmode & ( 1 << WM_WEAPONMODE2 ) ) )
;1727:	{
;1728:		mode = "";
;1729:	}*/
;1730:	else if ( (weapon == WP_M4 || weapon == WP_AK47) && (weaponmode & ( 1 << WM_BAYONET ) ) && ( weaponmode & ( 1 << WM_WEAPONMODE2 ) ) )
ADDRLP4 4
INDIRI4
CNSTI4 16
EQI4 $1008
ADDRLP4 4
INDIRI4
CNSTI4 15
NEI4 $1006
LABELV $1008
ADDRLP4 24
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $1006
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $1006
line 1731
;1731:	{
line 1732
;1732:		mode = "Stab Mode";
ADDRLP4 8
ADDRGP4 $1009
ASGNP4
line 1733
;1733:	} 
ADDRGP4 $1007
JUMPV
LABELV $1006
line 1734
;1734:	else if ( BG_IsGrenade( weapon ) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $1010
line 1735
;1735:	{
line 1736
;1736:		int sec = 3;
ADDRLP4 36
CNSTI4 3
ASGNI4
line 1738
;1737:
;1738:		if ( weapon == WP_FLASHBANG )
ADDRLP4 4
INDIRI4
CNSTI4 5
NEI4 $1012
line 1739
;1739:		{
line 1740
;1740:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1014
line 1741
;1741:				sec = 2;
ADDRLP4 36
CNSTI4 2
ASGNI4
ADDRGP4 $1013
JUMPV
LABELV $1014
line 1742
;1742:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1013
line 1743
;1743:				sec = 1;
ADDRLP4 36
CNSTI4 1
ASGNI4
line 1744
;1744:		} else if ( weapon == WP_SMOKE ) {
ADDRGP4 $1013
JUMPV
LABELV $1012
ADDRLP4 4
INDIRI4
CNSTI4 25
NEI4 $1018
line 1745
;1745:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1020
line 1746
;1746:				sec = 2;
ADDRLP4 36
CNSTI4 2
ASGNI4
ADDRGP4 $1019
JUMPV
LABELV $1020
line 1747
;1747:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1019
line 1748
;1748:				sec = 1;
ADDRLP4 36
CNSTI4 1
ASGNI4
line 1749
;1749:		}
ADDRGP4 $1019
JUMPV
LABELV $1018
line 1751
;1750:		else
;1751:		{
line 1752
;1752:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1024
line 1753
;1753:				sec = 4;
ADDRLP4 36
CNSTI4 4
ASGNI4
ADDRGP4 $1025
JUMPV
LABELV $1024
line 1754
;1754:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1026
line 1755
;1755:				sec = 5;
ADDRLP4 36
CNSTI4 5
ASGNI4
LABELV $1026
LABELV $1025
line 1756
;1756:		}
LABELV $1019
LABELV $1013
line 1758
;1757:
;1758:		if ( weaponmode & ( 1 << WM_GRENADEROLL ) )			
ADDRLP4 12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1028
line 1759
;1759:			mode = va( "%is Roll", sec ); 
ADDRGP4 $1030
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 40
INDIRP4
ASGNP4
ADDRGP4 $1011
JUMPV
LABELV $1028
line 1761
;1760:		else 
;1761:			mode = va( "%is Throw", sec ); 
ADDRGP4 $1031
ARGP4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 44
INDIRP4
ASGNP4
line 1762
;1762:	} 
ADDRGP4 $1011
JUMPV
LABELV $1010
line 1763
;1763:	else if ( weapon == WP_M4 || weapon == WP_M249 || weapon == WP_M14 || weapon == WP_MAC10 || weapon == WP_AK47 || weapon == WP_MP5 || weapon == WP_PDW ||
ADDRLP4 4
INDIRI4
CNSTI4 16
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 23
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 22
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 13
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 15
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 14
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 12
EQI4 $1040
ADDRLP4 4
INDIRI4
CNSTI4 21
NEI4 $1032
LABELV $1040
line 1765
;1764:		weapon == WP_SPAS15 )
;1765:	{ 
line 1767
;1766:		// if i want to switch to 
;1767:		if ( weaponmode & ( 1 << WM_SINGLE) )			
ADDRLP4 12
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1041
line 1768
;1768:			mode = "Semi Auto";
ADDRLP4 8
ADDRGP4 $1043
ASGNP4
ADDRGP4 $1033
JUMPV
LABELV $1041
line 1770
;1769:		else
;1770:			mode = "Full Auto";  
ADDRLP4 8
ADDRGP4 $1044
ASGNP4
line 1771
;1771:	}
ADDRGP4 $1033
JUMPV
LABELV $1032
line 1772
;1772:	else if ( !BG_IsMelee(weapon) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $998
line 1773
;1773:		mode = "Single Shot";
ADDRLP4 8
ADDRGP4 $1047
ASGNP4
line 1775
;1774:	else
;1775:		return;
LABELV $1046
LABELV $1033
LABELV $1011
LABELV $1007
LABELV $1002
line 1778
;1776:
;1777:
;1778:	CG_Text_Paint2(x,y,scale,colorWhite, mode, 0, 0, 0 );//ITEM_TEXTSTYLE_OUTLINED);
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRF4
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
line 1779
;1779:}
LABELV $998
endproc CG_DrawWeaponStatus2 48 32
proc CG_DrawWeaponStatusIcon 76 32
line 1783
;1780: extern	vmCvar_t cg_hudStyle;
;1781:
;1782:static void CG_DrawWeaponStatusIcon( int x, int y, int width, int height )
;1783:{
line 1786
;1784:	qhandle_t firemode[5];
;1785:	qhandle_t	shader;
;1786:	int weapon = cg.snap->ps.weapon;
ADDRLP4 0
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1787
;1787:	int weaponmode = cg.snap->ps.stats[STAT_WEAPONMODE];
ADDRLP4 24
ADDRGP4 cg+36
INDIRP4
CNSTI4 264
ADDP4
INDIRI4
ASGNI4
line 1789
;1788:
;1789:	firemode[0] = trap_R_RegisterShader( "gfx/2d/hud/default/firemode_1.tga" );
ADDRGP4 $1051
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 32
INDIRI4
ASGNI4
line 1790
;1790:	firemode[1] = trap_R_RegisterShader( "gfx/2d/hud/default/firemode_5.tga" );
ADDRGP4 $1053
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4+4
ADDRLP4 36
INDIRI4
ASGNI4
line 1791
;1791:	firemode[3] = trap_R_RegisterShader( "gfx/2d/hud/default/firemode_roll.tga" );
ADDRGP4 $1055
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4+12
ADDRLP4 40
INDIRI4
ASGNI4
line 1792
;1792:	firemode[4] = trap_R_RegisterShader( "gfx/2d/hud/default/firemode_throw.tga" );
ADDRGP4 $1057
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4+16
ADDRLP4 44
INDIRI4
ASGNI4
line 1794
;1793:
;1794:	if ( BG_IsMelee( weapon ) || weapon == WP_NONE || weapon == WP_C4 )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 52
INDIRI4
NEI4 $1061
ADDRLP4 0
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1061
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $1058
LABELV $1061
line 1795
;1795:		return;
ADDRGP4 $1048
JUMPV
LABELV $1058
line 1797
;1796:
;1797:	if ( BG_IsGrenade( weapon ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 60
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
EQI4 $1062
line 1798
;1798:	{
line 1799
;1799:		int sec = 3;
ADDRLP4 64
CNSTI4 3
ASGNI4
line 1801
;1800:
;1801:		if ( weapon == WP_FLASHBANG )
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $1064
line 1802
;1802:		{
line 1803
;1803:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1066
line 1804
;1804:				sec = 2;
ADDRLP4 64
CNSTI4 2
ASGNI4
ADDRGP4 $1065
JUMPV
LABELV $1066
line 1805
;1805:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1065
line 1806
;1806:				sec = 1;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 1807
;1807:		} else if ( weapon == WP_SMOKE ) {
ADDRGP4 $1065
JUMPV
LABELV $1064
ADDRLP4 0
INDIRI4
CNSTI4 25
NEI4 $1070
line 1808
;1808:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1072
line 1809
;1809:				sec = 2;
ADDRLP4 64
CNSTI4 2
ASGNI4
ADDRGP4 $1071
JUMPV
LABELV $1072
line 1810
;1810:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1071
line 1811
;1811:				sec = 1;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 1812
;1812:		}
ADDRGP4 $1071
JUMPV
LABELV $1070
line 1814
;1813:		else
;1814:		{
line 1815
;1815:			if ( weaponmode & ( 1 << WM_SINGLE) )
ADDRLP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1076
line 1816
;1816:				sec = 4;
ADDRLP4 64
CNSTI4 4
ASGNI4
ADDRGP4 $1077
JUMPV
LABELV $1076
line 1817
;1817:			else if ( weaponmode & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 24
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1078
line 1818
;1818:				sec = 5;
ADDRLP4 64
CNSTI4 5
ASGNI4
LABELV $1078
LABELV $1077
line 1819
;1819:		}
LABELV $1071
LABELV $1065
line 1821
;1820:
;1821:		if ( cg_hudStyle.integer == 1 ) 
ADDRGP4 cg_hudStyle+12
INDIRI4
CNSTI4 1
NEI4 $1080
line 1822
;1822:			CG_Text_Paint2( x + 64, y + 42, 0.35f, colorWhite, va("%is",sec), 0,0, ITEM_TEXTSTYLE_SHADOWED  );
ADDRGP4 $1083
ARGP4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 68
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRI4
CNSTI4 64
ADDI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CNSTI4 42
ADDI4
CVIF4 4
ARGF4
CNSTF4 1051931443
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
ADDRGP4 $1081
JUMPV
LABELV $1080
line 1824
;1823:		else
;1824:			CG_Text_Paint2( x + 105, y + 17, 0.41f, colorWhite, va("%is",sec), 0,0, ITEM_TEXTSTYLE_SHADOWED  );
ADDRGP4 $1083
ARGP4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRI4
CNSTI4 105
ADDI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CNSTI4 17
ADDI4
CVIF4 4
ARGF4
CNSTF4 1053944709
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 72
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
LABELV $1081
line 1826
;1825:
;1826:		if ( weaponmode & ( 1 << WM_GRENADEROLL ) )			
ADDRLP4 24
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1084
line 1827
;1827:			shader = firemode[3];
ADDRLP4 28
ADDRLP4 4+12
INDIRI4
ASGNI4
ADDRGP4 $1063
JUMPV
LABELV $1084
line 1829
;1828: 		else 
;1829:			shader = firemode[4];
ADDRLP4 28
ADDRLP4 4+16
INDIRI4
ASGNI4
line 1830
;1830:	} 
ADDRGP4 $1063
JUMPV
LABELV $1062
line 1831
;1831:	else if ( weapon == WP_M4 || weapon == WP_M249 || weapon == WP_M14 || weapon == WP_MAC10 || weapon == WP_AK47 || weapon == WP_MP5 || weapon == WP_PDW )
ADDRLP4 0
INDIRI4
CNSTI4 16
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 23
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 22
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 13
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 15
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 14
EQI4 $1095
ADDRLP4 0
INDIRI4
CNSTI4 12
NEI4 $1088
LABELV $1095
line 1832
;1832:	{ 
line 1834
;1833:		// if i want to switch to 
;1834:		if ( weaponmode & ( 1 << WM_SINGLE) )			
ADDRLP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1096
line 1835
;1835:			shader = firemode[0];
ADDRLP4 28
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $1089
JUMPV
LABELV $1096
line 1837
;1836:		else
;1837:			shader = firemode[1]; 
ADDRLP4 28
ADDRLP4 4+4
INDIRI4
ASGNI4
line 1838
;1838:	}
ADDRGP4 $1089
JUMPV
LABELV $1088
line 1839
;1839:	else if ( !BG_IsMelee(weapon) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 68
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $1099
line 1840
;1840:		shader = firemode[0];
ADDRLP4 28
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $1099
LABELV $1089
LABELV $1063
line 1842
;1841:
;1842:	CG_DrawPic2( x, y, width, height, shader ); 
ADDRFP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1843
;1843:}
LABELV $1048
endproc CG_DrawWeaponStatusIcon 76 32
export CG_DrawSpectatorHud
proc CG_DrawSpectatorHud 0 0
line 1857
;1844:#define HUD_STAMINA_MAX		300
;1845:
;1846:void CG_DrawDefconHud( void );
;1847:
;1848:extern	vmCvar_t	cg_hudStyle;
;1849:extern	vmCvar_t	cg_hud1PosX;
;1850:extern	vmCvar_t	cg_hud1PosY;
;1851:extern	vmCvar_t	cg_hud2PosX;
;1852:extern	vmCvar_t	cg_hud2PosY;
;1853:extern	vmCvar_t	cg_hudAlpha1;
;1854:extern	vmCvar_t	cg_hudAlpha2;
;1855:
;1856:void CG_DrawSpectatorHud( void )
;1857:{
line 1858
;1858:	CG_DrawHudStatusBar( );
ADDRGP4 CG_DrawHudStatusBar
CALLV
pop
line 1859
;1859:}
LABELV $1101
endproc CG_DrawSpectatorHud 0 0
lit
align 4
LABELV $1116
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
align 4
LABELV $1149
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1051260355
align 4
LABELV $1150
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export CG_DrawScrutchHud
code
proc CG_DrawScrutchHud 120 32
line 1861
;1860:void CG_DrawScrutchHud( void )
;1861:{
line 1864
;1862://	int x;
;1863://	int y;
;1864:	int base_x = cg_hud1PosX.integer;
ADDRLP4 4
ADDRGP4 cg_hud1PosX+12
INDIRI4
ASGNI4
line 1865
;1865:	int base_y = cg_hud1PosY.integer;
ADDRLP4 8
ADDRGP4 cg_hud1PosY+12
INDIRI4
ASGNI4
line 1868
;1866:	int i;
;1867:
;1868:	qhandle_t	background = trap_R_RegisterShader( "gfx/2d/hud/default/background.tga" ),
ADDRGP4 $1105
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 32
INDIRI4
ASGNI4
line 1869
;1869:				staminabar = trap_R_RegisterShader( "gfx/2d/hud/default/staminabar.tga" ),
ADDRGP4 $1106
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 36
INDIRI4
ASGNI4
line 1870
;1870:				bullet = trap_R_RegisterShader( "gfx/2d/hud/default/bullet.tga" ),
ADDRGP4 $1107
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 40
INDIRI4
ASGNI4
line 1871
;1871:				frame = trap_R_RegisterShader( "gfx/2d/hud/default/frame.tga" ),
ADDRGP4 $1108
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 44
INDIRI4
ASGNI4
line 1872
;1872:				outline = trap_R_RegisterShader( "gfx/2d/hud/default/outline.tga" );
ADDRGP4 $1109
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 1874
;1873:
;1874:	CG_DrawHudStatusBar( );
ADDRGP4 CG_DrawHudStatusBar
CALLV
pop
line 1876
;1875:
;1876:	if ( cg_hudStyle.integer == 2 ) {
ADDRGP4 cg_hudStyle+12
INDIRI4
CNSTI4 2
NEI4 $1110
line 1877
;1877:		CG_DrawDefconHud();
ADDRGP4 CG_DrawDefconHud
CALLV
pop
line 1878
;1878:		return;
ADDRGP4 $1102
JUMPV
LABELV $1110
line 1881
;1879:	}
;1880:
;1881:	if ( cg_hudStyle.integer != 1 )
ADDRGP4 cg_hudStyle+12
INDIRI4
CNSTI4 1
EQI4 $1113
line 1882
;1882:		return;
ADDRGP4 $1102
JUMPV
LABELV $1113
line 1885
;1883:
;1884:	//if ( cgs.glconfig.vidWidth < 1024 )
;1885:	{
line 1888
;1886:	//	base_x = 150;// * ( (float)cgs.glconfig.vidWidth/1024.0f );
;1887:	//	base_y = 525;// * ( (float)cgs.glconfig.vidHeight/768.0f ) ;
;1888:	}
line 1890
;1889: 
;1890:	{		
line 1891
;1891:		vec4_t hcolor_alpha = { 1.0,1.0,1.0, 1.0 };
ADDRLP4 52
ADDRGP4 $1116
INDIRB
ASGNB 16
line 1892
;1892:		hcolor_alpha[3] = cg_hudAlpha1.value;
ADDRLP4 52+12
ADDRGP4 cg_hudAlpha1+8
INDIRF4
ASGNF4
line 1894
;1893:
;1894:		if ( hcolor_alpha[3] < 0.0f ||
ADDRLP4 52+12
INDIRF4
CNSTF4 0
LTF4 $1123
ADDRLP4 52+12
INDIRF4
CNSTF4 1065353216
LEF4 $1119
LABELV $1123
line 1896
;1895:			hcolor_alpha[3] > 1.0f )
;1896:			hcolor_alpha[3] = 0.5f;
ADDRLP4 52+12
CNSTF4 1056964608
ASGNF4
LABELV $1119
line 1898
;1897:
;1898:		trap_R_SetColor( hcolor_alpha );
ADDRLP4 52
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1899
;1899:		CG_DrawPic2( base_x + 0, base_y + 0, 130,220, background ); 
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124204544
ARGF4
CNSTF4 1130102784
ARGF4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1900
;1900:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1901
;1901:	}
line 1906
;1902:
;1903:	//
;1904:    // stamina bar
;1905:	//
;1906:	{
line 1907
;1907:		float a = (float)cg.snap->ps.stats[STAT_STAMINA]/(float)HUD_STAMINA_MAX;
ADDRLP4 52
ADDRGP4 cg+36
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1133903872
DIVF4
ASGNF4
line 1909
;1908:	
;1909:		CG_DrawPic2( base_x + 11, base_y + 35 + (float)( (1.0f - ( a ) )*174.0f ) , 41, a*174.0f, staminabar );
ADDRLP4 4
INDIRI4
CNSTI4 11
ADDI4
CVIF4 4
ARGF4
ADDRLP4 56
CNSTF4 1127088128
ASGNF4
ADDRLP4 8
INDIRI4
CNSTI4 35
ADDI4
CVIF4 4
ADDRLP4 56
INDIRF4
CNSTF4 1065353216
ADDRLP4 52
INDIRF4
SUBF4
MULF4
ADDF4
ARGF4
CNSTF4 1109655552
ARGF4
ADDRLP4 56
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1910
;1910:	}
line 1915
;1911:
;1912:	//
;1913:	// rounds counter
;1914:	//
;1915:	{
line 1916
;1916:		float rnds = cg.snap->ps.stats[STAT_ROUNDS];
ADDRLP4 60
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1917
;1917:		float max = BG_GetMaxRoundForWeapon(cg.snap->ps.weapon);
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
ADDRGP4 BG_GetMaxRoundForWeapon
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 68
INDIRI4
CVIF4 4
ASGNF4
line 1918
;1918:		float x = 15.0f;
ADDRLP4 52
CNSTF4 1097859072
ASGNF4
line 1919
;1919:		int x2 = 90;
ADDRLP4 64
CNSTI4 90
ASGNI4
line 1921
;1920:
;1921:		if ( rnds > max )
ADDRLP4 60
INDIRF4
ADDRLP4 56
INDIRF4
LEF4 $1128
line 1922
;1922:			rnds = max;
ADDRLP4 60
ADDRLP4 56
INDIRF4
ASGNF4
LABELV $1128
line 1923
;1923:		if ( max < x )
ADDRLP4 56
INDIRF4
ADDRLP4 52
INDIRF4
GEF4 $1130
line 1924
;1924:			x = max;
ADDRLP4 52
ADDRLP4 56
INDIRF4
ASGNF4
LABELV $1130
line 1926
;1925:		
;1926:		if ( cg.snap->ps.stats[STAT_ROUNDS] >= 10 )
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
CNSTI4 10
LTI4 $1132
line 1927
;1927:			x2 -= 5;
ADDRLP4 64
ADDRLP4 64
INDIRI4
CNSTI4 5
SUBI4
ASGNI4
LABELV $1132
line 1929
;1928:
;1929:		if ( !BG_IsMelee( cg.snap->ps.weapon ) && !BG_IsGrenade( cg.snap->ps.weapon ) && 
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $1135
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1135
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $1141
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $1135
LABELV $1141
line 1931
;1930:			( BG_IsPrimary( cg.snap->ps.weapon ) || BG_IsSecondary( cg.snap->ps.weapon ) ) )
;1931:			CG_Text_Paint2( base_x + x2, base_y + 51 , 0.35f, colorWhite, va("%i",cg.snap->ps.stats[STAT_ROUNDS] ) , 0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
ADDRGP4 $342
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
INDIRI4
ADDRLP4 64
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 51
ADDI4
CVIF4 4
ARGF4
CNSTF4 1051931443
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
LABELV $1135
line 1933
;1932:
;1933:		for ( i = 0; i<x;i++)// i < ( rnds/max )*x; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1146
JUMPV
LABELV $1143
line 1934
;1934:		{
line 1935
;1935:			if ( i < ( rnds/max )*x )
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 60
INDIRF4
ADDRLP4 56
INDIRF4
DIVF4
ADDRLP4 52
INDIRF4
MULF4
GEF4 $1147
line 1936
;1936:				CG_DrawPic2( base_x + 74, base_y + 62 + 112 - i*8, 42,8, bullet );
ADDRLP4 4
INDIRI4
CNSTI4 74
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 62
ADDI4
CNSTI4 112
ADDI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1109917696
ARGF4
CNSTF4 1090519040
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
ADDRGP4 $1148
JUMPV
LABELV $1147
line 1938
;1937:			else
;1938:			{
line 1939
;1939:				vec4_t hcolor = { 1.0,1.0,1.0,0.33f };
ADDRLP4 92
ADDRGP4 $1149
INDIRB
ASGNB 16
line 1941
;1940:
;1941:				trap_R_SetColor( hcolor );
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1942
;1942:				CG_DrawPic2( base_x + 74, base_y + 62 + 112 - i*8, 42,8, bullet );
ADDRLP4 4
INDIRI4
CNSTI4 74
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 62
ADDI4
CNSTI4 112
ADDI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1109917696
ARGF4
CNSTF4 1090519040
ARGF4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1943
;1943:				trap_R_SetColor ( NULL );  
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1944
;1944:			}
LABELV $1148
line 1945
;1945:		}
LABELV $1144
line 1933
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1146
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 52
INDIRF4
LTF4 $1143
line 1946
;1946:	}
line 1948
;1947:
;1948:	{
line 1949
;1949:		vec4_t hcolor_alpha2 = { 1.0,1.0,1.0,1.0 };
ADDRLP4 52
ADDRGP4 $1150
INDIRB
ASGNB 16
line 1950
;1950:		hcolor_alpha2[3] = cg_hudAlpha2.value;
ADDRLP4 52+12
ADDRGP4 cg_hudAlpha2+8
INDIRF4
ASGNF4
line 1952
;1951:
;1952:		if ( hcolor_alpha2[3] < 0.0f ||
ADDRLP4 52+12
INDIRF4
CNSTF4 0
LTF4 $1157
ADDRLP4 52+12
INDIRF4
CNSTF4 1065353216
LEF4 $1153
LABELV $1157
line 1954
;1953:			hcolor_alpha2[3] > 1.0f )
;1954:			hcolor_alpha2[3] = 0.5f;
ADDRLP4 52+12
CNSTF4 1056964608
ASGNF4
LABELV $1153
line 1956
;1955:
;1956:		trap_R_SetColor( hcolor_alpha2 );
ADDRLP4 52
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1957
;1957:		CG_DrawPic2( base_x + 0, base_y + 0, 130,220, frame ); 
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124204544
ARGF4
CNSTF4 1130102784
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1958
;1958:		CG_DrawPic2( base_x + 0, base_y + 0, 130,220, outline ); 
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124204544
ARGF4
CNSTF4 1130102784
ARGF4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 1959
;1959:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1960
;1960:	}
line 1962
;1961:
;1962:	CG_DrawHudLocator( base_x + 5, base_y + 25, 96, 192 );
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 25
ADDI4
ARGI4
CNSTI4 96
ARGI4
CNSTI4 192
ARGI4
ADDRGP4 CG_DrawHudLocator
CALLV
pop
line 1967
;1963:
;1964:	//
;1965:	// clip count
;1966:	//
;1967:	if ( cg.snap->ps.weapon > WP_SEALKNIFE && !BG_IsMelee(cg.snap->ps.weapon) &&
ADDRLP4 52
CNSTI4 188
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
LEI4 $1159
ADDRGP4 cg+36
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $1159
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1159
line 1969
;1968:		cg.snap->ps.weapon != WP_C4 )
;1969:	{
line 1970
;1970:		gitem_t *item = BG_FindItemForWeapon( cg.snap->ps.weapon );
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 72
INDIRP4
ASGNP4
line 1971
;1971:		int weapon = cg.predictedPlayerState.weapon;
ADDRLP4 60
ADDRGP4 cg+107636+144
INDIRI4
ASGNI4
line 1972
;1972:		int clipGfx = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 1974
;1973:
;1974:		if ( BG_IsShotgun( weapon ) )
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1167
line 1975
;1975:			clipGfx = 1;
ADDRLP4 68
CNSTI4 1
ASGNI4
ADDRGP4 $1168
JUMPV
LABELV $1167
line 1976
;1976:		else if ( weapon == WP_GRENADE )
ADDRLP4 60
INDIRI4
CNSTI4 4
NEI4 $1169
line 1977
;1977:			clipGfx = 2;
ADDRLP4 68
CNSTI4 2
ASGNI4
ADDRGP4 $1170
JUMPV
LABELV $1169
line 1978
;1978:		else if ( weapon == WP_FLASHBANG )
ADDRLP4 60
INDIRI4
CNSTI4 5
NEI4 $1171
line 1979
;1979:			clipGfx = 3;
ADDRLP4 68
CNSTI4 3
ASGNI4
ADDRGP4 $1172
JUMPV
LABELV $1171
line 1980
;1980:		else if ( weapon == WP_SMOKE )
ADDRLP4 60
INDIRI4
CNSTI4 25
NEI4 $1173
line 1981
;1981:			clipGfx = 3;
ADDRLP4 68
CNSTI4 3
ASGNI4
ADDRGP4 $1174
JUMPV
LABELV $1173
line 1982
;1982:		else if ( cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
ADDRLP4 80
CNSTI4 264
ASGNI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 84
INDIRI4
EQI4 $1175
ADDRGP4 cg+36
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 84
INDIRI4
EQI4 $1175
line 1983
;1983:			clipGfx = 4;
ADDRLP4 68
CNSTI4 4
ASGNI4
LABELV $1175
LABELV $1174
LABELV $1172
LABELV $1170
LABELV $1168
line 1985
;1984:  
;1985:		if ( item )
ADDRLP4 64
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1179
line 1986
;1986:		{
line 1987
;1987:			int x2 = 90;
ADDRLP4 88
CNSTI4 90
ASGNI4
line 1989
;1988:
;1989:			if ( cg.snap->ps.ammo[item->giAmmoTag] <= 1 /* && ( (cg.time >> 8) & 1*/ &&
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 1
GTI4 $1181
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $1181
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $1181
line 1991
;1990:				!BG_IsGrenade( weapon ) && !BG_IsMelee( weapon ) )
;1991:				trap_R_SetColor(colorRed);  
ADDRGP4 colorRed
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
ADDRGP4 $1182
JUMPV
LABELV $1181
line 1993
;1992:			else
;1993:				trap_R_SetColor(colorWhite);
ADDRGP4 colorWhite
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
LABELV $1182
line 1995
;1994:
;1995:			if ( cg.snap->ps.ammo[item->giAmmoTag] >= 10 )
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 10
LTI4 $1184
line 1996
;1996:				x2 -= 5;
ADDRLP4 88
ADDRLP4 88
INDIRI4
CNSTI4 5
SUBI4
ASGNI4
LABELV $1184
line 1999
;1997:
;1998:		//	CG_DrawPic2( base_x + 80, base_y + 192, 22, 22, cgs.media.clipIcon[clipGfx] ); 
;1999:			CG_Text_Paint2( base_x + x2 + 4, base_y + 210, 0.35f,( cg.snap->ps.ammo[item->giAmmoTag] <= 1 && ( (cg.time >> 8) & 1 &&
ADDRLP4 104
CNSTI4 1
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ADDRLP4 104
INDIRI4
GTI4 $1191
ADDRGP4 cg+107604
INDIRI4
CNSTI4 8
RSHI4
ADDRLP4 104
INDIRI4
BANDI4
CNSTI4 0
EQI4 $1191
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $1191
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $1191
ADDRLP4 100
ADDRGP4 colorRed
ASGNP4
ADDRGP4 $1192
JUMPV
LABELV $1191
ADDRLP4 100
ADDRGP4 colorWhite
ASGNP4
LABELV $1192
ADDRGP4 $342
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 116
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
INDIRI4
ADDRLP4 88
INDIRI4
ADDI4
CNSTI4 4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CNSTI4 210
ADDI4
CVIF4 4
ARGF4
CNSTF4 1051931443
ARGF4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 116
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
line 2002
;2000:				!BG_IsGrenade( weapon ) && !BG_IsMelee( weapon ) ) )?colorRed:colorWhite, va("%i",cg.snap->ps.ammo[item->giAmmoTag] ) , 0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
;2001:
;2002:			trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2003
;2003:		} 		
LABELV $1179
line 2005
;2004:	//	CG_DrawWeaponStatus2( base_x + 20, base_y + 25, 0.35f );
;2005:	} 
LABELV $1159
line 2006
;2006:	CG_DrawWeaponStatusIcon( base_x + 20, base_y + 10, 90, 12 );
ADDRLP4 4
INDIRI4
CNSTI4 20
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
CNSTI4 10
ADDI4
ARGI4
CNSTI4 90
ARGI4
CNSTI4 12
ARGI4
ADDRGP4 CG_DrawWeaponStatusIcon
CALLV
pop
line 2008
;2007:
;2008:}
LABELV $1102
endproc CG_DrawScrutchHud 120 32
data
export savedRnds
align 4
LABELV savedRnds
byte 4 0
export savedClips
align 4
LABELV savedClips
byte 4 0
export savedPrimary
align 4
LABELV savedPrimary
byte 4 1
lit
align 4
LABELV $1204
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
align 4
LABELV $1258
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export CG_DrawDefconHud
code
proc CG_DrawDefconHud 112 32
line 2015
;2009:
;2010:int savedRnds = 0;
;2011:int savedClips = 0;
;2012:qboolean savedPrimary = qtrue;
;2013:
;2014:void CG_DrawDefconHud( void )
;2015:{
line 2018
;2016://	int x;
;2017://	int y;
;2018:	int base_x = cg_hud2PosX.integer;
ADDRLP4 0
ADDRGP4 cg_hud2PosX+12
INDIRI4
ASGNI4
line 2019
;2019:	int base_y = cg_hud2PosY.integer;
ADDRLP4 4
ADDRGP4 cg_hud2PosY+12
INDIRI4
ASGNI4
line 2021
;2020:
;2021:	qhandle_t	background = trap_R_RegisterShader( "gfx/2d/hud/defcon/background.tga" ),
ADDRGP4 $1196
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 32
INDIRI4
ASGNI4
line 2022
;2022:				frame = trap_R_RegisterShader( "gfx/2d/hud/defcon/frame.tga" ),
ADDRGP4 $1197
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 36
INDIRI4
ASGNI4
line 2023
;2023:				outline = trap_R_RegisterShader( "gfx/2d/hud/defcon/outline.tga" ),
ADDRGP4 $1198
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 40
INDIRI4
ASGNI4
line 2026
;2024:				stamina[3];
;2025:
;2026:	stamina[0]	=	trap_R_RegisterShader( "gfx/2d/hud/defcon/stamina_button1.tga" );
ADDRGP4 $1199
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 44
INDIRI4
ASGNI4
line 2027
;2027:	stamina[1]	=	trap_R_RegisterShader( "gfx/2d/hud/defcon/stamina_button2.tga" );
ADDRGP4 $1201
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 8+4
ADDRLP4 48
INDIRI4
ASGNI4
line 2028
;2028:	stamina[2]	=	trap_R_RegisterShader( "gfx/2d/hud/defcon/stamina_button3.tga" );
ADDRGP4 $1203
ARGP4
ADDRLP4 52
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 8+8
ADDRLP4 52
INDIRI4
ASGNI4
line 2030
;2029: 
;2030:	{
line 2031
;2031:		vec4_t hcolor_alpha1 = { 1.0,1.0,1.0, 1.0 };
ADDRLP4 56
ADDRGP4 $1204
INDIRB
ASGNB 16
line 2033
;2032:
;2033:		hcolor_alpha1[3] = cg_hudAlpha1.value;
ADDRLP4 56+12
ADDRGP4 cg_hudAlpha1+8
INDIRF4
ASGNF4
line 2035
;2034:
;2035:		if ( hcolor_alpha1[3] < 0.0f ||
ADDRLP4 56+12
INDIRF4
CNSTF4 0
LTF4 $1211
ADDRLP4 56+12
INDIRF4
CNSTF4 1065353216
LEF4 $1207
LABELV $1211
line 2037
;2036:			hcolor_alpha1[3] > 1.0f )
;2037:			hcolor_alpha1[3] = 0.5f;
ADDRLP4 56+12
CNSTF4 1056964608
ASGNF4
LABELV $1207
line 2039
;2038:
;2039:		trap_R_SetColor( hcolor_alpha1 );
ADDRLP4 56
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2041
;2040:
;2041:		CG_DrawPic2( base_x + 0, base_y + 0, 200,96, background ); 
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1128792064
ARGF4
CNSTF4 1119879168
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 2043
;2042:
;2043:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2044
;2044:	}
line 2049
;2045:
;2046:	//
;2047:    // stamina buttons
;2048:	//
;2049:	{
line 2050
;2050:		float staminaV = cg.snap->ps.stats[STAT_STAMINA];
ADDRLP4 76
ADDRGP4 cg+36
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 2054
;2051:		float temp;
;2052:		vec4_t hColor;
;2053:
;2054:		VectorCopy( colorWhite, hColor );
ADDRLP4 56
ADDRGP4 colorWhite
INDIRB
ASGNB 12
line 2056
;2055:
;2056:		hColor[3] = 0.0f;
ADDRLP4 56+12
CNSTF4 0
ASGNF4
line 2058
;2057:
;2058:		if ( staminaV > 200 )
ADDRLP4 76
INDIRF4
CNSTF4 1128792064
LEF4 $1215
line 2059
;2059:		{
line 2060
;2060:			temp = staminaV-200;
ADDRLP4 72
ADDRLP4 76
INDIRF4
CNSTF4 1128792064
SUBF4
ASGNF4
line 2062
;2061:	
;2062:			temp = temp/100.0f;
ADDRLP4 72
ADDRLP4 72
INDIRF4
CNSTF4 1120403456
DIVF4
ASGNF4
line 2064
;2063:
;2064:			if ( temp > 1.0f )
ADDRLP4 72
INDIRF4
CNSTF4 1065353216
LEF4 $1217
line 2065
;2065:				temp = 1.0f;
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
LABELV $1217
line 2067
;2066:
;2067:			hColor[3] = temp;
ADDRLP4 56+12
ADDRLP4 72
INDIRF4
ASGNF4
line 2068
;2068:			staminaV = 200; 
ADDRLP4 76
CNSTF4 1128792064
ASGNF4
line 2069
;2069:		}
LABELV $1215
line 2070
;2070:		trap_R_SetColor( hColor );
ADDRLP4 56
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2071
;2071:			CG_DrawPic2( base_x + 7, base_y + 77, 41,9, stamina[2] ); 
ADDRLP4 0
INDIRI4
CNSTI4 7
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 77
ADDI4
CVIF4 4
ARGF4
CNSTF4 1109655552
ARGF4
CNSTF4 1091567616
ARGF4
ADDRLP4 8+8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 2072
;2072:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2074
;2073:
;2074:		hColor[3] = 0.0f;
ADDRLP4 56+12
CNSTF4 0
ASGNF4
line 2076
;2075:
;2076:		if ( staminaV > 100 )
ADDRLP4 76
INDIRF4
CNSTF4 1120403456
LEF4 $1222
line 2077
;2077:		{
line 2078
;2078:			temp = staminaV-100;
ADDRLP4 72
ADDRLP4 76
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 2080
;2079:	
;2080:			temp = temp/100.0f;
ADDRLP4 72
ADDRLP4 72
INDIRF4
CNSTF4 1120403456
DIVF4
ASGNF4
line 2082
;2081:
;2082:			if ( temp > 1.0f )
ADDRLP4 72
INDIRF4
CNSTF4 1065353216
LEF4 $1224
line 2083
;2083:				temp = 1.0f;
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
LABELV $1224
line 2085
;2084:
;2085:			hColor[3] = temp;
ADDRLP4 56+12
ADDRLP4 72
INDIRF4
ASGNF4
line 2087
;2086:
;2087:			staminaV = 100; 
ADDRLP4 76
CNSTF4 1120403456
ASGNF4
line 2088
;2088:		}
LABELV $1222
line 2089
;2089:		trap_R_SetColor( hColor );
ADDRLP4 56
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2090
;2090:			CG_DrawPic2( base_x + 54, base_y + 77, 41,9, stamina[1] ); 
ADDRLP4 0
INDIRI4
CNSTI4 54
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 77
ADDI4
CVIF4 4
ARGF4
CNSTF4 1109655552
ARGF4
CNSTF4 1091567616
ARGF4
ADDRLP4 8+4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 2091
;2091:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2093
;2092:
;2093:		hColor[3] = 0.0f;
ADDRLP4 56+12
CNSTF4 0
ASGNF4
line 2095
;2094:
;2095:		if ( staminaV > 0 )
ADDRLP4 76
INDIRF4
CNSTF4 0
LEF4 $1229
line 2096
;2096:		{
line 2097
;2097:			temp = staminaV;
ADDRLP4 72
ADDRLP4 76
INDIRF4
ASGNF4
line 2099
;2098:	
;2099:			temp = temp/100.0f;
ADDRLP4 72
ADDRLP4 72
INDIRF4
CNSTF4 1120403456
DIVF4
ASGNF4
line 2101
;2100:
;2101:			if ( temp > 1.0f )
ADDRLP4 72
INDIRF4
CNSTF4 1065353216
LEF4 $1231
line 2102
;2102:				temp = 1.0f;
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
LABELV $1231
line 2104
;2103:
;2104:			hColor[3] = temp;  
ADDRLP4 56+12
ADDRLP4 72
INDIRF4
ASGNF4
line 2105
;2105:		}
LABELV $1229
line 2106
;2106:		trap_R_SetColor( hColor );
ADDRLP4 56
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2107
;2107:		CG_DrawPic2( base_x + 101, base_y + 77, 41,9, stamina[0] ); 
ADDRLP4 0
INDIRI4
CNSTI4 101
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 77
ADDI4
CVIF4 4
ARGF4
CNSTF4 1109655552
ARGF4
CNSTF4 1091567616
ARGF4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 2108
;2108:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2109
;2109: 	}
line 2114
;2110:
;2111:	//
;2112:	// rounds counter
;2113:	//	
;2114:	{ 
line 2115
;2115:		float x = 15.0f;
ADDRLP4 64
CNSTF4 1097859072
ASGNF4
line 2116
;2116:		int add = 0;
ADDRLP4 60
CNSTI4 0
ASGNI4
line 2118
;2117:		gitem_t *item ;
;2118:		int weapon = cg.snap->ps.weapon;
ADDRLP4 56
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 2121
;2119:
;2120:		
;2121:		if ( BG_IsPrimary( weapon ) || 
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $1237
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $1235
LABELV $1237
line 2123
;2122:			BG_IsSecondary( weapon ) )
;2123:		{
line 2124
;2124:			item = BG_FindItemForWeapon( weapon );
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 68
ADDRLP4 80
INDIRP4
ASGNP4
line 2126
;2125:
;2126:			savedRnds = cg.snap->ps.stats[STAT_ROUNDS];
ADDRGP4 savedRnds
ADDRGP4 cg+36
INDIRP4
CNSTI4 280
ADDP4
INDIRI4
ASGNI4
line 2127
;2127:			savedClips = cg.snap->ps.ammo[item->giAmmoTag];
ADDRGP4 savedClips
ADDRLP4 68
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2129
;2128:
;2129:			if ( BG_IsPrimary( weapon ) )
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $1240
line 2130
;2130:				savedPrimary = qtrue;
ADDRGP4 savedPrimary
CNSTI4 1
ASGNI4
ADDRGP4 $1241
JUMPV
LABELV $1240
line 2132
;2131:			else
;2132:				savedPrimary = qfalse;
ADDRGP4 savedPrimary
CNSTI4 0
ASGNI4
LABELV $1241
line 2133
;2133:		}
LABELV $1235
line 2135
;2134:
;2135:		if ( savedPrimary && BG_GetPrimary( cg.snap->ps.stats ) == WP_NONE )
ADDRGP4 savedPrimary
INDIRI4
CNSTI4 0
EQI4 $1242
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 BG_GetPrimary
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $1242
line 2136
;2136:		{
line 2137
;2137:			savedRnds = 0;
ADDRGP4 savedRnds
CNSTI4 0
ASGNI4
line 2138
;2138:			savedClips = 0;
ADDRGP4 savedClips
CNSTI4 0
ASGNI4
line 2139
;2139:		}
LABELV $1242
line 2140
;2140:		if ( !savedPrimary && BG_GetSecondary( cg.snap->ps.stats ) == WP_NONE )
ADDRGP4 savedPrimary
INDIRI4
CNSTI4 0
NEI4 $1245
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 84
ADDRGP4 BG_GetSecondary
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $1245
line 2141
;2141:		{
line 2142
;2142:			savedRnds = 0;
ADDRGP4 savedRnds
CNSTI4 0
ASGNI4
line 2143
;2143:			savedClips = 0;
ADDRGP4 savedClips
CNSTI4 0
ASGNI4
line 2144
;2144:		}   
LABELV $1245
line 2146
;2145:
;2146:		if ( savedRnds < 10 )
ADDRGP4 savedRnds
INDIRI4
CNSTI4 10
GEI4 $1248
line 2147
;2147:			add = CG_Text_Width("5",0.45f,0);
ADDRGP4 $1250
ARGP4
CNSTF4 1055286886
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 88
ADDRGP4 CG_Text_Width
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 88
INDIRI4
ASGNI4
LABELV $1248
line 2149
;2148:
;2149:		CG_Text_Paint2( base_x + 104 + add,base_y + 40,
ADDRGP4 $342
ARGP4
ADDRGP4 savedRnds
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 104
ADDI4
ADDRLP4 60
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 40
ADDI4
CVIF4 4
ARGF4
CNSTF4 1055286886
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
line 2152
;2150:			0.45f, colorWhite, va("%i",savedRnds),0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
;2151:
;2152:		if ( cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
ADDRLP4 96
CNSTI4 264
ASGNI4
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 100
INDIRI4
EQI4 $1251
ADDRGP4 cg+36
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 100
INDIRI4
EQI4 $1251
line 2153
;2153:			CG_Text_Paint2( base_x + 130, base_y + 70,
ADDRGP4 $342
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 130
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 70
ADDI4
CVIF4 4
ARGF4
CNSTF4 1056964608
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
ADDRGP4 $1252
JUMPV
LABELV $1251
line 2156
;2154:    			0.5, colorWhite, va("%i",cg.snap->ps.ammo[AM_40MMGRENADES]),0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
;2155: 		else
;2156:			CG_Text_Paint2( base_x + 130, base_y + 70,
ADDRGP4 $342
ARGP4
ADDRGP4 savedClips
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 130
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 70
ADDI4
CVIF4 4
ARGF4
CNSTF4 1056964608
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 108
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
LABELV $1252
line 2158
;2157:				0.5, colorWhite, va("%i",savedClips),0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );		
;2158:	}
line 2163
;2159:
;2160:	//
;2161:	// grenade counter
;2162:	//
;2163:	{
line 2165
;2164:		// grenades
;2165:		{
line 2166
;2166:			CG_Text_Paint2( base_x + 60, base_y + 60,
ADDRGP4 $342
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 60
CNSTI4 60
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
ADDRLP4 60
INDIRI4
ADDI4
CVIF4 4
ARGF4
CNSTF4 1060320051
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
line 2168
;2167:				0.7f, colorWhite, va("%i",cg.snap->ps.ammo[AM_GRENADES] ),0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
;2168:		}
line 2170
;2169:		// flashbangs
;2170:		{
line 2171
;2171:			CG_Text_Paint2( base_x + 10, base_y + 60,
ADDRGP4 $342
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 10
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 60
ADDI4
CVIF4 4
ARGF4
CNSTF4 1060320051
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
CNSTF4 0
ARGF4
CNSTI4 0
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 CG_Text_Paint2
CALLV
pop
line 2173
;2172:				0.7f, colorWhite, va("%i",cg.snap->ps.ammo[AM_FLASHBANGS] ),0,0, ITEM_TEXTSTYLE_SHADOWED );//ITEM_TEXTSTYLE_OUTLINED );
;2173:		}
line 2174
;2174:	}
line 2176
;2175:
;2176:	CG_DrawWeaponStatusIcon( base_x + 29, base_y + 4, 109, 14 );
ADDRLP4 0
INDIRI4
CNSTI4 29
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 4
ADDI4
ARGI4
CNSTI4 109
ARGI4
CNSTI4 14
ARGI4
ADDRGP4 CG_DrawWeaponStatusIcon
CALLV
pop
line 2177
;2177:	CG_DrawHudLocatorSmall( base_x + 149, base_y + 7, 40, 80 );
ADDRLP4 0
INDIRI4
CNSTI4 149
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 7
ADDI4
ARGI4
CNSTI4 40
ARGI4
CNSTI4 80
ARGI4
ADDRGP4 CG_DrawHudLocatorSmall
CALLV
pop
line 2179
;2178:
;2179:	{
line 2180
;2180:		vec4_t hcolor_alpha2 = { 1.0,1.0,1.0, 1.0 };
ADDRLP4 56
ADDRGP4 $1258
INDIRB
ASGNB 16
line 2181
;2181:		hcolor_alpha2[3] = cg_hudAlpha2.value;
ADDRLP4 56+12
ADDRGP4 cg_hudAlpha2+8
INDIRF4
ASGNF4
line 2183
;2182:
;2183:		if ( hcolor_alpha2[3] < 0.0f ||
ADDRLP4 56+12
INDIRF4
CNSTF4 0
LTF4 $1265
ADDRLP4 56+12
INDIRF4
CNSTF4 1065353216
LEF4 $1261
LABELV $1265
line 2185
;2184:			hcolor_alpha2[3] > 1.0f )
;2185:			hcolor_alpha2[3] = 0.5f;
ADDRLP4 56+12
CNSTF4 1056964608
ASGNF4
LABELV $1261
line 2187
;2186:
;2187:		trap_R_SetColor( hcolor_alpha2 );
ADDRLP4 56
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2189
;2188:
;2189: 		CG_DrawPic2( base_x + 0, base_y + 0, 200, 96, frame );
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1128792064
ARGF4
CNSTF4 1119879168
ARGF4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic2
CALLV
pop
line 2191
;2190:
;2191:		trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2192
;2192:	}
line 2234
;2193:
;2194:
;2195:	//
;2196:	// clip count
;2197:	//
;2198:	/*
;2199:	if ( cg.snap->ps.weapon > WP_SEALKNIFE && !BG_IsMelee(cg.snap->ps.weapon) &&
;2200:		cg.snap->ps.weapon != WP_C4 )
;2201:	{
;2202:		gitem_t *item = BG_FindItemForWeapon( cg.snap->ps.weapon );
;2203:		int weapon = cg.predictedPlayerState.weapon;
;2204:		int clipGfx = 0;
;2205:
;2206:		if ( BG_IsShotgun( weapon ) )
;2207:			clipGfx = 1;
;2208:		else if ( weapon == WP_GRENADE )
;2209:			clipGfx = 2;
;2210:		else if ( weapon == WP_FLASHBANG )
;2211:			clipGfx = 3;
;2212:		else if ( weapon == WP_SMOKE )
;2213:			clipGfx = 3;
;2214:		else if ( cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && cg.snap->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
;2215:			clipGfx = 4;
;2216:  
;2217:		if ( item )
;2218:		{
;2219:			if ( cg.snap->ps.ammo[item->giAmmoTag] <= 1 && ( (cg.time >> 8) & 1 &&
;2220:				!BG_IsGrenade( weapon ) && !BG_IsMelee( weapon ) ) )
;2221:				trap_R_SetColor(colorRed);  
;2222:			else
;2223:				trap_R_SetColor(colorWh ite);
;2224:
;2225:			CG_DrawPic2( base_x + 80, base_y + 192, 22, 22, cgs.media.clipIcon[clipGfx] ); 
;2226:			CG_Text_Paint2( base_x + 106, base_y + 210, 0.35f,( cg.snap->ps.ammo[item->giAmmoTag] <= 1 && ( (cg.time >> 8) & 1 &&
;2227:				!BG_IsGrenade( weapon ) && !BG_IsMelee( weapon ) ) )?colorRed:colorWhite, va("%i",cg.snap->ps.ammo[item->giAmmoTag] ) , 0,0, 0 );//ITEM_TEXTSTYLE_OUTLINED );
;2228:
;2229:			trap_R_SetColor( NULL );
;2230:		} 		
;2231:		CG_DrawWeaponStatus2( base_x + 20, base_y + 25, 0.35f );
;2232:	}   
;2233:	*/
;2234:}
LABELV $1193
endproc CG_DrawDefconHud 112 32
import cg_hudAlpha2
import cg_hudAlpha1
import cg_hud2PosY
import cg_hud2PosX
import cg_hud1PosY
import cg_hud1PosX
import cg_hudStyle
import CG_Text_Paint2
import BG_GetMaxRoundForWeapon
import cg_timerCustom
import BG_GetSecondary
import BG_GetPrimary
import cg_hudScale
import cg_timerPosX
import cg_timerPosY
import cg_qcmd_close
import trap_PC_SourceFileAndLine
import trap_PC_ReadToken
import trap_PC_FreeSource
import trap_PC_LoadSource
import trap_PC_AddGlobalDefine
import Controls_SetDefaults
import Controls_SetConfig
import Controls_GetConfig
import UI_OutOfMemory
import UI_InitMemory
import UI_Alloc
import Display_CacheAll
import Menu_SetFeederSelection
import Menu_Paint
import Menus_CloseAll
import LerpColor
import Display_HandleKey
import Menus_CloseByName
import Menus_ShowByName
import Menus_FindByName
import Menus_OpenByName
import Display_KeyBindPending
import Display_CursorType
import Display_MouseMove
import Display_CaptureItem
import Display_GetContext
import Menus_Activate
import Menus_AnyFullScreenVisible
import Menu_Reset
import Menus_ActivateByName
import Menu_PaintAll
import Menu_New
import Menu_Count
import PC_Script_Parse
import PC_String_Parse
import PC_Rect_Parse
import PC_Int_Parse
import PC_Color_Parse
import PC_Float_Parse
import Script_Parse
import String_Parse
import Rect_Parse
import Int_Parse
import Color_Parse
import Float_Parse
import Menu_ScrollFeeder
import Menu_HandleMouseMove
import Menu_HandleKey
import Menu_GetFocused
import Menu_PostParse
import Item_Init
import Menu_Init
import Display_ExpandMacros
import Init_Display
import String_Report
import String_Init
import String_Alloc
import CG_DeleteDirectMark
import CG_PlayerBleed
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_Explosion
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1250
byte 1 53
byte 1 0
align 1
LABELV $1203
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 115
byte 1 116
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 95
byte 1 98
byte 1 117
byte 1 116
byte 1 116
byte 1 111
byte 1 110
byte 1 51
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1201
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 115
byte 1 116
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 95
byte 1 98
byte 1 117
byte 1 116
byte 1 116
byte 1 111
byte 1 110
byte 1 50
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1199
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 115
byte 1 116
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 95
byte 1 98
byte 1 117
byte 1 116
byte 1 116
byte 1 111
byte 1 110
byte 1 49
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1198
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 111
byte 1 117
byte 1 116
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1197
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1196
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1109
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 111
byte 1 117
byte 1 116
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1108
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1107
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1106
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 115
byte 1 116
byte 1 97
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 98
byte 1 97
byte 1 114
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1105
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1083
byte 1 37
byte 1 105
byte 1 115
byte 1 0
align 1
LABELV $1057
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 95
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1055
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 95
byte 1 114
byte 1 111
byte 1 108
byte 1 108
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1053
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 95
byte 1 53
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1051
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 95
byte 1 49
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1047
byte 1 83
byte 1 105
byte 1 110
byte 1 103
byte 1 108
byte 1 101
byte 1 32
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $1044
byte 1 70
byte 1 117
byte 1 108
byte 1 108
byte 1 32
byte 1 65
byte 1 117
byte 1 116
byte 1 111
byte 1 0
align 1
LABELV $1043
byte 1 83
byte 1 101
byte 1 109
byte 1 105
byte 1 32
byte 1 65
byte 1 117
byte 1 116
byte 1 111
byte 1 0
align 1
LABELV $1031
byte 1 37
byte 1 105
byte 1 115
byte 1 32
byte 1 84
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $1030
byte 1 37
byte 1 105
byte 1 115
byte 1 32
byte 1 82
byte 1 111
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $1009
byte 1 83
byte 1 116
byte 1 97
byte 1 98
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $1005
byte 1 66
byte 1 97
byte 1 110
byte 1 100
byte 1 97
byte 1 103
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $999
byte 1 0
align 1
LABELV $927
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 95
byte 1 108
byte 1 105
byte 1 110
byte 1 101
byte 1 115
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $926
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 99
byte 1 104
byte 1 101
byte 1 115
byte 1 116
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $925
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $924
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 114
byte 1 108
byte 1 101
byte 1 103
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $923
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 108
byte 1 108
byte 1 101
byte 1 103
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $922
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 114
byte 1 97
byte 1 114
byte 1 109
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $921
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 108
byte 1 97
byte 1 114
byte 1 109
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $920
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 100
byte 1 101
byte 1 102
byte 1 99
byte 1 111
byte 1 110
byte 1 47
byte 1 108
byte 1 111
byte 1 99
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $800
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 95
byte 1 118
byte 1 105
byte 1 112
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $799
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 95
byte 1 99
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $758
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 118
byte 1 101
byte 1 115
byte 1 116
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $757
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 95
byte 1 104
byte 1 101
byte 1 108
byte 1 109
byte 1 101
byte 1 116
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $744
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 115
byte 1 101
byte 1 99
byte 1 111
byte 1 110
byte 1 100
byte 1 97
byte 1 114
byte 1 121
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $743
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 112
byte 1 114
byte 1 105
byte 1 109
byte 1 97
byte 1 114
byte 1 121
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $655
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $654
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 95
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $653
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 95
byte 1 52
byte 1 48
byte 1 109
byte 1 109
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $605
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $604
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 98
byte 1 114
byte 1 105
byte 1 101
byte 1 102
byte 1 99
byte 1 97
byte 1 115
byte 1 101
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $597
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 98
byte 1 111
byte 1 109
byte 1 98
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $575
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 95
byte 1 37
byte 1 105
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $574
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 97
byte 1 115
byte 1 115
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 95
byte 1 98
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $573
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 95
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $572
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 103
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $568
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 47
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 95
byte 1 99
byte 1 111
byte 1 108
byte 1 111
byte 1 110
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $550
byte 1 48
byte 1 48
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $538
byte 1 48
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $528
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $478
byte 1 65
byte 1 0
align 1
LABELV $474
byte 1 37
byte 1 105
byte 1 46
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $470
byte 1 37
byte 1 105
byte 1 46
byte 1 32
byte 1 81
byte 1 117
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $462
byte 1 99
byte 1 103
byte 1 95
byte 1 113
byte 1 99
byte 1 109
byte 1 100
byte 1 95
byte 1 100
byte 1 115
byte 1 99
byte 1 114
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $407
byte 1 37
byte 1 115
byte 1 32
byte 1 59
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 59
byte 1 0
align 1
LABELV $401
byte 1 37
byte 1 115
byte 1 32
byte 1 59
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $380
byte 1 67
byte 1 97
byte 1 109
byte 1 101
byte 1 114
byte 1 97
byte 1 32
byte 1 69
byte 1 110
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 100
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $378
byte 1 67
byte 1 97
byte 1 109
byte 1 101
byte 1 114
byte 1 97
byte 1 32
byte 1 68
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 100
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $342
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $169
byte 1 94
byte 1 49
byte 1 82
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 46
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $87
byte 1 40
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 41
byte 1 0
