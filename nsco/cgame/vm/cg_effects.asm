data
align 4
LABELV fogshader
byte 4 -1
export CG_VolumetricFog
code
proc CG_VolumetricFog 428 12
file "../cg_effects.c"
line 17
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_effects.c -- these functions generate localentities, usually as a result
;4:// of event processing
;5:
;6:// every line of code that differs from the quake3:arena SDK
;7:// is property of manfred nerurkar
;8:// no commercial explotation allowed
;9:// you are only allowed to use this code in navy seals: covert operations 
;10:// a quake3 arena modifiation
;11:// defcon-x@ns-co.net
;12:
;13:#include "cg_local.h"
;14:
;15:static qhandle_t fogshader = -1;
;16:
;17:void CG_VolumetricFog( vec3_t source, vec3_t dest ) {
line 23
;18:		vec3_t		forward, right;
;19:	polyVert_t	verts[4];
;20:	vec3_t		line;
;21:	float		len, begin, end;
;22:	vec3_t		start, finish;
;23:	float width = 2.0;
ADDRLP4 136
CNSTF4 1073741824
ASGNF4
line 26
;24:	vec4_t rgba;
;25:
;26:	if (fogshader < 0) fogshader = trap_R_RegisterShader("nsq3_sfx/volumetricfog");
ADDRGP4 fogshader
INDIRI4
CNSTI4 0
GEI4 $85
ADDRGP4 $87
ARGP4
ADDRLP4 188
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 fogshader
ADDRLP4 188
INDIRI4
ASGNI4
LABELV $85
line 28
;27:
;28:	rgba[0] = 1.0;
ADDRLP4 108
CNSTF4 1065353216
ASGNF4
line 29
;29:	rgba[1] = 1.0;
ADDRLP4 108+4
CNSTF4 1065353216
ASGNF4
line 30
;30:	rgba[2] = 1.0;
ADDRLP4 108+8
CNSTF4 1065353216
ASGNF4
line 31
;31:	rgba[3] = 1.0;
ADDRLP4 108+12
CNSTF4 1065353216
ASGNF4
line 33
;32:
;33:	VectorSubtract( dest, source, forward );
ADDRLP4 192
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 196
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 200
CNSTI4 4
ASGNI4
ADDRLP4 124+4
ADDRLP4 192
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
INDIRF4
ADDRLP4 196
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 204
CNSTI4 8
ASGNI4
ADDRLP4 124+8
ADDRFP4 4
INDIRP4
ADDRLP4 204
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 204
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 34
;34:	len = VectorNormalize( forward );
ADDRLP4 124
ARGP4
ADDRLP4 208
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 184
ADDRLP4 208
INDIRF4
ASGNF4
line 36
;35:
;36:	begin = 1;
ADDRLP4 176
CNSTF4 1065353216
ASGNF4
line 37
;37:	end = len;
ADDRLP4 180
ADDRLP4 184
INDIRF4
ASGNF4
line 39
;38:
;39:	VectorMA( source, begin, forward, start );
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+4
ADDRLP4 212
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 124+4
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 140+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 124+8
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ADDF4
ASGNF4
line 40
;40:	VectorMA( source, end, forward, finish );
ADDRLP4 220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 220
INDIRP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 152+4
ADDRLP4 220
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 124+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 152+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 124+8
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
line 41
;41:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 164
ADDRLP4 124
INDIRF4
ADDRGP4 cg+109044+36+12
INDIRF4
MULF4
ADDRLP4 124+4
INDIRF4
ADDRGP4 cg+109044+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 124+8
INDIRF4
ADDRGP4 cg+109044+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 42
;42:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 164+4
ADDRLP4 124
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
MULF4
ADDRLP4 124+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 124+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 44
;43:
;44:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109044+36+12
INDIRF4
ADDRLP4 164+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109044+36+12+4
INDIRF4
ADDRLP4 164+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109044+36+12+8
INDIRF4
ADDRLP4 164+4
INDIRF4
MULF4
ASGNF4
line 45
;45:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 228
ADDRLP4 164
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
ADDRLP4 228
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
ADDRLP4 228
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
ADDRLP4 164
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 46
;46:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 48
;47:
;48:	VectorMA( finish, width, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 152
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 152+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 152+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
line 49
;49:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 50
;50:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 51
;51:	verts[0].modulate[0] = 255 * rgba[0];
ADDRLP4 240
CNSTF4 1132396544
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $170
ADDRLP4 236
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $171
JUMPV
LABELV $170
ADDRLP4 236
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $171
ADDRLP4 0+20
ADDRLP4 236
INDIRU4
CVUU1 4
ASGNU1
line 52
;52:	verts[0].modulate[1] = 255 * rgba[1];
ADDRLP4 252
CNSTF4 1132396544
ADDRLP4 108+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 256
CNSTF4 1325400064
ASGNF4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
LTF4 $176
ADDRLP4 248
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $177
JUMPV
LABELV $176
ADDRLP4 248
ADDRLP4 252
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $177
ADDRLP4 0+20+1
ADDRLP4 248
INDIRU4
CVUU1 4
ASGNU1
line 53
;53:	verts[0].modulate[2] = 255 * rgba[2];
ADDRLP4 264
CNSTF4 1132396544
ADDRLP4 108+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 268
CNSTF4 1325400064
ASGNF4
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
LTF4 $182
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $183
JUMPV
LABELV $182
ADDRLP4 260
ADDRLP4 264
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $183
ADDRLP4 0+20+2
ADDRLP4 260
INDIRU4
CVUU1 4
ASGNU1
line 54
;54:	verts[0].modulate[3] = 255 * rgba[3];
ADDRLP4 276
CNSTF4 1132396544
ADDRLP4 108+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 280
CNSTF4 1325400064
ASGNF4
ADDRLP4 276
INDIRF4
ADDRLP4 280
INDIRF4
LTF4 $188
ADDRLP4 272
ADDRLP4 276
INDIRF4
ADDRLP4 280
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $189
JUMPV
LABELV $188
ADDRLP4 272
ADDRLP4 276
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $189
ADDRLP4 0+20+3
ADDRLP4 272
INDIRU4
CVUU1 4
ASGNU1
line 56
;55:	
;56:	VectorMA( finish, -width, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 152
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 152+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 152+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 57
;57:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 58
;58:	verts[1].st[1] = 1;
ADDRLP4 0+24+12+4
CNSTF4 1065353216
ASGNF4
line 59
;59:	verts[1].modulate[0] = 255 * rgba[0];
ADDRLP4 288
CNSTF4 1132396544
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 292
CNSTF4 1325400064
ASGNF4
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
LTF4 $207
ADDRLP4 284
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $208
JUMPV
LABELV $207
ADDRLP4 284
ADDRLP4 288
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $208
ADDRLP4 0+24+20
ADDRLP4 284
INDIRU4
CVUU1 4
ASGNU1
line 60
;60:	verts[1].modulate[1] = 255 * rgba[1];
ADDRLP4 300
CNSTF4 1132396544
ADDRLP4 108+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 304
CNSTF4 1325400064
ASGNF4
ADDRLP4 300
INDIRF4
ADDRLP4 304
INDIRF4
LTF4 $214
ADDRLP4 296
ADDRLP4 300
INDIRF4
ADDRLP4 304
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $215
JUMPV
LABELV $214
ADDRLP4 296
ADDRLP4 300
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $215
ADDRLP4 0+24+20+1
ADDRLP4 296
INDIRU4
CVUU1 4
ASGNU1
line 61
;61:	verts[1].modulate[2] = 255 * rgba[2];
ADDRLP4 312
CNSTF4 1132396544
ADDRLP4 108+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 316
CNSTF4 1325400064
ASGNF4
ADDRLP4 312
INDIRF4
ADDRLP4 316
INDIRF4
LTF4 $221
ADDRLP4 308
ADDRLP4 312
INDIRF4
ADDRLP4 316
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $222
JUMPV
LABELV $221
ADDRLP4 308
ADDRLP4 312
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $222
ADDRLP4 0+24+20+2
ADDRLP4 308
INDIRU4
CVUU1 4
ASGNU1
line 62
;62:	verts[1].modulate[3] = 255 * rgba[3];
ADDRLP4 324
CNSTF4 1132396544
ADDRLP4 108+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 328
CNSTF4 1325400064
ASGNF4
ADDRLP4 324
INDIRF4
ADDRLP4 328
INDIRF4
LTF4 $228
ADDRLP4 320
ADDRLP4 324
INDIRF4
ADDRLP4 328
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $229
JUMPV
LABELV $228
ADDRLP4 320
ADDRLP4 324
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $229
ADDRLP4 0+24+20+3
ADDRLP4 320
INDIRU4
CVUU1 4
ASGNU1
line 64
;63:
;64:	VectorMA( start, -width, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 140
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 136
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 65
;65:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 66
;66:	verts[2].st[1] = 0;
ADDRLP4 0+48+12+4
CNSTF4 0
ASGNF4
line 67
;67:	verts[2].modulate[0] = 255 * rgba[0];
ADDRLP4 336
CNSTF4 1132396544
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 340
CNSTF4 1325400064
ASGNF4
ADDRLP4 336
INDIRF4
ADDRLP4 340
INDIRF4
LTF4 $247
ADDRLP4 332
ADDRLP4 336
INDIRF4
ADDRLP4 340
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $248
JUMPV
LABELV $247
ADDRLP4 332
ADDRLP4 336
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $248
ADDRLP4 0+48+20
ADDRLP4 332
INDIRU4
CVUU1 4
ASGNU1
line 68
;68:	verts[2].modulate[1] = 255 * rgba[1];
ADDRLP4 348
CNSTF4 1132396544
ADDRLP4 108+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 352
CNSTF4 1325400064
ASGNF4
ADDRLP4 348
INDIRF4
ADDRLP4 352
INDIRF4
LTF4 $254
ADDRLP4 344
ADDRLP4 348
INDIRF4
ADDRLP4 352
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $255
JUMPV
LABELV $254
ADDRLP4 344
ADDRLP4 348
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $255
ADDRLP4 0+48+20+1
ADDRLP4 344
INDIRU4
CVUU1 4
ASGNU1
line 69
;69:	verts[2].modulate[2] = 255 * rgba[2];
ADDRLP4 360
CNSTF4 1132396544
ADDRLP4 108+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 364
CNSTF4 1325400064
ASGNF4
ADDRLP4 360
INDIRF4
ADDRLP4 364
INDIRF4
LTF4 $261
ADDRLP4 356
ADDRLP4 360
INDIRF4
ADDRLP4 364
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $262
JUMPV
LABELV $261
ADDRLP4 356
ADDRLP4 360
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $262
ADDRLP4 0+48+20+2
ADDRLP4 356
INDIRU4
CVUU1 4
ASGNU1
line 70
;70:	verts[2].modulate[3] = 255 * rgba[3];
ADDRLP4 372
CNSTF4 1132396544
ADDRLP4 108+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 376
CNSTF4 1325400064
ASGNF4
ADDRLP4 372
INDIRF4
ADDRLP4 376
INDIRF4
LTF4 $268
ADDRLP4 368
ADDRLP4 372
INDIRF4
ADDRLP4 376
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $269
JUMPV
LABELV $268
ADDRLP4 368
ADDRLP4 372
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $269
ADDRLP4 0+48+20+3
ADDRLP4 368
INDIRU4
CVUU1 4
ASGNU1
line 72
;71:
;72:	VectorMA( start, width, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 140
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 140+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 140+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
line 73
;73:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 74
;74:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 75
;75:	verts[3].modulate[0] = 255 * rgba[0];
ADDRLP4 384
CNSTF4 1132396544
ADDRLP4 108
INDIRF4
MULF4
ASGNF4
ADDRLP4 388
CNSTF4 1325400064
ASGNF4
ADDRLP4 384
INDIRF4
ADDRLP4 388
INDIRF4
LTF4 $287
ADDRLP4 380
ADDRLP4 384
INDIRF4
ADDRLP4 388
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $288
JUMPV
LABELV $287
ADDRLP4 380
ADDRLP4 384
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $288
ADDRLP4 0+72+20
ADDRLP4 380
INDIRU4
CVUU1 4
ASGNU1
line 76
;76:	verts[3].modulate[1] = 255 * rgba[1];
ADDRLP4 396
CNSTF4 1132396544
ADDRLP4 108+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 400
CNSTF4 1325400064
ASGNF4
ADDRLP4 396
INDIRF4
ADDRLP4 400
INDIRF4
LTF4 $294
ADDRLP4 392
ADDRLP4 396
INDIRF4
ADDRLP4 400
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $295
JUMPV
LABELV $294
ADDRLP4 392
ADDRLP4 396
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $295
ADDRLP4 0+72+20+1
ADDRLP4 392
INDIRU4
CVUU1 4
ASGNU1
line 77
;77:	verts[3].modulate[2] = 255 * rgba[2];
ADDRLP4 408
CNSTF4 1132396544
ADDRLP4 108+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 412
CNSTF4 1325400064
ASGNF4
ADDRLP4 408
INDIRF4
ADDRLP4 412
INDIRF4
LTF4 $301
ADDRLP4 404
ADDRLP4 408
INDIRF4
ADDRLP4 412
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $302
JUMPV
LABELV $301
ADDRLP4 404
ADDRLP4 408
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $302
ADDRLP4 0+72+20+2
ADDRLP4 404
INDIRU4
CVUU1 4
ASGNU1
line 78
;78:	verts[3].modulate[3] = 255 * rgba[3];
ADDRLP4 420
CNSTF4 1132396544
ADDRLP4 108+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 424
CNSTF4 1325400064
ASGNF4
ADDRLP4 420
INDIRF4
ADDRLP4 424
INDIRF4
LTF4 $308
ADDRLP4 416
ADDRLP4 420
INDIRF4
ADDRLP4 424
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $309
JUMPV
LABELV $308
ADDRLP4 416
ADDRLP4 420
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $309
ADDRLP4 0+72+20+3
ADDRLP4 416
INDIRU4
CVUU1 4
ASGNU1
line 80
;79:
;80:	trap_R_AddPolyToScene( fogshader, 4, verts );
ADDRGP4 fogshader
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 82
;81:
;82:}
LABELV $84
endproc CG_VolumetricFog 428 12
export CG_RealBloodTrail
proc CG_RealBloodTrail 104 4
line 91
;83:
;84:/*
;85:==================
;86:CG_RealBloodTrail
;87:
;88:Bullets shot underwater
;89:==================
;90:*/
;91:void CG_RealBloodTrail( vec3_t start, vec3_t end, float spacing ) {
line 96
;92:	vec3_t		move;
;93:	vec3_t		vec;
;94:	float		len;
;95:	int			i;
;96:	int			type = 5;
ADDRLP4 24
CNSTI4 5
ASGNI4
line 98
;97:
;98:	VectorCopy (start, move);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 99
;99:	VectorSubtract (end, start, vec);
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 4
ASGNI4
ADDRLP4 12+4
ADDRLP4 36
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 48
CNSTI4 8
ASGNI4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 100
;100:	len = VectorNormalize (vec);
ADDRLP4 12
ARGP4
ADDRLP4 52
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 52
INDIRF4
ASGNF4
ADDRGP4 $314
JUMPV
LABELV $313
line 103
;101:
;102:	while(type > 4)
;103:		type = (int)random()*5;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
CNSTI4 5
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CVFI4 4
MULI4
ASGNI4
LABELV $314
line 102
ADDRLP4 24
INDIRI4
CNSTI4 4
GTI4 $313
line 106
;104:
;105:	// advance a random amount first
;106:	i = rand() % (int)spacing;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 60
INDIRI4
ADDRFP4 8
INDIRF4
CVFI4 4
MODI4
ASGNI4
line 107
;107:	VectorMA( move, i, vec, move );
ADDRLP4 64
ADDRLP4 28
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 28
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 109
;108:
;109:	VectorScale (vec, spacing, vec);
ADDRLP4 68
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 111
;110:
;111:	for ( ; i < len; i += spacing ) {
ADDRGP4 $329
JUMPV
LABELV $326
line 115
;112:		localEntity_t	*le;
;113:		refEntity_t		*re;
;114:
;115:		le = CG_AllocLocalEntity();
ADDRLP4 80
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 72
ADDRLP4 80
INDIRP4
ASGNP4
line 116
;116:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 117
;117:		le->leType = LE_MOVE_SCALE_FADE;//LE_MOVE_SCALE_FADE;
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 118
;118:		le->startTime = cg.time;
ADDRLP4 72
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 119
;119:		le->endTime = cg.time + 2000 + random() * 250;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2000
ADDI4
CVIF4 4
CNSTF4 1132068864
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 120
;120:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 72
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 72
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 122
;121:
;122:		re = &le->refEntity;
ADDRLP4 76
ADDRLP4 72
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 123
;123:		re->shaderTime = cg.time / 1000.0f;
ADDRLP4 76
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 125
;124:
;125:		re->reType = RT_SPRITE;
ADDRLP4 76
INDIRP4
CNSTI4 2
ASGNI4
line 126
;126:		re->rotation = rand() % 360;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 92
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 127
;127:		re->radius = 1 + random()*2;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 128
;128:		re->customShader = cgs.media.bloodparticleShaders[type];
ADDRLP4 76
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+688
ADDP4
INDIRI4
ASGNI4
line 129
;129:		re->shaderRGBA[0] = 0xff;
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 130
;130:		re->shaderRGBA[1] = 0xff;
ADDRLP4 76
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 131
;131:		re->shaderRGBA[2] = 0xff;
ADDRLP4 76
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 132
;132:		re->shaderRGBA[3] = 0xff;
ADDRLP4 76
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 134
;133:
;134:		le->color[3] = 1.0;
ADDRLP4 72
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 136
;135:
;136:		le->pos.trType = TR_LINEAR;
ADDRLP4 72
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 137
;137:		le->pos.trTime = cg.time;
ADDRLP4 72
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 138
;138:		VectorCopy( move, le->pos.trBase );
ADDRLP4 72
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 142
;139:
;140:	//	le->pos.trDelta[0] = crandom()*10;
;141:	//	le->pos.trDelta[1] = crandom()*10;
;142:		le->pos.trDelta[2] = ( 10 + crandom()*10  ) *-1;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 3212836864
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1092616192
ADDF4
MULF4
ASGNF4
line 144
;143:
;144:		VectorAdd (move, vec, move);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 145
;145:	}
LABELV $327
line 111
ADDRLP4 28
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRFP4 8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $329
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
LTF4 $326
line 146
;146:}
LABELV $310
endproc CG_RealBloodTrail 104 4
export CG_Bubble
proc CG_Bubble 20 0
line 154
;147:
;148:/*
;149:==================
;150:CG_Bubble 
;151:Bullets shot underwater
;152:==================
;153:*/
;154:void CG_Bubble ( vec3_t start, vec3_t velocity, int time, float radius, float alpha ) {
line 160
;155: 	localEntity_t	*le;
;156:	refEntity_t		*re; 
;157:
;158:	// advance a random amount first 
;159:
;160:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 161
;161:	le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 162
;162:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 163
;163:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 164
;164:	le->endTime = cg.time + time + random() * 250;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
CVIF4 4
CNSTF4 1132068864
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 165
;165:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 167
;166:
;167:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 168
;168:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 170
;169:
;170:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 171
;171:	re->rotation = 0;
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 172
;172:	re->radius = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 173
;173:	re->customShader = cgs.media.waterBubbleShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+205084+116
INDIRI4
ASGNI4
line 174
;174:	re->shaderRGBA[0] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 175
;175:	re->shaderRGBA[1] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 176
;176:	re->shaderRGBA[2] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 177
;177:	re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 179
;178:
;179:	le->color[3] = alpha;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 181
;180:
;181:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 182
;182:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 183
;183:	VectorCopy( start, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 184
;184:	VectorScale( velocity, 150 + test_h.value,  le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRGP4 test_h+8
INDIRF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 test_h+8
INDIRF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 test_h+8
INDIRF4
CNSTF4 1125515264
ADDF4
MULF4
ASGNF4
line 185
;185:}
LABELV $342
endproc CG_Bubble 20 0
export CG_BubbleTrail
proc CG_BubbleTrail 96 4
line 194
;186:
;187:/*
;188:==================
;189:CG_BubbleTrail
;190:
;191:Bullets shot underwater
;192:==================
;193:*/
;194:void CG_BubbleTrail( vec3_t start, vec3_t end, float spacing ) {
line 200
;195:	vec3_t		move;
;196:	vec3_t		vec;
;197:	float		len;
;198:	int			i;
;199:
;200:	VectorCopy (start, move);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 201
;201:	VectorSubtract (end, start, vec);
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 4
ASGNI4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 8
ASGNI4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 202
;202:	len = VectorNormalize (vec);
ADDRLP4 12
ARGP4
ADDRLP4 48
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 48
INDIRF4
ASGNF4
line 205
;203:
;204:	// advance a random amount first
;205:	i = rand() % (int)spacing;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
ADDRFP4 8
INDIRF4
CVFI4 4
MODI4
ASGNI4
line 206
;206:	VectorMA( move, i, vec, move );
ADDRLP4 56
ADDRLP4 24
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 208
;207:
;208:	VectorScale (vec, spacing, vec);
ADDRLP4 60
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 210
;209:
;210:	for ( ; i < len; i += spacing ) {
ADDRGP4 $368
JUMPV
LABELV $365
line 214
;211:		localEntity_t	*le;
;212:		refEntity_t		*re;
;213:
;214:		le = CG_AllocLocalEntity();
ADDRLP4 72
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 72
INDIRP4
ASGNP4
line 215
;215:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 64
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 216
;216:		le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 217
;217:		le->startTime = cg.time;
ADDRLP4 64
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 218
;218:		le->endTime = cg.time + 1000 + random() * 250;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
CNSTF4 1132068864
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 219
;219:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 64
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 221
;220:
;221:		re = &le->refEntity;
ADDRLP4 68
ADDRLP4 64
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 222
;222:		re->shaderTime = cg.time / 1000.0f;
ADDRLP4 68
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 224
;223:
;224:		re->reType = RT_SPRITE;
ADDRLP4 68
INDIRP4
CNSTI4 2
ASGNI4
line 225
;225:		re->rotation = 0;
ADDRLP4 68
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 226
;226:		re->radius = 2;
ADDRLP4 68
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1073741824
ASGNF4
line 227
;227:		re->customShader = cgs.media.waterBubbleShader;
ADDRLP4 68
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+205084+116
INDIRI4
ASGNI4
line 228
;228:		re->shaderRGBA[0] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 229
;229:		re->shaderRGBA[1] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 230
;230:		re->shaderRGBA[2] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 231
;231:		re->shaderRGBA[3] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 233
;232:
;233:		le->color[3] = 1.0;
ADDRLP4 64
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 235
;234:
;235:		le->pos.trType = TR_LINEAR;
ADDRLP4 64
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 236
;236:		le->pos.trTime = cg.time;
ADDRLP4 64
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 237
;237:		VectorCopy( move, le->pos.trBase );
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 238
;238:		le->pos.trDelta[0] = crandom()*5;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 239
;239:		le->pos.trDelta[1] = crandom()*5;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 240
;240:		le->pos.trDelta[2] = crandom()*5 + 6;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1086324736
ADDF4
ASGNF4
line 242
;241:
;242:		VectorAdd (move, vec, move);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 243
;243:	}
LABELV $366
line 210
ADDRLP4 24
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRFP4 8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $368
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRF4
LTF4 $365
line 244
;244:}
LABELV $352
endproc CG_BubbleTrail 96 4
data
align 4
LABELV $382
byte 4 146
export CG_SmokePuff
code
proc CG_SmokePuff 52 12
line 260
;245:
;246:/*
;247:=====================
;248:CG_SmokePuff
;249:
;250:Adds a smoke puff or blood trail localEntity.
;251:=====================
;252:*/
;253:localEntity_t *CG_SmokePuff( const vec3_t p, const vec3_t vel, 
;254:				   float radius,
;255:				   float r, float g, float b, float a,
;256:				   float duration,
;257:				   int startTime,
;258:				   int fadeInTime,
;259:				   int leFlags,
;260:				   qhandle_t hShader ) {
line 266
;261:	static int	seed = 0x92;
;262:	localEntity_t	*le;
;263:	refEntity_t		*re;
;264: //	int fadeInTime = startTime + duration / 2;
;265:
;266:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 267
;267:	le->leFlags = leFlags;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 40
INDIRI4
ASGNI4
line 268
;268:	le->radius = radius;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 270
;269:
;270:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 271
;271:	re->rotation = Q_random( &seed ) * 360;
ADDRGP4 $382
ARGP4
ADDRLP4 12
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1135869952
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 272
;272:	re->radius = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 273
;273:	re->shaderTime = startTime / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 275
;274:
;275:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 276
;276:	le->startTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 277
;277:	le->fadeInTime = fadeInTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 36
INDIRI4
ASGNI4
line 278
;278:	le->endTime = startTime + duration;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
ADDRFP4 28
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 279
;279:	if ( fadeInTime > startTime ) {
ADDRFP4 36
INDIRI4
ADDRFP4 32
INDIRI4
LEI4 $383
line 280
;280:		le->lifeRate = 1.0 / ( le->endTime - le->fadeInTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 281
;281:	}
ADDRGP4 $384
JUMPV
LABELV $383
line 282
;282:	else {
line 283
;283:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 284
;284:	}
LABELV $384
line 285
;285:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 286
;286:	le->color[1] = g; 
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 287
;287:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 288
;288:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 291
;289:
;290:
;291:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 292
;292:	le->pos.trTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 293
;293:	VectorCopy( vel, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 294
;294:	VectorCopy( p, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 296
;295:
;296:	VectorCopy( p, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 297
;297:	re->customShader = hShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 44
INDIRI4
ASGNI4
line 300
;298:
;299:	// light smoke
;300:	CG_LightParticles( re->origin, le->color, 0.4f );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ARGP4
CNSTF4 1053609165
ARGF4
ADDRGP4 CG_LightParticles
CALLV
pop
line 303
;301:
;302:	// rage pro can't alpha fade, so use a different shader
;303:	if ( cgs.glconfig.hardwareType == GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
NEI4 $385
line 304
;304:		re->customShader = cgs.media.smokePuffRageProShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+205084+108
INDIRI4
ASGNI4
line 305
;305:		re->shaderRGBA[0] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 306
;306:		re->shaderRGBA[1] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 307
;307:		re->shaderRGBA[2] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 308
;308:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 309
;309:	} else {
ADDRGP4 $386
JUMPV
LABELV $385
line 310
;310:		re->shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 20
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $392
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $393
JUMPV
LABELV $392
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $393
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 311
;311:		re->shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $395
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $396
JUMPV
LABELV $395
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $396
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 312
;312:		re->shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 44
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $398
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $399
JUMPV
LABELV $398
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $399
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 313
;313:		re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 314
;314:	}
LABELV $386
line 316
;315:
;316:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 317
;317:	re->radius = le->radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ASGNF4
line 319
;318:
;319:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $381
endproc CG_SmokePuff 52 12
lit
align 4
LABELV $401
byte 4 0
byte 4 0
byte 4 1073741824
export CG_SpawnEffect
code
proc CG_SpawnEffect 64 40
line 331
;320:}
;321:
;322:/*
;323:==================
;324:CG_SpawnEffect
;325:
;326:Player teleporting in or out
;327:==================
;328:*/
;329:localEntity_t *CG_SpawnParticle( vec3_t org, vec3_t dir, float speed, float bouncefactor, float radius, float r,float g,float b,float a, qboolean size );
;330:
;331:void CG_SpawnEffect( vec3_t org ) { 
line 332
;332:	int i = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 333
;333:	int max = 64;
ADDRLP4 28
CNSTI4 64
ASGNI4
line 335
;334:	vec3_t origin;
;335:	vec3_t dir = { 0, 0, 2 };
ADDRLP4 16
ADDRGP4 $401
INDIRB
ASGNB 12
line 337
;336:
;337:	for ( i = 0; i < 64; i++ )
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $402
line 338
;338:	{
line 341
;339:		localEntity_t *ent;
;340:
;341:		VectorCopy( org, origin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 343
;342:
;343:		origin[0] += -15 + random()*30;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1106247680
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3245342720
ADDF4
ADDF4
ASGNF4
line 344
;344:		origin[1] += -15 + random()*30;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1106247680
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3245342720
ADDF4
ADDF4
ASGNF4
line 345
;345:		origin[2] += -30 + random()*30;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1106247680
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 3253731328
ADDF4
ADDF4
ASGNF4
line 347
;346:
;347:		ent = CG_SpawnParticle( origin, dir, 200, 0.3f, 1, 0.3f,0.3f,1.0f - random()/2,1.0f, qfalse );
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ARGP4
ADDRLP4 16
ARGP4
CNSTF4 1128792064
ARGF4
ADDRLP4 52
CNSTF4 1050253722
ASGNF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
CNSTF4 1065353216
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
SUBF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 60
ADDRGP4 CG_SpawnParticle
CALLP4
ASGNP4
ADDRLP4 32
ADDRLP4 60
INDIRP4
ASGNP4
line 349
;348:
;349:		ent->endTime = cg.time + 500;
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 350
;350:	}
LABELV $403
line 337
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 64
LTI4 $402
line 352
;351:	
;352:}
LABELV $400
endproc CG_SpawnEffect 64 40
bss
align 4
LABELV $410
skip 12
export CG_ScorePlum
code
proc CG_ScorePlum 52 8
line 360
;353: 
;354:
;355:/*
;356:==================
;357:CG_ScorePlum
;358:==================
;359:*/
;360:void CG_ScorePlum( int client, vec3_t org, int score ) {
line 367
;361:	localEntity_t	*le;
;362:	refEntity_t		*re;
;363:	vec3_t			angles;
;364:	static vec3_t lastPos;
;365:
;366:	// only visualize for the client that scored
;367:	if (client != cg.predictedPlayerState.clientNum || cg_scorePlum.integer == 0) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+107636+140
INDIRI4
NEI4 $416
ADDRGP4 cg_scorePlum+12
INDIRI4
CNSTI4 0
NEI4 $411
LABELV $416
line 368
;368:		return;
ADDRGP4 $409
JUMPV
LABELV $411
line 371
;369:	}
;370:
;371:	le = CG_AllocLocalEntity();
ADDRLP4 20
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 372
;372:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 373
;373:	le->leType = LE_SCOREPLUM;
ADDRLP4 24
CNSTI4 8
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 374
;374:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 375
;375:	le->endTime = cg.time + 4000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 4000
ADDI4
ASGNI4
line 376
;376:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 379
;377:
;378:	
;379:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 380
;380:	le->radius = score;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 382
;381:	
;382:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 383
;383:	if (org[2] >= lastPos[2] - 20 && org[2] <= lastPos[2] + 20) {
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
ADDRLP4 44
CNSTF4 1101004800
ASGNF4
ADDRLP4 40
INDIRF4
ADDRGP4 $410+8
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
LTF4 $419
ADDRLP4 40
INDIRF4
ADDRGP4 $410+8
INDIRF4
ADDRLP4 44
INDIRF4
ADDF4
GTF4 $419
line 384
;384:		le->pos.trBase[2] -= 20;
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1101004800
SUBF4
ASGNF4
line 385
;385:	}
LABELV $419
line 388
;386:
;387:	//CG_Printf( "Plum origin %i %i %i -- %i\n", (int)org[0], (int)org[1], (int)org[2], (int)Distance(org, lastPos));
;388:	VectorCopy(org, lastPos);
ADDRGP4 $410
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 391
;389:
;390:
;391:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 393
;392:
;393:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 394
;394:	re->radius = 16;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1098907648
ASGNF4
line 396
;395:
;396:	VectorClear(angles);
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 48
INDIRF4
ASGNF4
line 397
;397:	AnglesToAxis( angles, re->axis );
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 398
;398:}
LABELV $409
endproc CG_ScorePlum 52 8
export CG_MakeExplosion
proc CG_MakeExplosion 60 8
line 408
;399:
;400:
;401:/*
;402:====================
;403:CG_MakeExplosion
;404:====================
;405:*/ 
;406:localEntity_t *CG_MakeExplosion( vec3_t origin, vec3_t dir, 
;407:								qhandle_t hModel, qhandle_t shader,
;408:								int msec, qboolean isSprite ) {
line 414
;409:	float			ang;
;410:	localEntity_t	*ex;
;411:	int				offset;
;412:	vec3_t			tmpVec, newOrigin;
;413:
;414:	if ( msec <= 0 ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
GTI4 $426
line 415
;415:		CG_Error( "CG_MakeExplosion: msec = %i", msec );
ADDRGP4 $428
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 416
;416:	}
LABELV $426
line 419
;417:
;418:	// skew the time a bit so they aren't all in sync
;419:	offset = rand() & 63;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 63
BANDI4
ASGNI4
line 421
;420:
;421:	ex = CG_AllocLocalEntity();
ADDRLP4 40
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 422
;422:	if ( isSprite ) {
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $429
line 423
;423:		ex->leType = LE_SPRITE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 2
ASGNI4
line 426
;424:
;425:		// randomly rotate sprite orientation
;426:		ex->refEntity.rotation = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 427
;427:		VectorScale( dir, 16, tmpVec );
ADDRLP4 48
CNSTF4 1098907648
ASGNF4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1098907648
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 428
;428:		VectorAdd( tmpVec, origin, newOrigin );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ADDRLP4 56
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 429
;429:	} else {
ADDRGP4 $430
JUMPV
LABELV $429
line 430
;430:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 431
;431:		VectorCopy( origin, newOrigin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 434
;432:
;433:		// set axis with random rotate
;434:		if ( !dir ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $437
line 435
;435:			AxisClear( ex->refEntity.axis );
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 436
;436:		} else {
ADDRGP4 $438
JUMPV
LABELV $437
line 437
;437:			ang = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 438
;438:			VectorCopy( dir, ex->refEntity.axis[0] );
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 439
;439:			RotateAroundDirection( ex->refEntity.axis, ang );
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 440
;440:		}
LABELV $438
line 441
;441:	}
LABELV $430
line 442
;442:	ex->startTime = cg.time - offset;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 443
;443:	ex->endTime = ex->startTime + msec;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 446
;444:
;445:	// bias the time so all shader effects start correctly
;446:	ex->refEntity.shaderTime = ex->startTime / 1000.0f;
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 448
;447:
;448:	ex->refEntity.hModel = hModel;
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 449
;449:	ex->refEntity.customShader = shader;
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 452
;450:
;451:	// set origin
;452:	VectorCopy( newOrigin, ex->refEntity.origin );
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 453
;453:	VectorCopy( newOrigin, ex->refEntity.oldorigin );
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 454
;454:	VectorCopy( newOrigin, ex->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 456
;455:
;456:	ex->color[0] = ex->color[1] = ex->color[2] = 1.0;
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 458
;457:
;458:	return ex;
ADDRLP4 0
INDIRP4
RETP4
LABELV $425
endproc CG_MakeExplosion 60 8
export CG_Bleed
proc CG_Bleed 20 0
line 469
;459:}
;460:
;461:
;462:/*
;463:=================
;464:CG_Bleed
;465:
;466:This is the spurt of blood when a character gets hit
;467:=================
;468:*/
;469:void CG_Bleed( vec3_t origin, int entityNum ) {
line 472
;470:	localEntity_t	*ex;
;471:
;472:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $441
line 473
;473:		return;
ADDRGP4 $440
JUMPV
LABELV $441
line 476
;474:	}
;475:
;476:	ex = CG_AllocLocalEntity();
ADDRLP4 4
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 477
;477:	ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 479
;478:
;479:	ex->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 480
;480:	ex->endTime = ex->startTime + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 482
;481:	
;482:	VectorCopy ( origin, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 483
;483:	ex->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 484
;484:	ex->refEntity.rotation = rand() % 360;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 485
;485:	ex->refEntity.radius = 4;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTF4 1082130432
ASGNF4
line 487
;486:
;487:	ex->refEntity.customShader = cgs.media.bloodExplosionShader;
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRGP4 cgs+205084+220
INDIRI4
ASGNI4
line 490
;488:
;489:	// don't show player's own blood in view
;490:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $447
line 491
;491:		ex->refEntity.renderfx |= RF_THIRD_PERSON;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 492
;492:	}
LABELV $447
line 493
;493:}
LABELV $440
endproc CG_Bleed 20 0
export CG_LaunchGib
proc CG_LaunchGib 20 8
line 502
;494:
;495:
;496:
;497:/*
;498:==================
;499:CG_LaunchGib
;500:==================
;501:*/
;502:void CG_LaunchGib( vec3_t origin, vec3_t velocity, qhandle_t hModel ) {
line 506
;503:	localEntity_t	*le;
;504:	refEntity_t		*re;
;505:
;506:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 507
;507:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 509
;508:
;509:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 510
;510:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 511
;511:	le->endTime = le->startTime + 5000 + random() * 3000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 5000
ADDI4
CVIF4 4
CNSTF4 1161527296
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 513
;512:
;513:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 514
;514:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 515
;515:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 517
;516:
;517:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 518
;518:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 519
;519:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 520
;520:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 522
;521:
;522:	le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ASGNF4
line 524
;523:
;524:	le->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 525
;525:	le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 3
ASGNI4
line 526
;526:}
LABELV $450
endproc CG_LaunchGib 20 8
export CG_LaunchRocketSpark
proc CG_LaunchRocketSpark 16 8
line 534
;527:
;528:// Navy Seals ++
;529:/*
;530:==================
;531:CG_LaunchRocketSpark
;532:==================
;533:*/
;534:void CG_LaunchRocketSpark( vec3_t origin, vec3_t velocity  ) {
line 538
;535:	localEntity_t	*le;
;536:	refEntity_t		*re;
;537:
;538:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 539
;539:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 541
;540:
;541:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 542
;542:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 543
;543:	le->endTime = le->startTime + 4000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 4000
ADDI4
ASGNI4
line 545
;544:
;545:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 546
;546:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 547
;547:	re->hModel = cgs.media.nullModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+205084+292
INDIRI4
ASGNI4
line 550
;548://	re->reType = RT_SPRITE;
;549: 
;550:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 551
;551:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 552
;552:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 553
;553:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 555
;554:
;555:	le->bounceFactor = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1056964608
ASGNF4
line 560
;556:
;557://	re->radius = 16;
;558: //	le->radius = 1;
;559:
;560:	le->leBounceSoundType = LEBS_SPARK;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 4
ASGNI4
line 562
;561://	le->leMarkType = LEMT_BLOOD;
;562:}
LABELV $453
endproc CG_LaunchRocketSpark 16 8
export CG_GibPlayer
proc CG_GibPlayer 0 0
line 574
;563:// Navy Seals --
;564:
;565:/*
;566:===================
;567:CG_GibPlayer
;568:
;569:Generated a bunch of gibs launching out from the bodies location
;570:===================
;571:*/
;572:#define	GIB_VELOCITY	250
;573:#define	GIB_JUMP		250
;574:void CG_GibPlayer( vec3_t playerOrigin ) {
line 651
;575:#if 0
;576:	vec3_t	origin, velocity;
;577:
;578:	if ( !cg_blood.integer ) {
;579:		return;
;580:	}
;581:
;582:	VectorCopy( playerOrigin, origin );
;583:	velocity[0] = crandom()*GIB_VELOCITY;
;584:	velocity[1] = crandom()*GIB_VELOCITY;
;585:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;586:	if ( rand() & 1 ) {
;587:		CG_LaunchGib( origin, velocity, cgs.media.gibSkull );
;588:	} else {
;589:		CG_LaunchGib( origin, velocity, cgs.media.gibBrain );
;590:	}
;591:
;592:	// allow gibs to be turned off for speed
;593:	if ( !cg_gibs.integer ) {
;594:		return;
;595:	}
;596:
;597:	VectorCopy( playerOrigin, origin );
;598:	velocity[0] = crandom()*GIB_VELOCITY;
;599:	velocity[1] = crandom()*GIB_VELOCITY;
;600:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;601:	CG_LaunchGib( origin, velocity, cgs.media.gibAbdomen );
;602:
;603:	VectorCopy( playerOrigin, origin );
;604:	velocity[0] = crandom()*GIB_VELOCITY;
;605:	velocity[1] = crandom()*GIB_VELOCITY;
;606:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;607:	CG_LaunchGib( origin, velocity, cgs.media.gibArm );
;608:
;609:	VectorCopy( playerOrigin, origin );
;610:	velocity[0] = crandom()*GIB_VELOCITY;
;611:	velocity[1] = crandom()*GIB_VELOCITY;
;612:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;613:	CG_LaunchGib( origin, velocity, cgs.media.gibChest );
;614:
;615:	VectorCopy( playerOrigin, origin );
;616:	velocity[0] = crandom()*GIB_VELOCITY;
;617:	velocity[1] = crandom()*GIB_VELOCITY;
;618:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;619:	CG_LaunchGib( origin, velocity, cgs.media.gibFist );
;620:
;621:	VectorCopy( playerOrigin, origin );
;622:	velocity[0] = crandom()*GIB_VELOCITY;
;623:	velocity[1] = crandom()*GIB_VELOCITY;
;624:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;625:	CG_LaunchGib( origin, velocity, cgs.media.gibFoot );
;626:
;627:	VectorCopy( playerOrigin, origin );
;628:	velocity[0] = crandom()*GIB_VELOCITY;
;629:	velocity[1] = crandom()*GIB_VELOCITY;
;630:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;631:	CG_LaunchGib( origin, velocity, cgs.media.gibForearm );
;632:
;633:	VectorCopy( playerOrigin, origin );
;634:	velocity[0] = crandom()*GIB_VELOCITY;
;635:	velocity[1] = crandom()*GIB_VELOCITY;
;636:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;637:	CG_LaunchGib( origin, velocity, cgs.media.gibIntestine );
;638:
;639:	VectorCopy( playerOrigin, origin );
;640:	velocity[0] = crandom()*GIB_VELOCITY;
;641:	velocity[1] = crandom()*GIB_VELOCITY;
;642:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;643:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
;644:
;645:	VectorCopy( playerOrigin, origin );
;646:	velocity[0] = crandom()*GIB_VELOCITY;
;647:	velocity[1] = crandom()*GIB_VELOCITY;
;648:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
;649:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
;650:#endif
;651:}
LABELV $458
endproc CG_GibPlayer 0 0
export CG_LaunchExplode
proc CG_LaunchExplode 20 8
line 658
;652:
;653:/*
;654:==================
;655:CG_LaunchGib
;656:==================
;657:*/
;658:void CG_LaunchExplode( vec3_t origin, vec3_t velocity, qhandle_t hModel ) {
line 662
;659:	localEntity_t	*le;
;660:	refEntity_t		*re;
;661:
;662:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 663
;663:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 665
;664:
;665:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 666
;666:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 667
;667:	le->endTime = le->startTime + 10000 + random() * 6000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 10000
ADDI4
CVIF4 4
CNSTF4 1169915904
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 669
;668:
;669:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 670
;670:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 671
;671:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 673
;672:
;673:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 674
;674:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 675
;675:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 676
;676:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 678
;677:
;678:	le->bounceFactor = 0.1f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1036831949
ASGNF4
line 680
;679:
;680:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 681
;681:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 682
;682:}
LABELV $459
endproc CG_LaunchExplode 20 8
export CG_ExplosionSparks
proc CG_ExplosionSparks 72 8
line 691
;683: 
;684:
;685:/* 
;686:	Explosion Sparks
;687:
;688:	randomly shoots out "rocket sparks"
;689:*/   
;690:void CG_ExplosionSparks( vec3_t playerOrigin ) 
;691:{
line 695
;692:	vec3_t	origin, velocity;
;693://	int		i = 0;
;694:
;695:	if ( !cg_grenadeSparks.value )
ADDRGP4 cg_grenadeSparks+8
INDIRF4
CNSTF4 0
NEF4 $463
line 696
;696:		return;
ADDRGP4 $462
JUMPV
LABELV $463
line 698
;697:
;698:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 700
;699:
;700:	origin[0] += random()*20;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRF4
CNSTF4 1101004800
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
line 701
;701:	origin[1] += random()*20;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
CNSTF4 1101004800
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
line 702
;702:	origin[2] += 20 + crandom()*30;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1101004800
ADDF4
ADDF4
ASGNF4
line 704
;703:
;704: 	velocity[0] = 150 + crandom()*150;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 705
;705: 	velocity[1] = 250 + crandom()*150;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 706
;706:	velocity[2] = 50 + random()*150;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1125515264
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 707
;707:	CG_LaunchRocketSpark( origin, velocity  );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_LaunchRocketSpark
CALLV
pop
line 709
;708:
;709:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 711
;710:
;711: 	velocity[0] = 150 + crandom()*150;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 712
;712: 	velocity[1] = 150 + crandom()*150;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 713
;713:	velocity[2] = 50 + random()*150;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1125515264
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 714
;714:	CG_LaunchRocketSpark( origin, velocity  );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_LaunchRocketSpark
CALLV
pop
line 716
;715:
;716: 	velocity[0] = 150 + crandom()*150;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 717
;717: 	velocity[1] = 250 + crandom()*150;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1125515264
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1132068864
ADDF4
ASGNF4
line 718
;718:	velocity[2] = 50 + random()*150;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1125515264
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 719
;719:	CG_LaunchRocketSpark( origin, velocity  );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_LaunchRocketSpark
CALLV
pop
line 720
;720:} 
LABELV $462
endproc CG_ExplosionSparks 72 8
import CG_SpawnParticle
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $428
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 107
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $87
byte 1 110
byte 1 115
byte 1 113
byte 1 51
byte 1 95
byte 1 115
byte 1 102
byte 1 120
byte 1 47
byte 1 118
byte 1 111
byte 1 108
byte 1 117
byte 1 109
byte 1 101
byte 1 116
byte 1 114
byte 1 105
byte 1 99
byte 1 102
byte 1 111
byte 1 103
byte 1 0
