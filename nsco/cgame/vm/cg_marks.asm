export CG_InitMarkPolys
code
proc CG_InitMarkPolys 12 12
file "../cg_marks.c"
line 37
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_marks.c -- wall marks
;4:
;5:// every line of code that differs from the quake3:arena SDK
;6:// is property of manfred nerurkar
;7:// no commercial explotation allowed
;8:// you are only allowed to use this code in navy seals: covert operations 
;9:// a quake3 arena modifiation
;10:// defcon-x@ns-co.net
;11:
;12:#include "cg_local.h"
;13:
;14:/*
;15:===================================================================
;16:
;17:MARK POLYS
;18:
;19:===================================================================
;20:*/
;21:
;22:
;23:markPoly_t	cg_activeMarkPolys;			// double linked list
;24:markPoly_t	*cg_freeMarkPolys;			// single linked list
;25:markPoly_t	cg_markPolys[MAX_MARK_POLYS];
;26:static		int	markTotal;
;27:extern	vmCvar_t	cg_lightmarks;
;28:int CG_LightVerts( vec3_t normal, int numVerts, polyVert_t *verts );
;29:
;30:/*
;31:===================
;32:CG_InitMarkPolys
;33:
;34:This is called at startup and for tournement restarts
;35:===================
;36:*/
;37:void	CG_InitMarkPolys( void ) {
line 40
;38:	int		i;
;39:
;40:	memset( cg_markPolys, 0, sizeof(cg_markPolys) );
ADDRGP4 cg_markPolys
ARGP4
CNSTI4 0
ARGI4
CNSTI4 79872
ARGI4
ADDRGP4 memset
CALLP4
pop
line 42
;41:
;42:	cg_activeMarkPolys.nextMark = &cg_activeMarkPolys;
ADDRGP4 cg_activeMarkPolys+4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 43
;43:	cg_activeMarkPolys.prevMark = &cg_activeMarkPolys;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 44
;44:	cg_freeMarkPolys = cg_markPolys;
ADDRGP4 cg_freeMarkPolys
ADDRGP4 cg_markPolys
ASGNP4
line 45
;45:	for ( i = 0 ; i < MAX_MARK_POLYS - 1 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $86
line 46
;46:		cg_markPolys[i].nextMark = &cg_markPolys[i+1];
ADDRLP4 8
CNSTI4 312
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_markPolys+4
ADDP4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_markPolys+312
ADDP4
ASGNP4
line 47
;47:	}
LABELV $87
line 45
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 255
LTI4 $86
line 48
;48:}
LABELV $84
endproc CG_InitMarkPolys 12 12
export CG_FreeMarkPoly
proc CG_FreeMarkPoly 12 4
line 56
;49:
;50:
;51:/*
;52:==================
;53:CG_FreeMarkPoly
;54:==================
;55:*/
;56:void CG_FreeMarkPoly( markPoly_t *le ) {
line 57
;57:	if ( !le->prevMark ) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $93
line 58
;58:		CG_Error( "CG_FreeLocalEntity: not active" );
ADDRGP4 $95
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 59
;59:	}
LABELV $93
line 62
;60:
;61:	// remove from the doubly linked active list
;62:	le->prevMark->nextMark = le->nextMark;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRP4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 63
;63: 	if ( le->nextMark ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $96
line 64
;64:	le->nextMark->prevMark = le->prevMark;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
ASGNP4
line 65
;65:	}
LABELV $96
line 67
;66:	// the free list is only singly linked
;67:	le->nextMark = cg_freeMarkPolys;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 68
;68:	cg_freeMarkPolys = le;
ADDRGP4 cg_freeMarkPolys
ADDRFP4 0
INDIRP4
ASGNP4
line 69
;69:}
LABELV $92
endproc CG_FreeMarkPoly 12 4
export CG_AllocMark
proc CG_AllocMark 12 12
line 78
;70:
;71:/*
;72:===================
;73:CG_AllocMark
;74:
;75:Will allways succeed, even if it requires freeing an old active mark
;76:===================
;77:*/
;78:markPoly_t	*CG_AllocMark( void ) {
line 82
;79:	markPoly_t	*le;
;80:	int time;
;81:
;82:	if ( !cg_freeMarkPolys ) {
ADDRGP4 cg_freeMarkPolys
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $99
line 85
;83:		// no free entities, so free the one at the end of the chain
;84:		// remove the oldest active entity
;85:		time = cg_activeMarkPolys.prevMark->time;
ADDRLP4 4
ADDRGP4 cg_activeMarkPolys
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $102
JUMPV
LABELV $101
line 86
;86:		while (cg_activeMarkPolys.prevMark && time == cg_activeMarkPolys.prevMark->time) {
line 87
;87:			CG_FreeMarkPoly( cg_activeMarkPolys.prevMark );
ADDRGP4 cg_activeMarkPolys
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 88
;88:		}
LABELV $102
line 86
ADDRLP4 8
ADDRGP4 cg_activeMarkPolys
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $104
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
EQI4 $101
LABELV $104
line 89
;89:	}
LABELV $99
line 91
;90:
;91:	le = cg_freeMarkPolys;
ADDRLP4 0
ADDRGP4 cg_freeMarkPolys
INDIRP4
ASGNP4
line 92
;92:	cg_freeMarkPolys = cg_freeMarkPolys->nextMark;
ADDRLP4 8
ADDRGP4 cg_freeMarkPolys
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 94
;93:
;94:	memset( le, 0, sizeof( *le ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 312
ARGI4
ADDRGP4 memset
CALLP4
pop
line 97
;95:
;96:	// link into the active list
;97:	le->nextMark = cg_activeMarkPolys.nextMark;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 98
;98:	le->prevMark = &cg_activeMarkPolys;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeMarkPolys
ASGNP4
line 99
;99:	cg_activeMarkPolys.nextMark->prevMark = le;
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 100
;100:	cg_activeMarkPolys.nextMark = le;
ADDRGP4 cg_activeMarkPolys+4
ADDRLP4 0
INDIRP4
ASGNP4
line 101
;101:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $98
endproc CG_AllocMark 12 12
export CG_ImpactMark
proc CG_ImpactMark 6096 28
line 122
;102:}
;103:
;104:
;105:
;106:/*
;107:=================
;108:CG_ImpactMark
;109:
;110:origin should be a point within a unit of the plane
;111:dir should be the plane normal
;112:
;113:temporary marks will not be stored or randomly oriented, but immediately
;114:passed to the renderer.
;115:=================
;116:*/
;117:#define	MAX_MARK_FRAGMENTS	128
;118:#define	MAX_MARK_POINTS		384
;119:
;120:void CG_ImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir, 
;121:				   float orientation, float red, float green, float blue, float alpha,
;122:				   qboolean alphaFade, float radius, qboolean temporary ) {
line 133
;123:	vec3_t			axis[3];
;124:	float			texCoordScale;
;125:	vec3_t			originalPoints[4];
;126:	byte			colors[4];
;127:	int				i, j;
;128:	int				numFragments;
;129:	markFragment_t	markFragments[MAX_MARK_FRAGMENTS], *mf;
;130:	vec3_t			markPoints[MAX_MARK_POINTS];
;131:	vec3_t			projection;
;132:
;133:	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $109
line 134
;134:		return;
ADDRGP4 $108
JUMPV
LABELV $109
line 137
;135:	}
;136:
;137:	if ( radius <= 0 ) {
ADDRFP4 36
INDIRF4
CNSTF4 0
GTF4 $112
line 138
;138:		CG_Error( "CG_ImpactMark called with <= 0 radius" );
ADDRGP4 $114
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 139
;139:	}
LABELV $112
line 146
;140:
;141:	//if ( markTotal >= MAX_MARK_POLYS ) {
;142:	//	return;
;143:	//}
;144:
;145:	// create the texture axis
;146:	VectorNormalize2( dir, axis[0] );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 147
;147:	PerpendicularVector( axis[1], axis[0] );
ADDRLP4 0+12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 148
;148:	RotatePointAroundVector( axis[2], axis[0], axis[1], orientation );
ADDRLP4 0+24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 0+12
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 149
;149:	CrossProduct( axis[0], axis[2], axis[1] );
ADDRLP4 0
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 151
;150:
;151:	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 48
CNSTF4 1056964608
ADDRFP4 36
INDIRF4
DIVF4
ASGNF4
line 154
;152:
;153:	// create the full polygon
;154:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 44
CNSTI4 0
ASGNI4
LABELV $120
line 155
;155:		originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5752
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5756
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 5752
INDIRI4
ADDRLP4 4664
ADDP4
ADDRLP4 5752
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5756
INDIRF4
ADDRLP4 5752
INDIRI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5756
INDIRF4
ADDRLP4 5752
INDIRI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 156
;156:		originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 5760
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5764
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 5760
INDIRI4
ADDRLP4 4664+12
ADDP4
ADDRLP4 5760
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5764
INDIRF4
ADDRLP4 5760
INDIRI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5764
INDIRF4
ADDRLP4 5760
INDIRI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 157
;157:		originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5768
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5772
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 5768
INDIRI4
ADDRLP4 4664+24
ADDP4
ADDRLP4 5768
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5772
INDIRF4
ADDRLP4 5768
INDIRI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 5772
INDIRF4
ADDRLP4 5768
INDIRI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 158
;158:		originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 5776
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5780
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 5776
INDIRI4
ADDRLP4 4664+36
ADDP4
ADDRLP4 5776
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 5780
INDIRF4
ADDRLP4 5776
INDIRI4
ADDRLP4 0+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 5780
INDIRF4
ADDRLP4 5776
INDIRI4
ADDRLP4 0+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 159
;159:	}
LABELV $121
line 154
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 3
LTI4 $120
line 162
;160:	
;161:	// get the fragments
;162:	if ( markShader == cgs.media.wakeMarkShader )
ADDRFP4 0
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $135
line 163
;163:		VectorScale( dir, -1, projection );
ADDRLP4 5752
CNSTF4 3212836864
ASGNF4
ADDRLP4 5756
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4716
ADDRLP4 5752
INDIRF4
ADDRLP4 5756
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4716+4
ADDRLP4 5752
INDIRF4
ADDRLP4 5756
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4716+8
CNSTF4 3212836864
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRGP4 $136
JUMPV
LABELV $135
line 165
;164:	else
;165:		VectorScale( dir, -20, projection );
ADDRLP4 5760
CNSTF4 3248488448
ASGNF4
ADDRLP4 5764
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4716
ADDRLP4 5760
INDIRF4
ADDRLP4 5764
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4716+4
ADDRLP4 5760
INDIRF4
ADDRLP4 5764
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4716+8
CNSTF4 3248488448
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $136
line 167
;166:
;167:	numFragments = trap_CM_MarkFragments( 4, (void *)originalPoints,
CNSTI4 4
ARGI4
ADDRLP4 4664
ARGP4
ADDRLP4 4716
ARGP4
CNSTI4 384
ARGI4
ADDRLP4 56
ARGP4
CNSTI4 128
ARGI4
ADDRLP4 4728
ARGP4
ADDRLP4 5768
ADDRGP4 trap_CM_MarkFragments
CALLI4
ASGNI4
ADDRLP4 4712
ADDRLP4 5768
INDIRI4
ASGNI4
line 171
;168:					projection, MAX_MARK_POINTS, markPoints[0],
;169:					MAX_MARK_FRAGMENTS, markFragments );
;170:
;171:	colors[0] = red * 255;
ADDRLP4 5776
CNSTF4 1132396544
ADDRFP4 16
INDIRF4
MULF4
ASGNF4
ADDRLP4 5780
CNSTF4 1325400064
ASGNF4
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
LTF4 $144
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
ADDRLP4 5780
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $145
JUMPV
LABELV $144
ADDRLP4 5772
ADDRLP4 5776
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $145
ADDRLP4 52
ADDRLP4 5772
INDIRU4
CVUU1 4
ASGNU1
line 172
;172:	colors[1] = green * 255;
ADDRLP4 5788
CNSTF4 1132396544
ADDRFP4 20
INDIRF4
MULF4
ASGNF4
ADDRLP4 5792
CNSTF4 1325400064
ASGNF4
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
LTF4 $148
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
ADDRLP4 5792
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $149
JUMPV
LABELV $148
ADDRLP4 5784
ADDRLP4 5788
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $149
ADDRLP4 52+1
ADDRLP4 5784
INDIRU4
CVUU1 4
ASGNU1
line 173
;173:	colors[2] = blue * 255;
ADDRLP4 5800
CNSTF4 1132396544
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 5804
CNSTF4 1325400064
ASGNF4
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
LTF4 $152
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
ADDRLP4 5804
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $153
JUMPV
LABELV $152
ADDRLP4 5796
ADDRLP4 5800
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $153
ADDRLP4 52+2
ADDRLP4 5796
INDIRU4
CVUU1 4
ASGNU1
line 174
;174:	colors[3] = alpha * 255; 
ADDRLP4 5812
CNSTF4 1132396544
ADDRFP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 5816
CNSTF4 1325400064
ASGNF4
ADDRLP4 5812
INDIRF4
ADDRLP4 5816
INDIRF4
LTF4 $156
ADDRLP4 5808
ADDRLP4 5812
INDIRF4
ADDRLP4 5816
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $157
JUMPV
LABELV $156
ADDRLP4 5808
ADDRLP4 5812
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $157
ADDRLP4 52+3
ADDRLP4 5808
INDIRU4
CVUU1 4
ASGNU1
line 176
;175:
;176:	for ( i = 0, mf = markFragments ; i < numFragments ; i++, mf++ ) {
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 4728
ASGNP4
ADDRGP4 $161
JUMPV
LABELV $158
line 183
;177:		polyVert_t	*v;
;178:		polyVert_t	verts[MAX_VERTS_ON_POLY];
;179:		markPoly_t	*mark;
;180:
;181:		// we have an upper limit on the complexity of polygons
;182:		// that we store persistantly
;183:		if ( mf->numPoints > MAX_VERTS_ON_POLY ) {
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 10
LEI4 $162
line 184
;184:			mf->numPoints = MAX_VERTS_ON_POLY;
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 185
;185:		}
LABELV $162
line 186
;186:		for ( j = 0, v = verts ; j < mf->numPoints ; j++, v++ ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 5820
ADDRLP4 5828
ASGNP4
ADDRGP4 $167
JUMPV
LABELV $164
line 189
;187:			vec3_t		delta;
;188:
;189:			VectorCopy( markPoints[mf->firstPoint + j], v->xyz );
ADDRLP4 5820
INDIRP4
CNSTI4 12
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
MULI4
ADDRLP4 56
ADDP4
INDIRB
ASGNB 12
line 191
;190:
;191:			VectorSubtract( v->xyz, origin, delta );
ADDRLP4 6084
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 6068
ADDRLP4 5820
INDIRP4
INDIRF4
ADDRLP4 6084
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6088
CNSTI4 4
ASGNI4
ADDRLP4 6068+4
ADDRLP4 5820
INDIRP4
ADDRLP4 6088
INDIRI4
ADDP4
INDIRF4
ADDRLP4 6084
INDIRP4
ADDRLP4 6088
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 6092
CNSTI4 8
ASGNI4
ADDRLP4 6068+8
ADDRLP4 5820
INDIRP4
ADDRLP4 6092
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 6092
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 192
;192:			v->st[0] = 0.5 + DotProduct( delta, axis[1] ) * texCoordScale;
ADDRLP4 5820
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 6068
INDIRF4
ADDRLP4 0+12
INDIRF4
MULF4
ADDRLP4 6068+4
INDIRF4
ADDRLP4 0+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6068+8
INDIRF4
ADDRLP4 0+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 193
;193:			v->st[1] = 0.5 + DotProduct( delta, axis[2] ) * texCoordScale;
ADDRLP4 5820
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 6068
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 6068+4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 6068+8
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 194
;194:			*(int *)v->modulate = *(int *)colors;
ADDRLP4 5820
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 195
;195:		}
LABELV $165
line 186
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 5820
ADDRLP4 5820
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $167
ADDRLP4 36
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $164
line 198
;196:
;197:		// if it is a temporary (shadow) mark, add it immediately and forget about it
;198:		if ( temporary  ) { 
ADDRFP4 40
INDIRI4
CNSTI4 0
EQI4 $184
line 200
;199:			
;200:			if ( cg_lightmarks.integer )
ADDRGP4 cg_lightmarks+12
INDIRI4
CNSTI4 0
EQI4 $186
line 201
;201:			{
line 204
;202:				vec3_t normal;
;203:
;204:				VectorCopy( dir, normal );
ADDRLP4 6068
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 206
;205:
;206:				CG_LightVerts( normal,  mf->numPoints , verts);
ADDRLP4 6068
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5828
ARGP4
ADDRGP4 CG_LightVerts
CALLI4
pop
line 207
;207:			}
LABELV $186
line 209
;208:
;209:			trap_R_AddPolyToScene( markShader, mf->numPoints, verts );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5828
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 210
;210:			continue;
ADDRGP4 $159
JUMPV
LABELV $184
line 214
;211:		}
;212:
;213:		// otherwise save it persistantly
;214:		mark = CG_AllocMark();
ADDRLP4 6068
ADDRGP4 CG_AllocMark
CALLP4
ASGNP4
ADDRLP4 5824
ADDRLP4 6068
INDIRP4
ASGNP4
line 215
;215:		mark->time = cg.time;
ADDRLP4 5824
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 216
;216:		mark->alphaFade = alphaFade;
ADDRLP4 5824
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 217
;217:		mark->markShader = markShader;
ADDRLP4 5824
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 218
;218:		mark->poly.numVerts = mf->numPoints;
ADDRLP4 5824
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 219
;219:		mark->color[0] = red;
ADDRLP4 5824
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 220
;220:		mark->color[1] = green;
ADDRLP4 5824
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 221
;221:		mark->color[2] = blue;		
ADDRLP4 5824
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 222
;222:		mark->color[3] = alpha;
ADDRLP4 5824
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 224
;223:		
;224:		if ( mark->markShader == cgs.media.ns_bloodPool || mark->markShader == cgs.media.wakeMarkShader ) {
ADDRLP4 6072
ADDRLP4 5824
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
ADDRLP4 6072
INDIRI4
ADDRGP4 cgs+205084+424
INDIRI4
EQI4 $196
ADDRLP4 6072
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $190
LABELV $196
line 225
;225:			VectorCopy( origin, mark->org );
ADDRLP4 5824
INDIRP4
CNSTI4 48
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 226
;226:			VectorCopy( dir, mark->plane );
ADDRLP4 5824
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 228
;227:
;228:			if ( mark->markShader == cgs.media.wakeMarkShader )
ADDRLP4 5824
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $197
line 229
;229:				mark->poly.numVerts = radius*10;
ADDRLP4 5824
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1092616192
ADDRFP4 36
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $197
line 230
;230:		}
LABELV $190
line 233
;231:		
;232:
;233:		if ( cg_lightmarks.integer && mark->markShader  != cgs.media.wakeMarkShader  )
ADDRGP4 cg_lightmarks+12
INDIRI4
CNSTI4 0
EQI4 $201
ADDRLP4 5824
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
EQI4 $201
line 234
;234:		{
line 237
;235:			vec3_t normal;
;236:
;237:			VectorCopy( dir, normal );
ADDRLP4 6076
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 239
;238:
;239:			CG_LightVerts( normal,  mf->numPoints , mark->verts);
ADDRLP4 6076
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRLP4 5824
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRGP4 CG_LightVerts
CALLI4
pop
line 240
;240:		}
LABELV $201
line 244
;241:	//	if ( cg_lightmarks.integer && mark->markShader  != cgs.media.wakeMarkShader  )
;242:	//		CG_LightVerts( dir, mark->poly.numVerts , &mark->poly.verts );
;243:
;244:		memcpy( mark->verts, verts, mf->numPoints * sizeof( verts[0] ) );
ADDRLP4 5824
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRLP4 5828
ARGP4
CNSTU4 24
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIU4 4
MULU4
CVUI4 4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 245
;245:		markTotal++;
ADDRLP4 6076
ADDRGP4 markTotal
ASGNP4
ADDRLP4 6076
INDIRP4
ADDRLP4 6076
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 246
;246:	} 
LABELV $159
line 176
ADDRLP4 44
ADDRLP4 44
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
LABELV $161
ADDRLP4 44
INDIRI4
ADDRLP4 4712
INDIRI4
LTI4 $158
line 247
;247: }
LABELV $108
endproc CG_ImpactMark 6096 28
export CG_DirectImpactMark
proc CG_DirectImpactMark 280 16
line 262
;248:
;249:/*
;250:=================
;251:CG_DirectImpactMark
;252:
;253:origin should be a point within a unit of the plane
;254:dir should be the plane normal
;255:
;256:temporary marks will not be stored or randomly oriented, but immediately
;257:passed to the renderer.
;258:=================
;259:*/  
;260: void CG_DirectImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir, 
;261:				   float orientation, float red, float green, float blue, float alpha,
;262:				   qboolean alphaFade, float radius, qboolean temporary, int entityNum ) {  
line 273
;263:
;264:  	vec3_t  	  	  	axis[3];
;265:  	float  	  	  	texCoordScale;
;266:  	vec3_t  	  	  	originalPoints[4];
;267:  	byte  	  	  	colors[4];
;268:  	int  	  	  	  	i;
;269:  	polyVert_t  	  	*v;
;270:  	polyVert_t  	  	verts[4];
;271:	markPoly_t	*mark;
;272:
;273:  	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $207
line 274
;274:  	  	return;
ADDRGP4 $206
JUMPV
LABELV $207
line 277
;275:  	}
;276:
;277:  	if ( radius <= 0 ) {
ADDRFP4 36
INDIRF4
CNSTF4 0
GTF4 $210
line 278
;278:  	  	CG_Printf( "CG_DirectImpactMark called with <= 0 radius\n" );
ADDRGP4 $212
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 279
;279:		radius = 4;
ADDRFP4 36
CNSTF4 1082130432
ASGNF4
line 280
;280:  	}
LABELV $210
line 282
;281:
;282:	if ( cg.noMarkEntities[entityNum] ) // this entity seems blocked
ADDRFP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+167392
ADDP4
INDIRI4
CNSTI4 0
EQI4 $213
line 283
;283:	{
line 285
;284:	//	CG_Printf("entity seems blocked. won't create a mark");
;285:		return;
ADDRGP4 $206
JUMPV
LABELV $213
line 288
;286:	}
;287:  	// create the texture axis
;288:	VectorNormalize2( dir, axis[0] );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 289
;289:	PerpendicularVector( axis[1], axis[0] );
ADDRLP4 4+12
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 290
;290:	RotatePointAroundVector( axis[2], axis[0], axis[1], orientation );
ADDRLP4 4+24
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 4+12
ARGP4
ADDRFP4 12
INDIRF4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 291
;291:	CrossProduct( axis[0], axis[2], axis[1] );
ADDRLP4 4
ARGP4
ADDRLP4 4+24
ARGP4
ADDRLP4 4+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 293
;292:
;293:  	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 92
CNSTF4 1056964608
ADDRFP4 36
INDIRF4
DIVF4
ASGNF4
line 296
;294:
;295:  	// create the full polygon
;296:  	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $221
line 297
;297:  	  	originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 200
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 204
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 200
INDIRI4
ADDRLP4 44
ADDP4
ADDRLP4 200
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 204
INDIRF4
ADDRLP4 200
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 204
INDIRF4
ADDRLP4 200
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 298
;298:  	  	originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 208
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 212
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 208
INDIRI4
ADDRLP4 44+12
ADDP4
ADDRLP4 208
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 212
INDIRF4
ADDRLP4 208
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 212
INDIRF4
ADDRLP4 208
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 299
;299:  	  	originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 216
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 220
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 216
INDIRI4
ADDRLP4 44+24
ADDP4
ADDRLP4 216
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRLP4 216
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 220
INDIRF4
ADDRLP4 216
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 300
;300:  	  	originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 224
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 228
ADDRFP4 36
INDIRF4
ASGNF4
ADDRLP4 224
INDIRI4
ADDRLP4 44+36
ADDP4
ADDRLP4 224
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 228
INDIRF4
ADDRLP4 224
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 228
INDIRF4
ADDRLP4 224
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 301
;301:  	}
LABELV $222
line 296
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $221
line 303
;302:
;303:	colors[0] = red * 255;
ADDRLP4 204
CNSTF4 1132396544
ADDRFP4 16
INDIRF4
MULF4
ASGNF4
ADDRLP4 208
CNSTF4 1325400064
ASGNF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
LTF4 $237
ADDRLP4 200
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $238
JUMPV
LABELV $237
ADDRLP4 200
ADDRLP4 204
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $238
ADDRLP4 100
ADDRLP4 200
INDIRU4
CVUU1 4
ASGNU1
line 304
;304:	colors[1] = green * 255;
ADDRLP4 216
CNSTF4 1132396544
ADDRFP4 20
INDIRF4
MULF4
ASGNF4
ADDRLP4 220
CNSTF4 1325400064
ASGNF4
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
LTF4 $241
ADDRLP4 212
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $242
JUMPV
LABELV $241
ADDRLP4 212
ADDRLP4 216
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $242
ADDRLP4 100+1
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
line 305
;305:	colors[2] = blue * 255;
ADDRLP4 228
CNSTF4 1132396544
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 232
CNSTF4 1325400064
ASGNF4
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
LTF4 $245
ADDRLP4 224
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $246
JUMPV
LABELV $245
ADDRLP4 224
ADDRLP4 228
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $246
ADDRLP4 100+2
ADDRLP4 224
INDIRU4
CVUU1 4
ASGNU1
line 306
;306:	colors[3] = alpha * 255;
ADDRLP4 240
CNSTF4 1132396544
ADDRFP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $249
ADDRLP4 236
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $250
JUMPV
LABELV $249
ADDRLP4 236
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $250
ADDRLP4 100+3
ADDRLP4 236
INDIRU4
CVUU1 4
ASGNU1
line 308
;307:
;308:  	for ( i = 0, v = verts ; i < 4 ; i++, v++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 104
ASGNP4
ADDRGP4 $254
JUMPV
LABELV $251
line 311
;309:  	  	vec3_t  	  	delta;
;310:
;311:  	  	VectorCopy( originalPoints[i], v->xyz );
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 44
ADDP4
INDIRB
ASGNB 12
line 313
;312:
;313:  	  	VectorSubtract( v->xyz, origin, delta );
ADDRLP4 264
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 248
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 264
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 268
CNSTI4 4
ASGNI4
ADDRLP4 248+4
ADDRLP4 40
INDIRP4
ADDRLP4 268
INDIRI4
ADDP4
INDIRF4
ADDRLP4 264
INDIRP4
ADDRLP4 268
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 272
CNSTI4 8
ASGNI4
ADDRLP4 248+8
ADDRLP4 40
INDIRP4
ADDRLP4 272
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 272
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 314
;314:  	  	v->st[0] = 0.5 + DotProduct( delta, axis[1] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 248
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 315
;315:  	  	v->st[1] = 0.5 + DotProduct( delta, axis[2] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 248
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDRLP4 248+4
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 248+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 316
;316:  	  	*(int *)v->modulate = *(int *)colors;
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 317
;317:  	}
LABELV $252
line 308
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $254
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $251
line 320
;318:	
;319:	// if it is a temporary (shadow) mark, add it immediately and forget about it
;320:	if ( temporary ) {
ADDRFP4 40
INDIRI4
CNSTI4 0
EQI4 $271
line 321
;321:  		trap_R_AddPolyToScene( markShader, 4, verts );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 104
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 322
;322:		return;
ADDRGP4 $206
JUMPV
LABELV $271
line 326
;323:	}
;324: 
;325: 	// otherwise save it persistantly
;326:	mark = CG_AllocMark();
ADDRLP4 248
ADDRGP4 CG_AllocMark
CALLP4
ASGNP4
ADDRLP4 96
ADDRLP4 248
INDIRP4
ASGNP4
line 327
;327:	mark->time = cg.time;
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 328
;328:	mark->alphaFade = alphaFade;
ADDRLP4 96
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 329
;329:	mark->markShader = markShader;
ADDRLP4 96
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 330
;330:	mark->poly.numVerts = 4;
ADDRLP4 96
INDIRP4
CNSTI4 40
ADDP4
CNSTI4 4
ASGNI4
line 331
;331:	mark->color[0] = red;
ADDRLP4 96
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 332
;332:	mark->color[1] = green;
ADDRLP4 96
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 333
;333:	mark->color[2] = blue;		
ADDRLP4 96
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 334
;334:	mark->color[3] = alpha;
ADDRLP4 96
INDIRP4
CNSTI4 32
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 336
;335:
;336:	mark->org[0] = (float)entityNum; 
ADDRLP4 96
INDIRP4
CNSTI4 48
ADDP4
ADDRFP4 44
INDIRI4
CVIF4 4
ASGNF4
line 338
;337:
;338:	mark->org[1] = mark->org[2] = 0.0f;
ADDRLP4 256
CNSTF4 0
ASGNF4
ADDRLP4 96
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 256
INDIRF4
ASGNF4
ADDRLP4 96
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 256
INDIRF4
ASGNF4
line 340
;339:
;340:	if ( mark->markShader == cgs.media.ns_bloodPool || mark->markShader == cgs.media.wakeMarkShader ) 
ADDRLP4 260
ADDRLP4 96
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
ADDRGP4 cgs+205084+424
INDIRI4
EQI4 $280
ADDRLP4 260
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $274
LABELV $280
line 341
;341:	{
line 342
;342:		VectorCopy( origin, mark->org );
ADDRLP4 96
INDIRP4
CNSTI4 48
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 343
;343:		VectorCopy( dir, mark->plane );
ADDRLP4 96
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 345
;344:
;345:		if ( mark->markShader == cgs.media.wakeMarkShader )
ADDRLP4 96
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $281
line 346
;346:			mark->poly.numVerts = radius*10;
ADDRLP4 96
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1092616192
ADDRFP4 36
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $281
line 347
;347:	}
LABELV $274
line 349
;348:
;349:	memcpy( mark->verts, verts, 4 * sizeof( verts[0] ) );
ADDRLP4 96
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRLP4 104
ARGP4
CNSTI4 96
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 350
;350:	markTotal++;
ADDRLP4 264
ADDRGP4 markTotal
ASGNP4
ADDRLP4 264
INDIRP4
ADDRLP4 264
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 352
;351:
;352:	if ( cg_lightmarks.integer && mark->markShader  != cgs.media.wakeMarkShader  )
ADDRGP4 cg_lightmarks+12
INDIRI4
CNSTI4 0
EQI4 $285
ADDRLP4 96
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
EQI4 $285
line 353
;353:	{
line 356
;354:		vec3_t normal;
;355:
;356:		VectorCopy( dir, normal );
ADDRLP4 268
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 358
;357:
;358:		CG_LightVerts( normal,  4 , mark->verts);
ADDRLP4 268
ARGP4
CNSTI4 4
ARGI4
ADDRLP4 96
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRGP4 CG_LightVerts
CALLI4
pop
line 359
;359:	}
LABELV $285
line 360
;360: }
LABELV $206
endproc CG_DirectImpactMark 280 16
export CG_AddMarks
proc CG_AddMarks 84 44
line 379
;361:
;362:
;363: 
;364:
;365:/*
;366:===============
;367:CG_AddMarks
;368:===============
;369:*/
;370:#define	MARK_TOTAL_TIME		60000 * 6
;371:#define	MARK_FADE_TIME		1000
;372:
;373:#define WAKEMARK_TOTAL_TIME	400
;374:#define WAKEMARK_FADE_TIME	100
;375:
;376:// sizes up to 7seconds
;377:#define MARK_BLOODPOOL_SIZE_TIME 8000
;378:
;379:void CG_AddMarks( void ) {
line 384
;380:	int			j;
;381:	markPoly_t	*mp, *next;
;382:	int			t;
;383:	int			fade;
;384:	qboolean	removeAllMarks = qfalse;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 386
;385:
;386:	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $291
line 387
;387:		return;
ADDRGP4 $290
JUMPV
LABELV $291
line 390
;388:	}
;389:
;390:	if ( cg.roundStarted )
ADDRGP4 cg+116312
INDIRI4
CNSTI4 0
EQI4 $294
line 391
;391:		removeAllMarks = qtrue;
ADDRLP4 20
CNSTI4 1
ASGNI4
LABELV $294
line 393
;392:
;393:	mp = cg_activeMarkPolys.nextMark;
ADDRLP4 0
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 394
;394:	for ( ; mp != &cg_activeMarkPolys ; mp = next ) {
ADDRGP4 $301
JUMPV
LABELV $298
line 397
;395:		// grab next now, so if the local entity is freed we
;396:		// still have it
;397:		next = mp->nextMark;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 399
;398:
;399:		if (removeAllMarks)
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $302
line 400
;400:		{
line 401
;401:			CG_FreeMarkPoly(mp);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 402
;402:			continue;
ADDRGP4 $299
JUMPV
LABELV $302
line 405
;403:		}
;404:
;405:		if ( mp->markShader == cgs.media.wakeMarkShader && cg.time > mp->time + WAKEMARK_TOTAL_TIME ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $304
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 400
ADDI4
LEI4 $304
line 406
;406:			CG_FreeMarkPoly( mp );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 407
;407:			continue;
ADDRGP4 $299
JUMPV
LABELV $304
line 409
;408:		}   // see if it is time to completely remove it
;409:		else if ( cg.time > mp->time + (cg_addMarks.integer * 1000) ) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_addMarks+12
INDIRI4
MULI4
ADDI4
LEI4 $309
line 410
;410:			CG_FreeMarkPoly( mp );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 411
;411:			continue;
ADDRGP4 $299
JUMPV
LABELV $309
line 415
;412:		}
;413:
;414:		
;415:		if ( mp->markShader == cgs.media.wakeMarkShader ) 
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+184
INDIRI4
NEI4 $313
line 416
;416:		{
line 417
;417:			float t = mp->time + WAKEMARK_TOTAL_TIME - cg.time;
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 400
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 419
;418:			float radius;
;419:			float fade = t / WAKEMARK_TOTAL_TIME; 
ADDRLP4 28
ADDRLP4 36
INDIRF4
CNSTF4 1137180672
DIVF4
ASGNF4
line 421
;420:
;421:			mp->poly.numVerts = mp->poly.numVerts * 1.1;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTF4 1066192077
ADDRLP4 40
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 423
;422:
;423:			radius = ( float ) ( ( float ) (mp->poly.numVerts)  / 20.0f );
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1101004800
DIVF4
ASGNF4
line 425
;424:
;425:			if (radius <= 0 )
ADDRLP4 32
INDIRF4
CNSTF4 0
GTF4 $318
line 426
;426:				radius = 1;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
LABELV $318
line 428
;427:
;428:			if ( fade <= 0 )
ADDRLP4 28
INDIRF4
CNSTF4 0
GTF4 $320
line 429
;429:				fade = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
LABELV $320
line 431
;430:
;431:			CG_ImpactMark( mp->markShader, mp->org, mp->plane, 20,fade,fade,fade,fade,qtrue, radius, qtrue );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ARGP4
CNSTF4 1101004800
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 52
CNSTI4 1
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 432
;432:			continue;
ADDRGP4 $299
JUMPV
LABELV $313
line 434
;433:		}
;434:		else if ( mp->markShader == cgs.media.ns_bloodPool )
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+424
INDIRI4
NEI4 $322
line 435
;435:		{
line 436
;436:			t = mp->time + (cg_addMarks.integer * 1000) - cg.time;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_addMarks+12
INDIRI4
MULI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 438
;437:			
;438:			if ( t < MARK_FADE_TIME ) {
ADDRLP4 16
INDIRI4
CNSTI4 1000
GEI4 $323
line 439
;439:				fade = 255 * t / MARK_FADE_TIME;
ADDRLP4 8
CNSTI4 255
ADDRLP4 16
INDIRI4
MULI4
CNSTI4 1000
DIVI4
ASGNI4
line 441
;440:
;441:				if ( mp->alphaFade ) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $330
line 442
;442:					for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $335
JUMPV
LABELV $332
line 443
;443:						mp->verts[j].modulate[3] = fade;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 23
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 444
;444:					}
LABELV $333
line 442
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $335
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $332
line 445
;445:				} else {
ADDRGP4 $323
JUMPV
LABELV $330
line 446
;446:					for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $339
JUMPV
LABELV $336
line 447
;447:						mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 36
CNSTI4 20
ASGNI4
ADDRLP4 40
ADDRLP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $341
ADDRLP4 28
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $342
JUMPV
LABELV $341
ADDRLP4 28
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $342
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 448
;448:						mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 56
CNSTI4 24
ASGNI4
ADDRLP4 60
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $344
ADDRLP4 48
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $345
JUMPV
LABELV $344
ADDRLP4 48
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $345
ADDRLP4 56
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 449
;449:						mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 76
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 80
CNSTF4 1325400064
ASGNF4
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
LTF4 $347
ADDRLP4 68
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $348
JUMPV
LABELV $347
ADDRLP4 68
ADDRLP4 76
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $348
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 68
INDIRU4
CVUU1 4
ASGNU1
line 450
;450:					}
LABELV $337
line 446
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $339
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $336
line 451
;451:				}
line 452
;452:			}
line 453
;453:		}
ADDRGP4 $323
JUMPV
LABELV $322
line 455
;454:		else 
;455:		{
line 456
;456:			t = mp->time + (cg_addMarks.integer * 1000) - cg.time;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_addMarks+12
INDIRI4
MULI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 457
;457:			if ( t < MARK_FADE_TIME ) {
ADDRLP4 16
INDIRI4
CNSTI4 1000
GEI4 $351
line 458
;458:				fade = 255 * t / MARK_FADE_TIME;
ADDRLP4 8
CNSTI4 255
ADDRLP4 16
INDIRI4
MULI4
CNSTI4 1000
DIVI4
ASGNI4
line 460
;459:
;460:				if ( mp->alphaFade ) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $353
line 461
;461:					for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $358
JUMPV
LABELV $355
line 462
;462:						mp->verts[j].modulate[3] = fade;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 23
ADDP4
ADDRLP4 8
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 463
;463:					}
LABELV $356
line 461
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $358
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $355
line 464
;464:				} else {
ADDRGP4 $354
JUMPV
LABELV $353
line 465
;465:					for ( j = 0 ; j < mp->poly.numVerts ; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $362
JUMPV
LABELV $359
line 466
;466:						mp->verts[j].modulate[0] = mp->color[0] * fade;
ADDRLP4 36
CNSTI4 20
ASGNI4
ADDRLP4 40
ADDRLP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $364
ADDRLP4 28
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $365
JUMPV
LABELV $364
ADDRLP4 28
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $365
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 467
;467:						mp->verts[j].modulate[1] = mp->color[1] * fade;
ADDRLP4 56
CNSTI4 24
ASGNI4
ADDRLP4 60
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 64
CNSTF4 1325400064
ASGNF4
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
LTF4 $367
ADDRLP4 48
ADDRLP4 60
INDIRF4
ADDRLP4 64
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $368
JUMPV
LABELV $367
ADDRLP4 48
ADDRLP4 60
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $368
ADDRLP4 56
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 468
;468:						mp->verts[j].modulate[2] = mp->color[2] * fade;
ADDRLP4 76
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 80
CNSTF4 1325400064
ASGNF4
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
LTF4 $370
ADDRLP4 68
ADDRLP4 76
INDIRF4
ADDRLP4 80
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $371
JUMPV
LABELV $370
ADDRLP4 68
ADDRLP4 76
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $371
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 68
INDIRU4
CVUU1 4
ASGNU1
line 469
;469:					}
LABELV $360
line 465
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $362
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
LTI4 $359
line 470
;470:				}
LABELV $354
line 471
;471:			}
LABELV $351
line 472
;472:		}
LABELV $323
line 474
;473:
;474:		if ( mp->markShader == cgs.media.ns_bloodPool )
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+424
INDIRI4
NEI4 $372
line 475
;475:		{ 
line 476
;476:			float t = mp->time + (cg_addMarks.integer * 1000) - cg.time;
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_addMarks+12
INDIRI4
MULI4
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ASGNF4
line 479
;477:			float radius;
;478:
;479:			if ( t > ( (cg_addMarks.integer * 1000) - MARK_BLOODPOOL_SIZE_TIME ) )				
ADDRLP4 32
INDIRF4
CNSTI4 1000
ADDRGP4 cg_addMarks+12
INDIRI4
MULI4
CNSTI4 8000
SUBI4
CVIF4 4
LEF4 $378
line 480
;480:				mp->poly.numVerts++;
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $378
line 482
;481:
;482:			radius = ( float ) ( ( float ) (mp->poly.numVerts)  / 20.0f );
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1101004800
DIVF4
ASGNF4
line 484
;483:
;484:			if (radius <= 0 )
ADDRLP4 28
INDIRF4
CNSTF4 0
GTF4 $381
line 485
;485:				radius = 1;
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
LABELV $381
line 487
;486:
;487:			CG_ImpactMark( mp->markShader, mp->org, mp->plane, 20,1,1,1,0.6f,qfalse, radius, qtrue );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ARGP4
CNSTF4 1101004800
ARGF4
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 44
INDIRF4
ARGF4
ADDRLP4 44
INDIRF4
ARGF4
CNSTF4 1058642330
ARGF4
CNSTI4 0
ARGI4
ADDRLP4 28
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 489
;488: 
;489:			continue;
ADDRGP4 $299
JUMPV
LABELV $372
line 492
;490:		}
;491:
;492:		trap_R_AddPolyToScene( mp->markShader, mp->poly.numVerts, mp->verts );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 493
;493:	}
LABELV $299
line 394
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
LABELV $301
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeMarkPolys
CVPU4 4
NEU4 $298
line 495
;494:	
;495:	if ( removeAllMarks )
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $383
line 496
;496:		cg.roundStarted = qfalse;
ADDRGP4 cg+116312
CNSTI4 0
ASGNI4
LABELV $383
line 497
;497:}
LABELV $290
endproc CG_AddMarks 84 44
export CG_DeleteDirectMark
proc CG_DeleteDirectMark 8 4
line 500
;498:
;499:void CG_DeleteDirectMark( int entityNum ) 
;500:{ 
line 504
;501:	markPoly_t	*mp, *next;
;502:
;503:	// don't create marks for this entity in the future
;504:	cg.noMarkEntities[ entityNum ] = qtrue;
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+167392
ADDP4
CNSTI4 1
ASGNI4
line 506
;505:
;506:	mp = cg_activeMarkPolys.nextMark; 
ADDRLP4 0
ADDRGP4 cg_activeMarkPolys+4
INDIRP4
ASGNP4
line 508
;507:
;508:	for ( ; mp != &cg_activeMarkPolys ; mp = next ) {
ADDRGP4 $392
JUMPV
LABELV $389
line 511
;509:		// grab next now, so if the local entity is freed we
;510:		// still have it
;511:		next = mp->nextMark;  
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 514
;512:
;513:		// see if it is an mark that should be removed
;514:		if ( (int)mp->org[0] == entityNum ) {
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
CVFI4 4
ADDRFP4 0
INDIRI4
NEI4 $393
line 515
;515:			CG_FreeMarkPoly( mp ); 
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeMarkPoly
CALLV
pop
line 516
;516:			continue;
LABELV $393
line 518
;517:		} 
;518:	}  
LABELV $390
line 508
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $392
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeMarkPolys
CVPU4 4
NEU4 $389
line 519
;519:}
LABELV $386
endproc CG_DeleteDirectMark 8 4
import CG_LightVerts
import cg_lightmarks
bss
align 4
LABELV markTotal
skip 4
export cg_freeMarkPolys
align 4
LABELV cg_freeMarkPolys
skip 4
export cg_activeMarkPolys
align 4
LABELV cg_activeMarkPolys
skip 312
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
export cg_markPolys
align 4
LABELV cg_markPolys
skip 79872
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $212
byte 1 67
byte 1 71
byte 1 95
byte 1 68
byte 1 105
byte 1 114
byte 1 101
byte 1 99
byte 1 116
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $114
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $95
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
