data
export cg_customSoundNames
align 4
LABELV cg_customSoundNames
address $84
address $85
address $86
address $87
address $88
address $89
address $90
address $91
address $92
address $93
address $94
address $95
address $96
skip 76
code
proc CG_IsPlayerInAnim 4 0
file "../cg_players.c"
line 39
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// cg_players.c -- handle the media and animation for player entities
;4:
;5:// every line of code that differs from the quake3:arena SDK
;6:// is property of manfred nerurkar
;7:// no commercial explotation allowed
;8:// you are only allowed to use this code in navy seals: covert operations 
;9:// a quake3 arena modifiation
;10:// defcon-x@ns-co.net
;11:
;12:#include "cg_local.h" 
;13:
;14:void CG_AddPlayerWeapon( refEntity_t *leftArm, refEntity_t *rightArm, playerState_t *ps, centity_t *cent );
;15:
;16:char	*cg_customSoundNames[MAX_CUSTOM_SOUNDS] = {
;17:	"*death1.wav",
;18:	"*death2.wav",
;19:	"*death3.wav",
;20:	"*jump1.wav",
;21:	"*pain25_1.wav",
;22:	"*pain50_1.wav",
;23:	"*pain75_1.wav",
;24:	"*pain100_1.wav",
;25:	"*falling1.wav",
;26:	"*gasp.wav",
;27:	"*drown.wav",
;28:	"*fall1.wav",
;29:	"*taunt.wav"
;30:};
;31: 
;32:/*
;33:================================
;34:CG_IsPlayerInAnim( anim )
;35:
;36:  returns true if currentplayer is in anim
;37:================================
;38:*/
;39:static qboolean CG_IsPlayerInAnim( centity_t *cent, int anim, qboolean legs ) {
line 42
;40:	int curanim;
;41:
;42:	if ( !cent )
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $98
line 43
;43:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $97
JUMPV
LABELV $98
line 45
;44:	
;45:	if ( legs )
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $100
line 46
;46:		curanim = cent->currentState.legsAnim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $101
JUMPV
LABELV $100
line 48
;47:	else
;48:		curanim = cent->currentState.torsoAnim;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
LABELV $101
line 50
;49:
;50:	if ( curanim == anim )
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $102
line 51
;51:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $97
JUMPV
LABELV $102
line 53
;52:
;53:	return qfalse;
CNSTI4 0
RETI4
LABELV $97
endproc CG_IsPlayerInAnim 4 0
proc CG_Draw3rdPersonPlayerCrosshair 212 28
line 62
;54:}
;55:/*
;56:===============
;57:CG_Draw3rdPersonPlayerCrosshair
;58:
;59:Draw a crosshair at the end of playersview
;60:===============
;61:*/
;62:static void CG_Draw3rdPersonPlayerCrosshair( centity_t *cent ) {
line 74
;63:	vec3_t		start, end;
;64:	trace_t		trace;
;65://	int			contents;
;66://	polyVert_t	verts[4];
;67:	vec3_t		forward;
;68:	float		endDist;
;69:	localEntity_t	*ex,*ex2,*ex3;
;70:	int ca;
;71:	float	viewheight;
;72:			int anim;
;73:
;74:	if (!cg.renderingThirdPerson )
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $105
line 75
;75:		return;
ADDRGP4 $104
JUMPV
LABELV $105
line 77
;76:
;77:	AngleVectors( cent->lerpAngles, forward,NULL,NULL );
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 79
;78:	
;79:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 80
;80:	VectorMA( end, 600, forward, end );
ADDRLP4 124
CNSTF4 1142292480
ASGNF4
ADDRLP4 28
ADDRLP4 28
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1142292480
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 81
;81:	VectorCopy( cent->lerpOrigin, start ); 
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 83
;82:
;83:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 85
;84:		
;85:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR )
ADDRLP4 116
INDIRI4
CNSTI4 42
EQI4 $116
ADDRLP4 116
INDIRI4
CNSTI4 41
NEI4 $114
LABELV $116
line 86
;86:		viewheight = CROUCH_VIEWHEIGHT;
ADDRLP4 112
CNSTF4 1094713344
ASGNF4
ADDRGP4 $115
JUMPV
LABELV $114
line 88
;87:	else
;88:		viewheight = DEFAULT_VIEWHEIGHT;
ADDRLP4 112
CNSTF4 1104150528
ASGNF4
LABELV $115
line 90
;89:
;90:	start[2] += viewheight ;
ADDRLP4 100+8
ADDRLP4 100+8
INDIRF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 91
;91:	end[2] += viewheight ;
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 112
INDIRF4
ADDF4
ASGNF4
line 94
;92:
;93:	// trace down to find the surface
;94:	trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, MASK_SOLID );
ADDRLP4 44
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 132
CNSTP4 0
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 96
;95: 
;96:	endDist = Distance( start, trace.endpos );
ADDRLP4 100
ARGP4
ADDRLP4 44+12
ARGP4
ADDRLP4 136
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 136
INDIRF4
ASGNF4
line 98
;97:
;98:	ex = CG_AllocLocalEntity();
ADDRLP4 140
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 140
INDIRP4
ASGNP4
line 99
;99:	ex->leType = LE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 101
;100:
;101:	ex->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 102
;102:	ex->endTime = ex->startTime + 1;	
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 104
;103:
;104:	VectorCopy ( trace.endpos, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 44+12
INDIRB
ASGNB 12
line 105
;105:	ex->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 106
;106:	ex->refEntity.rotation = sin( cg.time );
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 148
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 148
INDIRF4
ASGNF4
line 107
;107:	ex->refEntity.radius = 24;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTF4 1103101952
ASGNF4
line 108
;108:	VectorMA( ex->refEntity.origin, -1, forward, ex->refEntity.origin );
ADDRLP4 152
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
CNSTF4 3212836864
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 156
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
CNSTF4 3212836864
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 160
ADDRLP4 0
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
CNSTF4 3212836864
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 110
;109:
;110:	ca = cg_drawCrosshair.integer;
ADDRLP4 24
ADDRGP4 cg_drawCrosshair+12
INDIRI4
ASGNI4
line 112
;111:
;112:	if (ca < 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $126
line 113
;113:		ca = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 114
;114:	}   
LABELV $126
line 115
;115:	ex->refEntity.customShader = cgs.media.crosshairShader[ ca % NUM_CROSSHAIRS ];
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 10
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+56
ADDP4
INDIRI4
ASGNI4
line 118
;116: 
;117: 
;118:	ex2 = CG_AllocLocalEntity();
ADDRLP4 164
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 164
INDIRP4
ASGNP4
line 119
;119:	ex2->leType = LE_SCALE_FADE;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 121
;120:
;121:	ex2->startTime = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 122
;122:	ex2->endTime = ex2->startTime + 1;	
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 124
;123:
;124:	VectorCopy ( trace.endpos, ex2->refEntity.origin);
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 44+12
INDIRB
ASGNB 12
line 125
;125:	VectorMA( ex2->refEntity.origin, -endDist/3, forward, ex2->refEntity.origin );
ADDRLP4 172
ADDRLP4 4
INDIRP4
CNSTI4 220
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176
ADDRLP4 4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
ADDF4
ASGNF4
ADDRLP4 180
ADDRLP4 4
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
ADDF4
ASGNF4
line 126
;126:	ex2->refEntity.reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 127
;127:	ex2->refEntity.rotation = sin( cg.time );
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 184
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 184
INDIRF4
ASGNF4
line 128
;128:	ex2->refEntity.radius = 24; 
ADDRLP4 4
INDIRP4
CNSTI4 284
ADDP4
CNSTF4 1103101952
ASGNF4
line 130
;129:
;130:	ca = cg_drawCrosshair.integer;
ADDRLP4 24
ADDRGP4 cg_drawCrosshair+12
INDIRI4
ASGNI4
line 132
;131:
;132:	if (ca < 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $136
line 133
;133:		ca = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 134
;134:	}   
LABELV $136
line 137
;135:
;136:	
;137:	ex2->refEntity.customShader = cgs.media.crosshairShader[ ca % NUM_CROSSHAIRS ];
ADDRLP4 4
INDIRP4
CNSTI4 264
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 10
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+56
ADDP4
INDIRI4
ASGNI4
line 139
;138: 
;139:	ex3 = CG_AllocLocalEntity();
ADDRLP4 188
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 188
INDIRP4
ASGNP4
line 140
;140:	ex3->leType = LE_SCALE_FADE;
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 142
;141:
;142:	ex3->startTime = cg.time;
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 143
;143:	ex3->endTime = ex3->startTime + 1;	
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 145
;144:
;145:	VectorCopy ( trace.endpos, ex3->refEntity.origin);
ADDRLP4 8
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 44+12
INDIRB
ASGNB 12
line 146
;146:	VectorMA( ex3->refEntity.origin, (-endDist/3)*2, forward, ex3->refEntity.origin );
ADDRLP4 196
ADDRLP4 8
INDIRP4
CNSTI4 220
ADDP4
ASGNP4
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 12
INDIRF4
CNSTF4 1073741824
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 200
ADDRLP4 8
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRF4
ADDRLP4 12+4
INDIRF4
CNSTF4 1073741824
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204
ADDRLP4 8
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 12+8
INDIRF4
CNSTF4 1073741824
ADDRLP4 40
INDIRF4
NEGF4
CNSTF4 1077936128
DIVF4
MULF4
MULF4
ADDF4
ASGNF4
line 147
;147:	ex3->refEntity.reType = RT_SPRITE;
ADDRLP4 8
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 148
;148:	ex3->refEntity.rotation = sin( cg.time );
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 208
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 208
INDIRF4
ASGNF4
line 149
;149:	ex3->refEntity.radius = 24; 
ADDRLP4 8
INDIRP4
CNSTI4 284
ADDP4
CNSTF4 1103101952
ASGNF4
line 151
;150:
;151:	ca = cg_drawCrosshair.integer;
ADDRLP4 24
ADDRGP4 cg_drawCrosshair+12
INDIRI4
ASGNI4
line 153
;152:
;153:	if (ca < 0) {
ADDRLP4 24
INDIRI4
CNSTI4 0
GEI4 $146
line 154
;154:		ca = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 155
;155:	}   
LABELV $146
line 157
;156:
;157:	ex3->refEntity.customShader = cgs.media.crosshairShader[ ca % NUM_CROSSHAIRS ];
ADDRLP4 8
INDIRP4
CNSTI4 264
ADDP4
ADDRLP4 24
INDIRI4
CNSTI4 10
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+56
ADDP4
INDIRI4
ASGNI4
line 160
;158:
;159:
;160:}
LABELV $104
endproc CG_Draw3rdPersonPlayerCrosshair 212 28
export CG_CustomSound
proc CG_CustomSound 4 8
line 169
;161:// Navy Seals --
;162:
;163:/*
;164:================
;165:CG_CustomSound
;166:
;167:================
;168:*/
;169:sfxHandle_t	CG_CustomSound( int clientNum, const char *soundName ) {
line 173
;170://	clientInfo_t *ci;
;171://	int			i;
;172:
;173:	if ( soundName[0] != '*' ) {
ADDRFP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $151
line 174
;174:		return trap_S_RegisterSound( soundName, qfalse );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $150
JUMPV
LABELV $151
line 189
;175:	}
;176:/*
;177:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
;178:		clientNum = 0;
;179:	}
;180:	ci = &cgs.clientinfo[ clientNum ];
;181:
;182:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS && cg_customSoundNames[i] ; i++ ) {
;183:		if ( !strcmp( soundName, cg_customSoundNames[i] ) ) {
;184:			return ci->sounds[i];
;185:		}
;186:	}
;187:	*/
;188:
;189:	CG_Error( "Unknown custom sound: %s", soundName );
ADDRGP4 $153
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 190
;190:	return 0;
CNSTI4 0
RETI4
LABELV $150
endproc CG_CustomSound 4 8
proc CG_ParseAnimationFile 20104 12
line 211
;191:}
;192:
;193:   
;194:/*
;195:=============================================================================
;196:
;197:CLIENT INFO
;198:
;199:=============================================================================
;200:*/
;201: 
;202:
;203:/*
;204:======================
;205:CG_ParseAnimationFile
;206:
;207:Read a configuration file containing animation coutns and rates
;208:models/players/visor/animation.cfg, etc
;209:======================
;210:*/
;211: static  qboolean	CG_ParseAnimationFile( const char *filename, clientInfo_t *ci ) {
line 222
;212:	char		*text_p, *prev;
;213:	int			len;
;214:	int			i;
;215:	char		*token;
;216:	float		fps;
;217:	int			skip;
;218:	char		text[20000];
;219:	fileHandle_t	f;
;220:	animation_t *animations;
;221:
;222:	animations = ci->animations;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 800
ADDP4
ASGNP4
line 225
;223:
;224:	// load the file
;225:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20032
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20036
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 20036
INDIRI4
ASGNI4
line 226
;226:	if ( len <= 0 ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
GTI4 $155
line 227
;227:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $154
JUMPV
LABELV $155
line 229
;228:	}
;229:	if ( len >= sizeof( text ) - 1 ) {
ADDRLP4 28
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $157
line 230
;230:		CG_Printf( "File %s too long\n", filename );
ADDRGP4 $159
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 231
;231:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $154
JUMPV
LABELV $157
line 233
;232:	}
;233:	trap_FS_Read( text, len, f );
ADDRLP4 32
ARGP4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 234
;234:	text[len] = 0;
ADDRLP4 28
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 235
;235:	trap_FS_FCloseFile( f );
ADDRLP4 20032
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 238
;236:
;237:	// parse the text
;238:	text_p = text;
ADDRLP4 12
ADDRLP4 32
ASGNP4
line 239
;239:	skip = 0;	// quite the compiler warning
ADDRLP4 24
CNSTI4 0
ASGNI4
line 241
;240:
;241:	ci->footsteps = FOOTSTEP_NORMAL;
ADDRFP4 4
INDIRP4
CNSTI4 552
ADDP4
CNSTI4 0
ASGNI4
line 242
;242:	VectorClear( ci->headOffset );
ADDRLP4 20040
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20044
CNSTF4 0
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 548
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 544
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
ADDRLP4 20040
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 20044
INDIRF4
ASGNF4
line 243
;243:	ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $161
JUMPV
LABELV $160
line 246
;244:
;245:	// read optional parameters
;246:	while ( 1 ) {
line 247
;247:		prev = text_p;	// so we can unget
ADDRLP4 20
ADDRLP4 12
INDIRP4
ASGNP4
line 248
;248:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 249
;249:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $163
line 250
;250:			break;
ADDRGP4 $162
JUMPV
LABELV $163
line 252
;251:		}
;252:		if ( !Q_stricmp( token, "step_walk-l" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $167
ARGP4
ADDRLP4 20052
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20052
INDIRI4
CNSTI4 0
NEI4 $165
line 253
;253:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20056
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20056
INDIRP4
ASGNP4
line 254
;254:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $168
line 255
;255:				break;
ADDRGP4 $162
JUMPV
LABELV $168
line 257
;256:			} 
;257:			ci->footprintFrameTimer.step_walkl = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2452
ADDP4
ADDRLP4 20060
INDIRI4
ASGNI4
line 258
;258:			continue;
ADDRGP4 $161
JUMPV
LABELV $165
line 259
;259:		} else if ( !Q_stricmp( token, "step_walk-r" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $172
ARGP4
ADDRLP4 20056
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20056
INDIRI4
CNSTI4 0
NEI4 $170
line 260
;260:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20060
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20060
INDIRP4
ASGNP4
line 261
;261:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $173
line 262
;262:				break;
ADDRGP4 $162
JUMPV
LABELV $173
line 264
;263:			} 
;264:			ci->footprintFrameTimer.step_walkr = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20064
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2456
ADDP4
ADDRLP4 20064
INDIRI4
ASGNI4
line 265
;265:			continue;
ADDRGP4 $161
JUMPV
LABELV $170
line 266
;266:		} else if ( !Q_stricmp( token, "step_run-l" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $177
ARGP4
ADDRLP4 20060
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20060
INDIRI4
CNSTI4 0
NEI4 $175
line 267
;267:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20064
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20064
INDIRP4
ASGNP4
line 268
;268:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $178
line 269
;269:				break;
ADDRGP4 $162
JUMPV
LABELV $178
line 271
;270:			} 
;271:			ci->footprintFrameTimer.step_runl = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20068
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2464
ADDP4
ADDRLP4 20068
INDIRI4
ASGNI4
line 272
;272:			continue;
ADDRGP4 $161
JUMPV
LABELV $175
line 273
;273:		} else if ( !Q_stricmp( token, "step_run-r" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $182
ARGP4
ADDRLP4 20064
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20064
INDIRI4
CNSTI4 0
NEI4 $180
line 274
;274:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20068
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20068
INDIRP4
ASGNP4
line 275
;275:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $183
line 276
;276:				break;
ADDRGP4 $162
JUMPV
LABELV $183
line 278
;277:			} 
;278:			ci->footprintFrameTimer.step_runr = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20072
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2460
ADDP4
ADDRLP4 20072
INDIRI4
ASGNI4
line 279
;279:			continue;
ADDRGP4 $161
JUMPV
LABELV $180
line 280
;280:		} else if ( !Q_stricmp( token, "step_limp-l" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $187
ARGP4
ADDRLP4 20068
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20068
INDIRI4
CNSTI4 0
NEI4 $185
line 281
;281:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20072
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20072
INDIRP4
ASGNP4
line 282
;282:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $188
line 283
;283:				break;
ADDRGP4 $162
JUMPV
LABELV $188
line 285
;284:			} 
;285:			ci->footprintFrameTimer.step_limpl = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20076
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2468
ADDP4
ADDRLP4 20076
INDIRI4
ASGNI4
line 286
;286:			continue;
ADDRGP4 $161
JUMPV
LABELV $185
line 287
;287:		} else if ( !Q_stricmp( token, "step_limp-r" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $192
ARGP4
ADDRLP4 20072
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20072
INDIRI4
CNSTI4 0
NEI4 $190
line 288
;288:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20076
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20076
INDIRP4
ASGNP4
line 289
;289:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $193
line 290
;290:				break;
ADDRGP4 $162
JUMPV
LABELV $193
line 292
;291:			} 
;292:			ci->footprintFrameTimer.step_limpr = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20080
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2472
ADDP4
ADDRLP4 20080
INDIRI4
ASGNI4
line 293
;293:			continue;
ADDRGP4 $161
JUMPV
LABELV $190
line 294
;294:		} else if ( !Q_stricmp( token, "step_back-l" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $197
ARGP4
ADDRLP4 20076
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20076
INDIRI4
CNSTI4 0
NEI4 $195
line 295
;295:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20080
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20080
INDIRP4
ASGNP4
line 296
;296:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $198
line 297
;297:				break;
ADDRGP4 $162
JUMPV
LABELV $198
line 299
;298:			} 
;299:			ci->footprintFrameTimer.step_backl = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20084
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2476
ADDP4
ADDRLP4 20084
INDIRI4
ASGNI4
line 300
;300:			continue;
ADDRGP4 $161
JUMPV
LABELV $195
line 301
;301:		} else if ( !Q_stricmp( token, "step_back-r" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $202
ARGP4
ADDRLP4 20080
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20080
INDIRI4
CNSTI4 0
NEI4 $200
line 302
;302:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20084
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20084
INDIRP4
ASGNP4
line 303
;303:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $203
line 304
;304:				break;
ADDRGP4 $162
JUMPV
LABELV $203
line 306
;305:			} 
;306:			ci->footprintFrameTimer.step_backr = atoi(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20088
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 2480
ADDP4
ADDRLP4 20088
INDIRI4
ASGNI4
line 307
;307:			continue;
ADDRGP4 $161
JUMPV
LABELV $200
line 308
;308:		}else if ( !Q_stricmp( token, "headoffset" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $207
ARGP4
ADDRLP4 20084
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20084
INDIRI4
CNSTI4 0
NEI4 $205
line 309
;309:			for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $208
line 310
;310:				token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20088
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20088
INDIRP4
ASGNP4
line 311
;311:				if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $212
line 312
;312:					break;
ADDRGP4 $161
JUMPV
LABELV $212
line 314
;313:				}
;314:				ci->headOffset[i] = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20092
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 540
ADDP4
ADDP4
ADDRLP4 20092
INDIRF4
ASGNF4
line 315
;315:			}
LABELV $209
line 309
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $208
line 316
;316:			continue;
ADDRGP4 $161
JUMPV
LABELV $205
line 317
;317:		} else if ( !Q_stricmp( token, "sex" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $216
ARGP4
ADDRLP4 20088
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20088
INDIRI4
CNSTI4 0
NEI4 $214
line 318
;318:			token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20092
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20092
INDIRP4
ASGNP4
line 319
;319:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $217
line 320
;320:				break;
ADDRGP4 $162
JUMPV
LABELV $217
line 322
;321:			}
;322:			if ( token[0] == 'f' || token[0] == 'F' ) {
ADDRLP4 20096
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20096
INDIRI4
CNSTI4 102
EQI4 $221
ADDRLP4 20096
INDIRI4
CNSTI4 70
NEI4 $219
LABELV $221
line 323
;323:				ci->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 324
;324:			} else if ( token[0] == 'n' || token[0] == 'N' ) {
ADDRGP4 $161
JUMPV
LABELV $219
ADDRLP4 20100
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20100
INDIRI4
CNSTI4 110
EQI4 $224
ADDRLP4 20100
INDIRI4
CNSTI4 78
NEI4 $222
LABELV $224
line 325
;325:				ci->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 2
ASGNI4
line 326
;326:			} else {
ADDRGP4 $161
JUMPV
LABELV $222
line 327
;327:				ci->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 0
ASGNI4
line 328
;328:			}
line 329
;329:			continue;
ADDRGP4 $161
JUMPV
LABELV $214
line 333
;330:		}
;331:
;332:		// if it is a number, start parsing animations
;333:		if ( token[0] >= '0' && token[0] <= '9' ) {
ADDRLP4 20092
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 20092
INDIRI4
CNSTI4 48
LTI4 $225
ADDRLP4 20092
INDIRI4
CNSTI4 57
GTI4 $225
line 334
;334:			text_p = prev;	// unget the token
ADDRLP4 12
ADDRLP4 20
INDIRP4
ASGNP4
line 335
;335:			break;
ADDRGP4 $162
JUMPV
LABELV $225
line 337
;336:		}
;337:		Com_Printf( "unknown token '%s' is %s\n", token, filename );
ADDRGP4 $227
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 338
;338:	}
LABELV $161
line 246
ADDRGP4 $160
JUMPV
LABELV $162
line 341
;339:
;340:	// read information for each frame
;341:	for ( i = 0 ; i < MAX_ANIMATIONS ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $228
line 343
;342:
;343:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20048
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20048
INDIRP4
ASGNP4
line 344
;344:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $232
line 345
;345:			break;
ADDRGP4 $230
JUMPV
LABELV $232
line 347
;346:		}
;347:		animations[i].firstFrame = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20052
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ADDRLP4 20052
INDIRI4
ASGNI4
line 350
;348:
;349:		// leg only frames are adjusted to not count the upper body only frames
;350:		if ( i == LEGS_IDLECR ) {
ADDRLP4 4
INDIRI4
CNSTI4 41
NEI4 $234
line 351
;351:			skip = animations[LEGS_IDLECR].firstFrame - animations[TORSO_GESTURE1].firstFrame;
ADDRLP4 24
ADDRLP4 8
INDIRP4
CNSTI4 1148
ADDP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
SUBI4
ASGNI4
line 352
;352:		}
LABELV $234
line 353
;353:		if ( i >= LEGS_IDLECR ) {
ADDRLP4 4
INDIRI4
CNSTI4 41
LTI4 $236
line 354
;354:			animations[i].firstFrame -= skip;
ADDRLP4 20056
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
ASGNP4
ADDRLP4 20056
INDIRP4
ADDRLP4 20056
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ASGNI4
line 355
;355:		}
LABELV $236
line 357
;356:
;357:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20056
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20056
INDIRP4
ASGNP4
line 358
;358:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $238
line 359
;359:			break;
ADDRGP4 $230
JUMPV
LABELV $238
line 361
;360:		}
;361:		animations[i].numFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20060
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20060
INDIRI4
ASGNI4
line 363
;362:
;363:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20064
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20064
INDIRP4
ASGNP4
line 364
;364:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $240
line 365
;365:			break;
ADDRGP4 $230
JUMPV
LABELV $240
line 367
;366:		}
;367:		animations[i].loopFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20068
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20068
INDIRI4
ASGNI4
line 369
;368:
;369:		token = COM_Parse( &text_p );
ADDRLP4 12
ARGP4
ADDRLP4 20072
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20072
INDIRP4
ASGNP4
line 370
;370:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $242
line 371
;371:			break;
ADDRGP4 $230
JUMPV
LABELV $242
line 373
;372:		}
;373:		fps = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20076
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 20076
INDIRF4
ASGNF4
line 374
;374:		if ( fps == 0 ) {
ADDRLP4 16
INDIRF4
CNSTF4 0
NEF4 $244
line 375
;375:			fps = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 376
;376:		}
LABELV $244
line 377
;377:		animations[i].frameLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 378
;378:		animations[i].initialLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 8
INDIRP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 379
;379:	}
LABELV $229
line 341
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 59
LTI4 $228
LABELV $230
line 381
;380:
;381:	if ( i != MAX_ANIMATIONS ) {
ADDRLP4 4
INDIRI4
CNSTI4 59
EQI4 $246
line 382
;382:		CG_Printf( "Error parsing animation file: %s", filename );
ADDRGP4 $248
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 383
;383:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $154
JUMPV
LABELV $246
line 397
;384:	}
;385:
;386:/*
;387:	animations[TORSO_CLIMB_IDLE].firstFrame = animations[TORSO_CLIMB].firstFrame+1;
;388:	animations[TORSO_CLIMB_IDLE].numFrames = 1;
;389:	animations[TORSO_CLIMB_IDLE].loopFrames = 1;
;390:	animations[TORSO_CLIMB_IDLE].frameLerp = animations[TORSO_CLIMB].frameLerp;
;391:	animations[TORSO_CLIMB_IDLE].initialLerp = animations[TORSO_CLIMB].initialLerp;
;392:*/
;393://	memcpy(&animations[TORSO_RAISE_RIFLE], &animations[TORSO_DROP_RIFLE], sizeof(animation_t));
;394://	animations[TORSO_RAISE_RIFLE].reversed = qtrue; 
;395:
;396:	// limb backwards animation
;397:	memcpy(&animations[LEGS_BACKLIMB], &animations[LEGS_LIMP], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 1568
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1316
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 398
;398:	animations[LEGS_BACKLIMB].reversed = qtrue; 
ADDRLP4 8
INDIRP4
CNSTI4 1588
ADDP4
CNSTI4 1
ASGNI4
line 402
;399:	
;400: 
;401:	// crouch backwards animation
;402:	memcpy(&animations[LEGS_BACKCR], &animations[LEGS_WALKCR], sizeof(animation_t));
ADDRLP4 8
INDIRP4
CNSTI4 1540
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 1176
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 403
;403:	animations[LEGS_BACKCR].reversed = qtrue; 
ADDRLP4 8
INDIRP4
CNSTI4 1560
ADDP4
CNSTI4 1
ASGNI4
line 405
;404:
;405:	animations[TORSO_ATTACK_MELEE].frameLerp = 1000 / 50;
ADDRLP4 8
INDIRP4
CNSTI4 824
ADDP4
CNSTI4 20
ASGNI4
line 406
;406:	animations[TORSO_ATTACK_MELEE].initialLerp = 1000 / 25;
ADDRLP4 8
INDIRP4
CNSTI4 828
ADDP4
CNSTI4 40
ASGNI4
line 408
;407:
;408: 	animations[LEGS_IDLE_RIFLE_SCOPED].firstFrame = animations[LEGS_IDLE].firstFrame+1;
ADDRLP4 8
INDIRP4
CNSTI4 1596
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1204
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 409
;409:	animations[LEGS_IDLE_RIFLE_SCOPED].numFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1600
ADDP4
CNSTI4 1
ASGNI4
line 410
;410:	animations[LEGS_IDLE_RIFLE_SCOPED].loopFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1604
ADDP4
CNSTI4 1
ASGNI4
line 411
;411:	animations[LEGS_IDLE_RIFLE_SCOPED].frameLerp = animations[ LEGS_IDLE ].frameLerp;
ADDRLP4 8
INDIRP4
CNSTI4 1608
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
ASGNI4
line 412
;412:	animations[LEGS_IDLE_RIFLE_SCOPED].initialLerp = animations[ LEGS_IDLE ].initialLerp;
ADDRLP4 8
INDIRP4
CNSTI4 1612
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1220
ADDP4
INDIRI4
ASGNI4
line 414
;413:
;414:	animations[LEGS_IDLECR_RIFLE_SCOPED].firstFrame = animations[ LEGS_IDLECR ].firstFrame+1;
ADDRLP4 8
INDIRP4
CNSTI4 1624
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1148
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 415
;415:	animations[LEGS_IDLECR_RIFLE_SCOPED].numFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1628
ADDP4
CNSTI4 1
ASGNI4
line 416
;416:	animations[LEGS_IDLECR_RIFLE_SCOPED].loopFrames = 1;
ADDRLP4 8
INDIRP4
CNSTI4 1632
ADDP4
CNSTI4 1
ASGNI4
line 417
;417:	animations[LEGS_IDLECR_RIFLE_SCOPED].frameLerp = animations[ LEGS_IDLECR ].frameLerp;
ADDRLP4 8
INDIRP4
CNSTI4 1636
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1160
ADDP4
INDIRI4
ASGNI4
line 418
;418:	animations[LEGS_IDLECR_RIFLE_SCOPED].initialLerp = animations[ LEGS_IDLECR ].initialLerp;
ADDRLP4 8
INDIRP4
CNSTI4 1640
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 1164
ADDP4
INDIRI4
ASGNI4
line 431
;419:
;420:
;421:  
;422:	//
;423:	// new anims changes
;424:	//
;425://	animations[TORSO_GETFLAG].flipflop = qtrue;
;426://	animations[TORSO_GUARDBASE].flipflop = qtrue;
;427://	animations[TORSO_PATROL].flipflop = qtrue;
;428://	animations[TORSO_AFFIRMATIVE].flipflop = qtrue;
;429://	animations[TORSO_NEGATIVE].flipflop = qtrue;
;430:	//
;431:	return qtrue;
CNSTI4 1
RETI4
LABELV $154
endproc CG_ParseAnimationFile 20104 12
proc CG_RegisterClientSkin 120 20
line 441
;432:}
;433:
;434: 
;435:
;436:/*
;437:==========================
;438:CG_RegisterClientSkin
;439:==========================
;440:*/
;441:static qboolean	CG_RegisterClientSkin( clientInfo_t *ci, const char *modelName, const char *headName ) {
line 443
;442:	char		filename[MAX_QPATH];
;443:	int camoType = cgs.camoType;
ADDRLP4 64
ADDRGP4 cgs+214196
INDIRI4
ASGNI4
line 446
;444:
;445:	// do not load camoSkins when player is a VIP
;446:	if ( !Q_stricmp( modelName, "vip_male" ) )
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $251
line 447
;447:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/legs_%s.skin", modelName, cgs.vipType  );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $254
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+214200
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $252
JUMPV
LABELV $251
line 449
;448:	else
;449:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/legs%s.skin", modelName, CG_GetCamoStringForType( camoType )  );
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 CG_GetCamoStringForType
CALLP4
ASGNP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $256
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
LABELV $252
line 450
;450:	ci->legsSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 452
;451:
;452:	if ( !ci->legsSkin )
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRI4
CNSTI4 0
NEI4 $257
line 453
;453:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $259
line 454
;454:			CG_Printf("Failed to load %s\n", filename);
ADDRGP4 $262
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $259
LABELV $257
line 456
;455:
;456:	if ( !Q_stricmp( modelName, "vip_male" ) )
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $263
line 457
;457:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/torso_%s.skin", modelName, cgs.vipType  );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $265
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+214200
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $264
JUMPV
LABELV $263
line 459
;458:	else
;459:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/torso%s.skin", modelName, CG_GetCamoStringForType( camoType )  );
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_GetCamoStringForType
CALLP4
ASGNP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $267
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
LABELV $264
line 460
;460:	ci->torsoSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 88
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 462
;461:
;462:	if ( !ci->torsoSkin )
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
CNSTI4 0
NEI4 $268
line 463
;463:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $270
line 464
;464:			CG_Printf("Failed to load %s\n", filename);
ADDRGP4 $262
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $270
LABELV $268
line 466
;465:
;466:	if ( !Q_stricmp( modelName, "vip_male" ) )
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $273
line 467
;467:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/torso_%s_vest.skin", modelName, cgs.vipType  );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $275
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+214200
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $274
JUMPV
LABELV $273
line 469
;468:	else
;469:		Com_sprintf( filename, sizeof( filename ), "models/players/%s/torso%s_vest.skin", modelName, CG_GetCamoStringForType( camoType )  );
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_GetCamoStringForType
CALLP4
ASGNP4
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $277
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
LABELV $274
line 470
;470:	ci->torsoVestSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 100
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 472
;471:
;472:	if ( !ci->torsoVestSkin )
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 0
NEI4 $278
line 473
;473:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $280
line 474
;474:			CG_Printf("Failed to load %s\n", filename);
ADDRGP4 $262
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $280
LABELV $278
line 476
;475:
;476:	if ( !Q_stricmp( modelName, "vip_male" ) )
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 104
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
NEI4 $283
line 477
;477:	{
line 478
;478:		if (strlen(cgs.vipType) <= 0)
ADDRGP4 cgs+214200
ARGP4
ADDRLP4 108
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
GTI4 $285
line 479
;479:			Com_sprintf( filename, sizeof( filename ), "models/players/%s/head_%s.skin", modelName, headName  );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $288
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $284
JUMPV
LABELV $285
line 481
;480:		else
;481:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/head_vip_%s.skin", cgs.vipType  );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $289
ARGP4
ADDRGP4 cgs+214200
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 482
;482:	}
ADDRGP4 $284
JUMPV
LABELV $283
line 484
;483:	else
;484:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/head_%s.skin", headName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $291
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
LABELV $284
line 485
;485:	ci->headSkin = trap_R_RegisterSkin( filename );
ADDRLP4 0
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 487
;486:
;487:	if ( !ci->headSkin )
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
CNSTI4 0
NEI4 $292
line 488
;488:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $294
line 489
;489:			CG_Printf("Failed to load %s\n", filename);
ADDRGP4 $262
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
LABELV $294
LABELV $292
line 492
;490:
;491:
;492:	if ( !ci->legsSkin || !ci->torsoSkin || !ci->headSkin || !ci->torsoVestSkin ) {
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
CNSTI4 0
ASGNI4
ADDRLP4 112
INDIRP4
CNSTI4 564
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
EQI4 $301
ADDRLP4 112
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
EQI4 $301
ADDRLP4 112
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
EQI4 $301
ADDRLP4 112
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
NEI4 $297
LABELV $301
line 493
;493:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $249
JUMPV
LABELV $297
line 496
;494:	}
;495:
;496:	return qtrue;
CNSTI4 1
RETI4
LABELV $249
endproc CG_RegisterClientSkin 120 20
proc CG_RegisterClientModelname 100 16
line 504
;497:}
;498:
;499:/*
;500:==========================
;501:88
;502:==========================
;503:*/
;504:static qboolean CG_RegisterClientModelname( clientInfo_t *ci, const char *modelName, const char *headName ) {
line 508
;505:	char		filename[MAX_QPATH];
;506:
;507:	// load the animations
;508:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/animation.cfg", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $303
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 509
;509:	if ( !CG_ParseAnimationFile( filename, ci ) ) {
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 CG_ParseAnimationFile
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $304
line 510
;510:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $306
line 511
;511:			Com_Printf( "Failed to load animation file %s\n", filename );
ADDRGP4 $309
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $306
line 512
;512:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $304
line 517
;513:	}
;514:
;515:	// load cmodels before models so filecache works
;516:
;517:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/legs.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $310
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 518
;518:	ci->legsModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 560
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 519
;519:	if ( !ci->legsModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 560
ADDP4
INDIRI4
CNSTI4 0
NEI4 $311
line 520
;520:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $313
line 521
;521:			Com_Printf( "Failed to load model file %s (wrong lower.md3)\n", filename );
ADDRGP4 $316
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $313
line 522
;522:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $311
line 525
;523:	}
;524:
;525:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/torso.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $317
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 526
;526:	ci->torsoModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 527
;527:	if ( !ci->torsoModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 0
NEI4 $318
line 528
;528:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $320
line 529
;529:			Com_Printf( "Failed to load model file %s (wrong torso.md3)\n", filename );
ADDRGP4 $323
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $320
line 530
;530:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $318
line 533
;531:	}
;532:
;533:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/arml.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $324
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 534
;534:	ci->leftArmModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 535
;535:	if ( !ci->leftArmModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
CNSTI4 0
NEI4 $325
line 536
;536:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $327
line 537
;537:			Com_Printf( "Failed to load model file %s (wrong arml.md3)\n", filename );
ADDRGP4 $330
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $327
line 538
;538:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $325
line 540
;539:	}
;540:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/armr.md3", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $331
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 541
;541:	ci->rightArmModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 80
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 542
;542:	if ( !ci->rightArmModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
CNSTI4 0
NEI4 $332
line 543
;543:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $334
line 544
;544:			Com_Printf( "Failed to load model file %s (wrong armr.md3)\n", filename );
ADDRGP4 $337
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $334
line 545
;545:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $332
line 548
;546:	}
;547:
;548:	if ( !Q_stricmp( headName , "vip_seal" ) || !Q_stricmp( headName , "vip_tango" ) )
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 $340
ARGP4
ADDRLP4 84
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $342
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 $341
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $338
LABELV $342
line 549
;549:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/head_vip_%s.md3", cgs.vipType );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $343
ARGP4
ADDRGP4 cgs+214200
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
ADDRGP4 $339
JUMPV
LABELV $338
line 551
;550:	else
;551:		Com_sprintf( filename, sizeof( filename ), "models/players/heads/head.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $345
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
LABELV $339
line 553
;552:
;553:	ci->headModel = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 92
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 567
;554:
;555:#if 0
;556:	// i had this here to get the bounding boxes of our headmodel
;557:	// for the serverside new hitdetection system
;558:	{
;559:		vec3_t mins,maxs;
;560:
;561:		trap_R_ModelBounds( ci->headModel, mins, maxs );
;562:
;563:		CG_Printf("headmodel bbox: %s %s\n", vtos( mins ), vtos ( maxs ) );
;564:	}
;565:#endif
;566:
;567:	if ( !ci->headModel ) {
ADDRFP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 0
NEI4 $346
line 568
;568:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $348
line 569
;569:			Com_Printf( "Failed to load model file %s (wrong head.md3)\n", filename );
ADDRGP4 $351
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $348
line 570
;570:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $346
line 575
;571:	}
;572:
;573:
;574:	// if any skins failed to load, return failure
;575:	if ( !CG_RegisterClientSkin( ci, modelName, headName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $352
line 576
;576:		if ( cg_buildScript.integer )
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $354
line 577
;577:			Com_Printf( "Failed to load skin file: %s : %s\n", modelName, headName );
ADDRGP4 $357
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
LABELV $354
line 578
;578:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $302
JUMPV
LABELV $352
line 581
;579:	}
;580: 
;581:	Com_sprintf( filename, sizeof( filename ), "models/players/%s/preview.tga", modelName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $358
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 588
;582:/*	ci->modelIcon = trap_R_RegisterShaderNoMip( filename );
;583:	if ( !ci->modelIcon ) {
;584:		Com_Printf( "Failed to load icon file: %s\n", filename );
;585:		return qfalse;
;586:	}*/
;587:
;588:	return qtrue;
CNSTI4 1
RETI4
LABELV $302
endproc CG_RegisterClientModelname 100 16
proc CG_RegisterClientStyleModels 76 16
line 596
;589:}
;590:
;591:/*
;592:==========================
;593:88
;594:==========================
;595:*/
;596:static qboolean CG_RegisterClientStyleModels( clientInfo_t *ci, const char *mouthName, const char *eyesName, const char *headName ) {
line 600
;597:	char		filename[MAX_QPATH];
;598:
;599:	// disabled.
;600:	if ( cg_disableHeadstuff.integer )
ADDRGP4 cg_disableHeadstuff+12
INDIRI4
CNSTI4 0
EQI4 $360
line 601
;601:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $359
JUMPV
LABELV $360
line 604
;602:
;603:	// load cmodels before models so filecache works
;604:	Com_sprintf( filename, sizeof( filename ), "models/players/heads/accessoires/m_%s.md3", mouthName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $363
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 605
;605:	ci->equipmentMouth = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 64
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 607
;606:
;607:	Com_sprintf( filename, sizeof( filename ), "models/players/heads/accessoires/h_%s.md3", headName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $364
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 608
;608:	ci->equipmentHead = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRLP4 68
INDIRI4
ASGNI4
line 610
;609:	
;610:	Com_sprintf( filename, sizeof( filename ), "models/players/heads/accessoires/e_%s.md3", eyesName );
ADDRLP4 0
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $365
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 611
;611:	ci->equipmentEyes = trap_R_RegisterModel( filename );
ADDRLP4 0
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 613
;612:
;613:	return qtrue;
CNSTI4 1
RETI4
LABELV $359
endproc CG_RegisterClientStyleModels 76 16
proc CG_ColorFromString 20 4
line 621
;614:}
;615:
;616:/*
;617:====================
;618:CG_ColorFromString
;619:====================
;620:*/
;621:static void CG_ColorFromString( const char *v, vec3_t color ) {
line 624
;622:	int val;
;623:
;624:	VectorClear( color );
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTF4 0
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRF4
ASGNF4
line 626
;625:
;626:	val = atoi( v );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 628
;627:
;628:	if ( val < 1 || val > 7 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
LTI4 $369
ADDRLP4 0
INDIRI4
CNSTI4 7
LEI4 $367
LABELV $369
line 629
;629:		VectorSet( color, 1, 1, 1 );
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 630
;630:		return;
ADDRGP4 $366
JUMPV
LABELV $367
line 633
;631:	}
;632:
;633:	if ( val & 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $370
line 634
;634:		color[2] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1065353216
ASGNF4
line 635
;635:	}
LABELV $370
line 636
;636:	if ( val & 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $372
line 637
;637:		color[1] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 1065353216
ASGNF4
line 638
;638:	}
LABELV $372
line 639
;639:	if ( val & 4 ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $374
line 640
;640:		color[0] = 1.0f;
ADDRFP4 4
INDIRP4
CNSTF4 1065353216
ASGNF4
line 641
;641:	}
LABELV $374
line 642
;642:}
LABELV $366
endproc CG_ColorFromString 20 4
proc CG_LoadClientInfo 28 12
line 652
;643:
;644:/*
;645:===================
;646:CG_LoadClientInfo
;647:
;648:Load it now, taking the disk hits.
;649:This will usually be deferred to a safe time
;650:===================
;651:*/
;652:static void CG_LoadClientInfo( clientInfo_t *ci ) {
line 658
;653://	const char	*dir, *fallback;
;654://	int			i;
;655://	const char	*s;
;656://	int			clientNum;
;657:
;658:	if ( !CG_RegisterClientModelname( ci, ci->modelName, ci->headName ) ) 
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $377
line 659
;659:	{
line 660
;660:		if ( cg_buildScript.integer ) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $379
line 661
;661:			CG_Error( "CG_RegisterClientModelname( %s, %s ) failed", ci->modelName, ci->headName );
ADDRGP4 $382
ARGP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 662
;662:		}
LABELV $379
line 665
;663:
;664:		// fall back
;665:		if ( cgs.gametype >= GT_TEAM )
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
LTI4 $383
line 666
;666:		{
line 669
;667:			char *modelName;
;668:			char *headName;
;669:			int oldcamo = cgs.camoType;
ADDRLP4 8
ADDRGP4 cgs+214196
INDIRI4
ASGNI4
line 672
;670:
;671:
;672:	 		if ( ci->team == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $387
line 673
;673:				modelName = "t_medium";
ADDRLP4 12
ADDRGP4 $389
ASGNP4
line 674
;674:				headName = "jayant";
ADDRLP4 16
ADDRGP4 $390
ASGNP4
line 675
;675:			}
ADDRGP4 $388
JUMPV
LABELV $387
line 677
;676:			else  
;677:			{
line 678
;678:				modelName = "s_medium";
ADDRLP4 12
ADDRGP4 $391
ASGNP4
line 679
;679:				headName = "bruce";
ADDRLP4 16
ADDRGP4 $392
ASGNP4
line 680
;680:			}
LABELV $388
line 683
;681:
;682:			// nothing worked... fall back
;683:			if ( !CG_RegisterClientModelname( ci, modelName, headName ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $393
line 684
;684:				CG_Error( "DEFAULT_MODEL / skin (%s/%s) failed to register",
ADDRGP4 $395
ARGP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 686
;685:					 ci->modelName, ci->headName );
;686:			}
LABELV $393
line 687
;687:			cgs.camoType = oldcamo;
ADDRGP4 cgs+214196
ADDRLP4 8
INDIRI4
ASGNI4
line 688
;688:		} else {
ADDRGP4 $384
JUMPV
LABELV $383
line 693
;689:			char *modelName,*headName;
;690:
;691:			// random default playermodels.
;692:
;693:			if (random() < 0.5)
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
GEF4 $397
line 694
;694:				modelName = "s_medium";
ADDRLP4 8
ADDRGP4 $391
ASGNP4
ADDRGP4 $398
JUMPV
LABELV $397
line 696
;695:			else
;696:				modelName = "t_medium";
ADDRLP4 8
ADDRGP4 $389
ASGNP4
LABELV $398
line 698
;697:
;698:		  	headName = "jayant";
ADDRLP4 12
ADDRGP4 $390
ASGNP4
line 700
;699:
;700:			if ( !CG_RegisterClientModelname( ci, modelName, headName) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_RegisterClientModelname
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $399
line 701
;701:				CG_Error( "DEFAULT_MODEL (%s/%s) failed to register", modelName, headName );
ADDRGP4 $401
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 702
;702:			}
LABELV $399
line 703
;703:		}
LABELV $384
line 704
;704:	}
LABELV $377
line 731
;705:
;706:	// player style
;707:/*	if ( !CG_RegisterClientStyleModels( ci, ci->equipmentMouthName,ci->equipmentEyesName,ci->equipmentHeadName ) )
;708:	{
;709:		if ( cg_buildScript.integer ) {
;710:			CG_Error( "CG_RegisterClientStyleModels( %s %s/%s/%s ) failed", ci->name,ci->equipmentMouthName, ci->equipmentEyesName, ci->equipmentHeadName );
;711:		}
;712:	}*/
;713:
;714:	// sounds
;715://	dir = ci->modelName;
;716://	fallback = DEFAULT_MODEL;
;717:
;718:	/*
;719:	for ( i = 0 ; i < MAX_CUSTOM_SOUNDS ; i++ ) {
;720:		s = cg_customSoundNames[i];
;721:		if ( !s ) {
;722:			break;
;723:		}
;724:		ci->sounds[i] = trap_S_RegisterSound( va("sound/player/%s/%s", dir, s + 1),qfalse );
;725:		if ( !ci->sounds[i] ) { // loadup defaults!
;726:			ci->sounds[i] = trap_S_RegisterSound( va("sound/player/sarge/%s", s + 1),qfalse );
;727:		}
;728:	}
;729:	*/
;730:
;731:	ci->deferred = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 744
;732:
;733://	CG_Printf("%i equipment (loaded clientinfo)\n", ci->playerEquipment );
;734:
;735:	// reset any existing players and bodies, because they might be in bad
;736:	// frames for this new model
;737:/*	clientNum = ci - cgs.clientinfo;
;738:	for ( i = 0 ; i < MAX_GENTITIES ; i++ ) {
;739:		if ( cg_entities[i].currentState.clientNum == clientNum
;740:			&& cg_entities[i].currentState.eType == ET_PLAYER ) {
;741:			CG_ResetPlayerEntity( &cg_entities[i] );
;742:		}
;743:	}*/
;744:}
LABELV $376
endproc CG_LoadClientInfo 28 12
proc CG_CopyClientInfoModel 72 12
line 751
;745:
;746:/*
;747:======================
;748:CG_CopyClientInfoModel
;749:======================
;750:*/
;751:static void CG_CopyClientInfoModel( clientInfo_t *from, clientInfo_t *to ) {
line 752
;752:	VectorCopy( from->headOffset, to->headOffset );
ADDRLP4 0
CNSTI4 540
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 753
;753:	to->footsteps = from->footsteps;
ADDRLP4 4
CNSTI4 552
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 754
;754:	to->gender = from->gender;
ADDRLP4 8
CNSTI4 556
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 756
;755:
;756:	to->legsModel = from->legsModel;
ADDRLP4 12
CNSTI4 560
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 757
;757:	to->legsSkin = from->legsSkin;
ADDRLP4 16
CNSTI4 564
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 758
;758:	to->torsoModel = from->torsoModel;
ADDRLP4 20
CNSTI4 568
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 759
;759:	to->torsoSkin = from->torsoSkin;
ADDRLP4 24
CNSTI4 572
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 760
;760:	to->headModel = from->headModel;
ADDRLP4 28
CNSTI4 580
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 761
;761:	to->headSkin = from->headSkin;
ADDRLP4 32
CNSTI4 584
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 763
;762://	to->modelIcon = from->modelIcon;
;763:	to->torsoVestSkin = from->torsoVestSkin;
ADDRLP4 36
CNSTI4 576
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 765
;764:
;765:	to->leftArmModel = from->leftArmModel;
ADDRLP4 40
CNSTI4 588
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 766
;766:	to->rightArmModel = from->rightArmModel;
ADDRLP4 44
CNSTI4 592
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 768
;767: 
;768:	to->footprintFrameTimer = from->footprintFrameTimer;
ADDRLP4 48
CNSTI4 2452
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRB
ASGNB 32
line 771
;769://	memcpy( &to->footprintFrameTimer, &from->footprintFrameTimer , sizeof ( to->footprintFrameTimer ) );
;770:
;771:	to->equipmentEyes = from->equipmentEyes;
ADDRLP4 52
CNSTI4 604
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 772
;772:	to->equipmentHead = from->equipmentHead;
ADDRLP4 56
CNSTI4 600
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 773
;773:	to->equipmentMouth = from->equipmentMouth;
ADDRLP4 60
CNSTI4 596
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 780
;774://	to->helmetModel = from->helmetModel;
;775://	to->helmetSkin = from->helmetSkin;
;776://	to->Equipment = from->Equipment;
;777://	CG_Printf("%i equipment (copied clientinfo)\n", to->Equipment);
;778:
;779:
;780:	to->newAnims = from->newAnims;
ADDRLP4 64
CNSTI4 536
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 782
;781:
;782:	memcpy( to->animations, from->animations, sizeof( to->animations ) );
ADDRLP4 68
CNSTI4 800
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
ARGP4
CNSTI4 1652
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 784
;783://	memcpy( to->sounds, from->sounds, sizeof( to->sounds ) );
;784:}
LABELV $402
endproc CG_CopyClientInfoModel 72 12
proc CG_CopyModelInfo 64 12
line 791
;785:
;786:/*
;787:======================
;788:CG_CopyModelInfo
;789:======================
;790:*/
;791:static void CG_CopyModelInfo( clientInfo_t *from, clientInfo_t *to ) {
line 792
;792:	VectorCopy( from->headOffset, to->headOffset );
ADDRLP4 0
CNSTI4 540
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 793
;793:	to->footsteps = from->footsteps;
ADDRLP4 4
CNSTI4 552
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 794
;794:	to->gender = from->gender;
ADDRLP4 8
CNSTI4 556
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 796
;795:
;796:	to->legsModel = from->legsModel;
ADDRLP4 12
CNSTI4 560
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 797
;797:	to->legsSkin = from->legsSkin;
ADDRLP4 16
CNSTI4 564
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 798
;798:	to->torsoModel = from->torsoModel;
ADDRLP4 20
CNSTI4 568
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 799
;799:	to->torsoSkin = from->torsoSkin;
ADDRLP4 24
CNSTI4 572
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 800
;800:	to->headModel = from->headModel; 
ADDRLP4 28
CNSTI4 580
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 801
;801: 	to->headSkin = from->headSkin;
ADDRLP4 32
CNSTI4 584
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 803
;802:
;803:	to->footprintFrameTimer = from->footprintFrameTimer;
ADDRLP4 36
CNSTI4 2452
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRB
ASGNB 32
line 805
;804:
;805: 	strcpy( to->modelName , from->modelName );
ADDRLP4 40
CNSTI4 148
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 807
;806:
;807:	to->torsoVestSkin = from->torsoVestSkin;
ADDRLP4 44
CNSTI4 576
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 809
;808:
;809:	to->leftArmModel = from->leftArmModel;
ADDRLP4 48
CNSTI4 588
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 810
;810:	to->rightArmModel = from->rightArmModel; 
ADDRLP4 52
CNSTI4 592
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 812
;811:
;812:	to->newAnims = from->newAnims;
ADDRLP4 56
CNSTI4 536
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 814
;813:
;814:	memcpy( to->animations, from->animations, sizeof( to->animations ) );
ADDRLP4 60
CNSTI4 800
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ARGP4
CNSTI4 1652
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 815
;815:}
LABELV $403
endproc CG_CopyModelInfo 64 12
proc CG_ScanForExistingClientInfo 36 16
line 821
;816:/*
;817:======================
;818:CG_ScanForExistingClientInfo
;819:======================
;820:*/ 
;821:static qboolean CG_ScanForExistingClientInfo( clientInfo_t *ci ) {
line 824
;822:	int		i;
;823:	clientInfo_t	*match;
;824:	int clientNum = -1;
ADDRLP4 8
CNSTI4 -1
ASGNI4
line 826
;825:
;826:	clientNum = ci - cgs.clientinfo;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cgs+38664
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2484
DIVI4
ASGNI4
line 828
;827:  
;828:	if ( !Q_stricmp( ci->modelName, "vip_male" ) )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $406
line 829
;829:	{
line 830
;830:  		for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $408
line 831
;831:		{
line 832
;832:			match = cgs.media.MiscPlayerModels + i;
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+6504
ADDP4
ASGNP4
line 834
;833:
;834:			if ( !match->infoValid )
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $414
line 835
;835:			{
line 836
;836:				CG_Error("Could not load Model: %s\n", ci->modelName );
ADDRGP4 $416
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 837
;837:				continue;
ADDRGP4 $409
JUMPV
LABELV $414
line 839
;838:			}
;839:			if ( match->deferred )
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
EQI4 $417
line 840
;840:				continue;
ADDRGP4 $409
JUMPV
LABELV $417
line 842
;841:			  
;842: 			CG_CopyModelInfo( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyModelInfo
CALLV
pop
line 844
;843:
;844: 			if ( !CG_RegisterClientSkin( ci, ci->modelName, ci->headName ) )
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $419
line 845
;845:				if ( !CG_RegisterClientSkin( ci, ci->modelName, "vip_male" ) )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 28
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $421
line 846
;846:				{
line 847
;847:					CG_Error("Couldn't register default headskin %s for model %s", "vip_male", ci->modelName );
ADDRGP4 $423
ARGP4
ADDRGP4 $253
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 848
;848:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $404
JUMPV
LABELV $421
LABELV $419
line 852
;849:				}
;850:
;851:
;852:			CG_RegisterClientStyleModels( ci, ci->equipmentMouthName, ci->equipmentEyesName, ci->equipmentHeadName );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 608
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 736
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 CG_RegisterClientStyleModels
CALLI4
pop
line 854
;853:
;854:			return qtrue; 
CNSTI4 1
RETI4
ADDRGP4 $404
JUMPV
LABELV $409
line 830
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $408
line 856
;855:		}		
;856:	}
LABELV $406
line 858
;857:	
;858:	if ( ci->team == TEAM_RED )
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 1
NEI4 $424
line 859
;859:	{
LABELV $426
line 862
;860:seal:
;861: 	// see if we're in the memory already
;862:  		for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $427
line 863
;863:		{
line 864
;864:			match = cgs.media.SealPlayerModels + i;
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+1536
ADDP4
ASGNP4
line 866
;865:
;866:			if ( !match->infoValid )
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $433
line 867
;867:				continue;
ADDRGP4 $428
JUMPV
LABELV $433
line 868
;868:			if ( match->deferred )
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
EQI4 $435
line 869
;869:				continue;
ADDRGP4 $428
JUMPV
LABELV $435
line 871
;870:			
;871: 			CG_CopyModelInfo( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyModelInfo
CALLV
pop
line 873
;872:
;873: 			if ( !CG_RegisterClientSkin( ci, ci->modelName, ci->headName ) )
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $437
line 874
;874:				if ( !CG_RegisterClientSkin( ci, ci->modelName, "bruce" ) )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 $392
ARGP4
ADDRLP4 28
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $439
line 875
;875:				{
line 876
;876:					CG_Error("Couldn't register default headskin %s for model %s", "bruce", ci->modelName );
ADDRGP4 $423
ARGP4
ADDRGP4 $392
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 877
;877:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $404
JUMPV
LABELV $439
LABELV $437
line 880
;878:				}
;879:
;880:			CG_RegisterClientStyleModels( ci, ci->equipmentMouthName, ci->equipmentEyesName, ci->equipmentHeadName );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 608
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 736
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 CG_RegisterClientStyleModels
CALLI4
pop
line 882
;881:
;882:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $404
JUMPV
LABELV $428
line 862
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $427
line 884
;883: 		}		
;884:	}
ADDRGP4 $425
JUMPV
LABELV $424
line 885
;885:	else if ( ci->team == TEAM_BLUE )
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $441
line 886
;886:	{
LABELV $443
line 888
;887:tango:
;888:   		for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $444
line 889
;889:		{
line 890
;890:			match = cgs.media.TangoPlayerModels + i;
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+4020
ADDP4
ASGNP4
line 892
;891:
;892:			if ( !match->infoValid )
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $450
line 893
;893:				continue;
ADDRGP4 $445
JUMPV
LABELV $450
line 894
;894:			if ( match->deferred )
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
EQI4 $452
line 895
;895:				continue;
ADDRGP4 $445
JUMPV
LABELV $452
line 897
;896:			
;897: 			CG_CopyModelInfo( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyModelInfo
CALLV
pop
line 899
;898:
;899: 			if ( !CG_RegisterClientSkin( ci, ci->modelName, ci->headName ) )
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $454
line 900
;900:				if ( !CG_RegisterClientSkin( ci, ci->modelName, "jayant" ) )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 $390
ARGP4
ADDRLP4 28
ADDRGP4 CG_RegisterClientSkin
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $456
line 901
;901:				{
line 902
;902:					CG_Error("Couldn't register default headskin %s for model %s", "jayant", ci->modelName );
ADDRGP4 $423
ARGP4
ADDRGP4 $390
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 903
;903:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $404
JUMPV
LABELV $456
LABELV $454
line 907
;904:				}
;905:
;906:
;907:			CG_RegisterClientStyleModels( ci, ci->equipmentMouthName, ci->equipmentEyesName, ci->equipmentHeadName );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 608
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 736
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 672
ADDP4
ARGP4
ADDRGP4 CG_RegisterClientStyleModels
CALLI4
pop
line 909
;908:
;909:			return qtrue; 
CNSTI4 1
RETI4
ADDRGP4 $404
JUMPV
LABELV $445
line 888
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $444
line 911
;910: 		}		 
;911:	}
ADDRGP4 $442
JUMPV
LABELV $441
line 913
;912:	else 
;913:	{ 
line 916
;914:		qboolean tango;
;915:
;916:		if ( !Q_stricmp( ci->modelName , "t_medium") )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRGP4 $389
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $458
line 917
;917:			tango = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRGP4 $459
JUMPV
LABELV $458
line 919
;918:		else
;919:			tango = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $459
line 921
;920: 
;921:		if ( tango )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $426
line 922
;922:			goto tango;
ADDRGP4 $443
JUMPV
line 924
;923:		else
;924:			goto seal;
LABELV $442
LABELV $425
line 928
;925:	}
;926: 
;927:	// nothing matches, so defer the load
;928:	return qfalse;
CNSTI4 0
RETI4
LABELV $404
endproc CG_ScanForExistingClientInfo 36 16
proc CG_SetDeferredClientInfo 72 8
line 939
;929:}
;930:
;931:/*
;932:======================
;933:CG_SetDeferredClientInfo
;934:
;935:We aren't going to load it now, so grab some other
;936:client's info to use until we have some spare time.
;937:======================
;938:*/
;939:static void CG_SetDeferredClientInfo( clientInfo_t *ci ) {
line 947
;940:	int		i;
;941:	clientInfo_t	*match;
;942:
;943:
;944:
;945:	// if someone else is already the same models and skins we
;946:	// can just load the client info
;947:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $466
JUMPV
LABELV $463
line 948
;948:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 949
;949:		if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $471
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $469
LABELV $471
line 950
;950:			continue;
ADDRGP4 $464
JUMPV
LABELV $469
line 952
;951:		}
;952:		if ( Q_stricmp( ci->skinName, match->skinName ) ||
ADDRLP4 16
CNSTI4 276
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 24
CNSTI4 148
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 32
CNSTI4 340
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 40
CNSTI4 404
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 48
CNSTI4 608
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 56
CNSTI4 736
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $479
ADDRLP4 64
CNSTI4 672
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $472
LABELV $479
line 959
;953:			 Q_stricmp( ci->modelName, match->modelName ) ||
;954:			 Q_stricmp( ci->headModelName, match->headModelName ) ||
;955:			 Q_stricmp( ci->headSkinName, match->headSkinName ) ||
;956:			 Q_stricmp( ci->equipmentMouthName, match->equipmentMouthName ) ||
;957:			 Q_stricmp( ci->equipmentEyesName, match->equipmentEyesName ) ||
;958:			 Q_stricmp( ci->equipmentHeadName, match->equipmentHeadName )
;959:			 ) {
line 960
;960:			continue;
ADDRGP4 $464
JUMPV
LABELV $472
line 963
;961:		}
;962:		// just load the real info cause it uses the same models and skins
;963:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 964
;964:		return;
ADDRGP4 $462
JUMPV
LABELV $464
line 947
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $466
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $463
line 968
;965:	}
;966:
;967:	// if we are in teamplay, only grab a model if the skin is correct
;968:	if ( cgs.gametype >= GT_TEAM ) {
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
LTI4 $480
line 969
;969:		for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $486
JUMPV
LABELV $483
line 970
;970:			match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 971
;971:			if ( !match->infoValid || match->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $491
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $489
LABELV $491
line 972
;972:				continue;
ADDRGP4 $484
JUMPV
LABELV $489
line 974
;973:			}
;974:			if ( Q_stricmp( ci->skinName, match->skinName ) ) {
ADDRLP4 16
CNSTI4 276
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $492
line 975
;975:				continue;
ADDRGP4 $484
JUMPV
LABELV $492
line 977
;976:			}
;977:			ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 1
ASGNI4
line 978
;978:			CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 979
;979:			return;
ADDRGP4 $462
JUMPV
LABELV $484
line 969
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $486
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $483
line 985
;980:		}
;981:		// load the full model, because we don't ever want to show
;982:		// an improper team skin.  This will cause a hitch for the first
;983:		// player, when the second enters.  Combat shouldn't be going on
;984:		// yet, so it shouldn't matter
;985:		CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 986
;986:		return;
ADDRGP4 $462
JUMPV
LABELV $480
line 990
;987:	}
;988:
;989:	// find the first valid clientinfo and grab its stuff
;990:	for ( i = 0 ; i < cgs.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $497
JUMPV
LABELV $494
line 991
;991:		match = &cgs.clientinfo[ i ];
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 992
;992:		if ( !match->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $500
line 993
;993:			continue;
ADDRGP4 $495
JUMPV
LABELV $500
line 996
;994:		}
;995:
;996:		ci->deferred = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 1
ASGNI4
line 997
;997:		CG_CopyClientInfoModel( match, ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CopyClientInfoModel
CALLV
pop
line 998
;998:		return;
ADDRGP4 $462
JUMPV
LABELV $495
line 990
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $497
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $494
line 1002
;999:	}
;1000:
;1001:	// we should never get here...
;1002:	CG_Printf( "CG_SetDeferredClientInfo: no valid clients!\n" );
ADDRGP4 $502
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1004
;1003:
;1004:	CG_LoadClientInfo( ci );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1005
;1005:}
LABELV $462
endproc CG_SetDeferredClientInfo 72 8
export CG_NewClientInfo
proc CG_NewClientInfo 2588 12
line 1013
;1006:
;1007:
;1008:/*
;1009:======================
;1010:CG_NewClientInfo
;1011:======================
;1012:*/
;1013:void CG_NewClientInfo( int clientNum ) {
line 1020
;1014:	clientInfo_t *ci;
;1015:	clientInfo_t newInfo;
;1016:	const char	*configstring;
;1017:	const char	*v;
;1018:	char		*slash;
;1019:
;1020:	ci = &cgs.clientinfo[clientNum];
ADDRLP4 2492
CNSTI4 2484
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 1022
;1021:
;1022:	configstring = CG_ConfigString( clientNum + CS_PLAYERS );
ADDRFP4 0
INDIRI4
CNSTI4 548
ADDI4
ARGI4
ADDRLP4 2500
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 2488
ADDRLP4 2500
INDIRP4
ASGNP4
line 1023
;1023:	if ( !configstring[0] ) {
ADDRLP4 2488
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $505
line 1024
;1024:		memset( ci, 0, sizeof( *ci ) );
ADDRLP4 2492
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 2484
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1025
;1025:		return;		// player just left
ADDRGP4 $503
JUMPV
LABELV $505
line 1030
;1026:	}
;1027:
;1028:	// build into a temp buffer so the defer checks can use
;1029:	// the old value
;1030:	memset( &newInfo, 0, sizeof( newInfo ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 2484
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1033
;1031:
;1032:	// isolate the player's name
;1033:	v = Info_ValueForKey(configstring, "n");
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $507
ARGP4
ADDRLP4 2504
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2504
INDIRP4
ASGNP4
line 1034
;1034:	Q_strncpyz( newInfo.name, v, sizeof( newInfo.name ) );
ADDRLP4 0+4
ARGP4
ADDRLP4 2484
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1037
;1035:
;1036:	// colors
;1037:	v = Info_ValueForKey( configstring, "c1" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $510
ARGP4
ADDRLP4 2508
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2508
INDIRP4
ASGNP4
line 1038
;1038:	CG_ColorFromString( v, newInfo.color );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 0+76
ARGP4
ADDRGP4 CG_ColorFromString
CALLV
pop
line 1041
;1039:
;1040:	// bot skill
;1041:	v = Info_ValueForKey( configstring, "skill" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $512
ARGP4
ADDRLP4 2512
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2512
INDIRP4
ASGNP4
line 1042
;1042:	newInfo.botSkill = atoi( v );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2516
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+72
ADDRLP4 2516
INDIRI4
ASGNI4
line 1045
;1043:
;1044:	// handicap
;1045:	v = Info_ValueForKey( configstring, "hc" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $514
ARGP4
ADDRLP4 2520
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2520
INDIRP4
ASGNP4
line 1046
;1046:	newInfo.handicap = atoi( v );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2524
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+108
ADDRLP4 2524
INDIRI4
ASGNI4
line 1049
;1047:
;1048:	// wins
;1049:	v = Info_ValueForKey( configstring, "w" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $516
ARGP4
ADDRLP4 2528
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2528
INDIRP4
ASGNP4
line 1050
;1050:	newInfo.wins = atoi( v );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2532
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+112
ADDRLP4 2532
INDIRI4
ASGNI4
line 1053
;1051:
;1052:	// losses
;1053:	v = Info_ValueForKey( configstring, "l" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $518
ARGP4
ADDRLP4 2536
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2536
INDIRP4
ASGNP4
line 1054
;1054:	newInfo.losses = atoi( v );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2540
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+116
ADDRLP4 2540
INDIRI4
ASGNI4
line 1057
;1055:
;1056:	// team
;1057:	v = Info_ValueForKey( configstring, "t" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $520
ARGP4
ADDRLP4 2544
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2544
INDIRP4
ASGNP4
line 1058
;1058:	newInfo.team = atoi( v );
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2548
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+68
ADDRLP4 2548
INDIRI4
ASGNI4
line 1061
;1059:
;1060:	// team task
;1061:	v = Info_ValueForKey( configstring, "tt" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $522
ARGP4
ADDRLP4 2552
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2552
INDIRP4
ASGNP4
line 1062
;1062:	newInfo.teamTask = atoi(v);
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2556
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+120
ADDRLP4 2556
INDIRI4
ASGNI4
line 1065
;1063:
;1064:	// team leader
;1065:	v = Info_ValueForKey( configstring, "tl" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $524
ARGP4
ADDRLP4 2560
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2560
INDIRP4
ASGNP4
line 1066
;1066:	newInfo.teamLeader = atoi(v);
ADDRLP4 2484
INDIRP4
ARGP4
ADDRLP4 2564
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0+124
ADDRLP4 2564
INDIRI4
ASGNI4
line 1073
;1067:
;1068: //	v = Info_ValueForKey( configstring, "eq" );
;1069://	newInfo.playerEquipment = atoi(v);
;1070:
;1071://	CG_Printf("Equipment:%i (created userinfo)\n",newInfo.playerEquipment );
;1072:
;1073:	v = Info_ValueForKey( configstring, "e_head" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $526
ARGP4
ADDRLP4 2568
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2568
INDIRP4
ASGNP4
line 1074
;1074:	Q_strncpyz(newInfo.equipmentHeadName, v, sizeof( newInfo.equipmentHeadName ) );
ADDRLP4 0+672
ARGP4
ADDRLP4 2484
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1076
;1075:
;1076:	v = Info_ValueForKey( configstring, "e_eyes" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $529
ARGP4
ADDRLP4 2572
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2572
INDIRP4
ASGNP4
line 1077
;1077:	Q_strncpyz(newInfo.equipmentEyesName, v, sizeof( newInfo.equipmentEyesName ));
ADDRLP4 0+736
ARGP4
ADDRLP4 2484
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1079
;1078:
;1079:	v = Info_ValueForKey( configstring, "e_mouth" );
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $532
ARGP4
ADDRLP4 2576
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2576
INDIRP4
ASGNP4
line 1080
;1080:	Q_strncpyz(newInfo.equipmentMouthName, v, sizeof( newInfo.equipmentMouthName ));
ADDRLP4 0+608
ARGP4
ADDRLP4 2484
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1085
;1081:
;1082://	CG_Printf("head: %s mouth: %s eyes : %s\n",newInfo.equipmentHeadName,newInfo.equipmentMouthName,newInfo.equipmentEyesName );
;1083:
;1084:	// model
;1085:	v = Info_ValueForKey( configstring, "model" ); 
ADDRLP4 2488
INDIRP4
ARGP4
ADDRGP4 $535
ARGP4
ADDRLP4 2580
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 2484
ADDRLP4 2580
INDIRP4
ASGNP4
line 1087
;1086:
;1087:	if ( cg_disableHeadstuff.integer )
ADDRGP4 cg_disableHeadstuff+12
INDIRI4
CNSTI4 0
EQI4 $536
line 1088
;1088:	{
line 1089
;1089:		Q_strncpyz(newInfo.equipmentEyesName, "", sizeof( newInfo.equipmentEyesName ));
ADDRLP4 0+736
ARGP4
ADDRGP4 $540
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1090
;1090:		Q_strncpyz(newInfo.equipmentHeadName, "", sizeof( newInfo.equipmentHeadName ));
ADDRLP4 0+672
ARGP4
ADDRGP4 $540
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1091
;1091:		Q_strncpyz(newInfo.equipmentMouthName, "", sizeof( newInfo.equipmentMouthName ));
ADDRLP4 0+608
ARGP4
ADDRGP4 $540
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1092
;1092:	}
LABELV $536
line 1125
;1093:
;1094:	/*
;1095:	if ( cg_forceModel.integer ) {
;1096:		// forcemodel makes everyone use a single model
;1097:		// to prevent load hitches
;1098:		char modelStr[MAX_QPATH];
;1099:		char *skin;
;1100:
;1101:
;1102:		trap_Cvar_VariableStringBuffer( "model", modelStr, sizeof( modelStr ) );
;1103:		if ( ( skin = strchr( modelStr, '/' ) ) == NULL) {
;1104:			skin = "default";
;1105:		} else {
;1106:			*skin++ = 0;
;1107:		}
;1108:
;1109:		Q_strncpyz( newInfo.headName, skin, sizeof( newInfo.headName ) );
;1110:		Q_strncpyz( newInfo.modelName, modelStr, sizeof( newInfo.modelName ) );
;1111:
;1112://		Q_strncpyz( newInfo.modelName, DEFAULT_MODEL, sizeof( newInfo.modelName ) );
;1113://		Q_strncpyz( newInfo.skinName, "default", sizeof( newInfo.skinName ) );
;1114:
;1115:		if ( cgs.gametype >= GT_TEAM ) 
;1116:		{
;1117:			// keep skin name
;1118:			slash = strchr( v, '/' );
;1119:			if ( slash ) {
;1120:				Q_strncpyz( newInfo.modelName, slash + 1, sizeof( newInfo.modelName ) );
;1121:			}
;1122:		}
;1123:	} 
;1124:	else */
;1125:	{
line 1126
;1126:		Q_strncpyz( newInfo.modelName, v, sizeof( newInfo.modelName ) );
ADDRLP4 0+148
ARGP4
ADDRLP4 2484
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1128
;1127:
;1128:		slash = strchr( newInfo.modelName, '/' );
ADDRLP4 0+148
ARGP4
CNSTI4 47
ARGI4
ADDRLP4 2584
ADDRGP4 strchr
CALLP4
ASGNP4
ADDRLP4 2496
ADDRLP4 2584
INDIRP4
ASGNP4
line 1129
;1129:		if ( !slash ) {
ADDRLP4 2496
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $549
line 1131
;1130:			// modelName didn not include a skin name
;1131:			Q_strncpyz( newInfo.headName, "bruce", sizeof( newInfo.headName ) );
ADDRLP4 0+212
ARGP4
ADDRGP4 $392
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1132
;1132:		} else {
ADDRGP4 $550
JUMPV
LABELV $549
line 1133
;1133:			Q_strncpyz( newInfo.headName, slash + 1, sizeof( newInfo.headName ) );
ADDRLP4 0+212
ARGP4
ADDRLP4 2496
INDIRP4
CNSTI4 1
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1135
;1134:			// truncate modelName
;1135:			*slash = 0;
ADDRLP4 2496
INDIRP4
CNSTI1 0
ASGNI1
line 1136
;1136:		}
LABELV $550
line 1137
;1137:	}
line 1141
;1138:
;1139:	// scan for an existing clientinfo that matches this modelname
;1140:	// so we can avoid loading checks if possible
;1141:	if ( !CG_ScanForExistingClientInfo( &newInfo ) ) {
ADDRLP4 0
ARGP4
ADDRLP4 2584
ADDRGP4 CG_ScanForExistingClientInfo
CALLI4
ASGNI4
ADDRLP4 2584
INDIRI4
CNSTI4 0
NEI4 $555
line 1166
;1142:		/*
;1143:		qboolean	forceDefer;
;1144:
;1145:		forceDefer = trap_MemoryRemaining() < 4000000;
;1146:
;1147:		// if we are defering loads, just have it pick the first valid
;1148:		if ( forceDefer || ( cg_deferPlayers.integer && !cg_buildScript.integer && !cg.loading ) ) {
;1149:			// keep whatever they had if it won't violate team skins
;1150:			if ( ci->infoValid && 
;1151:				( cgs.gametype < GT_TEAM  ) ) {
;1152:				CG_CopyClientInfoModel( ci, &newInfo );
;1153:				newInfo.deferred = qtrue;
;1154:			} else {
;1155:				// use whatever is available
;1156:				CG_SetDeferredClientInfo( &newInfo );
;1157:			}
;1158:			// if we are low on memory, leave them with this model
;1159:			if ( forceDefer ) {
;1160:				CG_Error( "Memory is low. Couldn't load playermodels, please turn down your graphic detail.\n" );
;1161:				newInfo.deferred = qfalse;
;1162:			}
;1163:		} else {
;1164:			CG_LoadClientInfo( &newInfo );
;1165:		}*/
;1166:		CG_Printf("Couldn't find playermodel in ram.\n");
ADDRGP4 $557
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1168
;1167:
;1168:		newInfo.infoValid = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1169
;1169:		*ci = newInfo;
ADDRLP4 2492
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 2484
line 1170
;1170:		return;
ADDRGP4 $503
JUMPV
LABELV $555
line 1173
;1171:	}
;1172:	// replace whatever was there with the new one
;1173:	newInfo.infoValid = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1174
;1174:	*ci = newInfo;
ADDRLP4 2492
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 2484
line 1175
;1175:}
LABELV $503
endproc CG_NewClientInfo 2588 12
export CG_LoadDeferredPlayers
proc CG_LoadDeferredPlayers 16 4
line 1188
;1176:
;1177:
;1178:
;1179:/*
;1180:======================
;1181:CG_LoadDeferredPlayers
;1182:
;1183:Called each frame when a player is dead
;1184:and the scoreboard is up
;1185:so deferred players can be loaded
;1186:======================
;1187:*/
;1188:void CG_LoadDeferredPlayers( void ) {
line 1193
;1189:	int		i;
;1190:	clientInfo_t	*ci;
;1191:
;1192:	// scan for a deferred player to load
;1193:	for ( i = 0, ci = cgs.clientinfo ; i < cgs.maxclients ; i++, ci++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
ADDRGP4 cgs+38664
ASGNP4
ADDRGP4 $562
JUMPV
LABELV $559
line 1194
;1194:		if ( ci->infoValid && ci->deferred ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $565
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $565
line 1201
;1195:			// if we are low on memory, leave it deferred
;1196:		/*f ( trap_MemoryRemaining() < 4000000 ) {
;1197:				CG_Printf( "Memory is low.  Using deferred model.\n" );
;1198:				ci->deferred = qfalse;
;1199:				continue;
;1200:			}*/
;1201:			CG_LoadClientInfo( ci );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1203
;1202://			break;
;1203:		}
LABELV $565
line 1204
;1204:	}
LABELV $560
line 1193
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 2484
ADDP4
ASGNP4
LABELV $562
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+31476
INDIRI4
LTI4 $559
line 1205
;1205:}
LABELV $558
endproc CG_LoadDeferredPlayers 16 4
export CG_CachingClient
proc CG_CachingClient 8 8
line 1208
;1206:
;1207:void CG_CachingClient(char *model, char *skin)
;1208:{
line 1212
;1209://	char iconName[MAX_QPATH];
;1210:	char *s;
;1211:
;1212:	s = va("PPM [%s]", model);
ADDRGP4 $568
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1213
;1213:	CG_LoadingString(s);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadingString
CALLV
pop
line 1214
;1214:}
LABELV $567
endproc CG_CachingClient 8 8
export CG_CacheAllModels
proc CG_CacheAllModels 28 8
line 1217
;1215:
;1216:void CG_CacheAllModels(void)
;1217:{
line 1219
;1218:	int i;//, m;
;1219:	clientInfo_t *ci, *PrevCI = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1221
;1220:
;1221:	cgs.media.SealPlayerModelNames[0] = "s_medium";
ADDRGP4 cgs+205084+1512
ADDRGP4 $391
ASGNP4
line 1222
;1222:	cgs.media.SealPlayerModelNames[1] = NULL;
ADDRGP4 cgs+205084+1512+4
CNSTP4 0
ASGNP4
line 1224
;1223:
;1224:	cgs.media.TangoPlayerModelNames[0] = "t_medium";
ADDRGP4 cgs+205084+1520
ADDRGP4 $389
ASGNP4
line 1225
;1225:	cgs.media.TangoPlayerModelNames[1] = NULL;
ADDRGP4 cgs+205084+1520+4
CNSTP4 0
ASGNP4
line 1227
;1226: 
;1227:	cgs.media.MiscPlayerModelNames[0] = "vip_male";
ADDRGP4 cgs+205084+1528
ADDRGP4 $253
ASGNP4
line 1228
;1228:	cgs.media.MiscPlayerModelNames[1] = NULL;
ADDRGP4 cgs+205084+1528+4
CNSTP4 0
ASGNP4
line 1230
;1229:	
;1230:	for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $585
line 1231
;1231:	{
line 1232
;1232:		if ( !cgs.media.SealPlayerModelNames[i] )
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1512
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $589
line 1233
;1233:			break;
ADDRGP4 $587
JUMPV
LABELV $589
line 1235
;1234:
;1235:		ci = cgs.media.SealPlayerModels + i;
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+1536
ADDP4
ASGNP4
line 1237
;1236:
;1237:		strcpy( ci->modelName, cgs.media.SealPlayerModelNames[i] );
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1512
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1238
;1238:		strcpy( ci->headName, "jayant");
ADDRLP4 0
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRGP4 $390
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1240
;1239:
;1240: 		CG_CachingClient(ci->modelName, ci->skinName);
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
ARGP4
ADDRGP4 CG_CachingClient
CALLV
pop
line 1242
;1241:	
;1242:		CG_LoadClientInfo(ci);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1244
;1243:
;1244:		ci->team = TEAM_RED;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 1
ASGNI4
line 1246
;1245:
;1246:		ci->deferred = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 1247
;1247:		ci->infoValid = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 1249
;1248:
;1249:	}
LABELV $586
line 1230
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $585
LABELV $587
line 1251
;1250:
;1251:	ci = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1253
;1252:
;1253:	if (trap_MemoryRemaining() < 4000000)
ADDRLP4 12
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 4000000
GEI4 $597
line 1254
;1254:		CG_Error("Not enough memory to precache playermodels.\n");
ADDRGP4 $599
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $597
line 1256
;1255:
;1256:	for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $600
line 1257
;1257:	{
line 1258
;1258:		if ( !cgs.media.TangoPlayerModelNames[i] )
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1520
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $604
line 1259
;1259:			break;
ADDRGP4 $602
JUMPV
LABELV $604
line 1261
;1260:
;1261:		ci = cgs.media.TangoPlayerModels + i;
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+4020
ADDP4
ASGNP4
line 1263
;1262:
;1263:		strcpy( ci->modelName, cgs.media.TangoPlayerModelNames[i] );
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1520
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1264
;1264:		strcpy( ci->headName, "bruce"); 
ADDRLP4 0
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRGP4 $392
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1266
;1265:
;1266:		ci->team = TEAM_BLUE;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 1268
;1267: 
;1268:		CG_CachingClient(ci->modelName, ci->skinName);
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
ARGP4
ADDRGP4 CG_CachingClient
CALLV
pop
line 1270
;1269:
;1270: 		CG_LoadClientInfo(ci);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1272
;1271:
;1272:		ci->deferred = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 1273
;1273:		ci->infoValid = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 1275
;1274:
;1275:	}
LABELV $601
line 1256
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $600
LABELV $602
line 1277
;1276:
;1277:	if (trap_MemoryRemaining() < 4000000)
ADDRLP4 16
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 4000000
GEI4 $612
line 1278
;1278:		CG_Error("Not enough memory to precache playermodels.\n");
ADDRGP4 $599
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $612
line 1280
;1279: 
;1280:	for ( i = 0; i < MAX_PLAYER_MODELS; i++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $614
line 1281
;1281:	{
line 1282
;1282:		if ( !cgs.media.MiscPlayerModelNames[i] )
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1528
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $618
line 1283
;1283:			break;
ADDRGP4 $616
JUMPV
LABELV $618
line 1284
;1284:		if ( !Q_stricmp( cgs.media.MiscPlayerModelNames[i], "vip_male") )
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1528
ADDP4
INDIRP4
ARGP4
ADDRGP4 $253
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $622
line 1285
;1285:		{
line 1287
;1286:			// if not in vip mode skip precaching the vip player model
;1287:			if ( !cgs.mi_vipRescue && !cgs.mi_vipTime )
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 cgs+214176
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $626
ADDRGP4 cgs+214180
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $626
line 1288
;1288:				continue;
ADDRGP4 $615
JUMPV
LABELV $626
line 1289
;1289:		}
LABELV $622
line 1291
;1290:
;1291:		ci = cgs.media.MiscPlayerModels + i; 
ADDRLP4 0
CNSTI4 2484
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+205084+6504
ADDP4
ASGNP4
line 1293
;1292:
;1293:		strcpy( ci->modelName, cgs.media.MiscPlayerModelNames[i] );
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1528
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1294
;1294:		strcpy( ci->headName, "vip_seal");
ADDRLP4 0
INDIRP4
CNSTI4 212
ADDP4
ARGP4
ADDRGP4 $340
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1296
;1295:
;1296: 		CG_CachingClient(ci->modelName, ci->skinName);
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
ARGP4
ADDRGP4 CG_CachingClient
CALLV
pop
line 1298
;1297:	
;1298:		CG_LoadClientInfo(ci);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LoadClientInfo
CALLV
pop
line 1300
;1299:
;1300:		ci->team = TEAM_RED;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 1
ASGNI4
line 1302
;1301:
;1302:		ci->deferred = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
CNSTI4 0
ASGNI4
line 1303
;1303:		ci->infoValid = qtrue; 
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 1304
;1304:	}
LABELV $615
line 1280
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $614
LABELV $616
line 1306
;1305:
;1306:	ci = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1308
;1307:
;1308:	if (trap_MemoryRemaining() < 4000000)
ADDRLP4 20
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 4000000
GEI4 $634
line 1309
;1309:		CG_Error("Not enough memory to precache playermodels.\n");
ADDRGP4 $599
ARGP4
ADDRGP4 CG_Error
CALLV
pop
LABELV $634
line 1311
;1310:
;1311:}
LABELV $569
endproc CG_CacheAllModels 28 8
proc CG_SetLerpFrameAnimation 12 8
line 1328
;1312:/*
;1313:=============================================================================
;1314:
;1315:PLAYER ANIMATION
;1316:
;1317:=============================================================================
;1318:*/
;1319:
;1320:
;1321:/*
;1322:===============
;1323:CG_SetLerpFrameAnimation
;1324:
;1325:may include ANIM_TOGGLEBIT
;1326:===============
;1327:*/
;1328:static void CG_SetLerpFrameAnimation( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation ) {
line 1331
;1329:	animation_t	*anim;
;1330:
;1331:	lf->animationNumber = newAnimation;
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 1332
;1332:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1334
;1333:
;1334:	if ( newAnimation < 0 || newAnimation >= MAX_ANIMATIONS ) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $639
ADDRLP4 4
INDIRI4
CNSTI4 59
LTI4 $637
LABELV $639
line 1335
;1335:		CG_Error( "Bad animation number: %i", newAnimation );
ADDRGP4 $640
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1336
;1336:	}
LABELV $637
line 1338
;1337:
;1338:	anim = &ci->animations[ newAnimation ];
ADDRLP4 0
CNSTI4 28
ADDRFP4 8
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 800
ADDP4
ADDP4
ASGNP4
line 1340
;1339:
;1340:	lf->animation = anim;
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1341
;1341:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1343
;1342:
;1343:	if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $641
line 1344
;1344:		CG_Printf( "Anim: %i\n", newAnimation );
ADDRGP4 $644
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 1345
;1345:	}
LABELV $641
line 1346
;1346:}
LABELV $636
endproc CG_SetLerpFrameAnimation 12 8
proc CG_RunLerpFrame 44 12
line 1356
;1347:
;1348:/*
;1349:===============
;1350:CG_RunLerpFrame
;1351:
;1352:Sets cg.snap, cg.oldFrame, and cg.backlerp
;1353:cg.time should be between oldFrameTime and frameTime after exit
;1354:===============
;1355:*/
;1356:static void CG_RunLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int newAnimation, float speedScale ) {
line 1361
;1357:	int			f, numFrames;
;1358:	animation_t	*anim;
;1359:
;1360:	// debugging tool to get no animations
;1361:	if ( cg_animSpeed.integer == 0 ) {
ADDRGP4 cg_animSpeed+12
INDIRI4
CNSTI4 0
NEI4 $646
line 1362
;1362:		lf->oldFrame = lf->frame = lf->backlerp = 0;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 20
ADDRLP4 16
INDIRF4
CVFI4 4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ASGNI4
line 1363
;1363:		return;
ADDRGP4 $645
JUMPV
LABELV $646
line 1367
;1364:	}
;1365:
;1366:	// see if the animation sequence is switching
;1367:	if ( newAnimation != lf->animationNumber || !lf->animation ) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 8
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $651
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $649
LABELV $651
line 1368
;1368:		CG_SetLerpFrameAnimation( ci, lf, newAnimation );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1369
;1369:	}
LABELV $649
line 1371
;1370:
;1371:	if ( cg_animSpeed.value != 1.0f ) {
ADDRGP4 cg_animSpeed+8
INDIRF4
CNSTF4 1065353216
EQF4 $652
line 1372
;1372:		speedScale = cg_animSpeed.value;
ADDRFP4 12
ADDRGP4 cg_animSpeed+8
INDIRF4
ASGNF4
line 1373
;1373:	}
LABELV $652
line 1377
;1374:
;1375:	// if we have passed the current frame, move it to
;1376:	// oldFrame and calculate a new frame
;1377:	if ( cg.time >= lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $656
line 1378
;1378:		lf->oldFrame = lf->frame;
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1379
;1379:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1382
;1380:
;1381:		// get the next frame based on the animation
;1382:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 1383
;1383:		if ( !anim->frameLerp ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $659
line 1384
;1384:			return;		// shouldn't happen
ADDRGP4 $645
JUMPV
LABELV $659
line 1386
;1385:		}
;1386:		if ( cg.time < lf->animationTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $661
line 1387
;1387:			lf->frameTime = lf->animationTime;		// initial lerp
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 1388
;1388:		} else {
ADDRGP4 $662
JUMPV
LABELV $661
line 1389
;1389:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1390
;1390:		}
LABELV $662
line 1391
;1391:		f = ( lf->frameTime - lf->animationTime ) / anim->frameLerp;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 12
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRI4
DIVI4
ASGNI4
line 1392
;1392:		f *= speedScale;		// adjust for haste, etc
ADDRLP4 4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRFP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1395
;1393:
;1394:
;1395:		numFrames = anim->numFrames;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1396
;1396:		if (anim->flipflop) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $664
line 1397
;1397:			numFrames *= 2;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 1398
;1398:		}
LABELV $664
line 1399
;1399:		if ( f >= numFrames ) {
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $666
line 1400
;1400:			f -= numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1401
;1401:			if ( anim->loopFrames ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $668
line 1402
;1402:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 1403
;1403:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 1404
;1404:			} else {
ADDRGP4 $669
JUMPV
LABELV $668
line 1405
;1405:				f = numFrames - 1;
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1408
;1406:				// the animation is stuck at the end, so it
;1407:				// can immediately transition to another sequence
;1408:				lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1409
;1409:			}
LABELV $669
line 1410
;1410:		}
LABELV $666
line 1411
;1411:		if ( anim->reversed ) {
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
EQI4 $671
line 1412
;1412:			lf->frame = anim->firstFrame + anim->numFrames - 1 - f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 1413
;1413:		}
ADDRGP4 $672
JUMPV
LABELV $671
line 1414
;1414:		else if (anim->flipflop && f>=anim->numFrames) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
EQI4 $673
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $673
line 1415
;1415:			lf->frame = anim->firstFrame + anim->numFrames - 1 - (f%anim->numFrames);
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 40
INDIRI4
ADDI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
ADDRLP4 40
INDIRI4
MODI4
SUBI4
ASGNI4
line 1416
;1416:		}
ADDRGP4 $674
JUMPV
LABELV $673
line 1417
;1417:		else {
line 1418
;1418:			lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 1419
;1419:		}
LABELV $674
LABELV $672
line 1420
;1420:		if ( cg.time > lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $675
line 1421
;1421:			lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1422
;1422:			if ( cg_debugAnim.integer ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 0
EQI4 $679
line 1423
;1423:				CG_Printf( "Clamp lf->frameTime\n");
ADDRGP4 $682
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1424
;1424:			}
LABELV $679
line 1425
;1425:		}
LABELV $675
line 1426
;1426:	}
LABELV $656
line 1428
;1427:
;1428:	if ( lf->frameTime > cg.time + 200 ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
LEI4 $683
line 1429
;1429:		lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1430
;1430:	}
LABELV $683
line 1432
;1431:
;1432:	if ( lf->oldFrameTime > cg.time ) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $687
line 1433
;1433:		lf->oldFrameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1434
;1434:	}
LABELV $687
line 1436
;1435:	// calculate current lerp value
;1436:	if ( lf->frameTime == lf->oldFrameTime ) {
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $691
line 1437
;1437:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 1438
;1438:	} else {
ADDRGP4 $692
JUMPV
LABELV $691
line 1439
;1439:		lf->backlerp = 1.0 - (float)( cg.time - lf->oldFrameTime ) / ( lf->frameTime - lf->oldFrameTime );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 1440
;1440:	}
LABELV $692
line 1441
;1441:}
LABELV $645
endproc CG_RunLerpFrame 44 12
proc CG_ClearLerpFrame 16 12
line 1449
;1442:
;1443:
;1444:/*
;1445:===============
;1446:CG_ClearLerpFrame
;1447:===============
;1448:*/
;1449:static void CG_ClearLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int animationNumber ) {
line 1450
;1450:	lf->frameTime = lf->oldFrameTime = cg.time;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1451
;1451:	CG_SetLerpFrameAnimation( ci, lf, animationNumber );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_SetLerpFrameAnimation
CALLV
pop
line 1452
;1452:	lf->oldFrame = lf->frame = lf->animation->firstFrame;
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1453
;1453:}
LABELV $694
endproc CG_ClearLerpFrame 16 12
proc CG_PlayerAnimation 20 16
line 1462
;1454:
;1455:
;1456:/*
;1457:===============
;1458:CG_PlayerAnimation
;1459:===============
;1460:*/
;1461:static void CG_PlayerAnimation( centity_t *cent, int *legsOld, int *legs, float *legsBackLerp,
;1462:						int *torsoOld, int *torso, float *torsoBackLerp ) {
line 1467
;1463:	clientInfo_t	*ci;
;1464:	int				clientNum;
;1465:	float			speedScale;
;1466:
;1467:	clientNum = cent->currentState.clientNum;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 1469
;1468:
;1469:	if ( cg_noPlayerAnims.integer ) {
ADDRGP4 cg_noPlayerAnims+12
INDIRI4
CNSTI4 0
EQI4 $697
line 1470
;1470:		*legsOld = *legs = *torsoOld = *torso = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 20
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1471
;1471:		return;
ADDRGP4 $696
JUMPV
LABELV $697
line 1479
;1472:	}
;1473:
;1474:#if 0
;1475:	if ( cent->currentState.powerups & ( 1 << PW_HASTE ) ) {
;1476:		speedScale = 1.5;
;1477:	} else 
;1478:#endif
;1479:	{
line 1480
;1480:		speedScale = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1481
;1481:	}
line 1483
;1482:
;1483:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 0
CNSTI4 2484
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 1486
;1484:
;1485:	// do the shuffle turn frames locally
;1486:	if ( cent->pe.legs.yawing && ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) == LEGS_IDLE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 496
ADDP4
INDIRI4
CNSTI4 0
EQI4 $701
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
CNSTI4 43
NEI4 $701
line 1487
;1487:		CG_RunLerpFrame( ci, &cent->pe.legs, LEGS_TURN, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
ARGP4
CNSTI4 48
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1488
;1488:	} else { 
ADDRGP4 $702
JUMPV
LABELV $701
line 1489
;1489:		CG_RunLerpFrame( ci, &cent->pe.legs, cent->currentState.legsAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 472
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1490
;1490:	}
LABELV $702
line 1492
;1491:
;1492:	*legsOld = cent->pe.legs.oldFrame;
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
ASGNI4
line 1493
;1493:	*legs = cent->pe.legs.frame;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ASGNI4
line 1494
;1494:	*legsBackLerp = cent->pe.legs.backlerp;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ASGNF4
line 1496
;1495:
;1496:	CG_RunLerpFrame( ci, &cent->pe.torso, cent->currentState.torsoAnim, speedScale );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 520
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_RunLerpFrame
CALLV
pop
line 1498
;1497:
;1498:	*torsoOld = cent->pe.torso.oldFrame;
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
ASGNI4
line 1499
;1499:	*torso = cent->pe.torso.frame;
ADDRFP4 20
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRI4
ASGNI4
line 1500
;1500:	*torsoBackLerp = cent->pe.torso.backlerp;
ADDRFP4 24
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
ASGNF4
line 1501
;1501:}
LABELV $696
endproc CG_PlayerAnimation 20 16
proc CG_SwingAngles 28 8
line 1517
;1502:
;1503:/*
;1504:=============================================================================
;1505:
;1506:PLAYER ANGLES
;1507:
;1508:=============================================================================
;1509:*/
;1510:
;1511:/*
;1512:==================
;1513:CG_SwingAngles
;1514:==================
;1515:*/
;1516:static void CG_SwingAngles( float destination, float swingTolerance, float clampTolerance,
;1517:					float speed, float *angle, qboolean *swinging ) {
line 1522
;1518:	float	swing;
;1519:	float	move;
;1520:	float	scale;
;1521:
;1522:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $704
line 1524
;1523:		// see if a swing should be started
;1524:		swing = AngleSubtract( *angle, destination );
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRFP4 0
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1525
;1525:		if ( swing > swingTolerance || swing < -swingTolerance ) {
ADDRLP4 20
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
GTF4 $708
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRF4
NEGF4
GEF4 $706
LABELV $708
line 1526
;1526:			*swinging = qtrue;
ADDRFP4 20
INDIRP4
CNSTI4 1
ASGNI4
line 1527
;1527:		}
LABELV $706
line 1528
;1528:	}
LABELV $704
line 1530
;1529:
;1530:	if ( !*swinging ) {
ADDRFP4 20
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $709
line 1531
;1531:		return;
ADDRGP4 $703
JUMPV
LABELV $709
line 1536
;1532:	}
;1533:	
;1534:	// modify the speed depending on the delta
;1535:	// so it doesn't seem so linear
;1536:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 12
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ASGNF4
line 1537
;1537:	scale = fabs( swing );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
line 1538
;1538:	if ( scale < swingTolerance * 0.5 ) {
ADDRLP4 4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRF4
MULF4
GEF4 $711
line 1539
;1539:		scale = 0.5;
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 1540
;1540:	} else if ( scale < swingTolerance ) {
ADDRGP4 $712
JUMPV
LABELV $711
ADDRLP4 4
INDIRF4
ADDRFP4 4
INDIRF4
GEF4 $713
line 1541
;1541:		scale = 1.0;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1542
;1542:	} else {
ADDRGP4 $714
JUMPV
LABELV $713
line 1543
;1543:		scale = 2.0;
ADDRLP4 4
CNSTF4 1073741824
ASGNF4
line 1544
;1544:	}
LABELV $714
LABELV $712
line 1547
;1545:
;1546:	// swing towards the destination angle
;1547:	if ( swing >= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
LTF4 $715
line 1548
;1548:		move = cg.frametime * scale * speed;
ADDRLP4 8
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 1549
;1549:		if ( move >= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
LTF4 $718
line 1550
;1550:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1551
;1551:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1552
;1552:		}
LABELV $718
line 1553
;1553:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1554
;1554:	} else if ( swing < 0 ) {
ADDRGP4 $716
JUMPV
LABELV $715
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $720
line 1555
;1555:		move = cg.frametime * scale * -speed;
ADDRLP4 8
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 12
INDIRF4
NEGF4
MULF4
ASGNF4
line 1556
;1556:		if ( move <= swing ) {
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
GTF4 $723
line 1557
;1557:			move = swing;
ADDRLP4 8
ADDRLP4 0
INDIRF4
ASGNF4
line 1558
;1558:			*swinging = qfalse;
ADDRFP4 20
INDIRP4
CNSTI4 0
ASGNI4
line 1559
;1559:		}
LABELV $723
line 1560
;1560:		*angle = AngleMod( *angle + move );
ADDRLP4 20
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1561
;1561:	}
LABELV $720
LABELV $716
line 1564
;1562:
;1563:	// clamp to no more than tolerance
;1564:	swing = AngleSubtract( destination, *angle );
ADDRFP4 0
INDIRF4
ARGF4
ADDRFP4 16
INDIRP4
INDIRF4
ARGF4
ADDRLP4 20
ADDRGP4 AngleSubtract
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 20
INDIRF4
ASGNF4
line 1565
;1565:	if ( swing > clampTolerance ) {
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
LEF4 $725
line 1566
;1566:		*angle = AngleMod( destination - (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
SUBF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1567
;1567:	} else if ( swing < -clampTolerance ) {
ADDRGP4 $726
JUMPV
LABELV $725
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
GEF4 $727
line 1568
;1568:		*angle = AngleMod( destination + (clampTolerance - 1) );
ADDRFP4 0
INDIRF4
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
SUBF4
ADDF4
ARGF4
ADDRLP4 24
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 16
INDIRP4
ADDRLP4 24
INDIRF4
ASGNF4
line 1569
;1569:	}
LABELV $727
LABELV $726
line 1570
;1570:}
LABELV $703
endproc CG_SwingAngles 28 8
proc CG_AddPainTwitch 12 0
line 1577
;1571:
;1572:/*
;1573:=================
;1574:CG_AddPainTwitch
;1575:=================
;1576:*/
;1577:static void CG_AddPainTwitch( centity_t *cent, vec3_t torsoAngles ) {
line 1581
;1578:	int		t;
;1579:	float	f;
;1580:
;1581:	t = cg.time - cent->pe.painTime;
ADDRLP4 0
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1582
;1582:	if ( t >= PAIN_TWITCH_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 200
LTI4 $731
line 1583
;1583:		return;
ADDRGP4 $729
JUMPV
LABELV $731
line 1586
;1584:	}
;1585:
;1586:	f = 1.0 - (float)t / PAIN_TWITCH_TIME;
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1128792064
DIVF4
SUBF4
ASGNF4
line 1588
;1587:
;1588:	if ( cent->pe.painDirection ) {
ADDRFP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
CNSTI4 0
EQI4 $733
line 1589
;1589:		torsoAngles[ROLL] += 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1590
;1590:	} else {
ADDRGP4 $734
JUMPV
LABELV $733
line 1591
;1591:		torsoAngles[ROLL] -= 20 * f;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
SUBF4
ASGNF4
line 1592
;1592:	}
LABELV $734
line 1593
;1593:}
LABELV $729
endproc CG_AddPainTwitch 12 0
data
align 4
LABELV $736
byte 4 0
byte 4 22
byte 4 45
byte 4 -22
byte 4 0
byte 4 22
byte 4 -45
byte 4 -22
code
proc CG_PlayerAngles 152 24
line 1610
;1594:
;1595:
;1596:/*
;1597:===============
;1598:CG_PlayerAngles
;1599:
;1600:Handles seperate torso motion
;1601:
;1602:  legs pivot based on direction of movement
;1603:
;1604:  head always looks exactly at cent->lerpAngles
;1605:
;1606:  if motion < 20 degrees, show in head only
;1607:  if < 45 degrees, also show in torso
;1608:===============
;1609:*/
;1610:static void CG_PlayerAngles( centity_t *cent, vec3_t legs[3], vec3_t torso[3] , vec3_t arms[3],  vec3_t head[3] ) {
line 1618
;1611:	vec3_t		legsAngles, torsoAngles, headAngles   ;
;1612:	float		dest;
;1613:	static	int	movementOffsets[8] = { 0, 22, 45, -22, 0, 22, -45, -22 };
;1614:	vec3_t		velocity;
;1615:	float		speed;
;1616:	int			dir;
;1617:
;1618:	VectorCopy( cent->lerpAngles, headAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRB
ASGNB 12
line 1619
;1619:	headAngles[YAW] = AngleMod( headAngles[YAW] );
ADDRLP4 12+4
INDIRF4
ARGF4
ADDRLP4 60
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 60
INDIRF4
ASGNF4
line 1620
;1620:	VectorClear( legsAngles );
ADDRLP4 64
CNSTF4 0
ASGNF4
ADDRLP4 24+8
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 64
INDIRF4
ASGNF4
line 1621
;1621:	VectorClear( torsoAngles );
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 0+8
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 68
INDIRF4
ASGNF4
line 1626
;1622: 
;1623:	// --------- yaw -------------
;1624:
;1625:	// allow yaw to drift a bit
;1626:	if ( ( cent->currentState.legsAnim & ~ANIM_TOGGLEBIT ) != LEGS_IDLE 
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
CNSTI4 -129
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ADDRLP4 76
INDIRI4
BANDI4
CNSTI4 43
NEI4 $747
ADDRLP4 80
ADDRLP4 72
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 76
INDIRI4
BANDI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 20
NEI4 $747
ADDRLP4 80
INDIRI4
CNSTI4 28
NEI4 $747
ADDRLP4 80
INDIRI4
CNSTI4 24
EQI4 $743
LABELV $747
line 1629
;1627:		|| ( cent->currentState.torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND_RIFLE || 
;1628:		( cent->currentState.torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND_ITEM 
;1629:		|| ( cent->currentState.torsoAnim & ~ANIM_TOGGLEBIT ) != TORSO_STAND_PISTOL ) {
line 1631
;1630:		// if not standing still, always point all in the same direction
;1631:		cent->pe.torso.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
CNSTI4 1
ASGNI4
line 1632
;1632:		cent->pe.torso.pitching = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
CNSTI4 1
ASGNI4
line 1633
;1633:		cent->pe.legs.yawing = qtrue;	// always center
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTI4 1
ASGNI4
line 1634
;1634:	}
LABELV $743
line 1637
;1635:
;1636:	// adjust legs for movement dir
;1637:	if ( cent->currentState.eFlags & EF_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $748
line 1639
;1638:		// don't let dead bodies twitch
;1639:		dir = 0;
ADDRLP4 48
CNSTI4 0
ASGNI4
line 1640
;1640:	} else {
ADDRGP4 $749
JUMPV
LABELV $748
line 1641
;1641:		dir = cent->currentState.angles2[YAW];
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1642
;1642:		if ( dir < 0 || dir > 7 ) {
ADDRLP4 48
INDIRI4
CNSTI4 0
LTI4 $752
ADDRLP4 48
INDIRI4
CNSTI4 7
LEI4 $750
LABELV $752
line 1643
;1643:			CG_Error( "Bad player movement angle" );
ADDRGP4 $753
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 1644
;1644:		}
LABELV $750
line 1645
;1645:	}
LABELV $749
line 1646
;1646:	legsAngles[YAW] = headAngles[YAW] + movementOffsets[ dir ];
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 48
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $736
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1647
;1647:	torsoAngles[YAW] = headAngles[YAW] + 0.25 * movementOffsets[ dir ];
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
CNSTF4 1048576000
ADDRLP4 48
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $736
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1650
;1648:
;1649:	// torso
;1650:	CG_SwingAngles( torsoAngles[YAW], 25, 90, cg_swingSpeed.value, &cent->pe.torso.yawAngle, &cent->pe.torso.yawing );
ADDRLP4 0+4
INDIRF4
ARGF4
CNSTF4 1103626240
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 540
ADDP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 544
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1651
;1651:	CG_SwingAngles( legsAngles[YAW], 40, 90, cg_swingSpeed.value, &cent->pe.legs.yawAngle, &cent->pe.legs.yawing );
ADDRLP4 24+4
INDIRF4
ARGF4
CNSTF4 1109393408
ARGF4
CNSTF4 1119092736
ARGF4
ADDRGP4 cg_swingSpeed+8
INDIRF4
ARGF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 492
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 496
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1653
;1652:
;1653:	torsoAngles[YAW] = cent->pe.torso.yawAngle;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
ASGNF4
line 1654
;1654:	legsAngles[YAW] = cent->pe.legs.yawAngle;
ADDRLP4 24+4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ASGNF4
line 1659
;1655:
;1656:	// --------- pitch -------------
;1657:
;1658:	// only show a fraction of the pitch angle in the torso
;1659:	if ( headAngles[PITCH] > 180 ) {
ADDRLP4 12
INDIRF4
CNSTF4 1127481344
LEF4 $764
line 1660
;1660:		dest = (-360 + headAngles[PITCH]) * 0.75f;
ADDRLP4 56
CNSTF4 1061158912
ADDRLP4 12
INDIRF4
CNSTF4 3283353600
ADDF4
MULF4
ASGNF4
line 1661
;1661:	} else {
ADDRGP4 $765
JUMPV
LABELV $764
line 1662
;1662:		dest = headAngles[PITCH] * 0.75f;
ADDRLP4 56
CNSTF4 1061158912
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 1663
;1663:	}
LABELV $765
line 1664
;1664:	CG_SwingAngles( dest, 15, 30, 0.1f, &cent->pe.torso.pitchAngle, &cent->pe.torso.pitching );
ADDRLP4 56
INDIRF4
ARGF4
CNSTF4 1097859072
ARGF4
CNSTF4 1106247680
ARGF4
CNSTF4 1036831949
ARGF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 548
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 552
ADDP4
ARGP4
ADDRGP4 CG_SwingAngles
CALLV
pop
line 1665
;1665:	torsoAngles[PITCH] = cent->pe.torso.pitchAngle;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
ASGNF4
line 1669
;1666:
;1667:
;1668:	if ( 
;1669:		CG_IsPlayerInAnim( cent, TORSO_DROP_RIFLE , qfalse ) || 
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 36
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 96
ADDRGP4 CG_IsPlayerInAnim
CALLI4
ASGNI4
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRLP4 96
INDIRI4
ADDRLP4 100
INDIRI4
NEI4 $768
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 38
ARGI4
ADDRLP4 100
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_IsPlayerInAnim
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $766
LABELV $768
line 1671
;1670:		CG_IsPlayerInAnim( cent, TORSO_DROP_PISTOL , qfalse ) )
;1671:		torsoAngles[PITCH] = 0; 
ADDRLP4 0
CNSTF4 0
ASGNF4
LABELV $766
line 1677
;1672:	
;1673:	// --------- roll -------------
;1674:
;1675:
;1676:	// lean towards the direction of travel
;1677:	VectorCopy( cent->currentState.pos.trDelta, velocity );
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 1678
;1678:	speed = VectorNormalize( velocity );
ADDRLP4 36
ARGP4
ADDRLP4 108
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 52
ADDRLP4 108
INDIRF4
ASGNF4
line 1679
;1679:	if ( speed ) {
ADDRLP4 52
INDIRF4
CNSTF4 0
EQF4 $769
line 1683
;1680:		vec3_t	axis[3];
;1681:		float	side;
;1682:
;1683:		speed *= 0.05f;
ADDRLP4 52
CNSTF4 1028443341
ADDRLP4 52
INDIRF4
MULF4
ASGNF4
line 1685
;1684:
;1685:		AnglesToAxis( legsAngles, axis );
ADDRLP4 24
ARGP4
ADDRLP4 112
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1686
;1686:		side = speed * DotProduct( velocity, axis[1] );
ADDRLP4 148
ADDRLP4 52
INDIRF4
ADDRLP4 36
INDIRF4
ADDRLP4 112+12
INDIRF4
MULF4
ADDRLP4 36+4
INDIRF4
ADDRLP4 112+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 36+8
INDIRF4
ADDRLP4 112+12+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1687
;1687:		legsAngles[ROLL] -= side;
ADDRLP4 24+8
ADDRLP4 24+8
INDIRF4
ADDRLP4 148
INDIRF4
SUBF4
ASGNF4
line 1689
;1688:
;1689:		side = speed * DotProduct( velocity, axis[0] );
ADDRLP4 148
ADDRLP4 52
INDIRF4
ADDRLP4 36
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDRLP4 36+4
INDIRF4
ADDRLP4 112+4
INDIRF4
MULF4
ADDF4
ADDRLP4 36+8
INDIRF4
ADDRLP4 112+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 1690
;1690:		legsAngles[PITCH] += side;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRLP4 148
INDIRF4
ADDF4
ASGNF4
line 1691
;1691:	}
LABELV $769
line 1694
;1692:
;1693:	// pain twitch
;1694:	CG_AddPainTwitch( cent, torsoAngles );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_AddPainTwitch
CALLV
pop
line 1696
;1695: 
;1696: 	{
line 1699
;1697:		vec3_t armAngles;
;1698:
;1699:		VectorClear(armAngles); 
ADDRLP4 124
CNSTF4 0
ASGNF4
ADDRLP4 112+8
ADDRLP4 124
INDIRF4
ASGNF4
ADDRLP4 112+4
ADDRLP4 124
INDIRF4
ASGNF4
ADDRLP4 112
ADDRLP4 124
INDIRF4
ASGNF4
line 1701
;1700:		 
;1701:		VectorCopy( headAngles, armAngles );
ADDRLP4 112
ADDRLP4 12
INDIRB
ASGNB 12
line 1702
;1702:		VectorSubtract( armAngles, torsoAngles, armAngles );
ADDRLP4 112
ADDRLP4 112
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 112+4
ADDRLP4 112+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 112+8
ADDRLP4 112+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 1703
;1703:		armAngles[ PITCH ] = torsoAngles[ PITCH ];
ADDRLP4 112
ADDRLP4 0
INDIRF4
ASGNF4
line 1705
;1704:
;1705:		if ( armAngles[PITCH] < -30.0f )
ADDRLP4 112
INDIRF4
CNSTF4 3253731328
GEF4 $791
line 1706
;1706:			armAngles[PITCH] = -30.0f;
ADDRLP4 112
CNSTF4 3253731328
ASGNF4
LABELV $791
line 1708
;1707:
;1708:		AnglesToAxis( armAngles, arms );
ADDRLP4 112
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1709
;1709:	}
line 1711
;1710:	// pull the angles back out of the hierarchial chain
;1711:	AnglesSubtract( headAngles, torsoAngles, headAngles );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1712
;1712:	AnglesSubtract( torsoAngles, legsAngles, torsoAngles );
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 AnglesSubtract
CALLV
pop
line 1713
;1713:	AnglesToAxis( legsAngles, legs );
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1716
;1714:
;1715:  	
;1716:	if ( torsoAngles[PITCH] < -5.0f )
ADDRLP4 0
INDIRF4
CNSTF4 3231711232
GEF4 $793
line 1717
;1717:		torsoAngles[PITCH] = -5.0f;
ADDRLP4 0
CNSTF4 3231711232
ASGNF4
ADDRGP4 $794
JUMPV
LABELV $793
line 1718
;1718:	else if ( torsoAngles[PITCH] > 5.0f )
ADDRLP4 0
INDIRF4
CNSTF4 1084227584
LEF4 $795
line 1719
;1719:		torsoAngles[PITCH] = 5.0f;
ADDRLP4 0
CNSTF4 1084227584
ASGNF4
LABELV $795
LABELV $794
line 1721
;1720:
;1721:	AnglesToAxis( torsoAngles, torso );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1722
;1722:	AnglesToAxis( headAngles, head );
ADDRLP4 12
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1723
;1723:}
LABELV $735
endproc CG_PlayerAngles 152 24
proc CG_BreathPuffs 64 48
line 1733
;1724:
;1725:
;1726://==========================================================================
;1727:  
;1728:/*
;1729:===============
;1730:CG_BreathPuffs
;1731:===============
;1732:*/
;1733:static void CG_BreathPuffs( centity_t *cent, refEntity_t *head) {
line 1738
;1734:	clientInfo_t *ci;
;1735:	vec3_t up, origin;
;1736:	int contents;
;1737:
;1738:	ci = &cgs.clientinfo[ cent->currentState.number ];
ADDRLP4 24
CNSTI4 2484
ADDRFP4 0
INDIRP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 1740
;1739:
;1740:	if (!cg_enableBreath.integer) {
ADDRGP4 cg_enableBreath+12
INDIRI4
CNSTI4 0
NEI4 $799
line 1741
;1741:		return;
ADDRGP4 $797
JUMPV
LABELV $799
line 1744
;1742:	}
;1743:
;1744:	if ( cgs.camoType != CAMO_ARCTIC )
ADDRGP4 cgs+214196
INDIRI4
CNSTI4 3
EQI4 $802
line 1745
;1745:		return;
ADDRGP4 $797
JUMPV
LABELV $802
line 1747
;1746:
;1747:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $805
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $805
line 1748
;1748:		return;
ADDRGP4 $797
JUMPV
LABELV $805
line 1750
;1749:	}
;1750:	if ( cent->currentState.eFlags & EF_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $809
line 1751
;1751:		return;
ADDRGP4 $797
JUMPV
LABELV $809
line 1753
;1752:	}
;1753:	contents = trap_CM_PointContents( head->origin, 0 );
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 32
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 32
INDIRI4
ASGNI4
line 1754
;1754:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 28
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $811
line 1755
;1755:		return;
ADDRGP4 $797
JUMPV
LABELV $811
line 1757
;1756:	}
;1757:	if ( ci->breathPuffTime > cg.time ) {
ADDRLP4 24
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $813
line 1758
;1758:		return;
ADDRGP4 $797
JUMPV
LABELV $813
line 1760
;1759:	} 
;1760:	VectorSet( up, 0, 0, 8 );
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 12
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 12+8
CNSTF4 1090519040
ASGNF4
line 1761
;1761:	VectorMA(head->origin, 8, head->axis[0], origin);
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
CNSTF4 1090519040
ASGNF4
ADDRLP4 0
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 48
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
CNSTF4 1090519040
ADDRLP4 48
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1762
;1762:	VectorMA(origin, -4, head->axis[2], origin); 
ADDRLP4 52
CNSTF4 3229614080
ASGNF4
ADDRLP4 56
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 3229614080
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1764
;1763:
;1764:	CG_SmokePuff( origin, up, 
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
CNSTF4 1082130432
ARGF4
ADDRLP4 60
CNSTF4 1065353216
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1153138688
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 1769
;1765:		4, 
;1766:		1, 1, 1, 0.33f, 
;1767:		1500, 
;1768:		cg.time, 0, LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
;1769:	ci->breathPuffTime = cg.time + 2000;
ADDRLP4 24
INDIRP4
CNSTI4 144
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 1770
;1770:}
LABELV $797
endproc CG_BreathPuffs 64 48
proc CG_DustTrail 116 48
line 1777
;1771:
;1772:/*
;1773:===============
;1774:CG_DustTrail
;1775:===============
;1776:*/
;1777:static void CG_DustTrail( centity_t *cent ) {
line 1783
;1778:	int				anim;
;1779:	localEntity_t	*dust;
;1780:	vec3_t end, vel;
;1781:	trace_t tr;
;1782:
;1783:	if (!cg_enableDust.integer)
ADDRGP4 cg_enableDust+12
INDIRI4
CNSTI4 0
NEI4 $829
line 1784
;1784:		return;
ADDRGP4 $828
JUMPV
LABELV $829
line 1786
;1785:
;1786:	if ( cent->dustTrailTime > cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $832
line 1787
;1787:		return;
ADDRGP4 $828
JUMPV
LABELV $832
line 1790
;1788:	}
;1789:
;1790:	anim = cent->pe.legs.animationNumber & ~ANIM_TOGGLEBIT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1791
;1791:	if ( anim != LEGS_LAND ) {
ADDRLP4 24
INDIRI4
CNSTI4 51
EQI4 $835
line 1792
;1792:		return;
ADDRGP4 $828
JUMPV
LABELV $835
line 1795
;1793:	}
;1794:
;1795:	cent->dustTrailTime += 40;
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 1796
;1796:	if ( cent->dustTrailTime < cg.time ) {
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $837
line 1797
;1797:		cent->dustTrailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 460
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 1798
;1798:	}
LABELV $837
line 1800
;1799:
;1800:	VectorCopy(cent->currentState.pos.trBase, end);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1801
;1801:	end[2] -= 64;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115684864
SUBF4
ASGNF4
line 1802
;1802:	CG_Trace( &tr, cent->currentState.pos.trBase, NULL, NULL, end, cent->currentState.number, MASK_PLAYERSOLID );
ADDRLP4 28
ARGP4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 92
INDIRP4
INDIRI4
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1804
;1803:
;1804:	if ( !(tr.surfaceFlags & SURF_DUST) )
ADDRLP4 28+44
INDIRI4
CNSTI4 262144
BANDI4
CNSTI4 0
NEI4 $842
line 1805
;1805:		return;
ADDRGP4 $828
JUMPV
LABELV $842
line 1807
;1806:
;1807:	VectorCopy( cent->currentState.pos.trBase, end );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1808
;1808:	end[2] -= 16;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1098907648
SUBF4
ASGNF4
line 1810
;1809:
;1810:	VectorSet(vel, 0, 0, -30);
ADDRLP4 100
CNSTF4 0
ASGNF4
ADDRLP4 12
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 12+8
CNSTF4 3253731328
ASGNF4
line 1811
;1811:	dust = CG_SmokePuff( end, vel,
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
CNSTF4 1103101952
ARGF4
ADDRLP4 104
CNSTF4 1061997773
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
CNSTF4 1060320051
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1140457472
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRGP4 cgs+205084+1076
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 112
INDIRP4
ASGNP4
line 1819
;1812:				  24,
;1813:				  .8f, .8f, 0.7f, 0.33f,
;1814:				  500,
;1815:				  cg.time,
;1816:				  0,
;1817:				  0,
;1818:				  cgs.media.dustPuffShader );
;1819:}
LABELV $828
endproc CG_DustTrail 116 48
proc CG_PlayerPowerups 4 0
line 1853
;1820: 
;1821:#if 0
;1822:/*
;1823:===============
;1824:CG_TrailItem
;1825:===============
;1826:*/
;1827:static void CG_TrailItem( centity_t *cent, qhandle_t hModel ) {
;1828:	refEntity_t		ent;
;1829:	vec3_t			angles;
;1830:	vec3_t			axis[3];
;1831:
;1832:	VectorCopy( cent->lerpAngles, angles );
;1833:	angles[PITCH] = 0;
;1834:	angles[ROLL] = 0;
;1835:	AnglesToAxis( angles, axis );
;1836:
;1837:	memset( &ent, 0, sizeof( ent ) );
;1838:	VectorMA( cent->lerpOrigin, -16, axis[0], ent.origin );
;1839:	ent.origin[2] += 16;
;1840:	angles[YAW] += 90;
;1841:	AnglesToAxis( angles, ent.axis );
;1842:
;1843:	ent.hModel = hModel;
;1844:	trap_R_AddRefEntityToScene( &ent );
;1845:}  
;1846:#endif
;1847:/*
;1848:===============
;1849:CG_PlayerPowerups
;1850:===============
;1851:*/
;1852:#ifdef NEW_ANIMS
;1853:static void CG_PlayerPowerups( centity_t *cent, refEntity_t *torso ) {
line 1859
;1854:#else
;1855:static void CG_PlayerPowerups( centity_t *cent ) {
;1856:#endif
;1857:	int		powerups;
;1858:
;1859:	powerups = cent->currentState.powerups;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1860
;1860:	if ( !powerups ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $852
line 1861
;1861:		return;
LABELV $852
line 1870
;1862:	} 
;1863:#if 0
;1864:	if ( powerups & ( 1 << PW_BRIEFCASE ) ) {
;1865:		CG_TrailItem( cent, cgs.media.briefcaseModel );
;1866:	}
;1867:#endif
;1868:
;1869: 
;1870:}
LABELV $851
endproc CG_PlayerPowerups 4 0
proc CG_PlayerFloatSprite 144 12
line 1880
;1871:
;1872:
;1873:/*
;1874:===============
;1875:CG_PlayerFloatSprite
;1876:
;1877:Float a sprite over the player's head
;1878:===============
;1879:*/
;1880:static void CG_PlayerFloatSprite( centity_t *cent, qhandle_t shader ) {
line 1884
;1881:	int				rf;
;1882:	refEntity_t		ent;
;1883:
;1884:	if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson ) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $855
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $855
line 1885
;1885:		rf = RF_THIRD_PERSON;		// only show in mirrors
ADDRLP4 140
CNSTI4 2
ASGNI4
line 1886
;1886:	} else {
ADDRGP4 $856
JUMPV
LABELV $855
line 1887
;1887:		rf = 0;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 1888
;1888:	}
LABELV $856
line 1890
;1889:
;1890:	memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1891
;1891:	VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 1892
;1892:	ent.origin[2] += 48;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1111490560
ADDF4
ASGNF4
line 1893
;1893:	ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 1894
;1894:	ent.customShader = shader;
ADDRLP4 0+112
ADDRFP4 4
INDIRI4
ASGNI4
line 1895
;1895:	ent.radius = 10;
ADDRLP4 0+132
CNSTF4 1092616192
ASGNF4
line 1896
;1896:	ent.renderfx = rf;
ADDRLP4 0+4
ADDRLP4 140
INDIRI4
ASGNI4
line 1897
;1897:	ent.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1898
;1898:	ent.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 1899
;1899:	ent.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 1900
;1900:	ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1901
;1901:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1902
;1902:}
LABELV $854
endproc CG_PlayerFloatSprite 144 12
proc CG_PlayerSprites 4 8
line 1913
;1903:
;1904:
;1905:
;1906:/*
;1907:===============
;1908:CG_PlayerSprites
;1909:
;1910:Float sprites over the player's head
;1911:===============
;1912:*/
;1913:static void CG_PlayerSprites( centity_t *cent ) {
line 1916
;1914:	int		team;
;1915:
;1916:	team = cgs.clientinfo[ cent->currentState.clientNum ].team;
ADDRLP4 0
CNSTI4 2484
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664+68
ADDP4
INDIRI4
ASGNI4
line 1918
;1917:
;1918:	if ( cent->currentState.eFlags & EF_CONNECTION ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $875
line 1919
;1919:		CG_PlayerFloatSprite( cent, cgs.media.connectionShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+205084+40
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 1920
;1920:		return;
ADDRGP4 $872
JUMPV
LABELV $875
line 1928
;1921:	}
;1922:
;1923:	/*if ( cent->currentState.eFlags & EF_TALK ) {
;1924:		CG_PlayerFloatSprite( cent, cgs.media.balloonShader );
;1925:		return;
;1926:	}*/
;1927:	if ( 
;1928:		cent->currentState.eFlags & EF_RADIO_TALK &&
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 65536
BANDI4
CNSTI4 0
EQI4 $879
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $879
line 1930
;1929:		cg.snap->ps.persistant[PERS_TEAM] == team
;1930:		) {
line 1931
;1931:		CG_PlayerFloatSprite( cent, cgs.media.radioIcon );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 cgs+205084+644
INDIRI4
ARGI4
ADDRGP4 CG_PlayerFloatSprite
CALLV
pop
line 1932
;1932:		return;
LABELV $879
line 1974
;1933:	}
;1934:#ifdef AWARDS
;1935:	if ( cent->currentState.eFlags & EF_AWARD_IMPRESSIVE ) {
;1936:		CG_PlayerFloatSprite( cent, cgs.media.medalImpressive );
;1937:		return;
;1938:	}
;1939:
;1940:	if ( cent->currentState.eFlags & EF_AWARD_EXCELLENT ) {
;1941:		CG_PlayerFloatSprite( cent, cgs.media.medalExcellent );
;1942:		return;
;1943:	}
;1944:
;1945:	if ( cent->currentState.eFlags & EF_AWARD_GAUNTLET ) {
;1946:		CG_PlayerFloatSprite( cent, cgs.media.medalGauntlet );
;1947:		return;
;1948:	}
;1949:
;1950:	if ( cent->currentState.eFlags & EF_AWARD_DEFEND ) {
;1951:		CG_PlayerFloatSprite( cent, cgs.media.medalDefend );
;1952:		return;
;1953:	}
;1954:
;1955:	if ( cent->currentState.eFlags & EF_AWARD_ASSIST ) {
;1956:		CG_PlayerFloatSprite( cent, cgs.media.medalAssist );
;1957:		return;
;1958:	}
;1959:
;1960:	if ( cent->currentState.eFlags & EF_AWARD_CAP ) {
;1961:		CG_PlayerFloatSprite( cent, cgs.media.medalCapture );
;1962:		return;
;1963:	}
;1964:#endif
;1965:/*
;1966:	if ( !(cent->currentState.eFlags & EF_DEAD) && 
;1967:		cg.snap->ps.persistant[PERS_TEAM] == team &&
;1968:		cgs.gametype >= GT_TEAM) {
;1969:		if (cg_drawFriend.integer) {
;1970:			CG_PlayerFloatSprite( cent, cgs.media.friendShader );
;1971:		}
;1972:		return;
;1973:	}*/
;1974:}
LABELV $872
endproc CG_PlayerSprites 4 8
lit
align 4
LABELV $885
byte 4 3231711232
byte 4 3231711232
byte 4 1084227584
align 4
LABELV $886
byte 4 1084227584
byte 4 1084227584
byte 4 1084227584
code
proc CG_PlayerShadow 116 48
line 1989
;1975:
;1976:/*
;1977:===============
;1978:CG_PlayerShadow
;1979:
;1980:Returns the Z component of the surface being shadowed
;1981:
;1982:  should it return a full plane instead of a Z?
;1983:===============
;1984:*/
;1985:#define	SHADOW_DISTANCE		128
;1986:
;1987:void CG_DirectImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir, float orientation, float red, float green , float blue, float alpha, qboolean alphaFade, float radius, qboolean temporary, int entitynum );
;1988:
;1989:static qboolean CG_PlayerShadow( centity_t *cent, vec3_t origin, float radius, float *shadowPlane ) {
line 1990
;1990:	vec3_t		end, mins = {-5, -5, 5}, maxs = {5, 5, 5};
ADDRLP4 84
ADDRGP4 $885
INDIRB
ASGNB 12
ADDRLP4 96
ADDRGP4 $886
INDIRB
ASGNB 12
line 1995
;1991:	trace_t		trace;
;1992:	float		alpha;
;1993:	vec3_t		start;
;1994:
;1995:	if ( shadowPlane )
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $887
line 1996
;1996:		*shadowPlane = 0;
ADDRFP4 12
INDIRP4
CNSTF4 0
ASGNF4
LABELV $887
line 1998
;1997:
;1998:	if ( cg_shadows.integer == 0 ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $889
line 1999
;1999:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $884
JUMPV
LABELV $889
line 2003
;2000:	}
;2001:
;2002:	// send a trace down from the player to the ground
;2003:	VectorCopy( origin, end );
ADDRLP4 60
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2004
;2004:	VectorCopy( origin, start );
ADDRLP4 72
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2006
;2005:
;2006:	start[2] += 5; 
ADDRLP4 72+8
ADDRLP4 72+8
INDIRF4
CNSTF4 1084227584
ADDF4
ASGNF4
line 2007
;2007:	end[2] -= SHADOW_DISTANCE;
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
CNSTF4 1124073472
SUBF4
ASGNF4
line 2009
;2008:
;2009:	trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_SOLID );
ADDRLP4 0
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 108
CNSTP4 0
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 108
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2012
;2010:
;2011:	// no shadow if too high
;2012:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $894
line 2013
;2013:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $884
JUMPV
LABELV $894
line 2016
;2014:	}
;2015:
;2016:	if ( shadowPlane )
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $897
line 2017
;2017:		*shadowPlane = trace.endpos[2] + 1;
ADDRFP4 12
INDIRP4
ADDRLP4 0+12+8
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
LABELV $897
line 2019
;2018:
;2019:	if ( cg_shadows.integer != 1 ) {	// no mark for stencil or projection shadows
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 1
EQI4 $901
line 2020
;2020:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $884
JUMPV
LABELV $901
line 2024
;2021:	}
;2022:
;2023:	// fade the shadow out with height
;2024:	alpha = 1.0 - trace.fraction;
ADDRLP4 56
CNSTF4 1065353216
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 2028
;2025:
;2026:	// add the mark as a temporary, so it goes directly to the renderer
;2027:	// without taking a spot in the cg_marks array
;2028:	CG_DirectImpactMark( cgs.media.shadowMarkShader, trace.endpos, trace.plane.normal, 
ADDRGP4 cgs+205084+200
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRFP4 8
INDIRF4
ARGF4
CNSTI4 1
ARGI4
CNSTI4 1023
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
line 2031
;2029:		cent->pe.legs.yawAngle, alpha,alpha,alpha,1, qfalse, radius, qtrue, ENTITYNUM_NONE );
;2030:	 
;2031: 	return qtrue;
CNSTI4 1
RETI4
LABELV $884
endproc CG_PlayerShadow 116 48
proc CG_PlayerSplash 108 48
line 2041
;2032:}
;2033:
;2034:/*
;2035:===============
;2036:CG_PlayerSplash
;2037:
;2038:Draw a mark at the water surface
;2039:===============
;2040:*/
;2041:static void CG_PlayerSplash( centity_t *cent ) {
line 2046
;2042:	vec3_t		start, end;
;2043:	trace_t		trace;
;2044:	int			contents;
;2045:	
;2046:	VectorCopy( cent->lerpOrigin, end );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2047
;2047:	end[2] -= 25;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1103626240
SUBF4
ASGNF4
line 2051
;2048:
;2049:	// if the feet aren't in liquid, don't make a mark
;2050:	// this won't handle moving water brushes, but they wouldn't draw right anyway...
;2051:	contents = trap_CM_PointContents( end, 0 );
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 84
INDIRI4
ASGNI4
line 2052
;2052:	if ( !( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) ) {
ADDRLP4 80
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
NEI4 $911
line 2053
;2053:		return;
ADDRGP4 $909
JUMPV
LABELV $911
line 2057
;2054:	}
;2055:	
;2056:	// feet are in liquid that's more or less all we want to know
;2057:	cent->leftWaterTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2060
;2058:
;2059:
;2060:	if ( !cg_shadows.integer ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 0
NEI4 $914
line 2061
;2061:		return;
ADDRGP4 $909
JUMPV
LABELV $914
line 2064
;2062:	}
;2063:
;2064:	if ( cent->wakemarkTime > cg.time )
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $917
line 2065
;2065:		return;
ADDRGP4 $909
JUMPV
LABELV $917
line 2067
;2066:  
;2067:	VectorCopy( cent->lerpOrigin, start );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2068
;2068:	start[2] += 32;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1107296256
ADDF4
ASGNF4
line 2071
;2069:
;2070:	// if the head isn't out of liquid, don't make a mark
;2071:	contents = trap_CM_PointContents( start, 0 );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 88
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 80
ADDRLP4 88
INDIRI4
ASGNI4
line 2072
;2072:	if ( contents & ( CONTENTS_SOLID | CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 80
INDIRI4
CNSTI4 57
BANDI4
CNSTI4 0
EQI4 $921
line 2073
;2073:		return;
ADDRGP4 $909
JUMPV
LABELV $921
line 2077
;2074:	}
;2075:
;2076:	// trace down to find the surface
;2077:	trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) );
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 92
CNSTP4 0
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2079
;2078:
;2079:	if ( trace.fraction == 1.0 ) {
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
NEF4 $923
line 2080
;2080:		return;
ADDRGP4 $909
JUMPV
LABELV $923
line 2083
;2081:	} 
;2082:
;2083:	cent->wakemarkTime = cg.time + cg_wakemarkDistantTime.value;
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
ADDRGP4 cg_wakemarkDistantTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 2086
;2084:// Navy Seals ++
;2085:	// clear out smoking guns
;2086:	if ( cent->gunSmokeTime )
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
CNSTI4 0
EQI4 $928
line 2087
;2087:		cent->gunSmokeTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
CNSTI4 0
ASGNI4
LABELV $928
line 2090
;2088:// Navy Seals --
;2089:
;2090:	CG_DirectImpactMark( cgs.media.wakeMarkShader, trace.endpos,trace.plane.normal, rand()%360,1,1,1,0.4f,qfalse,cg_wakemarkTime.value, qfalse , -1 );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+205084+184
INDIRI4
ARGI4
ADDRLP4 24+12
ARGP4
ADDRLP4 24+24
ARGP4
ADDRLP4 96
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ARGF4
ADDRLP4 100
CNSTF4 1065353216
ASGNF4
ADDRLP4 100
INDIRF4
ARGF4
ADDRLP4 100
INDIRF4
ARGF4
ADDRLP4 100
INDIRF4
ARGF4
CNSTF4 1053609165
ARGF4
ADDRLP4 104
CNSTI4 0
ASGNI4
ADDRLP4 104
INDIRI4
ARGI4
ADDRGP4 cg_wakemarkTime+8
INDIRF4
ARGF4
ADDRLP4 104
INDIRI4
ARGI4
CNSTI4 -1
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
line 2139
;2091://
;2092://	CG_ImpactMark( cgs.media.shadowMarkShader, trace.endpos, trace.plane.normal, 
;2093://		cent->pe.legs.yawAngle, alpha,alpha,alpha,1, qfalse, 24, qtrue );
;2094:
;2095:
;2096:/*
;2097:	// create a mark polygon
;2098:	VectorCopy( trace.endpos, verts[0].xyz );
;2099:	verts[0].xyz[0] -= 32;
;2100:	verts[0].xyz[1] -= 32;
;2101:	verts[0].st[0] = 0;
;2102:	verts[0].st[1] = 0;
;2103:	verts[0].modulate[0] = 255;
;2104:	verts[0].modulate[1] = 255;
;2105:	verts[0].modulate[2] = 255;
;2106:	verts[0].modulate[3] = 255;
;2107:
;2108:	VectorCopy( trace.endpos, verts[1].xyz );
;2109:	verts[1].xyz[0] -= 32;
;2110:	verts[1].xyz[1] += 32;
;2111:	verts[1].st[0] = 0;
;2112:	verts[1].st[1] = 1;
;2113:	verts[1].modulate[0] = 255;
;2114:	verts[1].modulate[1] = 255;
;2115:	verts[1].modulate[2] = 255;
;2116:	verts[1].modulate[3] = 255;
;2117:
;2118:	VectorCopy( trace.endpos, verts[2].xyz );
;2119:	verts[2].xyz[0] += 32;
;2120:	verts[2].xyz[1] += 32;
;2121:	verts[2].st[0] = 1;
;2122:	verts[2].st[1] = 1;
;2123:	verts[2].modulate[0] = 255;
;2124:	verts[2].modulate[1] = 255;
;2125:	verts[2].modulate[2] = 255;
;2126:	verts[2].modulate[3] = 255;
;2127:
;2128:	VectorCopy( trace.endpos, verts[3].xyz );
;2129:	verts[3].xyz[0] += 32;
;2130:	verts[3].xyz[1] -= 32;
;2131:	verts[3].st[0] = 1;
;2132:	verts[3].st[1] = 0;
;2133:	verts[3].modulate[0] = 255;
;2134:	verts[3].modulate[1] = 255;
;2135:	verts[3].modulate[2] = 255;
;2136:	verts[3].modulate[3] = 255;
;2137:*/
;2138://	trap_R_AddPolyToScene( cgs.media.wakeMarkShader, 4, verts );
;2139:}
LABELV $909
endproc CG_PlayerSplash 108 48
export CG_BloodPool
proc CG_BloodPool 108 44
line 2148
;2140:
;2141:/*
;2142:===============
;2143:CG_PlayerSplash
;2144:
;2145:Draw a mark at the water surface
;2146:===============
;2147:*/
;2148:void CG_BloodPool( vec3_t origin) {
line 2153
;2149:	vec3_t		end;
;2150:	trace_t		trace; 
;2151:
;2152:	// copy endvector for traceline
;2153:	VectorCopy( origin, end );
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2154
;2154:	end[2] -= 128;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1124073472
SUBF4
ASGNF4
line 2157
;2155:	
;2156:	// trace down to find the surface
;2157:	trap_CM_BoxTrace( &trace, origin, end, NULL, NULL, 0, CONTENTS_SOLID );
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 68
CNSTP4 0
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2160
;2158:
;2159:	// no valid groundplane ?
;2160:	if ( trace.fraction == 1.0 )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $937
line 2161
;2161:		return;
ADDRGP4 $935
JUMPV
LABELV $937
line 2163
;2162: 
;2163:	VectorCopy( trace.endpos, end );
ADDRLP4 0
ADDRLP4 12+12
INDIRB
ASGNB 12
line 2166
;2164: 
;2165:	// move it randomly around
;2166:	if (random() < 0.5)
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
GEF4 $941
line 2167
;2167:		end[0] += random()*10;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1092616192
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $942
JUMPV
LABELV $941
line 2169
;2168:	else
;2169:		end[0] -= random()*10;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1092616192
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ASGNF4
LABELV $942
line 2171
;2170:
;2171:	if (random() < 0.5)
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
GEF4 $943
line 2172
;2172:		end[1] += random()*10;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1092616192
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $944
JUMPV
LABELV $943
line 2174
;2173:	else
;2174:		end[1] -= random()*10; 
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1092616192
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ASGNF4
LABELV $944
line 2176
;2175:	
;2176:	CG_ImpactMark( cgs.media.ns_bloodPool, end, trace.plane.normal, 0,1,1,1,0.8f,qfalse,2 + random()*4,qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+205084+424
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRLP4 12+24
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 100
CNSTF4 1065353216
ASGNF4
ADDRLP4 100
INDIRF4
ARGF4
ADDRLP4 100
INDIRF4
ARGF4
ADDRLP4 100
INDIRF4
ARGF4
CNSTF4 1061997773
ARGF4
ADDRLP4 104
CNSTI4 0
ASGNI4
ADDRLP4 104
INDIRI4
ARGI4
CNSTF4 1082130432
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 104
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2177
;2177:}
LABELV $935
endproc CG_BloodPool 108 44
export CG_AddRefEntityWithPowerups
proc CG_AddRefEntityWithPowerups 4 4
line 2189
;2178:
;2179:
;2180:/*
;2181:===============
;2182:CG_AddRefEntityWithPowerups
;2183:
;2184:Adds a piece with modifications or duplications for powerups
;2185:Also called by CG_Missile for quad rockets, but nobody can tell...
;2186:===============
;2187:*/
;2188:
;2189:void CG_AddRefEntityWithPowerups( refEntity_t *ent, entityState_t *state, int team ) {
line 2191
;2190:
;2191:	if (!state) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $951
line 2192
;2192:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2193
;2193:		return;
ADDRGP4 $950
JUMPV
LABELV $951
line 2196
;2194:	}
;2195: 
;2196:	if (cg.snap->ps.stats[STAT_ACTIVE_ITEMS] & ( 1 << UI_NVG ) )
ADDRGP4 cg+36
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $953
line 2197
;2197:	{
line 2198
;2198:		ent->customShader = cgs.media.thermalGogglesNoise; // TG Shader
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+205084+712
INDIRI4
ASGNI4
line 2199
;2199:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2200
;2200:		return; // don't add any other shader
ADDRGP4 $950
JUMPV
LABELV $953
line 2203
;2201:	} 
;2202: 
;2203:	if ( state->eFlags & EF_REDGLOW && cgs.clientinfo[ state->clientNum ].team == cg.snap->ps.persistant[PERS_TEAM] )
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $958
CNSTI4 2484
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664+68
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
NEI4 $958
line 2204
;2204:	{
line 2205
;2205:		ent->customShader = cgs.media.respawnShader;		 
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+205084+968
INDIRI4
ASGNI4
line 2206
;2206:		trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2207
;2207:	}
LABELV $958
line 2209
;2208:	
;2209:	ent->customShader = 0;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTI4 0
ASGNI4
line 2210
;2210:	trap_R_AddRefEntityToScene( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2222
;2211:	/*
;2212:	if ( state->powerups & ( 1 << PW_REGEN ) ) {
;2213:		if ( ( ( cg.time / 100 ) % 10 ) == 1 ) {
;2214:			ent->customShader = cgs.media.regenShader;
;2215:			trap_R_AddRefEntityToScene( ent );
;2216:		}
;2217:	}
;2218:	if ( state->powerups & ( 1 << PW_BATTLESUIT ) ) {
;2219:		ent->customShader = cgs.media.battleSuitShader;
;2220:		trap_R_AddRefEntityToScene( ent );
;2221:	}*/ 
;2222:}
LABELV $950
endproc CG_AddRefEntityWithPowerups 4 4
export CG_LightVerts
proc CG_LightVerts 88 16
line 2230
;2223:
;2224:/*
;2225:=================
;2226:CG_LightVerts
;2227:=================
;2228:*/
;2229:int CG_LightVerts( vec3_t normal, int numVerts, polyVert_t *verts )
;2230:{
line 2237
;2231:	int				i, j;
;2232:	float			incoming;
;2233:	vec3_t			ambientLight;
;2234:	vec3_t			lightDir;
;2235:	vec3_t			directedLight;
;2236:
;2237:	trap_R_LightForPoint( verts[0].xyz, ambientLight, directedLight, lightDir );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 trap_R_LightForPoint
CALLI4
pop
line 2239
;2238:
;2239:	for (i = 0; i < numVerts; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $969
JUMPV
LABELV $966
line 2240
;2240:		incoming = DotProduct (normal, lightDir);
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2241
;2241:		if ( incoming <= 0 ) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $972
line 2242
;2242:			verts[i].modulate[0] = ambientLight[0];
ADDRLP4 56
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 60
CNSTF4 1325400064
ASGNF4
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
LTF4 $975
ADDRLP4 52
ADDRLP4 56
INDIRF4
ADDRLP4 60
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $976
JUMPV
LABELV $975
ADDRLP4 52
ADDRLP4 56
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $976
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 52
INDIRU4
CVUU1 4
ASGNU1
line 2243
;2243:			verts[i].modulate[1] = ambientLight[1];
ADDRLP4 68
ADDRLP4 12+4
INDIRF4
ASGNF4
ADDRLP4 72
CNSTF4 1325400064
ASGNF4
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
LTF4 $979
ADDRLP4 64
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $980
JUMPV
LABELV $979
ADDRLP4 64
ADDRLP4 68
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $980
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 64
INDIRU4
CVUU1 4
ASGNU1
line 2244
;2244:			verts[i].modulate[2] = ambientLight[2];
ADDRLP4 80
ADDRLP4 12+8
INDIRF4
ASGNF4
ADDRLP4 84
CNSTF4 1325400064
ASGNF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
LTF4 $983
ADDRLP4 76
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $984
JUMPV
LABELV $983
ADDRLP4 76
ADDRLP4 80
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $984
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 76
INDIRU4
CVUU1 4
ASGNU1
line 2245
;2245:			verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2246
;2246:			continue;
ADDRGP4 $967
JUMPV
LABELV $972
line 2248
;2247:		} 
;2248:		j = ( ambientLight[0] + incoming * directedLight[0] );
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2249
;2249:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $985
line 2250
;2250:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2251
;2251:		}
LABELV $985
line 2252
;2252:		verts[i].modulate[0] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2254
;2253:
;2254:		j = ( ambientLight[1] + incoming * directedLight[1] );
ADDRLP4 0
ADDRLP4 12+4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2255
;2255:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $989
line 2256
;2256:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2257
;2257:		}
LABELV $989
line 2258
;2258:		verts[i].modulate[1] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 21
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2260
;2259:
;2260:		j = ( ambientLight[2] + incoming * directedLight[2] );
ADDRLP4 0
ADDRLP4 12+8
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2261
;2261:		if ( j > 255 ) {
ADDRLP4 0
INDIRI4
CNSTI4 255
LEI4 $993
line 2262
;2262:			j = 255;
ADDRLP4 0
CNSTI4 255
ASGNI4
line 2263
;2263:		}
LABELV $993
line 2264
;2264:		verts[i].modulate[2] = j;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 22
ADDP4
ADDRLP4 0
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 2266
;2265:
;2266:		verts[i].modulate[3] = 255;
CNSTI4 24
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 8
INDIRP4
ADDP4
CNSTI4 23
ADDP4
CNSTU1 255
ASGNU1
line 2267
;2267:	}
LABELV $967
line 2239
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $969
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $966
line 2268
;2268:	return qtrue;
CNSTI4 1
RETI4
LABELV $965
endproc CG_LightVerts 88 16
export CG_GetEquipmentModel
proc CG_GetEquipmentModel 4 0
line 2299
;2269:}
;2270:
;2271:
;2272:/*
;2273:// Camoflage Defines
;2274:#define CAMO_ARCTIC 0
;2275:#define CAMO_DESERT 1
;2276:#define CAMO_JUNGLE	2
;2277:#define CAMO_URBAN	3               
;2278:
;2279:// Player Equipment
;2280:#define EQ_STORMGOGGLES 1
;2281:#define EQ_JOINT		2
;2282:#define EQ_PIECEOFHAY	3 
;2283:#define EQ_NVGOGGLES	4
;2284:#define EQ_SEALHAT		5
;2285:#define EQ_TURBAN		6
;2286:#define EQ_HELMET		7
;2287:
;2288:	CAMO_NONE, // 0
;2289:
;2290:	CAMO_DESERT, // 1
;2291:	CAMO_JUNGLE, // 2
;2292:	CAMO_ARCTIC,// 3
;2293:	CAMO_URBAN,// 4
;2294:
;2295:  -1
;2296:*/
;2297:
;2298:qhandle_t CG_GetEquipmentModel( int equip , int team)
;2299:{
line 2300
;2300:	if (equip == EQ_HELMET )
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $996
line 2301
;2301:	{
line 2302
;2302:		switch (team)
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $1000
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $1005
ADDRGP4 $998
JUMPV
line 2303
;2303:		{
LABELV $1000
line 2305
;2304:			case TEAM_RED:
;2305:				return cgs.media.playerSealHelmet[cgs.camoType-1];
ADDRGP4 cgs+214196
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+728-4
ADDP4
INDIRI4
RETI4
ADDRGP4 $995
JUMPV
line 2306
;2306:				break;
LABELV $1005
line 2308
;2307:			case TEAM_BLUE:
;2308:				return cgs.media.playerTangoHelmet[cgs.camoType-1];
ADDRGP4 cgs+214196
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+744-4
ADDP4
INDIRI4
RETI4
ADDRGP4 $995
JUMPV
line 2309
;2309:				break;
LABELV $998
line 2311
;2310:			default:
;2311:				return cgs.media.playerSealHelmet[cgs.camoType-1];
ADDRGP4 cgs+214196
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+728-4
ADDP4
INDIRI4
RETI4
ADDRGP4 $995
JUMPV
line 2312
;2312:				break;
LABELV $996
line 2316
;2313:		}
;2314:	}
;2315:
;2316:	return 0;
CNSTI4 0
RETI4
LABELV $995
endproc CG_GetEquipmentModel 4 0
proc CG_InValidFootPrint 0 0
line 2320
;2317:}
;2318:
;2319:static qboolean CG_InValidFootPrint( clientInfo_t *ci, int frame )
;2320:{	
line 2321
;2321:	if ( frame == ci->footprintFrameTimer.step_backl )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2476
ADDP4
INDIRI4
NEI4 $1015
line 2322
;2322:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1015
line 2323
;2323:	if ( frame == ci->footprintFrameTimer.step_backr )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2480
ADDP4
INDIRI4
NEI4 $1017
line 2324
;2324:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1017
line 2325
;2325:	if ( frame == ci->footprintFrameTimer.step_limpl )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2468
ADDP4
INDIRI4
NEI4 $1019
line 2326
;2326:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1019
line 2327
;2327:	if ( frame == ci->footprintFrameTimer.step_limpr )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2472
ADDP4
INDIRI4
NEI4 $1021
line 2328
;2328:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1021
line 2329
;2329:	if ( frame == ci->footprintFrameTimer.step_runl )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2464
ADDP4
INDIRI4
NEI4 $1023
line 2330
;2330:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1023
line 2331
;2331:	if ( frame == ci->footprintFrameTimer.step_runr )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2460
ADDP4
INDIRI4
NEI4 $1025
line 2332
;2332:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1025
line 2333
;2333:	if ( frame == ci->footprintFrameTimer.step_walkl )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2452
ADDP4
INDIRI4
NEI4 $1027
line 2334
;2334:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1027
line 2335
;2335:	if ( frame == ci->footprintFrameTimer.step_walkr )
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2456
ADDP4
INDIRI4
NEI4 $1029
line 2336
;2336:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1014
JUMPV
LABELV $1029
line 2338
;2337:	
;2338:	return qfalse;		
CNSTI4 0
RETI4
LABELV $1014
endproc CG_InValidFootPrint 0 0
export CG_Player
proc CG_Player 1156 44
line 2347
;2339:}
;2340:/*
;2341:===============
;2342:CG_Player
;2343:===============
;2344:*/
;2345:void CG_SpawnParticle( vec3_t org, vec3_t dir, float speed, float bouncefactor, float radius, float r, float g ,float b, float a, qboolean size );
;2346:
;2347:void CG_Player( centity_t *cent ) {
line 2366
;2348:	clientInfo_t	*ci;
;2349:	refEntity_t		legs;
;2350:	refEntity_t		torso;
;2351:	refEntity_t		head;
;2352:	refEntity_t		larm,rarm; // just one reference
;2353: 
;2354:	int				clientNum;
;2355:	int				renderfx;
;2356:	qboolean		shadow;
;2357:	float			shadowPlane;
;2358: 
;2359:	refEntity_t		primary;  
;2360:
;2361:	vec3_t			lO;
;2362:
;2363:	// the client number is stored in clientNum.  It can't be derived
;2364:	// from the entity number, because a single client may have
;2365:	// multiple corpses on the level using the same clientinfo
;2366:	clientNum = cent->currentState.clientNum;
ADDRLP4 852
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ASGNI4
line 2367
;2367:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 852
INDIRI4
CNSTI4 0
LTI4 $1034
ADDRLP4 852
INDIRI4
CNSTI4 64
LTI4 $1032
LABELV $1034
line 2368
;2368:		CG_Error( "Bad clientNum on player entity");
ADDRGP4 $1035
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2369
;2369:	}
LABELV $1032
line 2370
;2370:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 0
CNSTI4 2484
ADDRLP4 852
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 2374
;2371:
;2372:	// it isn't possible to see corpses from disconnected players that may
;2373:	// not have valid clientinfo
;2374:	if ( !ci->infoValid ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $1037
line 2375
;2375:		return;
ADDRGP4 $1031
JUMPV
LABELV $1037
line 2379
;2376:	} 
;2377:
;2378:	// get the player model information
;2379:	renderfx = 0;
ADDRLP4 844
CNSTI4 0
ASGNI4
line 2381
;2380:
;2381: 	if ( cent->currentState.number == cg.snap->ps.clientNum)
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1039
line 2382
;2382:	{
line 2383
;2383:		if (!cg.renderingThirdPerson ){// || BG_IsZooming( cg.snap->ps.stats[STAT_WEAPONMODE] ) ) {
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1042
line 2384
;2384:			renderfx = RF_THIRD_PERSON;			// only draw in mirrors
ADDRLP4 844
CNSTI4 2
ASGNI4
line 2385
;2385:		} else {
ADDRGP4 $1043
JUMPV
LABELV $1042
line 2386
;2386:			if (cg_cameraMode.integer) {
ADDRGP4 cg_cameraMode+12
INDIRI4
CNSTI4 0
EQI4 $1045
line 2387
;2387:				return;
ADDRGP4 $1031
JUMPV
LABELV $1045
line 2389
;2388:			}
;2389:		}
LABELV $1043
line 2390
;2390:	} 
LABELV $1039
line 2399
;2391:
;2392:	/*
;2393:	if ( cent->currentState.number == cg.snap->ps.weapon && cg.snap->ps.pm_flags & PMF_FOLLOW )
;2394:	{
;2395://		CG_Printf("following %i\n", cent->currentState.number );
;2396:		VectorCopy( cent->lerpOrigin, cg.cameraOrigin );
;2397:	}
;2398:*/
;2399:	memset( &legs, 0, sizeof(legs) );
ADDRLP4 284
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2400
;2400:	memset( &torso, 0, sizeof(torso) );
ADDRLP4 144
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2401
;2401:	memset( &head, 0, sizeof(head) ); 
ADDRLP4 704
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2402
;2402:	memset( &primary, 0, sizeof(primary) ); 
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2404
;2403:
;2404:	memset( &larm, 0, sizeof(larm) ); 
ADDRLP4 424
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2405
;2405:	memset( &rarm, 0, sizeof(rarm) ); 
ADDRLP4 564
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2408
;2406:	 
;2407:// Navy Seals ++
;2408:	if ( pmodel_o.integer != 0 ) {
ADDRGP4 pmodel_o+12
INDIRI4
CNSTI4 0
EQI4 $1048
line 2409
;2409:		VectorCopy( cent->lerpOrigin, lO );
ADDRLP4 860
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2411
;2410:
;2411:		cent->lerpOrigin[2] += pmodel_o.value;
ADDRLP4 876
ADDRFP4 0
INDIRP4
CNSTI4 708
ADDP4
ASGNP4
ADDRLP4 876
INDIRP4
ADDRLP4 876
INDIRP4
INDIRF4
ADDRGP4 pmodel_o+8
INDIRF4
ADDF4
ASGNF4
line 2413
;2412:	//	CG_Printf("Alinged %s\n", pmodel_o.string );
;2413:	}
LABELV $1048
line 2418
;2414:
;2415:	
;2416:// Navy Seals --
;2417:	// get the rotation information
;2418:	CG_PlayerAngles( cent, legs.axis, torso.axis, larm.axis,  head.axis );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 284+28
ARGP4
ADDRLP4 144+28
ARGP4
ADDRLP4 424+28
ARGP4
ADDRLP4 704+28
ARGP4
ADDRGP4 CG_PlayerAngles
CALLV
pop
line 2421
;2419:	
;2420:	// copy the same axis to the rightarm
;2421:	AxisCopy( larm.axis, rarm.axis );
ADDRLP4 424+28
ARGP4
ADDRLP4 564+28
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 2424
;2422:
;2423:	// get the animation state (after rotation, to allow feet shuffle)
;2424:	CG_PlayerAnimation( cent, &legs.oldframe, &legs.frame, &legs.backlerp,
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 284+96
ARGP4
ADDRLP4 284+80
ARGP4
ADDRLP4 284+100
ARGP4
ADDRLP4 144+96
ARGP4
ADDRLP4 144+80
ARGP4
ADDRLP4 144+100
ARGP4
ADDRGP4 CG_PlayerAnimation
CALLV
pop
line 2433
;2425:		 &torso.oldframe, &torso.frame, &torso.backlerp );
;2426:
;2427:#ifndef NEW_ANIMS
;2428:	// add powerups floating behind the player
;2429:	CG_PlayerPowerups( cent );
;2430:#endif
;2431:
;2432:	// add the talk baloon or disconnect icon
;2433:	CG_PlayerSprites( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSprites
CALLV
pop
line 2436
;2434: 
;2435:	// add a water splash if partially in and out of water
;2436:	CG_PlayerSplash( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PlayerSplash
CALLV
pop
line 2442
;2437:
;2438: 
;2439:	//
;2440:	// add the legs
;2441:	//
;2442:	legs.hModel = ci->legsModel;
ADDRLP4 284+8
ADDRLP4 0
INDIRP4
CNSTI4 560
ADDP4
INDIRI4
ASGNI4
line 2443
;2443:	legs.customSkin = ci->legsSkin; 
ADDRLP4 284+108
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRI4
ASGNI4
line 2445
;2444:
;2445:	VectorCopy( cent->lerpOrigin, legs.origin );
ADDRLP4 284+68
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2446
;2446:	VectorCopy( cent->lerpOrigin, legs.lightingOrigin );
ADDRLP4 284+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2448
;2447:
;2448:	VectorCopy (legs.origin, legs.oldorigin);	// don't positionally lerp at all
ADDRLP4 284+84
ADDRLP4 284+68
INDIRB
ASGNB 12
line 2453
;2449: 
;2450:	//
;2451:	// add new 2foot shadow
;2452:	//
;2453:	{
line 2457
;2454:		vec3_t lfoot,rfoot;
;2455:		
;2456:		// add the shadow
;2457:		shadow = CG_PlayerShadow( cent, cent->lerpOrigin, 10, &shadowPlane );
ADDRLP4 900
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 900
INDIRP4
ARGP4
ADDRLP4 900
INDIRP4
CNSTI4 700
ADDP4
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 848
ARGP4
ADDRLP4 904
ADDRGP4 CG_PlayerShadow
CALLI4
ASGNI4
ADDRLP4 856
ADDRLP4 904
INDIRI4
ASGNI4
line 2459
;2458:
;2459:		CG_GetOriginFromTag( &legs, legs.hModel, "tag_footl", lfoot );
ADDRLP4 284
ARGP4
ADDRLP4 284+8
INDIRI4
ARGI4
ADDRGP4 $1071
ARGP4
ADDRLP4 876
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
line 2460
;2460:		CG_GetOriginFromTag( &legs, legs.hModel, "tag_footr", rfoot );
ADDRLP4 284
ARGP4
ADDRLP4 284+8
INDIRI4
ARGI4
ADDRGP4 $1073
ARGP4
ADDRLP4 888
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
line 2462
;2461:
;2462:		CG_PlayerShadow( cent, lfoot, 5, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 876
ARGP4
CNSTF4 1084227584
ARGF4
CNSTP4 0
ARGP4
ADDRGP4 CG_PlayerShadow
CALLI4
pop
line 2463
;2463:		CG_PlayerShadow( cent, rfoot, 5, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 888
ARGP4
CNSTF4 1084227584
ARGF4
CNSTP4 0
ARGP4
ADDRGP4 CG_PlayerShadow
CALLI4
pop
line 2465
;2464:
;2465:		if ( cg_shadows.integer == 3 && shadow ) {
ADDRGP4 cg_shadows+12
INDIRI4
CNSTI4 3
NEI4 $1074
ADDRLP4 856
INDIRI4
CNSTI4 0
EQI4 $1074
line 2466
;2466:			renderfx |= RF_SHADOW_PLANE;
ADDRLP4 844
ADDRLP4 844
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 2467
;2467:		}
LABELV $1074
line 2470
;2468:
;2469:		// use the same origin for all
;2470:		renderfx |= RF_LIGHTING_ORIGIN;		
ADDRLP4 844
ADDRLP4 844
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 2472
;2471:		
;2472:		legs.shadowPlane = shadowPlane;
ADDRLP4 284+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2473
;2473:		legs.renderfx = renderfx;
ADDRLP4 284+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2476
;2474:
;2475:		// footprints
;2476:		{
line 2477
;2477:			int t = cg.time - cent->leftWaterTime;
ADDRLP4 908
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2478
;2478:			float alpha = 0.0f;
ADDRLP4 912
CNSTF4 0
ASGNF4
line 2481
;2479:
;2480:			// if we're under the time
;2481:			if ( CG_InValidFootPrint( ci, cent->pe.legs.frame )  && cent->pe.legs.oldFrame != cent->pe.legs.frame )
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ARGI4
ADDRLP4 916
ADDRGP4 CG_InValidFootPrint
CALLI4
ASGNI4
ADDRLP4 916
INDIRI4
CNSTI4 0
EQI4 $1080
ADDRLP4 920
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 920
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
ADDRLP4 920
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
EQI4 $1080
line 2482
;2482:			{
line 2483
;2483:					int	  footprint = 0;
ADDRLP4 980
CNSTI4 0
ASGNI4
line 2486
;2484:					trace_t trace; 
;2485:					vec3_t start, end;
;2486:					int frame = cent->pe.legs.frame;
ADDRLP4 984
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ASGNI4
line 2490
;2487:
;2488:
;2489:					//CG_Printf("frame: %i\n",frame);
;2490:					if ( frame == ci->footprintFrameTimer.step_backl ||
ADDRLP4 984
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2476
ADDP4
INDIRI4
EQI4 $1086
ADDRLP4 984
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2468
ADDP4
INDIRI4
EQI4 $1086
ADDRLP4 984
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2464
ADDP4
INDIRI4
EQI4 $1086
ADDRLP4 984
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2452
ADDP4
INDIRI4
NEI4 $1082
LABELV $1086
line 2494
;2491:						frame == ci->footprintFrameTimer.step_limpl ||
;2492:						frame == ci->footprintFrameTimer.step_runl ||
;2493:						frame == ci->footprintFrameTimer.step_walkl )
;2494:					{
line 2496
;2495:						// this means right foot just stepped with right foot.
;2496:						footprint = 1;
ADDRLP4 980
CNSTI4 1
ASGNI4
line 2497
;2497:					}
ADDRGP4 $1083
JUMPV
LABELV $1082
line 2499
;2498:					else
;2499:						footprint = 2;
ADDRLP4 980
CNSTI4 2
ASGNI4
LABELV $1083
line 2502
;2500: 
;2501:
;2502:					if ( footprint == 1 )
ADDRLP4 980
INDIRI4
CNSTI4 1
NEI4 $1087
line 2503
;2503:						VectorCopy( lfoot, end );
ADDRLP4 988
ADDRLP4 876
INDIRB
ASGNB 12
LABELV $1087
line 2505
;2504:					
;2505:					if ( footprint == 2 )
ADDRLP4 980
INDIRI4
CNSTI4 2
NEI4 $1089
line 2506
;2506:						VectorCopy( rfoot, end );
ADDRLP4 988
ADDRLP4 888
INDIRB
ASGNB 12
LABELV $1089
line 2508
;2507:
;2508:					VectorCopy( end,start );
ADDRLP4 1000
ADDRLP4 988
INDIRB
ASGNB 12
line 2510
;2509:
;2510:					start[2] += 15;					
ADDRLP4 1000+8
ADDRLP4 1000+8
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 2511
;2511:					end[2] -= 50;
ADDRLP4 988+8
ADDRLP4 988+8
INDIRF4
CNSTF4 1112014848
SUBF4
ASGNF4
line 2515
;2512: 
;2513:					// measure distance from groundplane to both feet so we can decided
;2514:					// which feet's the closer one
;2515:					CG_Trace( &trace, start, NULL,NULL, end, cent->currentState.clientNum, CONTENTS_SOLID );
ADDRLP4 924
ARGP4
ADDRLP4 1000
ARGP4
ADDRLP4 1020
CNSTP4 0
ASGNP4
ADDRLP4 1020
INDIRP4
ARGP4
ADDRLP4 1020
INDIRP4
ARGP4
ADDRLP4 988
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2517
;2516:					 
;2517:				 	if ( footprint > 0 && (trace.surfaceFlags & SURF_SNOWSTEPS || trace.surfaceFlags & SURF_DIRTSTEPS || trace.surfaceFlags & SURF_SANDSTEPS )  )
ADDRLP4 1024
CNSTI4 0
ASGNI4
ADDRLP4 980
INDIRI4
ADDRLP4 1024
INDIRI4
LEI4 $1093
ADDRLP4 924+44
INDIRI4
CNSTI4 4194304
BANDI4
ADDRLP4 1024
INDIRI4
NEI4 $1099
ADDRLP4 924+44
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 1024
INDIRI4
NEI4 $1099
ADDRLP4 924+44
INDIRI4
CNSTI4 8388608
BANDI4
ADDRLP4 1024
INDIRI4
EQI4 $1093
LABELV $1099
line 2518
;2518:					{ 
line 2520
;2519:						int i;
;2520:						int max = 4;
ADDRLP4 1032
CNSTI4 4
ASGNI4
line 2524
;2521:						
;2522:
;2523:						// spawn a bunch of particles
;2524:						for ( i = 0; i < max; i++ ) {
ADDRLP4 1028
CNSTI4 0
ASGNI4
ADDRGP4 $1103
JUMPV
LABELV $1100
line 2527
;2525:							vec3_t	movedir;
;2526:							vec4_t	randomcolor;
;2527:							float	spread = 2;
ADDRLP4 1064
CNSTF4 1073741824
ASGNF4
line 2529
;2528:							
;2529:							if ( trace.surfaceFlags & SURF_SNOWSTEPS )
ADDRLP4 924+44
INDIRI4
CNSTI4 4194304
BANDI4
CNSTI4 0
EQI4 $1104
line 2530
;2530:								randomcolor[0] = randomcolor[1] = randomcolor[2] = 0.5 + random()/3;
ADDRLP4 1068
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1072
ADDRLP4 1068
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
ADDRLP4 1036+8
ADDRLP4 1072
INDIRF4
ASGNF4
ADDRLP4 1036+4
ADDRLP4 1072
INDIRF4
ASGNF4
ADDRLP4 1036
ADDRLP4 1072
INDIRF4
ASGNF4
ADDRGP4 $1105
JUMPV
LABELV $1104
line 2531
;2531:							else if ( trace.surfaceFlags & SURF_DIRTSTEPS )
ADDRLP4 924+44
INDIRI4
CNSTI4 2097152
BANDI4
CNSTI4 0
EQI4 $1109
line 2532
;2532:							{
line 2533
;2533:								randomcolor[0] = 0.2 + random()/3.3; //we'll create our brown
ADDRLP4 1076
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036
ADDRLP4 1076
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1079194419
DIVF4
CNSTF4 1045220557
ADDF4
ASGNF4
line 2534
;2534:								randomcolor[1] = 0.2 + random()/10;
ADDRLP4 1080
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036+4
ADDRLP4 1080
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1045220557
ADDF4
ASGNF4
line 2535
;2535:								randomcolor[2] = 0.1 + random()/5;
ADDRLP4 1084
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036+8
ADDRLP4 1084
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1084227584
DIVF4
CNSTF4 1036831949
ADDF4
ASGNF4
line 2536
;2536:							}
ADDRGP4 $1110
JUMPV
LABELV $1109
line 2538
;2537:							else // sand
;2538:							{
line 2540
;2539:								// sand color
;2540:								randomcolor[0] = 0.6 + random()/6;
ADDRLP4 1076
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036
ADDRLP4 1076
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1086324736
DIVF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 2541
;2541:								randomcolor[1] = 0.5 + random()/6;
ADDRLP4 1080
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036+4
ADDRLP4 1080
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1086324736
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 2542
;2542:								randomcolor[2] = random()/10;
ADDRLP4 1084
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1036+8
ADDRLP4 1084
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
ASGNF4
line 2543
;2543:								spread = 1.5;
ADDRLP4 1064
CNSTF4 1069547520
ASGNF4
line 2544
;2544:							}
LABELV $1110
LABELV $1105
line 2546
;2545:
;2546:							VectorCopy( trace.plane.normal, movedir );  
ADDRLP4 1052
ADDRLP4 924+24
INDIRB
ASGNB 12
line 2548
;2547:
;2548:							if ( random() < 0.33 )
ADDRLP4 1076
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1076
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $1117
line 2549
;2549:								movedir[0] += random()/spread;
ADDRLP4 1080
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052
ADDRLP4 1052
INDIRF4
ADDRLP4 1080
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 1064
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $1118
JUMPV
LABELV $1117
line 2550
;2550:							else if ( random() < 0.66 )
ADDRLP4 1084
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1084
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $1119
line 2551
;2551:								movedir[0] -= random()/spread;
ADDRLP4 1088
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052
ADDRLP4 1052
INDIRF4
ADDRLP4 1088
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 1064
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $1119
LABELV $1118
line 2553
;2552:
;2553:							if ( random() < 0.33 )
ADDRLP4 1092
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1092
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $1121
line 2554
;2554:								movedir[1] += random()/spread;
ADDRLP4 1096
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052+4
ADDRLP4 1052+4
INDIRF4
ADDRLP4 1096
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 1064
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $1122
JUMPV
LABELV $1121
line 2555
;2555:							else if ( random() < 0.66 )
ADDRLP4 1100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $1124
line 2556
;2556:								movedir[1] -= random()/spread;
ADDRLP4 1104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052+4
ADDRLP4 1052+4
INDIRF4
ADDRLP4 1104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 1064
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $1124
LABELV $1122
line 2558
;2557:						
;2558:							if ( trace.plane.normal[2] > 0 )
ADDRLP4 924+24+8
INDIRF4
CNSTF4 0
LEF4 $1127
line 2559
;2559:								movedir[2] += random();		
ADDRLP4 1108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052+8
ADDRLP4 1052+8
INDIRF4
ADDRLP4 1108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $1128
JUMPV
LABELV $1127
line 2560
;2560:							else if ( trace.plane.normal[2] < 0 )
ADDRLP4 924+24+8
INDIRF4
CNSTF4 0
GEF4 $1132
line 2561
;2561:								movedir[2] -= random();	
ADDRLP4 1112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052+8
ADDRLP4 1052+8
INDIRF4
ADDRLP4 1112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
ADDRGP4 $1133
JUMPV
LABELV $1132
line 2563
;2562:							else
;2563:								movedir[2] += random();	
ADDRLP4 1116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1052+8
ADDRLP4 1052+8
INDIRF4
ADDRLP4 1116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
LABELV $1133
LABELV $1128
line 2565
;2564: 		 
;2565:							CG_SpawnParticle( trace.endpos, movedir, (trace.surfaceFlags & SURF_SANDSTEPS)?(30+random()*25):(50 + random()*20), random()/2.5,(trace.surfaceFlags & SURF_SANDSTEPS)?(random()/2+random()/3 ):( 0.1 + random() + random()/2), randomcolor[0],randomcolor[1],randomcolor[2], 1.0f, qfalse );
ADDRLP4 924+44
INDIRI4
CNSTI4 8388608
BANDI4
CNSTI4 0
EQI4 $1145
ADDRLP4 1128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1120
CNSTF4 1103626240
ADDRLP4 1128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
ADDRGP4 $1146
JUMPV
LABELV $1145
ADDRLP4 1132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1120
CNSTF4 1101004800
ADDRLP4 1132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
LABELV $1146
ADDRLP4 1136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 924+44
INDIRI4
CNSTI4 8388608
BANDI4
CNSTI4 0
EQI4 $1147
ADDRLP4 1140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1124
ADDRLP4 1140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDRLP4 1144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
ADDF4
ASGNF4
ADDRGP4 $1148
JUMPV
LABELV $1147
ADDRLP4 1148
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1124
ADDRLP4 1148
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1036831949
ADDF4
ADDRLP4 1152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
LABELV $1148
ADDRLP4 924+12
ARGP4
ADDRLP4 1052
ARGP4
ADDRLP4 1120
INDIRF4
ARGF4
ADDRLP4 1136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
ADDRLP4 1124
INDIRF4
ARGF4
ADDRLP4 1036
INDIRF4
ARGF4
ADDRLP4 1036+4
INDIRF4
ARGF4
ADDRLP4 1036+8
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLV
pop
line 2566
;2566:						} 
LABELV $1101
line 2524
ADDRLP4 1028
ADDRLP4 1028
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1103
ADDRLP4 1028
INDIRI4
ADDRLP4 1032
INDIRI4
LTI4 $1100
line 2567
;2567: 					}
LABELV $1093
line 2569
;2568:					
;2569:			}
LABELV $1080
line 2573
;2570:
;2571:#define MARK_FOOTPRINT_TIME	60000 // you are printing footsteps at least 3mins
;2572:
;2573:			if ( t < MARK_FOOTPRINT_TIME && t > 100 && cent->leftWaterTime > 0 )
ADDRLP4 908
INDIRI4
CNSTI4 60000
GEI4 $1149
ADDRLP4 908
INDIRI4
CNSTI4 100
LEI4 $1149
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1149
line 2574
;2574:				if ( cent->footstepSpawn && CG_InValidFootPrint( ci, cent->pe.legs.frame ) && cent->pe.legs.oldFrame == cent->pe.legs.frame ) // if we got to spawn a footprint
ADDRLP4 928
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 928
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1151
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 928
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ARGI4
ADDRLP4 932
ADDRGP4 CG_InValidFootPrint
CALLI4
ASGNI4
ADDRLP4 932
INDIRI4
CNSTI4 0
EQI4 $1151
ADDRLP4 936
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 936
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
ADDRLP4 936
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
NEI4 $1151
line 2575
;2575:				{
line 2576
;2576:					int	  footprint = 0;
ADDRLP4 940
CNSTI4 0
ASGNI4
line 2579
;2577:					trace_t trace; 
;2578:					vec3_t start, end;
;2579:					int frame = cent->pe.legs.frame;
ADDRLP4 956
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRI4
ASGNI4
line 2583
;2580:
;2581:
;2582:					//CG_Printf("frame: %i\n",frame);
;2583:					if ( frame == ci->footprintFrameTimer.step_backl ||
ADDRLP4 1028
ADDRLP4 956
INDIRI4
ASGNI4
ADDRLP4 1028
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2476
ADDP4
INDIRI4
EQI4 $1157
ADDRLP4 1028
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2468
ADDP4
INDIRI4
EQI4 $1157
ADDRLP4 1028
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2464
ADDP4
INDIRI4
EQI4 $1157
ADDRLP4 1028
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 2452
ADDP4
INDIRI4
NEI4 $1153
LABELV $1157
line 2587
;2584:						frame == ci->footprintFrameTimer.step_limpl ||
;2585:						frame == ci->footprintFrameTimer.step_runl ||
;2586:						frame == ci->footprintFrameTimer.step_walkl )
;2587:					{
line 2589
;2588:						// this means right foot just stepped with right foot.
;2589:						footprint = 1;
ADDRLP4 940
CNSTI4 1
ASGNI4
line 2590
;2590:					}
ADDRGP4 $1154
JUMPV
LABELV $1153
line 2592
;2591:					else
;2592:						footprint = 2;
ADDRLP4 940
CNSTI4 2
ASGNI4
LABELV $1154
line 2595
;2593: 
;2594:
;2595:					if ( footprint == 1 )
ADDRLP4 940
INDIRI4
CNSTI4 1
NEI4 $1158
line 2596
;2596:						VectorCopy( lfoot, end );
ADDRLP4 944
ADDRLP4 876
INDIRB
ASGNB 12
LABELV $1158
line 2598
;2597:					
;2598:					if ( footprint == 2 )
ADDRLP4 940
INDIRI4
CNSTI4 2
NEI4 $1160
line 2599
;2599:						VectorCopy( rfoot, end );
ADDRLP4 944
ADDRLP4 888
INDIRB
ASGNB 12
LABELV $1160
line 2601
;2600:
;2601:					VectorCopy( end,start );
ADDRLP4 1016
ADDRLP4 944
INDIRB
ASGNB 12
line 2603
;2602:
;2603:					start[2] += 15;					
ADDRLP4 1016+8
ADDRLP4 1016+8
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 2604
;2604:					end[2] -= 50;
ADDRLP4 944+8
ADDRLP4 944+8
INDIRF4
CNSTF4 1112014848
SUBF4
ASGNF4
line 2608
;2605:
;2606:					// measure distance from groundplane to both feet so we can decided
;2607:					// which feet's the closer one
;2608:					CG_Trace( &trace, start, NULL,NULL, end, cent->currentState.clientNum, CONTENTS_SOLID );
ADDRLP4 960
ARGP4
ADDRLP4 1016
ARGP4
ADDRLP4 1036
CNSTP4 0
ASGNP4
ADDRLP4 1036
INDIRP4
ARGP4
ADDRLP4 1036
INDIRP4
ARGP4
ADDRLP4 944
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2610
;2609:					 
;2610:					alpha =  1.0f - (float) ( (float)t / (float)MARK_FOOTPRINT_TIME );
ADDRLP4 912
CNSTF4 1065353216
ADDRLP4 908
INDIRI4
CVIF4 4
CNSTF4 1198153728
DIVF4
SUBF4
ASGNF4
line 2612
;2611:  
;2612:					if ( footprint > 0 )
ADDRLP4 940
INDIRI4
CNSTI4 0
LEI4 $1164
line 2613
;2613:					{	
line 2618
;2614:						vec3_t dir;
;2615:						vec3_t angles;
;2616:						vec3_t forward;
;2617:
;2618:						angles[ROLL] = 0;
ADDRLP4 1052+8
CNSTF4 0
ASGNF4
line 2619
;2619:						angles[YAW] = cent->pe.legs.yawAngle;
ADDRLP4 1052+4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ASGNF4
line 2620
;2620:						angles[PITCH] = cent->pe.legs.pitchAngle;
ADDRLP4 1052
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
INDIRF4
ASGNF4
line 2622
;2621: 
;2622:						AngleVectors( angles, forward, NULL,NULL );
ADDRLP4 1052
ARGP4
ADDRLP4 1040
ARGP4
ADDRLP4 1076
CNSTP4 0
ASGNP4
ADDRLP4 1076
INDIRP4
ARGP4
ADDRLP4 1076
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2624
;2623:
;2624:						VectorCopy( trace.plane.normal, dir );
ADDRLP4 1064
ADDRLP4 960+24
INDIRB
ASGNB 12
line 2626
;2625:
;2626:						VectorMA( trace.endpos, -1, forward, end );
ADDRLP4 1080
CNSTF4 3212836864
ASGNF4
ADDRLP4 944
ADDRLP4 960+12
INDIRF4
ADDRLP4 1080
INDIRF4
ADDRLP4 1040
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 944+4
ADDRLP4 960+12+4
INDIRF4
ADDRLP4 1080
INDIRF4
ADDRLP4 1040+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 944+8
ADDRLP4 960+12+8
INDIRF4
CNSTF4 3212836864
ADDRLP4 1040+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2627
;2627:						CG_ImpactMark( cgs.media.bulletholes[0][0], end, dir, cent->pe.legs.yawAngle + 180, alpha,alpha,alpha,alpha,qfalse,3 ,qfalse );
ADDRGP4 cgs+205084+1100
INDIRI4
ARGI4
ADDRLP4 944
ARGP4
ADDRLP4 1064
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
CNSTF4 1127481344
ADDF4
ARGF4
ADDRLP4 1084
ADDRLP4 912
INDIRF4
ASGNF4
ADDRLP4 1084
INDIRF4
ARGF4
ADDRLP4 1084
INDIRF4
ARGF4
ADDRLP4 1084
INDIRF4
ARGF4
ADDRLP4 1084
INDIRF4
ARGF4
ADDRLP4 1088
CNSTI4 0
ASGNI4
ADDRLP4 1088
INDIRI4
ARGI4
CNSTF4 1077936128
ARGF4
ADDRLP4 1088
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2629
;2628:
;2629:						VectorMA( trace.endpos, 2, forward, end );
ADDRLP4 1092
CNSTF4 1073741824
ASGNF4
ADDRLP4 944
ADDRLP4 960+12
INDIRF4
ADDRLP4 1092
INDIRF4
ADDRLP4 1040
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 944+4
ADDRLP4 960+12+4
INDIRF4
ADDRLP4 1092
INDIRF4
ADDRLP4 1040+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 944+8
ADDRLP4 960+12+8
INDIRF4
CNSTF4 1073741824
ADDRLP4 1040+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2630
;2630:						CG_ImpactMark( cgs.media.bulletholes[0][0], end, dir, cent->pe.legs.yawAngle + 180, alpha,alpha,alpha,alpha,qfalse,3 ,qfalse );
ADDRGP4 cgs+205084+1100
INDIRI4
ARGI4
ADDRLP4 944
ARGP4
ADDRLP4 1064
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
CNSTF4 1127481344
ADDF4
ARGF4
ADDRLP4 1096
ADDRLP4 912
INDIRF4
ASGNF4
ADDRLP4 1096
INDIRF4
ARGF4
ADDRLP4 1096
INDIRF4
ARGF4
ADDRLP4 1096
INDIRF4
ARGF4
ADDRLP4 1096
INDIRF4
ARGF4
ADDRLP4 1100
CNSTI4 0
ASGNI4
ADDRLP4 1100
INDIRI4
ARGI4
CNSTF4 1077936128
ARGF4
ADDRLP4 1100
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2633
;2631:						
;2632:						// disable it
;2633:						cent->footstepSpawn = 0; 
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTI4 0
ASGNI4
line 2636
;2634:
;2635:						//CG_Printf("footprint - t %i alpha %f po %i\n", t,alpha,footprint);
;2636:					}
LABELV $1164
line 2638
;2637:					
;2638:				}			
LABELV $1151
LABELV $1149
line 2639
;2639:		}
line 2640
;2640:	}
line 2641
;2641:	CG_AddRefEntityWithPowerups( &legs, &cent->currentState, ci->team );
ADDRLP4 284
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2644
;2642:
;2643:	// if the model failed, allow the default nullmodel to be displayed
;2644:	if (!legs.hModel) {
ADDRLP4 284+8
INDIRI4
CNSTI4 0
NEI4 $1191
line 2645
;2645:		return;
ADDRGP4 $1031
JUMPV
LABELV $1191
line 2652
;2646:	}
;2647:
;2648:
;2649:	//
;2650:	// add the torso
;2651:	//
;2652:	torso.hModel = ci->torsoModel;
ADDRLP4 144+8
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ASGNI4
line 2654
;2653:
;2654:	if ( cent->currentState.powerups & ( 1 << PW_VEST ) )
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1195
line 2655
;2655:		torso.customSkin = ci->torsoVestSkin;
ADDRLP4 144+108
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $1196
JUMPV
LABELV $1195
line 2657
;2656:	else 
;2657:		torso.customSkin = ci->torsoSkin; 
ADDRLP4 144+108
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
LABELV $1196
line 2659
;2658:
;2659:	if (!torso.hModel) {
ADDRLP4 144+8
INDIRI4
CNSTI4 0
NEI4 $1199
line 2660
;2660:		return;
ADDRGP4 $1031
JUMPV
LABELV $1199
line 2663
;2661:	}
;2662:
;2663:	VectorCopy( cent->lerpOrigin, torso.lightingOrigin );
ADDRLP4 144+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2666
;2664:
;2665:
;2666: 	CG_PositionRotatedEntityOnTag( &torso, &legs, ci->legsModel, "tag_torso");
ADDRLP4 144
ARGP4
ADDRLP4 284
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 560
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1203
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2668
;2667:
;2668:	torso.shadowPlane = shadowPlane;
ADDRLP4 144+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2669
;2669:	torso.renderfx = renderfx;
ADDRLP4 144+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2671
;2670:
;2671:	CG_AddRefEntityWithPowerups( &torso, &cent->currentState, ci->team );
ADDRLP4 144
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2676
;2672:
;2673:	//
;2674:	// add the right arm
;2675:	//
;2676:	rarm.hModel = ci->rightArmModel;	
ADDRLP4 564+8
ADDRLP4 0
INDIRP4
CNSTI4 592
ADDP4
INDIRI4
ASGNI4
line 2677
;2677:	rarm.customSkin = ci->torsoSkin; 
ADDRLP4 564+108
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 2679
;2678:
;2679:	if (!rarm.hModel) {
ADDRLP4 564+8
INDIRI4
CNSTI4 0
NEI4 $1208
line 2680
;2680:		return;
ADDRGP4 $1031
JUMPV
LABELV $1208
line 2683
;2681:	}
;2682:
;2683:	VectorCopy( cent->lerpOrigin, rarm.lightingOrigin );
ADDRLP4 564+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2685
;2684:
;2685:  	CG_PositionRotatedEntityOnTag( &rarm, &torso, ci->torsoModel, "tag_armr");
ADDRLP4 564
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1212
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2687
;2686:
;2687:	rarm.shadowPlane = shadowPlane;
ADDRLP4 564+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2688
;2688:	rarm.renderfx = renderfx;
ADDRLP4 564+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2691
;2689:
;2690:	// copy values from torso
;2691:	rarm.oldframe = torso.oldframe;
ADDRLP4 564+96
ADDRLP4 144+96
INDIRI4
ASGNI4
line 2692
;2692:	rarm.frame = torso.frame;
ADDRLP4 564+80
ADDRLP4 144+80
INDIRI4
ASGNI4
line 2693
;2693:	rarm.backlerp = torso.backlerp;
ADDRLP4 564+100
ADDRLP4 144+100
INDIRF4
ASGNF4
line 2696
;2694:
;2695:	// add it to the current scene
;2696:	CG_AddRefEntityWithPowerups( &rarm, &cent->currentState, ci->team );
ADDRLP4 564
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2701
;2697:
;2698:	//
;2699:	// add the left arm
;2700:	//
;2701:	larm.hModel = ci->leftArmModel;	
ADDRLP4 424+8
ADDRLP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ASGNI4
line 2702
;2702:	larm.customSkin = ci->torsoSkin; 
ADDRLP4 424+108
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ASGNI4
line 2704
;2703:
;2704:	if (!larm.hModel) {
ADDRLP4 424+8
INDIRI4
CNSTI4 0
NEI4 $1223
line 2705
;2705:		return;
ADDRGP4 $1031
JUMPV
LABELV $1223
line 2708
;2706:	}
;2707:
;2708:	VectorCopy( cent->lerpOrigin, larm.lightingOrigin );
ADDRLP4 424+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2710
;2709:
;2710:  	CG_PositionRotatedEntityOnTag( &larm, &torso, ci->torsoModel, "tag_arml");
ADDRLP4 424
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1227
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2712
;2711:
;2712:	larm.shadowPlane = shadowPlane;
ADDRLP4 424+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2713
;2713:	larm.renderfx = renderfx;
ADDRLP4 424+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2716
;2714:
;2715:	// copy values from torso
;2716:	larm.oldframe = torso.oldframe;
ADDRLP4 424+96
ADDRLP4 144+96
INDIRI4
ASGNI4
line 2717
;2717:	larm.frame = torso.frame;
ADDRLP4 424+80
ADDRLP4 144+80
INDIRI4
ASGNI4
line 2718
;2718:	larm.backlerp = torso.backlerp;
ADDRLP4 424+100
ADDRLP4 144+100
INDIRF4
ASGNF4
line 2721
;2719:
;2720:	// add it to the current scene
;2721:	CG_AddRefEntityWithPowerups( &larm, &cent->currentState, ci->team );
ADDRLP4 424
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2727
;2722: 
;2723:	
;2724:	//
;2725:	// add the head
;2726:	//
;2727:	head.hModel = ci->headModel;
ADDRLP4 704+8
ADDRLP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ASGNI4
line 2728
;2728:	head.customSkin = ci->headSkin;
ADDRLP4 704+108
ADDRLP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ASGNI4
line 2733
;2729:
;2730:	//
;2731:	// render a head including a helmet
;2732:	//  
;2733:	if (!head.hModel) {
ADDRLP4 704+8
INDIRI4
CNSTI4 0
NEI4 $1238
line 2734
;2734:		return;
ADDRGP4 $1031
JUMPV
LABELV $1238
line 2737
;2735:	}
;2736:	
;2737:	VectorCopy( cent->lerpOrigin, head.lightingOrigin );
ADDRLP4 704+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2739
;2738: 
;2739:	CG_PositionRotatedEntityOnTag( &head, &torso, ci->torsoModel, "tag_head");
ADDRLP4 704
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1242
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2741
;2740:
;2741:	head.shadowPlane = shadowPlane;
ADDRLP4 704+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2742
;2742:	head.renderfx = renderfx;
ADDRLP4 704+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2744
;2743:
;2744:	CG_AddRefEntityWithPowerups( &head, &cent->currentState, ci->team );
ADDRLP4 704
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 2746
;2745:
;2746:	if ( !(cent->currentState.eFlags & EF_VIP) )
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
NEI4 $1245
line 2747
;2747:	{
line 2748
;2748:		if (cent->currentState.powerups & ( 1 << PW_HELMET ) )
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1247
line 2749
;2749:		{
line 2750
;2750:			head.hModel = CG_GetEquipmentModel(EQ_HELMET, ci->team );
CNSTI4 7
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRLP4 876
ADDRGP4 CG_GetEquipmentModel
CALLI4
ASGNI4
ADDRLP4 704+8
ADDRLP4 876
INDIRI4
ASGNI4
line 2751
;2751:			head.customSkin = 0; 
ADDRLP4 704+108
CNSTI4 0
ASGNI4
line 2752
;2752:			trap_R_AddRefEntityToScene( &head );	
ADDRLP4 704
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2753
;2753:		}  
ADDRGP4 $1248
JUMPV
LABELV $1247
line 2755
;2754:		// only render headequipment if we don't wear a helmet
;2755:		else if ( ci->equipmentHead )
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1251
line 2756
;2756:		{
line 2757
;2757:			head.hModel = ci->equipmentHead;
ADDRLP4 704+8
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
INDIRI4
ASGNI4
line 2758
;2758:			head.customSkin = 0; 
ADDRLP4 704+108
CNSTI4 0
ASGNI4
line 2759
;2759: 			trap_R_AddRefEntityToScene( &head );	
ADDRLP4 704
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2760
;2760:		} 
LABELV $1251
LABELV $1248
line 2762
;2761:
;2762:		if (ci->equipmentEyes)
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1255
line 2763
;2763:		{
line 2764
;2764:			head.hModel = ci->equipmentEyes;
ADDRLP4 704+8
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
ASGNI4
line 2765
;2765:			head.customSkin = 0; 
ADDRLP4 704+108
CNSTI4 0
ASGNI4
line 2766
;2766:			trap_R_AddRefEntityToScene( &head );	
ADDRLP4 704
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2767
;2767:		} 	
LABELV $1255
line 2768
;2768:		if (ci->equipmentMouth)
ADDRLP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1259
line 2769
;2769:		{
line 2770
;2770:			head.hModel = ci->equipmentMouth;
ADDRLP4 704+8
ADDRLP4 0
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ASGNI4
line 2771
;2771:			head.customSkin = 0; 
ADDRLP4 704+108
CNSTI4 0
ASGNI4
line 2772
;2772:			trap_R_AddRefEntityToScene( &head );	
ADDRLP4 704
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2773
;2773:		} 
LABELV $1259
line 2774
;2774:	}
LABELV $1245
line 2776
;2775:
;2776:	{
line 2779
;2777:		int xxx; 
;2778:
;2779:		memset( &primary, 0, sizeof( primary ) );
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2781
;2780:
;2781:		VectorCopy( cent->lerpOrigin, primary.lightingOrigin );
ADDRLP4 4+12
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2782
;2782:		primary.shadowPlane = shadowPlane;
ADDRLP4 4+24
ADDRLP4 848
INDIRF4
ASGNF4
line 2783
;2783:		primary.renderfx = renderfx;
ADDRLP4 4+4
ADDRLP4 844
INDIRI4
ASGNI4
line 2785
;2784:
;2785:		if ( cent->currentState.powerups & ( 1 << PW_BRIEFCASE ) )
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1266
line 2786
;2786:		{
line 2787
;2787:			primary.hModel = cgs.media.briefcaseModel_vweap;
ADDRLP4 4+8
ADDRGP4 cgs+205084+680
INDIRI4
ASGNI4
line 2789
;2788:					
;2789:			CG_PositionEntityOnTag( &primary, &larm, ci->leftArmModel,"tag_weapon2"); 
ADDRLP4 4
ARGP4
ADDRLP4 424
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 588
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1271
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 2790
;2790:			trap_R_AddRefEntityToScene( &primary );											
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2791
;2791:		}
LABELV $1266
line 2793
;2792:
;2793:		for ( xxx = WP_NUM_WEAPONS - 1; xxx > 0; xxx-- )
ADDRLP4 876
CNSTI4 25
ASGNI4
LABELV $1272
line 2794
;2794:		{
line 2795
;2795:			if ( cent->currentState.frame & ( 1 << xxx ) )
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 876
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1276
line 2796
;2796:			{	
line 2801
;2797:				weaponInfo_t	*weapon;
;2798:
;2799:				//CG_RegisterWeapon( xxx );
;2800:
;2801:				if ( BG_IsPrimary( xxx ) && cent->currentState.weapon != xxx)
ADDRLP4 876
INDIRI4
ARGI4
ADDRLP4 884
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 884
INDIRI4
CNSTI4 0
EQI4 $1278
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ADDRLP4 876
INDIRI4
EQI4 $1278
line 2802
;2802:				{
line 2803
;2803:					weapon = &cg_weapons[ xxx ];
ADDRLP4 880
CNSTI4 296
ADDRLP4 876
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2805
;2804:
;2805:					primary.hModel = weapon->viewweaponModel;
ADDRLP4 4+8
ADDRLP4 880
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 2807
;2806:					
;2807:					CG_PositionEntityOnTag( &primary, &torso, ci->torsoModel,"tag_vitem1"); 
ADDRLP4 4
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1281
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 2808
;2808:					trap_R_AddRefEntityToScene( &primary );									
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2809
;2809:				}
LABELV $1278
line 2810
;2810:				if ( BG_IsSecondary( xxx ) && cent->currentState.weapon != xxx )
ADDRLP4 876
INDIRI4
ARGI4
ADDRLP4 888
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 888
INDIRI4
CNSTI4 0
EQI4 $1282
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ADDRLP4 876
INDIRI4
EQI4 $1282
line 2811
;2811:				{
line 2812
;2812:					weapon = &cg_weapons[ xxx ]; 
ADDRLP4 880
CNSTI4 296
ADDRLP4 876
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2814
;2813:
;2814:					primary.hModel = weapon->viewweaponModel;
ADDRLP4 4+8
ADDRLP4 880
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 2816
;2815:					
;2816:					CG_PositionEntityOnTag( &primary, &legs, ci->legsModel,"tag_vitem2"); 
ADDRLP4 4
ARGP4
ADDRLP4 284
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 560
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1285
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 2817
;2817:					trap_R_AddRefEntityToScene( &primary );	
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2818
;2818:				}
LABELV $1282
line 2830
;2819:				/*
;2820:				if ( xxx == WP_C4 && cent->currentState.weapon != xxx )
;2821:				{
;2822:					weapon = &cg_weapons[ xxx ];
;2823:
;2824:					primary.hModel = weapon->viewweaponModel;
;2825:					
;2826:					CG_PositionEntityOnTag( &primary, &torso, ci->torsoModel,test_h.string); 
;2827:					trap_R_AddRefEntityToScene( &primary );	
;2828:				}
;2829:				*/
;2830:				if ( BG_IsMelee( xxx ) && cent->currentState.weapon != xxx )
ADDRLP4 876
INDIRI4
ARGI4
ADDRLP4 892
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 892
INDIRI4
CNSTI4 0
EQI4 $1286
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ADDRLP4 876
INDIRI4
EQI4 $1286
line 2831
;2831:				{
line 2832
;2832:					weapon = &cg_weapons[ xxx ];
ADDRLP4 880
CNSTI4 296
ADDRLP4 876
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2834
;2833:
;2834:					primary.hModel = weapon->viewweaponModel;
ADDRLP4 4+8
ADDRLP4 880
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 2836
;2835:					
;2836:					CG_PositionEntityOnTag( &primary, &torso, ci->torsoModel,"tag_vitem5"); 
ADDRLP4 4
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1289
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 2837
;2837:					trap_R_AddRefEntityToScene( &primary );	
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2838
;2838:				}
LABELV $1286
line 2839
;2839:			}
LABELV $1276
line 2840
;2840:		}
LABELV $1273
line 2793
ADDRLP4 876
ADDRLP4 876
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 876
INDIRI4
CNSTI4 0
GTI4 $1272
line 2841
;2841:	}
line 2845
;2842:
;2843:	// if it's our playermodel
;2844:	
;2845:	if ( ( cgs.gametype != GT_TEAM ) &&
ADDRGP4 cgs+31456
INDIRI4
CNSTI4 1
EQI4 $1290
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1290
ADDRLP4 876
CNSTI4 0
ASGNI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ADDRLP4 876
INDIRI4
GTI4 $1290
ADDRGP4 cg+107628
INDIRI4
ADDRLP4 876
INDIRI4
NEI4 $1290
line 2849
;2846:		cent->currentState.number == cg.snap->ps.clientNum && 
;2847:		cg.snap->ps.stats[STAT_HEALTH] <= 0  && 
;2848:		!cg.renderingThirdPerson )
;2849:	{
line 2850
;2850:		VectorCopy( head.origin , cg.refdef.vieworg );
ADDRGP4 cg+109044+24
ADDRLP4 704+68
INDIRB
ASGNB 12
line 2851
;2851:		AxisCopy( head.axis, cg.refdef.viewaxis );
ADDRLP4 704+28
ARGP4
ADDRGP4 cg+109044+36
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 2853
;2852:		// position eye reletive to origin 
;2853:		VectorCopy( cent->lerpAngles, cg.refdefViewAngles );
ADDRGP4 cg+109412
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRB
ASGNB 12
line 2854
;2854:	}
LABELV $1290
line 2857
;2855:
;2856:	
;2857:	if ( cent->currentState.number == cg.snap->ps.clientNum && !(cent->currentState.eFlags & EF_DEAD) && !BG_IsZooming( cg.snap->ps.stats[STAT_WEAPONMODE]) &&
ADDRLP4 880
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 880
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1303
ADDRLP4 880
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $1303
ADDRGP4 cg+36
INDIRP4
CNSTI4 264
ADDP4
INDIRI4
ARGI4
ADDRLP4 884
ADDRGP4 BG_IsZooming
CALLI4
ASGNI4
ADDRLP4 888
CNSTI4 0
ASGNI4
ADDRLP4 884
INDIRI4
ADDRLP4 888
INDIRI4
NEI4 $1303
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
ADDRLP4 888
INDIRI4
NEI4 $1303
line 2859
;2858:		!(cg.snap->ps.pm_flags & PMF_FOLLOW) )
;2859:		CG_Draw3rdPersonPlayerCrosshair( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Draw3rdPersonPlayerCrosshair
CALLV
pop
LABELV $1303
line 2864
;2860:
;2861:	//
;2862:	// add the gun / barrel / flash
;2863:	//
;2864:	CG_AddPlayerWeapon( &larm, &rarm, NULL, cent );
ADDRLP4 424
ARGP4
ADDRLP4 564
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 2867
;2865:
;2866:	//restore
;2867:	if ( pmodel_o.integer > 0 )
ADDRGP4 pmodel_o+12
INDIRI4
CNSTI4 0
LEI4 $1308
line 2868
;2868:		VectorCopy( lO, cent->lerpOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 700
ADDP4
ADDRLP4 860
INDIRB
ASGNB 12
LABELV $1308
line 2870
;2869:  
;2870:	CG_DustTrail(cent); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_DustTrail
CALLV
pop
line 2872
;2871:
;2872:	if ( ci->deferred )
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1311
line 2873
;2873:		CG_LoadDeferredPlayers( );
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
LABELV $1311
line 2877
;2874:
;2875:#ifdef NEW_ANIMS
;2876:	// add powerups floating behind the player
;2877:	CG_PlayerPowerups( cent, &torso );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 144
ARGP4
ADDRGP4 CG_PlayerPowerups
CALLV
pop
line 2879
;2878:#endif
;2879:}
LABELV $1031
endproc CG_Player 1156 44
export CG_ResetPlayerEntity
proc CG_ResetPlayerEntity 44 24
line 2891
;2880:
;2881:
;2882://=====================================================================
;2883:
;2884:/*
;2885:===============
;2886:CG_ResetPlayerEntity
;2887:
;2888:A player just came into view or teleported, so reset all animation info
;2889:===============
;2890:*/
;2891:void CG_ResetPlayerEntity( centity_t *cent ) {
line 2892
;2892:	cent->errorTime = -99999;		// guarantee no error decay added
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 -99999
ASGNI4
line 2893
;2893:	cent->extrapolated = qfalse;	
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
CNSTI4 0
ASGNI4
line 2895
;2894:
;2895:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.legs, cent->currentState.legsAnim );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 2484
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 472
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2896
;2896:	CG_ClearLerpFrame( &cgs.clientinfo[ cent->currentState.clientNum ], &cent->pe.torso, cent->currentState.torsoAnim );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 2484
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 520
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ClearLerpFrame
CALLV
pop
line 2898
;2897:
;2898:	BG_EvaluateTrajectory( &cent->currentState.pos, cg.time, cent->lerpOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 700
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2899
;2899:	BG_EvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
CNSTI4 712
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 2901
;2900:
;2901:	VectorCopy( cent->lerpOrigin, cent->rawOrigin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 664
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 700
ADDP4
INDIRB
ASGNB 12
line 2902
;2902:	VectorCopy( cent->lerpAngles, cent->rawAngles );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 712
ADDP4
INDIRB
ASGNB 12
line 2904
;2903:
;2904:	memset( &cent->pe.legs, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 472
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2905
;2905:	cent->pe.legs.yawAngle = cent->rawAngles[YAW];
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ASGNF4
line 2906
;2906:	cent->pe.legs.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTI4 0
ASGNI4
line 2907
;2907:	cent->pe.legs.pitchAngle = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTF4 0
ASGNF4
line 2908
;2908:	cent->pe.legs.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
CNSTI4 0
ASGNI4
line 2910
;2909:
;2910:	memset( &cent->pe.torso, 0, sizeof( cent->pe.legs ) );
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 48
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2911
;2911:	cent->pe.torso.yawAngle = cent->rawAngles[YAW];
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ASGNF4
line 2912
;2912:	cent->pe.torso.yawing = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
CNSTI4 0
ASGNI4
line 2913
;2913:	cent->pe.torso.pitchAngle = cent->rawAngles[PITCH];
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 548
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ASGNF4
line 2914
;2914:	cent->pe.torso.pitching = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
CNSTI4 0
ASGNI4
line 2916
;2915:
;2916:	cent->wakemarkTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 468
ADDP4
CNSTI4 0
ASGNI4
line 2917
;2917:	cent->muzzleFlashTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
line 2922
;2918:
;2919:	// BLUTENGEL_XXX:
;2920:	// those 2 lines are the fix for the soundbug (ghost sounds giving
;2921:	// away player positions)
;2922:	if ( cg.nextSnap != NULL && cg.snap != NULL ) {
ADDRLP4 36
CNSTU4 0
ASGNU4
ADDRGP4 cg+40
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $1318
ADDRGP4 cg+36
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $1318
line 2923
;2923:		cent->interpolate = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
CNSTI4 1
ASGNI4
line 2924
;2924:		cent->previousEvent = cent->nextState.event;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 448
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
ASGNI4
line 2925
;2925:	}
LABELV $1318
line 2927
;2926:
;2927:	if ( cg_debugPosition.integer ) {
ADDRGP4 cg_debugPosition+12
INDIRI4
CNSTI4 0
EQI4 $1322
line 2928
;2928:		CG_Printf("(time %i) %i ResetPlayerEntity yaw=%i, event=(%i, %i)\n", cg.time, cent->currentState.number, cent->pe.torso.yawAngle, (&cent->currentState)->event, (&cent->nextState)->event );
ADDRGP4 $1325
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
ARGF4
ADDRLP4 40
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 2929
;2929:	}
LABELV $1322
line 2930
;2930:}
LABELV $1313
endproc CG_ResetPlayerEntity 44 24
import CG_SpawnParticle
import CG_DirectImpactMark
import CG_AddPlayerWeapon
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1325
byte 1 40
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 32
byte 1 37
byte 1 105
byte 1 41
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 82
byte 1 101
byte 1 115
byte 1 101
byte 1 116
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 121
byte 1 97
byte 1 119
byte 1 61
byte 1 37
byte 1 105
byte 1 44
byte 1 32
byte 1 101
byte 1 118
byte 1 101
byte 1 110
byte 1 116
byte 1 61
byte 1 40
byte 1 37
byte 1 105
byte 1 44
byte 1 32
byte 1 37
byte 1 105
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $1289
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 118
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 53
byte 1 0
align 1
LABELV $1285
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 118
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 50
byte 1 0
align 1
LABELV $1281
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 118
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 49
byte 1 0
align 1
LABELV $1271
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 50
byte 1 0
align 1
LABELV $1242
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $1227
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 108
byte 1 0
align 1
LABELV $1212
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 97
byte 1 114
byte 1 109
byte 1 114
byte 1 0
align 1
LABELV $1203
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $1073
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 114
byte 1 0
align 1
LABELV $1071
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 111
byte 1 111
byte 1 116
byte 1 108
byte 1 0
align 1
LABELV $1035
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $753
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 97
byte 1 110
byte 1 103
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $682
byte 1 67
byte 1 108
byte 1 97
byte 1 109
byte 1 112
byte 1 32
byte 1 108
byte 1 102
byte 1 45
byte 1 62
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $644
byte 1 65
byte 1 110
byte 1 105
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $640
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $599
byte 1 78
byte 1 111
byte 1 116
byte 1 32
byte 1 101
byte 1 110
byte 1 111
byte 1 117
byte 1 103
byte 1 104
byte 1 32
byte 1 109
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 114
byte 1 101
byte 1 99
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $568
byte 1 80
byte 1 80
byte 1 77
byte 1 32
byte 1 91
byte 1 37
byte 1 115
byte 1 93
byte 1 0
align 1
LABELV $557
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 114
byte 1 97
byte 1 109
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $540
byte 1 0
align 1
LABELV $535
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $532
byte 1 101
byte 1 95
byte 1 109
byte 1 111
byte 1 117
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $529
byte 1 101
byte 1 95
byte 1 101
byte 1 121
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $526
byte 1 101
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $524
byte 1 116
byte 1 108
byte 1 0
align 1
LABELV $522
byte 1 116
byte 1 116
byte 1 0
align 1
LABELV $520
byte 1 116
byte 1 0
align 1
LABELV $518
byte 1 108
byte 1 0
align 1
LABELV $516
byte 1 119
byte 1 0
align 1
LABELV $514
byte 1 104
byte 1 99
byte 1 0
align 1
LABELV $512
byte 1 115
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $510
byte 1 99
byte 1 49
byte 1 0
align 1
LABELV $507
byte 1 110
byte 1 0
align 1
LABELV $502
byte 1 67
byte 1 71
byte 1 95
byte 1 83
byte 1 101
byte 1 116
byte 1 68
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 114
byte 1 101
byte 1 100
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 73
byte 1 110
byte 1 102
byte 1 111
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $423
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 32
byte 1 100
byte 1 101
byte 1 102
byte 1 97
byte 1 117
byte 1 108
byte 1 116
byte 1 32
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $416
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $401
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $395
byte 1 68
byte 1 69
byte 1 70
byte 1 65
byte 1 85
byte 1 76
byte 1 84
byte 1 95
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 76
byte 1 32
byte 1 47
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $392
byte 1 98
byte 1 114
byte 1 117
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $391
byte 1 115
byte 1 95
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 0
align 1
LABELV $390
byte 1 106
byte 1 97
byte 1 121
byte 1 97
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $389
byte 1 116
byte 1 95
byte 1 109
byte 1 101
byte 1 100
byte 1 105
byte 1 117
byte 1 109
byte 1 0
align 1
LABELV $382
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 67
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 40
byte 1 32
byte 1 37
byte 1 115
byte 1 44
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 41
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $365
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 97
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 111
byte 1 105
byte 1 114
byte 1 101
byte 1 115
byte 1 47
byte 1 101
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $364
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 97
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 111
byte 1 105
byte 1 114
byte 1 101
byte 1 115
byte 1 47
byte 1 104
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $363
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 97
byte 1 99
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 111
byte 1 105
byte 1 114
byte 1 101
byte 1 115
byte 1 47
byte 1 109
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $358
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 101
byte 1 118
byte 1 105
byte 1 101
byte 1 119
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $357
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $351
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $345
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $343
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 118
byte 1 105
byte 1 112
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $341
byte 1 118
byte 1 105
byte 1 112
byte 1 95
byte 1 116
byte 1 97
byte 1 110
byte 1 103
byte 1 111
byte 1 0
align 1
LABELV $340
byte 1 118
byte 1 105
byte 1 112
byte 1 95
byte 1 115
byte 1 101
byte 1 97
byte 1 108
byte 1 0
align 1
LABELV $337
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 114
byte 1 109
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $331
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 114
byte 1 109
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $330
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 114
byte 1 109
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $324
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 114
byte 1 109
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $323
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $317
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $316
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 119
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $310
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $309
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $303
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 99
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $291
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $289
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 118
byte 1 105
byte 1 112
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $288
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $277
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 37
byte 1 115
byte 1 95
byte 1 118
byte 1 101
byte 1 115
byte 1 116
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $275
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 95
byte 1 37
byte 1 115
byte 1 95
byte 1 118
byte 1 101
byte 1 115
byte 1 116
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $267
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $265
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $262
byte 1 70
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $256
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $254
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $253
byte 1 118
byte 1 105
byte 1 112
byte 1 95
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $248
byte 1 69
byte 1 114
byte 1 114
byte 1 111
byte 1 114
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $227
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $216
byte 1 115
byte 1 101
byte 1 120
byte 1 0
align 1
LABELV $207
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 111
byte 1 102
byte 1 102
byte 1 115
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $202
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 45
byte 1 114
byte 1 0
align 1
LABELV $197
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 45
byte 1 108
byte 1 0
align 1
LABELV $192
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 108
byte 1 105
byte 1 109
byte 1 112
byte 1 45
byte 1 114
byte 1 0
align 1
LABELV $187
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 108
byte 1 105
byte 1 109
byte 1 112
byte 1 45
byte 1 108
byte 1 0
align 1
LABELV $182
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 114
byte 1 117
byte 1 110
byte 1 45
byte 1 114
byte 1 0
align 1
LABELV $177
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 114
byte 1 117
byte 1 110
byte 1 45
byte 1 108
byte 1 0
align 1
LABELV $172
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 119
byte 1 97
byte 1 108
byte 1 107
byte 1 45
byte 1 114
byte 1 0
align 1
LABELV $167
byte 1 115
byte 1 116
byte 1 101
byte 1 112
byte 1 95
byte 1 119
byte 1 97
byte 1 108
byte 1 107
byte 1 45
byte 1 108
byte 1 0
align 1
LABELV $159
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $153
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 117
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 32
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $96
byte 1 42
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $95
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $94
byte 1 42
byte 1 100
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $93
byte 1 42
byte 1 103
byte 1 97
byte 1 115
byte 1 112
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $92
byte 1 42
byte 1 102
byte 1 97
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 103
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $91
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 49
byte 1 48
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $90
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 55
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $89
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 53
byte 1 48
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $88
byte 1 42
byte 1 112
byte 1 97
byte 1 105
byte 1 110
byte 1 50
byte 1 53
byte 1 95
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $87
byte 1 42
byte 1 106
byte 1 117
byte 1 109
byte 1 112
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $86
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $85
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $84
byte 1 42
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
