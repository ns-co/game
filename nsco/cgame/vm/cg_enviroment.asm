export CG_EffectMark
code
proc CG_EffectMark 236 12
file "../cg_enviroment.c"
line 68
;1:/*
;2:**  	base by the Q3F development Team (www.q3f.com).
;3:**
;4:**  	cg_enviroment.c
;5:**
;6:**  	Add atmospheric effects to view.
;7:**
;8:**  	Current supported effects are rain and snow.
;9:*/
;10:  
;11:
;12:#include "cg_local.h"
;13:
;14:
;15:  	vec3_t currvec;
;16:
;17:#define MAX_ATMOSPHERIC_PARTICLES  	  	2000  	// maximum # of particles
;18:#define MAX_ATMOSPHERIC_DISTANCE  	  	1000  	// maximum distance from refdef origin that particles are visible
;19:#define MAX_ATMOSPHERIC_HEIGHT  	  	  	4096  	// maximum world height (FIXME: since 1.27 this should be 65536)
;20:#define MIN_ATMOSPHERIC_HEIGHT  	  	  	-4096  	// minimum world height (FIXME: since 1.27 this should be -65536)
;21:#define MAX_ATMOSPHERIC_EFFECTSHADERS  	6  	  	// maximum different effectshaders for an atmospheric effect
;22:#define ATMOSPHERIC_DROPDELAY  	  	  	100
;23:#define ATMOSPHERIC_CUTHEIGHT  	  	  	800
;24:
;25:#define ATMOSPHERIC_RAIN_SPEED  	  	1.1f * DEFAULT_GRAVITY
;26:#define ATMOSPHERIC_RAIN_HEIGHT  	  	150
;27:
;28:#define ATMOSPHERIC_SNOW_SPEED  	  	0.1f * DEFAULT_GRAVITY
;29:#define ATMOSPHERIC_SNOW_HEIGHT  	  	3
;30:
;31:typedef struct cg_atmosphericParticle_s {
;32:  	vec3_t pos, delta, deltaNormalized, colour, surfacenormal;
;33:  	float height, minz, weight;
;34:  	qboolean active;
;35:  	int contents, surface, nextDropTime;
;36:  	qhandle_t *effectshader;
;37:} cg_atmosphericParticle_t;
;38:
;39:typedef struct cg_atmosphericEffect_s {
;40:  	cg_atmosphericParticle_t particles[MAX_ATMOSPHERIC_PARTICLES];
;41:  	qhandle_t effectshaders[MAX_ATMOSPHERIC_EFFECTSHADERS];
;42:  	qhandle_t effectwatershader, effectlandshader;
;43:  	int lastRainTime, numDrops;
;44:  	int gustStartTime, gustEndTime;
;45:  	int baseStartTime, baseEndTime;
;46:  	int gustMinTime, gustMaxTime;
;47:  	int changeMinTime, changeMaxTime;
;48:  	int baseMinTime, baseMaxTime;
;49:  	float baseWeight, gustWeight;
;50:  	int baseDrops, gustDrops;
;51:	float height;
;52:  	int numEffectShaders;
;53:  	qboolean waterSplash, landSplash;
;54:  	vec3_t baseVec, gustVec;
;55:
;56:  	qboolean (*ParticleCheckVisible)( cg_atmosphericParticle_t *particle );
;57:  	qboolean (*ParticleGenerate)( cg_atmosphericParticle_t *particle,   float currweight );
;58:  	void (*ParticleRender)( cg_atmosphericParticle_t *particle );
;59:} cg_atmosphericEffect_t;
;60:
;61:static cg_atmosphericEffect_t cg_atmFx;
;62:qboolean CG_AtmosphericKludge();
;63:
;64:/*
;65:**  Render utility functions
;66:*/
;67:
;68:void CG_EffectMark(  	qhandle_t markShader, const vec3_t origin, const vec3_t dir, float alpha, float radius ) {
line 79
;69:  	// 'quick' version of the CG_ImpactMark function
;70:
;71:  	vec3_t  	  	  	axis[3];
;72:  	float  	  	  	texCoordScale;
;73:  	vec3_t  	  	  	originalPoints[4];
;74:  	byte  	  	  	colors[4];
;75:  	int  	  	  	  	i;
;76:  	polyVert_t  	  	*v;
;77:  	polyVert_t  	  	verts[4];
;78:
;79:  	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $85
line 80
;80:  	  	return;
ADDRGP4 $84
JUMPV
LABELV $85
line 83
;81:  	}
;82:
;83:  	if ( radius <= 0 ) {
ADDRFP4 16
INDIRF4
CNSTF4 0
GTF4 $88
line 84
;84:  	  	CG_Error( "CG_EffectMark called with <= 0 radius" );
ADDRGP4 $90
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 85
;85:  	}
LABELV $88
line 88
;86:
;87:  	// create the texture axis
;88:  	VectorNormalize2( dir, axis[0] );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 89
;89:  	PerpendicularVector( axis[1], axis[0] );
ADDRLP4 4+12
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 90
;90:  	VectorSet( axis[2], 1, 0, 0 );  	  	  	// This is _wrong_, but the function is for water anyway (i.e. usually flat)
ADDRLP4 4+24
CNSTF4 1065353216
ASGNF4
ADDRLP4 4+24+4
CNSTF4 0
ASGNF4
ADDRLP4 4+24+8
CNSTF4 0
ASGNF4
line 91
;91:  	CrossProduct( axis[0], axis[2], axis[1] );
ADDRLP4 4
ARGP4
ADDRLP4 4+24
ARGP4
ADDRLP4 4+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 93
;92:
;93:  	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 92
CNSTF4 1056964608
ADDRFP4 16
INDIRF4
DIVF4
ASGNF4
line 96
;94:
;95:  	// create the full polygon
;96:  	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $99
line 97
;97:  	  	originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 196
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 200
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 196
INDIRI4
ADDRLP4 44
ADDP4
ADDRLP4 196
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 196
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 200
INDIRF4
ADDRLP4 196
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 98
;98:  	  	originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 204
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 208
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 204
INDIRI4
ADDRLP4 44+12
ADDP4
ADDRLP4 204
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 204
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 208
INDIRF4
ADDRLP4 204
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 99
;99:  	  	originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 212
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 216
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 212
INDIRI4
ADDRLP4 44+24
ADDP4
ADDRLP4 212
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 216
INDIRF4
ADDRLP4 212
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 216
INDIRF4
ADDRLP4 212
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 100
;100:  	  	originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 220
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 224
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 220
INDIRI4
ADDRLP4 44+36
ADDP4
ADDRLP4 220
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 224
INDIRF4
ADDRLP4 220
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 224
INDIRF4
ADDRLP4 220
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 101
;101:  	}
LABELV $100
line 96
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $99
line 103
;102:
;103:  	colors[0] = 127;
ADDRLP4 96
CNSTU1 127
ASGNU1
line 104
;104:  	colors[1] = 127;
ADDRLP4 96+1
CNSTU1 127
ASGNU1
line 105
;105:  	colors[2] = 127;
ADDRLP4 96+2
CNSTU1 127
ASGNU1
line 106
;106:  	colors[3] = alpha * 255;
ADDRLP4 200
CNSTF4 1132396544
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
ADDRLP4 204
CNSTF4 1325400064
ASGNF4
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
LTF4 $118
ADDRLP4 196
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $119
JUMPV
LABELV $118
ADDRLP4 196
ADDRLP4 200
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $119
ADDRLP4 96+3
ADDRLP4 196
INDIRU4
CVUU1 4
ASGNU1
line 108
;107:
;108:  	for ( i = 0, v = verts ; i < 4 ; i++, v++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 100
ASGNP4
ADDRGP4 $123
JUMPV
LABELV $120
line 111
;109:  	  	vec3_t  	  	delta;
;110:
;111:  	  	VectorCopy( originalPoints[i], v->xyz );
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 44
ADDP4
INDIRB
ASGNB 12
line 113
;112:
;113:  	  	VectorSubtract( v->xyz, origin, delta );
ADDRLP4 224
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 208
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 224
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 228
CNSTI4 4
ASGNI4
ADDRLP4 208+4
ADDRLP4 40
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
ADDRLP4 224
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 232
CNSTI4 8
ASGNI4
ADDRLP4 208+8
ADDRLP4 40
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 114
;114:  	  	v->st[0] = 0.5 + DotProduct( delta, axis[1] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 208
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 115
;115:  	  	v->st[1] = 0.5 + DotProduct( delta, axis[2] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 208
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 116
;116:  	  	*(int *)v->modulate = *(int *)colors;
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 117
;117:  	}
LABELV $121
line 108
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $123
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $120
line 119
;118:
;119:  	trap_R_AddPolyToScene( markShader, 4, verts );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 120
;120:}
LABELV $84
endproc CG_EffectMark 236 12
proc CG_RainParticleCheckVisible 64 4
line 127
;121:
;122:/*
;123:**  	Raindrop management functions
;124:*/
;125:
;126:static qboolean CG_RainParticleCheckVisible( cg_atmosphericParticle_t *particle )
;127:{
line 133
;128:  	// Check the raindrop is visible and still going, wrapping if necessary.
;129:
;130:  	float moved;
;131:  	vec3_t distance;
;132:
;133:  	if( !particle || !particle->active )
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $143
ADDRLP4 16
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $141
LABELV $143
line 134
;134:  	  	return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $140
JUMPV
LABELV $141
line 136
;135:
;136:  	moved = (cg.time - cg_atmFx.lastRainTime) * 0.001;  	// Units moved since last frame
ADDRLP4 12
CNSTF4 981668463
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184032
INDIRI4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 137
;137:  	VectorMA( particle->pos, moved, particle->delta, particle->pos );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 138
;138:  	if( particle->pos[2] + ATMOSPHERIC_CUTHEIGHT < particle->minz )
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1145569280
ADDF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GEF4 $146
line 139
;139:  	  	return( particle->active = qfalse );
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
RETI4
ADDRGP4 $140
JUMPV
LABELV $146
line 141
;140:
;141:  	VectorSubtract( cg.refdef.vieworg, particle->pos, distance );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRGP4 cg+109044+24
INDIRF4
ADDRLP4 48
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 cg+109044+24+4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 cg+109044+24+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 142
;142:  	if( sqrt( distance[0] * distance[0] + distance[1] * distance[1] ) > MAX_ATMOSPHERIC_DISTANCE )
ADDRLP4 52
ADDRLP4 0
INDIRF4
ASGNF4
ADDRLP4 52
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 56
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 56
INDIRF4
CNSTF4 1148846080
LEF4 $158
line 143
;143:  	  	return( particle->active = qfalse );
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
RETI4
ADDRGP4 $140
JUMPV
LABELV $158
line 145
;144:
;145:  	return( qtrue );
CNSTI4 1
RETI4
LABELV $140
endproc CG_RainParticleCheckVisible 64 4
proc CG_RainParticleGenerate 164 28
line 149
;146:}
;147:
;148:static qboolean CG_RainParticleGenerate( cg_atmosphericParticle_t *particle,  float currweight )
;149:{
line 156
;150:  	// Attempt to 'spot' a raindrop somewhere below a sky texture.
;151:
;152:  	float angle, distance, origz;
;153:  	vec3_t testpoint, testend;
;154:  	trace_t tr;
;155:
;156:	memset( &tr, 0, sizeof(tr ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 memset
CALLP4
pop
line 158
;157:
;158:  	angle = random() * 2*M_PI;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
MULF4
ASGNF4
line 159
;159:  	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * random();
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1148846080
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1101004800
ADDF4
ASGNF4
line 161
;160:
;161:  	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + sin(angle) * distance;
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 100
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 104
ADDRGP4 cg+109044+24
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 68
ADDRLP4 104
INDIRF4
ASGNF4
line 162
;162:  	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + cos(angle) * distance;
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 108
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 112
ADDRGP4 cg+109044+24+4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 112
INDIRF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 112
INDIRF4
ASGNF4
line 163
;163:  	testpoint[2] = origz = cg.refdef.vieworg[2];
ADDRLP4 116
ADDRGP4 cg+109044+24+8
INDIRF4
ASGNF4
ADDRLP4 88
ADDRLP4 116
INDIRF4
ASGNF4
ADDRLP4 68+8
ADDRLP4 116
INDIRF4
ASGNF4
line 164
;164:  	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 56+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
ADDF4
ASGNF4
ADDRGP4 $177
JUMPV
LABELV $176
line 167
;165:
;166:  	while( 1 )
;167:  	{
line 168
;168:  	  	if( testpoint[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
LTF4 $179
line 169
;169:  	  	  	return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $162
JUMPV
LABELV $179
line 170
;170:  	  	if( testend[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 56+8
INDIRF4
CNSTF4 1166016512
LTF4 $182
line 171
;171:  	  	  	testend[2] = MAX_ATMOSPHERIC_HEIGHT - 1;
ADDRLP4 56+8
CNSTF4 1166012416
ASGNF4
LABELV $182
line 172
;172:  	  	CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 0
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 173
;173:  	  	if( tr.startsolid )  	  	  	// Stuck in something, skip over it.
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $186
line 174
;174:  	  	{
line 175
;175:  	  	  	testpoint[2] += 64;
ADDRLP4 68+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 176
;176:  	  	  	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 56+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
ADDF4
ASGNF4
line 177
;177:  	  	}
ADDRGP4 $187
JUMPV
LABELV $186
line 178
;178:  	  	else if( tr.fraction == 1 )  	  	// Didn't hit anything, we're (probably) outside the world
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $192
line 179
;179:  	  	  	return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $162
JUMPV
LABELV $192
line 180
;180:  	  	else if( tr.surfaceFlags & SURF_SKY )  	// Hit sky, this is where we start.
ADDRLP4 0+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $195
line 181
;181:  	  	  	break;
ADDRGP4 $178
JUMPV
LABELV $195
line 182
;182:  	  	else return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $162
JUMPV
LABELV $187
line 183
;183:  	}
LABELV $177
line 166
ADDRGP4 $176
JUMPV
LABELV $178
line 185
;184:
;185:  	particle->active = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 1
ASGNI4
line 186
;186:  	particle->colour[0] = 0.6 + 0.2 * random();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1045220557
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 187
;187:  	particle->colour[1] = 0.6 + 0.2 * random();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1045220557
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 188
;188:  	particle->colour[2] = 0.6 + 0.2 * random();
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1045220557
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 189
;189:  	VectorCopy( tr.endpos, particle->pos );
ADDRFP4 0
INDIRP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 190
;190:  	VectorCopy( currvec, particle->delta );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 currvec
INDIRB
ASGNB 12
line 191
;191:  	particle->delta[2] += crandom() * 100;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 192
;192:  	VectorNormalize2( particle->delta, particle->deltaNormalized );
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 193
;193:  	particle->height = cg_atmFx.height + crandom() * 100;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRGP4 cg_atmFx+184096
INDIRF4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 194
;194:  	particle->weight = currweight;
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRF4
ASGNF4
line 195
;195:  	particle->effectshader = &cg_atmFx.effectshaders[0];
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 cg_atmFx+184000
ASGNP4
line 197
;196:
;197:  	distance =  	((float)(tr.endpos[2] - MIN_ATMOSPHERIC_HEIGHT)) / -particle->delta[2];
ADDRLP4 80
ADDRLP4 0+12+8
INDIRF4
CNSTF4 3313500160
SUBF4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
NEGF4
DIVF4
ASGNF4
line 198
;198:  	VectorMA( tr.endpos, distance, particle->delta, testend );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 0+12
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 0+12+4
INDIRF4
ADDRLP4 148
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 0+12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
line 200
;199:
;200:  	CG_Trace( &tr, particle->pos, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 156
CNSTP4 0
ASGNP4
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 201
;201:  	particle->minz = tr.endpos[2];
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+12+8
INDIRF4
ASGNF4
line 202
;202:  	tr.endpos[2]--;
ADDRLP4 0+12+8
ADDRLP4 0+12+8
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 203
;203:  	VectorCopy( tr.plane.normal, particle->surfacenormal );
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 0+24
INDIRB
ASGNB 12
line 204
;204:  	particle->surface = tr.surfaceFlags;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0+44
INDIRI4
ASGNI4
line 205
;205:  	particle->contents = CG_PointContents( tr.endpos, ENTITYNUM_NONE );
ADDRLP4 0+12
ARGP4
CNSTI4 1023
ARGI4
ADDRLP4 160
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 160
INDIRI4
ASGNI4
line 207
;206:
;207:  	return( qtrue );
CNSTI4 1
RETI4
LABELV $162
endproc CG_RainParticleGenerate 164 28
proc CG_RainParticleRender 204 20
line 211
;208:} 
;209:
;210:static void CG_RainParticleRender( cg_atmosphericParticle_t *particle )
;211:{
line 220
;212:  	// Draw a raindrop
;213:
;214:  	vec3_t  	  	forward, right;
;215:  	polyVert_t  	verts[4];
;216:  	vec2_t  	  	line;
;217:  	float  	  	len, frac;
;218:  	vec3_t  	  	start, finish;
;219:
;220:  	if( !particle->active )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $218
line 221
;221:  	  	return;
ADDRGP4 $217
JUMPV
LABELV $218
line 223
;222:
;223:  	VectorCopy( particle->pos, start );
ADDRLP4 108
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 224
;224:  	len = particle->height;
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ASGNF4
line 225
;225:  	if( start[2] <= particle->minz )
ADDRLP4 108+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GTF4 $220
line 226
;226:  	{
line 228
;227:  	  	// Stop rain going through surfaces.
;228:  	  	len = particle->height - particle->minz + start[2];
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 160
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 160
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 108+8
INDIRF4
ADDF4
ASGNF4
line 229
;229:  	  	frac = start[2];
ADDRLP4 156
ADDRLP4 108+8
INDIRF4
ASGNF4
line 230
;230:  	  	VectorMA( start, len - particle->height, particle->deltaNormalized, start );
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 172
ADDRLP4 164
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 108
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 232
;231:
;232:  	  	if( !cg_lowEffects.integer )
ADDRGP4 cg_lowEffects+12
INDIRI4
CNSTI4 0
NEI4 $229
line 233
;233:  	  	{
line 234
;234:  	  	  	frac = (ATMOSPHERIC_CUTHEIGHT - particle->minz + frac) / (float) ATMOSPHERIC_CUTHEIGHT;
ADDRLP4 180
CNSTF4 1145569280
ASGNF4
ADDRLP4 156
ADDRLP4 180
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 156
INDIRF4
ADDF4
ADDRLP4 180
INDIRF4
DIVF4
ASGNF4
line 236
;235:  	  	  	// Splash effects on different surfaces
;236:  	  	  	if( particle->contents & (CONTENTS_WATER|CONTENTS_SLIME) )
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 48
BANDI4
CNSTI4 0
EQI4 $232
line 237
;237:  	  	  	{
line 239
;238:  	  	  	  	// Water splash
;239:  	  	  	  	if( cg_atmFx.effectwatershader && frac > 0 && frac < 1 )
ADDRGP4 cg_atmFx+184024
INDIRI4
CNSTI4 0
EQI4 $233
ADDRLP4 184
ADDRLP4 156
INDIRF4
ASGNF4
ADDRLP4 184
INDIRF4
CNSTF4 0
LEF4 $233
ADDRLP4 184
INDIRF4
CNSTF4 1065353216
GEF4 $233
line 240
;240:  	  	  	  	  	CG_EffectMark( cg_atmFx.effectwatershader, start, particle->surfacenormal, frac * 0.5, 8 - frac * 8 );
ADDRGP4 cg_atmFx+184024
INDIRI4
ARGI4
ADDRLP4 108
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 188
ADDRLP4 156
INDIRF4
ASGNF4
CNSTF4 1056964608
ADDRLP4 188
INDIRF4
MULF4
ARGF4
ADDRLP4 192
CNSTF4 1090519040
ASGNF4
ADDRLP4 192
INDIRF4
ADDRLP4 192
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
SUBF4
ARGF4
ADDRGP4 CG_EffectMark
CALLV
pop
line 241
;241:  	  	  	}
ADDRGP4 $233
JUMPV
LABELV $232
line 242
;242:  	  	  	else if( !(particle->contents & CONTENTS_LAVA) && !(particle->surface & (SURF_NODAMAGE|SURF_NOIMPACT|SURF_NOMARKS|SURF_SKY)) )
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 188
CNSTI4 0
ASGNI4
ADDRLP4 184
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 188
INDIRI4
NEI4 $238
ADDRLP4 184
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 53
BANDI4
ADDRLP4 188
INDIRI4
NEI4 $238
line 243
;243:  	  	  	{
line 245
;244:  	  	  	  	// Solid splash
;245:				if( cg_atmFx.effectlandshader && frac > 0 && frac < 1  ) 
ADDRGP4 cg_atmFx+184028
INDIRI4
CNSTI4 0
EQI4 $240
ADDRLP4 192
ADDRLP4 156
INDIRF4
ASGNF4
ADDRLP4 192
INDIRF4
CNSTF4 0
LEF4 $240
ADDRLP4 192
INDIRF4
CNSTF4 1065353216
GEF4 $240
line 246
;246:					CG_EffectMark( cg_atmFx.effectlandshader, start, particle->surfacenormal, frac * 0.5, 8 - frac * 8 );
ADDRGP4 cg_atmFx+184028
INDIRI4
ARGI4
ADDRLP4 108
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 196
ADDRLP4 156
INDIRF4
ASGNF4
CNSTF4 1056964608
ADDRLP4 196
INDIRF4
MULF4
ARGF4
ADDRLP4 200
CNSTF4 1090519040
ASGNF4
ADDRLP4 200
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 196
INDIRF4
MULF4
SUBF4
ARGF4
ADDRGP4 CG_EffectMark
CALLV
pop
LABELV $240
line 247
;247:  	  	  	}
LABELV $238
LABELV $233
line 250
;248:			 
;249:				
;250:  	  	}
LABELV $229
line 251
;251:  	}
LABELV $220
line 252
;252:  	if( len <= 0 )
ADDRLP4 152
INDIRF4
CNSTF4 0
GTF4 $244
line 253
;253:  	  	return;
ADDRGP4 $217
JUMPV
LABELV $244
line 255
;254:
;255:  	VectorCopy( particle->deltaNormalized, forward );
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 256
;256:  	VectorMA( start, -len, forward, finish );
ADDRLP4 160
ADDRLP4 152
INDIRF4
NEGF4
ASGNF4
ADDRLP4 132
ADDRLP4 108
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 120+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 120+8
INDIRF4
ADDRLP4 152
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 258
;257:
;258:  	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 120
INDIRF4
ADDRGP4 cg+109044+36+12
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+109044+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+109044+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 259
;259:  	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 120
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 261
;260:
;261:  	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109044+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109044+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109044+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 262
;262:  	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 164
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 263
;263:  	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 265
;264:
;265:  	VectorMA( finish, particle->weight, right, verts[0].xyz );
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 168
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 168
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 266
;266:  	verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 267
;267:  	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 268
;268:  	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 269
;269:  	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 270
;270:  	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 271
;271:  	verts[0].modulate[3] = 0;
ADDRLP4 0+20+3
CNSTU1 0
ASGNU1
line 273
;272:
;273:  	VectorMA( finish, -particle->weight, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 274
;274:  	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 275
;275:  	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 276
;276:  	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 277
;277:  	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 278
;278:  	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 279
;279:  	verts[1].modulate[3] = 0;
ADDRLP4 0+24+20+3
CNSTU1 0
ASGNU1
line 281
;280:
;281:  	VectorMA( start, -particle->weight, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 282
;282:  	verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 283
;283:  	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 284
;284:  	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 285
;285:  	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 286
;286:  	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 287
;287:  	verts[2].modulate[3] = 127;
ADDRLP4 0+48+20+3
CNSTU1 127
ASGNU1
line 289
;288:
;289:  	VectorMA( start, particle->weight, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 290
;290:  	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 291
;291:  	verts[3].st[1] = 1;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 292
;292:  	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 293
;293:  	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 294
;294:  	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 295
;295:  	verts[3].modulate[3] = 127;
ADDRLP4 0+72+20+3
CNSTU1 127
ASGNU1
line 297
;296:
;297:  	trap_R_AddPolyToScene( *particle->effectshader, 4, verts );
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 298
;298:}
LABELV $217
endproc CG_RainParticleRender 204 20
proc CG_SnowParticleGenerate 180 28
line 306
;299: 
;300:#if 1
;301:/*
;302:**  	Snow management functions
;303:*/
;304:
;305:static qboolean CG_SnowParticleGenerate( cg_atmosphericParticle_t *particle,  float currweight )
;306:{
line 313
;307:   	// Attempt to 'spot' a raindrop somewhere below a sky texture.
;308:
;309:  	float angle, distance, origz;
;310:  	vec3_t testpoint, testend;
;311:  	trace_t tr;
;312:
;313:  	angle = random() * 2*M_PI;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
MULF4
ASGNF4
line 314
;314:  	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * random();
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1148846080
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1101004800
ADDF4
ASGNF4
line 316
;315:
;316:  	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + sin(angle) * distance;
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 100
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 104
ADDRGP4 cg+109044+24
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 68
ADDRLP4 104
INDIRF4
ASGNF4
line 317
;317:  	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + cos(angle) * distance;
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 108
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 112
ADDRGP4 cg+109044+24+4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 112
INDIRF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 112
INDIRF4
ASGNF4
line 318
;318:  	testpoint[2] = origz = cg.refdef.vieworg[2];
ADDRLP4 116
ADDRGP4 cg+109044+24+8
INDIRF4
ASGNF4
ADDRLP4 88
ADDRLP4 116
INDIRF4
ASGNF4
ADDRLP4 68+8
ADDRLP4 116
INDIRF4
ASGNF4
line 319
;319:  	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 56+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
ADDF4
ASGNF4
ADDRGP4 $416
JUMPV
LABELV $415
line 322
;320:
;321:  	while( 1 )
;322:  	{
line 323
;323:  	  	if( testpoint[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
LTF4 $418
line 324
;324:  	  	  	return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $401
JUMPV
LABELV $418
line 325
;325:  	  	if( testend[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 56+8
INDIRF4
CNSTF4 1166016512
LTF4 $421
line 326
;326:  	  	  	testend[2] = MAX_ATMOSPHERIC_HEIGHT - 1;
ADDRLP4 56+8
CNSTF4 1166012416
ASGNF4
LABELV $421
line 327
;327:  	  	CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 0
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 328
;328:  	  	if( tr.startsolid )  	  	  	// Stuck in something, skip over it.
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $425
line 329
;329:  	  	{
line 330
;330:  	  	  	testpoint[2] += 64;
ADDRLP4 68+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 331
;331:  	  	  	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 56+8
ADDRLP4 68+8
INDIRF4
CNSTF4 1166016512
ADDF4
ASGNF4
line 332
;332:  	  	}
ADDRGP4 $426
JUMPV
LABELV $425
line 333
;333:  	  	else if( tr.fraction == 1 )  	  	// Didn't hit anything, we're (probably) outside the world
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $431
line 334
;334:  	  	  	return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $401
JUMPV
LABELV $431
line 335
;335:  	  	else if( tr.surfaceFlags & SURF_SKY )  	// Hit sky, this is where we start.
ADDRLP4 0+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $434
line 336
;336:  	  	  	break;
ADDRGP4 $417
JUMPV
LABELV $434
line 337
;337:  	  	else return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $401
JUMPV
LABELV $426
line 338
;338:  	}
LABELV $416
line 321
ADDRGP4 $415
JUMPV
LABELV $417
line 340
;339:
;340:  	particle->active = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 1
ASGNI4
line 341
;341:  	particle->colour[0] = 0.6 + 0.2 * random();
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1045220557
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 342
;342:  	particle->colour[1] = 0.6 + 0.2 * random();
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1045220557
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 343
;343:  	particle->colour[2] = 0.6 + 0.2 * random();
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1045220557
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 344
;344:  	VectorCopy( tr.endpos, particle->pos );  
ADDRFP4 0
INDIRP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 345
;345: 	VectorCopy( currvec, particle->delta ); 
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 currvec
INDIRB
ASGNB 12
line 346
;346:	particle->delta[2] += -200 - (random() * 50);
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
CNSTF4 3276275712
CNSTF4 1112014848
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ADDF4
ASGNF4
line 347
;347:  	VectorNormalize2( particle->delta, particle->deltaNormalized ); 
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 348
;348:  	particle->height = 1.5f + random() * 2; 
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1069547520
ADDF4
ASGNF4
line 349
;349:  	particle->weight = random()/2;
ADDRLP4 148
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 148
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 352
;350:
;351:	
;352:  	particle->effectshader = &cg_atmFx.effectshaders[0];
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 cg_atmFx+184000
ASGNP4
line 354
;353:
;354:  	distance =  	((float)(tr.endpos[2] - MIN_ATMOSPHERIC_HEIGHT)) / -particle->delta[2];
ADDRLP4 80
ADDRLP4 0+12+8
INDIRF4
CNSTF4 3313500160
SUBF4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
NEGF4
DIVF4
ASGNF4
line 355
;355:  	VectorMA( tr.endpos, distance, particle->delta, testend );
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 0+12
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 0+12+4
INDIRF4
ADDRLP4 152
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 0+12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
line 357
;356:
;357:  	CG_Trace( &tr, particle->pos, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 160
CNSTP4 0
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 1023
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 358
;358:  	particle->minz = tr.endpos[2];
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+12+8
INDIRF4
ASGNF4
line 359
;359:  	tr.endpos[2]--;
ADDRLP4 0+12+8
ADDRLP4 0+12+8
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 360
;360:  	VectorCopy( tr.plane.normal, particle->surfacenormal );
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 0+24
INDIRB
ASGNB 12
line 361
;361:  	particle->surface = tr.surfaceFlags;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0+44
INDIRI4
ASGNI4
line 362
;362:  	particle->contents = CG_PointContents( tr.endpos, ENTITYNUM_NONE );
ADDRLP4 0+12
ARGP4
CNSTI4 1023
ARGI4
ADDRLP4 164
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
line 364
;363:
;364:	{
line 365
;365:		float dist = Distance( cg.refdef.vieworg, particle->pos );
ADDRGP4 cg+109044+24
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 168
ADDRLP4 172
INDIRF4
ASGNF4
line 367
;366:
;367:		if ( dist < 400 )
ADDRLP4 168
INDIRF4
CNSTF4 1137180672
GEF4 $457
line 368
;368:		 particle->pos[2] += 400-dist;
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
CNSTF4 1137180672
ADDRLP4 168
INDIRF4
SUBF4
ADDF4
ASGNF4
LABELV $457
line 369
;369:	}
line 370
;370:  	return( qtrue );
CNSTI4 1
RETI4
LABELV $401
endproc CG_SnowParticleGenerate 180 28
proc CG_SnowParticleRender 188 12
line 374
;371:}
;372:#endif
;373:static void CG_SnowParticleRender( cg_atmosphericParticle_t *particle )
;374:{
line 384
;375:   	// Draw a raindrop
;376:
;377:  	vec3_t  	  	forward, right;
;378:  	polyVert_t  	verts[4];
;379:  	vec2_t  	  	line;
;380:  	float  	  	len, frac;
;381:  	vec3_t  	  	start, finish;
;382:		byte color;
;383:
;384:  	if( !particle->active )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $460
line 385
;385:  	  	return;
ADDRGP4 $459
JUMPV
LABELV $460
line 387
;386:
;387:  	VectorCopy( particle->pos, start );
ADDRLP4 108
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 388
;388:  	len = particle->height;
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ASGNF4
line 390
;389:	 
;390:  	if( start[2] <= particle->minz )
ADDRLP4 108+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GTF4 $462
line 391
;391:  	{
line 393
;392:  	  	// Stop rain going through surfaces.
;393:  	  	len = particle->height - particle->minz + start[2];
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 164
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 108+8
INDIRF4
ADDF4
ASGNF4
line 394
;394:  	  	frac = start[2];
ADDRLP4 160
ADDRLP4 108+8
INDIRF4
ASGNF4
line 395
;395:  	  	VectorMA( start, len - particle->height, particle->deltaNormalized, start );
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
ADDRLP4 168
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 108
INDIRF4
ADDRLP4 168
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 176
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 168
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 176
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 180
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 180
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 397
;396: 
;397:  	  	frac = (ATMOSPHERIC_CUTHEIGHT - particle->minz + frac) / (float)ATMOSPHERIC_CUTHEIGHT;
ADDRLP4 184
CNSTF4 1145569280
ASGNF4
ADDRLP4 160
ADDRLP4 184
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 160
INDIRF4
ADDF4
ADDRLP4 184
INDIRF4
DIVF4
ASGNF4
line 410
;398:  	  	  
;399:  	  	// Solid splash
;400:	/*	if( cg_atmFx.effectlandshader && frac > 0 && frac < 1  ) 
;401:		{ 
;402:			if ( !(particle->surface & SURF_SNOWSTEPS) && random() < 0.3  )
;403:				CG_ImpactMark( cgs.media.burnMarkShaders[(int)(random()*2)], start, particle->surfacenormal, frac * 0.5,1,1,1,1,qfalse, 4,qfalse );
;404:
;405:			cg_atmFx.ParticleGenerate( particle, 1 );
;406:			return;
;407:  		} 
;408:			 */
;409:				 
;410:  	}   
LABELV $462
line 412
;411:
;412:	color = 255;
ADDRLP4 156
CNSTU1 255
ASGNU1
line 413
;413:	if ( len <= 0 )
ADDRLP4 152
INDIRF4
CNSTF4 0
GTF4 $471
line 414
;414:	{
line 415
;415:		int moo = len;
ADDRLP4 164
ADDRLP4 152
INDIRF4
CVFI4 4
ASGNI4
line 416
;416:		float alpha = 1;
ADDRLP4 168
CNSTF4 1065353216
ASGNF4
line 418
;417: 
;418:		len = 4;
ADDRLP4 152
CNSTF4 1082130432
ASGNF4
line 420
;419:
;420:		if ( moo <= 0 )
ADDRLP4 164
INDIRI4
CNSTI4 0
GTI4 $473
line 421
;421:		{
line 422
;422:			alpha = (test_x.value)+(moo)/test_x.value;
ADDRLP4 168
ADDRGP4 test_x+8
INDIRF4
ADDRLP4 164
INDIRI4
CVIF4 4
ADDRGP4 test_x+8
INDIRF4
DIVF4
ADDF4
ASGNF4
line 424
;423:
;424:			if ( moo < -test_x.value ) {
ADDRLP4 164
INDIRI4
CVIF4 4
ADDRGP4 test_x+8
INDIRF4
NEGF4
GEF4 $477
line 425
;425:				cg_atmFx.ParticleGenerate( particle, 1 ); 
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 cg_atmFx+184140
INDIRP4
CALLI4
pop
line 426
;426:				return;
ADDRGP4 $459
JUMPV
LABELV $477
line 428
;427:			}
;428:		}  
LABELV $473
line 429
;429:		color = (byte)(alpha * 255.0f); 
ADDRLP4 176
CNSTF4 1132396544
ADDRLP4 168
INDIRF4
MULF4
ASGNF4
ADDRLP4 180
CNSTF4 1325400064
ASGNF4
ADDRLP4 176
INDIRF4
ADDRLP4 180
INDIRF4
LTF4 $482
ADDRLP4 172
ADDRLP4 176
INDIRF4
ADDRLP4 180
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $483
JUMPV
LABELV $482
ADDRLP4 172
ADDRLP4 176
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $483
ADDRLP4 156
ADDRLP4 172
INDIRU4
CVUU1 4
ASGNU1
line 430
;430:	}
LABELV $471
line 432
;431:
;432:	if ( color > 255 )
ADDRLP4 156
INDIRU1
CVUI4 1
CNSTI4 255
LEI4 $484
line 433
;433:		color = 255;
ADDRLP4 156
CNSTU1 255
ASGNU1
LABELV $484
line 435
;434: 
;435:  	VectorCopy( particle->deltaNormalized, forward );
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 436
;436:  	VectorMA( start, -len, forward, finish );
ADDRLP4 164
ADDRLP4 152
INDIRF4
NEGF4
ASGNF4
ADDRLP4 132
ADDRLP4 108
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 120+4
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 120+8
INDIRF4
ADDRLP4 152
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 438
;437:  
;438:  	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 120
INDIRF4
ADDRGP4 cg+109044+36+12
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+109044+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+109044+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 439
;439:  	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 120
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 441
;440:
;441:  	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109044+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109044+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109044+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 442
;442:  	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 168
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 443
;443:  	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 446
;444:
;445:
;446:  	VectorMA( finish,  1, right, verts[0].xyz );
ADDRLP4 172
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 172
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 172
INDIRF4
ADDRLP4 96+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 96+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 447
;447:  	verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 448
;448:  	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 449
;449:  	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 450
;450:  	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 451
;451:  	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 452
;452:  	verts[0].modulate[3] = color;
ADDRLP4 0+20+3
ADDRLP4 156
INDIRU1
ASGNU1
line 454
;453:
;454:  	VectorMA( finish, -1, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
CNSTF4 3212836864
ADDRLP4 96
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
CNSTF4 3212836864
ADDRLP4 96+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
CNSTF4 3212836864
ADDRLP4 96+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 455
;455:  	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 456
;456:  	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 457
;457:  	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 458
;458:  	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 459
;459:  	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 460
;460:  	verts[1].modulate[3] = color;
ADDRLP4 0+24+20+3
ADDRLP4 156
INDIRU1
ASGNU1
line 462
;461:
;462:  	VectorMA( start, -1, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 108
INDIRF4
CNSTF4 3212836864
ADDRLP4 96
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 108+4
INDIRF4
CNSTF4 3212836864
ADDRLP4 96+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 108+8
INDIRF4
CNSTF4 3212836864
ADDRLP4 96+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 463
;463:  	verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 464
;464:  	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 465
;465:  	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 466
;466:  	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 467
;467:  	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 468
;468:  	verts[2].modulate[3] = color;
ADDRLP4 0+48+20+3
ADDRLP4 156
INDIRU1
ASGNU1
line 470
;469:
;470:  	VectorMA( start, 1, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 108
INDIRF4
CNSTF4 1065353216
ADDRLP4 96
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 108+4
INDIRF4
CNSTF4 1065353216
ADDRLP4 96+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 108+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 96+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 471
;471:  	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 472
;472:  	verts[3].st[1] = 1;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 473
;473:  	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 474
;474:  	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 475
;475:  	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 476
;476:  	verts[3].modulate[3] = color;
ADDRLP4 0+72+20+3
ADDRLP4 156
INDIRU1
ASGNU1
line 479
;477:
;478://  	trap_R_AddPolyToScene( trap_R_RegisterShader("gfx/misc/particle_08.tga"), 4, verts ); 
;479:  	trap_R_AddPolyToScene( *particle->effectshader, 4, verts ); 
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 480
;480:} 
LABELV $459
endproc CG_SnowParticleRender 188 12
proc CG_EffectGust 32 0
line 486
;481:/*
;482:**  	Set up gust parameters.
;483:*/
;484:
;485:static void CG_EffectGust()
;486:{
line 491
;487:  	// Generate random values for the next gust
;488:
;489:  	int diff;
;490:
;491:  	cg_atmFx.baseEndTime  	  	= cg.time  	  	  	  	  	+ cg_atmFx.baseMinTime  	  	+ (rand() % (cg_atmFx.baseMaxTime - cg_atmFx.baseMinTime));
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184052
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184072
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
ADDRGP4 cg_atmFx+184076
INDIRI4
ADDRGP4 cg_atmFx+184072
INDIRI4
SUBI4
MODI4
ADDI4
ASGNI4
line 492
;492:  	diff  	  	  	  	  	  	= cg_atmFx.changeMaxTime  	- cg_atmFx.changeMinTime;
ADDRLP4 0
ADDRGP4 cg_atmFx+184068
INDIRI4
ADDRGP4 cg_atmFx+184064
INDIRI4
SUBI4
ASGNI4
line 493
;493:  	cg_atmFx.gustStartTime  	= cg_atmFx.baseEndTime  	  	+ cg_atmFx.changeMinTime  	+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $653
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $654
JUMPV
LABELV $653
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $654
ADDRGP4 cg_atmFx+184040
ADDRGP4 cg_atmFx+184052
INDIRI4
ADDRGP4 cg_atmFx+184064
INDIRI4
ADDI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 494
;494:  	diff  	  	  	  	  	  	= cg_atmFx.gustMaxTime  	  	- cg_atmFx.gustMinTime;
ADDRLP4 0
ADDRGP4 cg_atmFx+184060
INDIRI4
ADDRGP4 cg_atmFx+184056
INDIRI4
SUBI4
ASGNI4
line 495
;495:  	cg_atmFx.gustEndTime  	  	= cg_atmFx.gustStartTime  	+ cg_atmFx.gustMinTime  	  	+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $661
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $662
JUMPV
LABELV $661
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $662
ADDRGP4 cg_atmFx+184044
ADDRGP4 cg_atmFx+184040
INDIRI4
ADDRGP4 cg_atmFx+184056
INDIRI4
ADDI4
ADDRLP4 16
INDIRI4
ADDI4
ASGNI4
line 496
;496:  	diff  	  	  	  	  	  	= cg_atmFx.changeMaxTime  	- cg_atmFx.changeMinTime;
ADDRLP4 0
ADDRGP4 cg_atmFx+184068
INDIRI4
ADDRGP4 cg_atmFx+184064
INDIRI4
SUBI4
ASGNI4
line 497
;497:  	cg_atmFx.baseStartTime  	  	= cg_atmFx.gustEndTime  	  	+ cg_atmFx.changeMinTime  	+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $669
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 28
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $670
JUMPV
LABELV $669
ADDRLP4 24
CNSTI4 0
ASGNI4
LABELV $670
ADDRGP4 cg_atmFx+184048
ADDRGP4 cg_atmFx+184044
INDIRI4
ADDRGP4 cg_atmFx+184064
INDIRI4
ADDI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
line 498
;498:}
LABELV $641
endproc CG_EffectGust 32 0
proc CG_EffectGustCurrent 16 0
line 501
;499:
;500:static qboolean CG_EffectGustCurrent( vec3_t curr, float *weight, int *num )
;501:{
line 507
;502:  	// Calculate direction for new drops.
;503:
;504:  	vec3_t temp;
;505:  	float frac;
;506:
;507:  	if( cg.time < cg_atmFx.baseEndTime )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184052
INDIRI4
GEI4 $672
line 508
;508:  	{
line 509
;509:  	  	VectorCopy( cg_atmFx.baseVec, curr );
ADDRFP4 0
INDIRP4
ADDRGP4 cg_atmFx+184112
INDIRB
ASGNB 12
line 510
;510:  	  	*weight = cg_atmFx.baseWeight;
ADDRFP4 4
INDIRP4
ADDRGP4 cg_atmFx+184080
INDIRF4
ASGNF4
line 511
;511:  	  	*num = cg_atmFx.baseDrops;
ADDRFP4 8
INDIRP4
ADDRGP4 cg_atmFx+184088
INDIRI4
ASGNI4
line 512
;512:  	}
ADDRGP4 $673
JUMPV
LABELV $672
line 513
;513:  	else {
line 514
;514:  	  	VectorSubtract( cg_atmFx.gustVec, cg_atmFx.baseVec, temp );
ADDRLP4 0
ADDRGP4 cg_atmFx+184124
INDIRF4
ADDRGP4 cg_atmFx+184112
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 cg_atmFx+184124+4
INDIRF4
ADDRGP4 cg_atmFx+184112+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 cg_atmFx+184124+8
INDIRF4
ADDRGP4 cg_atmFx+184112+8
INDIRF4
SUBF4
ASGNF4
line 515
;515:  	  	if( cg.time < cg_atmFx.gustStartTime )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184040
INDIRI4
GEI4 $691
line 516
;516:  	  	{
line 517
;517:  	  	  	frac = ((float)(cg.time - cg_atmFx.baseEndTime))/((float)(cg_atmFx.gustStartTime - cg_atmFx.baseEndTime));
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184052
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg_atmFx+184040
INDIRI4
ADDRGP4 cg_atmFx+184052
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 518
;518:  	  	  	VectorMA( cg_atmFx.baseVec, frac, temp, curr );
ADDRFP4 0
INDIRP4
ADDRGP4 cg_atmFx+184112
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_atmFx+184112+4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg_atmFx+184112+8
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 519
;519:  	  	  	*weight = cg_atmFx.baseWeight + (cg_atmFx.gustWeight - cg_atmFx.baseWeight) * frac;
ADDRFP4 4
INDIRP4
ADDRGP4 cg_atmFx+184080
INDIRF4
ADDRGP4 cg_atmFx+184084
INDIRF4
ADDRGP4 cg_atmFx+184080
INDIRF4
SUBF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 520
;520:  	  	  	*num = cg_atmFx.baseDrops + ((float)(cg_atmFx.gustDrops - cg_atmFx.baseDrops)) * frac;
ADDRFP4 8
INDIRP4
ADDRGP4 cg_atmFx+184088
INDIRI4
CVIF4 4
ADDRGP4 cg_atmFx+184092
INDIRI4
ADDRGP4 cg_atmFx+184088
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 521
;521:  	  	}
ADDRGP4 $692
JUMPV
LABELV $691
line 522
;522:  	  	else if( cg.time < cg_atmFx.gustEndTime )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184044
INDIRI4
GEI4 $712
line 523
;523:  	  	{
line 524
;524:  	  	  	VectorCopy( cg_atmFx.gustVec, curr );
ADDRFP4 0
INDIRP4
ADDRGP4 cg_atmFx+184124
INDIRB
ASGNB 12
line 525
;525:  	  	  	*weight = cg_atmFx.gustWeight;
ADDRFP4 4
INDIRP4
ADDRGP4 cg_atmFx+184084
INDIRF4
ASGNF4
line 526
;526:  	  	  	*num = cg_atmFx.gustDrops;
ADDRFP4 8
INDIRP4
ADDRGP4 cg_atmFx+184092
INDIRI4
ASGNI4
line 527
;527:  	  	}
ADDRGP4 $713
JUMPV
LABELV $712
line 529
;528:  	  	else
;529:  	  	{
line 530
;530:  	  	  	frac = 1.0 - ((float)(cg.time - cg_atmFx.gustEndTime))/((float)(cg_atmFx.baseStartTime - cg_atmFx.gustEndTime));
ADDRLP4 12
CNSTF4 1065353216
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184044
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg_atmFx+184048
INDIRI4
ADDRGP4 cg_atmFx+184044
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 531
;531:  	  	  	VectorMA( cg_atmFx.baseVec, frac, temp, curr );
ADDRFP4 0
INDIRP4
ADDRGP4 cg_atmFx+184112
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_atmFx+184112+4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cg_atmFx+184112+8
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 532
;532:  	  	  	*weight = cg_atmFx.baseWeight + (cg_atmFx.gustWeight - cg_atmFx.baseWeight) * frac;
ADDRFP4 4
INDIRP4
ADDRGP4 cg_atmFx+184080
INDIRF4
ADDRGP4 cg_atmFx+184084
INDIRF4
ADDRGP4 cg_atmFx+184080
INDIRF4
SUBF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 533
;533:  	  	  	*num = cg_atmFx.baseDrops + ((float)(cg_atmFx.gustDrops - cg_atmFx.baseDrops)) * frac;
ADDRFP4 8
INDIRP4
ADDRGP4 cg_atmFx+184088
INDIRI4
CVIF4 4
ADDRGP4 cg_atmFx+184092
INDIRI4
ADDRGP4 cg_atmFx+184088
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 534
;534:  	  	  	if( cg.time >= cg_atmFx.baseStartTime )
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_atmFx+184048
INDIRI4
LTI4 $736
line 535
;535:  	  	  	  	return( qtrue );
CNSTI4 1
RETI4
ADDRGP4 $671
JUMPV
LABELV $736
line 536
;536:  	  	}
LABELV $713
LABELV $692
line 537
;537:  	}
LABELV $673
line 538
;538:  	return( qfalse );
CNSTI4 0
RETI4
LABELV $671
endproc CG_EffectGustCurrent 16 0
export CG_AddAtmosphericEffects
proc CG_AddAtmosphericEffects 40 12
line 546
;539:} 
;540:
;541:/*
;542:** Main render loop
;543:*/
;544:
;545:void CG_AddAtmosphericEffects()
;546:{
line 553
;547:  	// Add atmospheric effects (e.g. rain, snow etc.) to view
;548:
;549:  	int curr, max, currnum;
;550:  	cg_atmosphericParticle_t *particle;
;551:  	float currweight;
;552:
;553:  	if( cg_atmFx.numDrops <= 0 || cg_atmFx.numEffectShaders == 0 )
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 cg_atmFx+184036
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $745
ADDRGP4 cg_atmFx+184100
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $741
LABELV $745
line 554
;554:  	  	return;
ADDRGP4 $740
JUMPV
LABELV $741
line 556
;555:
;556:	if ( cg_atmosphericEffects.value <= 0 )
ADDRGP4 cg_atmosphericEffects+8
INDIRF4
CNSTF4 0
GTF4 $746
line 557
;557:		return;
ADDRGP4 $740
JUMPV
LABELV $746
line 559
;558:
;559:  	max = cg_lowEffects.integer ?  cg_atmFx.numDrops/2: cg_atmFx.numDrops;
ADDRGP4 cg_lowEffects+12
INDIRI4
CNSTI4 0
EQI4 $753
ADDRLP4 24
ADDRGP4 cg_atmFx+184036
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
ADDRGP4 $754
JUMPV
LABELV $753
ADDRLP4 24
ADDRGP4 cg_atmFx+184036
INDIRI4
ASGNI4
LABELV $754
ADDRLP4 8
ADDRLP4 24
INDIRI4
ASGNI4
line 561
;560:
;561:  	if( CG_EffectGustCurrent( currvec, &currweight, &currnum ) )
ADDRGP4 currvec
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 28
ADDRGP4 CG_EffectGustCurrent
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $755
line 562
;562:  	  	CG_EffectGust();  	  	  	// Recalculate gust parameters
ADDRGP4 CG_EffectGust
CALLV
pop
LABELV $755
line 564
;563:
;564:  	for( curr = 0; curr < max; curr++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $760
JUMPV
LABELV $757
line 565
;565:  	{
line 566
;566:  	  	particle = &cg_atmFx.particles[curr];
ADDRLP4 0
CNSTI4 92
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cg_atmFx
ADDP4
ASGNP4
line 567
;567:  	  	if( !cg_atmFx.ParticleCheckVisible( particle ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 cg_atmFx+184136
INDIRP4
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $761
line 568
;568:  	  	{
line 570
;569:  	  	  	// Effect has terminated / fallen from screen view 
;570:  	  	  	if( !particle->nextDropTime )
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
NEI4 $764
line 571
;571:  	  	  	{
line 573
;572:  	  	  	  	// Stop rain being synchronized 
;573:  	  	  	  	particle->nextDropTime = rand() % ATMOSPHERIC_DROPDELAY;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 36
INDIRI4
CNSTI4 100
MODI4
ASGNI4
line 574
;574:  	  	  	}
ADDRGP4 $765
JUMPV
LABELV $764
line 575
;575:  	  	  	else if( currnum < curr || particle->nextDropTime > cg.time )
ADDRLP4 16
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $769
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $766
LABELV $769
line 576
;576:  	  	  	  	continue;
ADDRGP4 $758
JUMPV
LABELV $766
LABELV $765
line 577
;577:  	  	  	if( !cg_atmFx.ParticleGenerate( particle, currweight ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 cg_atmFx+184140
INDIRP4
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $770
line 578
;578:  	  	  	{
line 581
;579:  	  	  	  	// Ensure it doesn't attempt to generate every frame, to prevent
;580:  	  	  	  	// 'clumping' when there's only a small sky area available.
;581:  	  	  	  	particle->nextDropTime = cg.time + ATMOSPHERIC_DROPDELAY;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 582
;582:  	  	  	  	continue;
ADDRGP4 $758
JUMPV
LABELV $770
line 584
;583:  	  	  	}
;584:  	  	}
LABELV $761
line 586
;585:
;586:  	  	cg_atmFx.ParticleRender( particle );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 cg_atmFx+184144
INDIRP4
CALLV
pop
line 587
;587:  	}
LABELV $758
line 564
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $760
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $757
line 589
;588:
;589:  	cg_atmFx.lastRainTime = cg.time;
ADDRGP4 cg_atmFx+184032
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 590
;590:}
LABELV $740
endproc CG_AddAtmosphericEffects 40 12
export CG_AtmosphericKludge
proc CG_AtmosphericKludge 4 0
line 599
;591:
;592:
;593:/*
;594:**  	G_AtmosphericKludge
;595:*/
;596:
;597:static qboolean kludgeChecked, kludgeResult;
;598:qboolean CG_AtmosphericKludge()
;599:{
line 603
;600:  	// Activate effects for specified kludge maps that don't
;601:  	// have it specified for them.
;602:
;603:  	if( kludgeChecked )
ADDRGP4 kludgeChecked
INDIRI4
CNSTI4 0
EQI4 $778
line 604
;604:  	  	return( kludgeResult );
ADDRGP4 kludgeResult
INDIRI4
RETI4
ADDRGP4 $777
JUMPV
LABELV $778
line 605
;605:  	kludgeChecked = qtrue;
ADDRGP4 kludgeChecked
CNSTI4 1
ASGNI4
line 606
;606:  	kludgeResult = qfalse;
ADDRGP4 kludgeResult
CNSTI4 0
ASGNI4
line 614
;607:
;608:  	/*if( !Q_stricmp( cgs.mapname, "maps/2night3.bsp" ) )
;609:  	{
;610:  	  	CG_EffectParse( "T=RAIN" );
;611:  	  	return( kludgeResult = qtrue );
;612:  	}*/
;613:
;614:  	return( kludgeResult = qfalse );
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 kludgeResult
ADDRLP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
RETI4
LABELV $777
endproc CG_AtmosphericKludge 4 0
export CG_EnviromentParse
proc CG_EnviromentParse 132 8
line 627
;615:}
;616:
;617:/*
;618:============
;619:dX: enviroment parse
;620:
;621:  parses the enviroment variables from the .bmf file 
;622:
;623:============
;624:*/
;625:
;626:void CG_EnviromentParse( char		*text_p )
;627:{
line 633
;628:	char		*token;
;629:	char *type;
;630:  	float bmin, bmax, cmin, cmax, gmin, gmax, bdrop, gdrop, wsplash, lsplash, height;
;631:  	int count;
;632:
;633:	if ( !text_p ) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $781
line 634
;634:		CG_Error("Tried to parse Enviroment Variables. text_p = NULL");
ADDRGP4 $783
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 635
;635:		return;
ADDRGP4 $780
JUMPV
LABELV $781
line 638
;636:	}
;637:
;638:	if( CG_AtmosphericKludge() )
ADDRLP4 56
ADDRGP4 CG_AtmosphericKludge
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $784
line 639
;639:  	  	return;
ADDRGP4 $780
JUMPV
LABELV $784
line 642
;640:
;641:	// Set up some default values
;642:  	cg_atmFx.baseVec[0] = cg_atmFx.baseVec[1] = 0;
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRGP4 cg_atmFx+184112+4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRGP4 cg_atmFx+184112
ADDRLP4 60
INDIRF4
ASGNF4
line 643
;643:  	cg_atmFx.gustVec[0] = cg_atmFx.gustVec[1] = 100;
ADDRLP4 64
CNSTF4 1120403456
ASGNF4
ADDRGP4 cg_atmFx+184124+4
ADDRLP4 64
INDIRF4
ASGNF4
ADDRGP4 cg_atmFx+184124
ADDRLP4 64
INDIRF4
ASGNF4
line 644
;644:  	bmin = 5;
ADDRLP4 12
CNSTF4 1084227584
ASGNF4
line 645
;645:  	bmax = 10;
ADDRLP4 16
CNSTF4 1092616192
ASGNF4
line 646
;646:  	cmin = 1;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 647
;647:  	cmax = 1;
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
line 648
;648:  	gmin = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 649
;649:  	gmax = 2;
ADDRLP4 32
CNSTF4 1073741824
ASGNF4
line 650
;650:  	bdrop = gdrop = 300;
ADDRLP4 68
CNSTF4 1133903872
ASGNF4
ADDRLP4 48
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 44
ADDRLP4 68
INDIRF4
ASGNF4
line 651
;651:  	cg_atmFx.baseWeight = 0.7f;
ADDRGP4 cg_atmFx+184080
CNSTF4 1060320051
ASGNF4
line 652
;652:  	cg_atmFx.gustWeight = 1.5f;
ADDRGP4 cg_atmFx+184084
CNSTF4 1069547520
ASGNF4
line 653
;653:  	wsplash = 1;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
line 654
;654:  	lsplash = 1;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
line 655
;655:	height	= 100;
ADDRLP4 52
CNSTF4 1120403456
ASGNF4
line 656
;656:  	type = NULL; 
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $795
JUMPV
LABELV $794
line 659
;657:
;658:	while ( 1 ) 
;659:	{ 
line 661
;660: 
;661:		token = COM_Parse( &text_p ); 
ADDRFP4 0
ARGP4
ADDRLP4 72
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
ASGNP4
line 663
;662:
;663:		if (!token) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $797
line 664
;664:			CG_Error("Invalid End-of-File. Missing '}'");
ADDRGP4 $799
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 665
;665:			break;
ADDRGP4 $796
JUMPV
LABELV $797
line 668
;666:		}
;667:
;668:		if ( !Q_stricmp( token, "}" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $802
ARGP4
ADDRLP4 76
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $800
line 669
;669:			break;
ADDRGP4 $796
JUMPV
LABELV $800
line 671
;670:
;671:		if ( !Q_stricmp( token, "type" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $805
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $803
line 672
;672:		{ // found type token
line 673
;673:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 84
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 84
INDIRP4
ASGNP4
line 675
;674:
;675:			if ( !Q_stricmp( token, "rain" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $808
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $806
line 676
;676:			{
line 677
;677:  	  	  	  	type = "rain";
ADDRLP4 8
ADDRGP4 $808
ASGNP4
line 678
;678:  	  	  	  	cg_atmFx.ParticleCheckVisible = &CG_RainParticleCheckVisible;
ADDRGP4 cg_atmFx+184136
ADDRGP4 CG_RainParticleCheckVisible
ASGNP4
line 679
;679:  	  	  	  	cg_atmFx.ParticleGenerate = &CG_RainParticleGenerate;
ADDRGP4 cg_atmFx+184140
ADDRGP4 CG_RainParticleGenerate
ASGNP4
line 680
;680:  	  	  	  	cg_atmFx.ParticleRender = &CG_RainParticleRender;
ADDRGP4 cg_atmFx+184144
ADDRGP4 CG_RainParticleRender
ASGNP4
line 682
;681:
;682:  	  	  	  	cg_atmFx.baseVec[2] = cg_atmFx.gustVec[2] = - ATMOSPHERIC_RAIN_SPEED;
ADDRLP4 92
CNSTF4 3294363648
ASGNF4
ADDRGP4 cg_atmFx+184124+8
ADDRLP4 92
INDIRF4
ASGNF4
ADDRGP4 cg_atmFx+184112+8
ADDRLP4 92
INDIRF4
ASGNF4
line 683
;683:			}
ADDRGP4 $795
JUMPV
LABELV $806
line 684
;684:			else if ( !Q_stricmp( token, "snow" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $818
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $816
line 685
;685:			{
line 686
;686:   	  	  	  	type = "snow";
ADDRLP4 8
ADDRGP4 $818
ASGNP4
line 687
;687:  	  	  	  	cg_atmFx.ParticleCheckVisible = &CG_RainParticleCheckVisible;
ADDRGP4 cg_atmFx+184136
ADDRGP4 CG_RainParticleCheckVisible
ASGNP4
line 688
;688:  	  	  	  	cg_atmFx.ParticleGenerate = &CG_SnowParticleGenerate;
ADDRGP4 cg_atmFx+184140
ADDRGP4 CG_SnowParticleGenerate
ASGNP4
line 689
;689:  	  	  	  	cg_atmFx.ParticleRender = &CG_SnowParticleRender;
ADDRGP4 cg_atmFx+184144
ADDRGP4 CG_SnowParticleRender
ASGNP4
line 690
;690:			}
ADDRGP4 $795
JUMPV
LABELV $816
line 692
;691:			else // !FIXME: Add more types here
;692:			{
line 693
;693:  	  	  	  	cg_atmFx.numDrops = 0;
ADDRGP4 cg_atmFx+184036
CNSTI4 0
ASGNI4
line 694
;694:  	  	  	  	CG_Printf( "Wrong effect type.\n" );
ADDRGP4 $823
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 695
;695:  	  	  	  	return;
ADDRGP4 $780
JUMPV
line 697
;696:			}
;697:			continue;
LABELV $803
line 699
;698:		} 
;699:		else if ( !Q_stricmp( token, "basetimes") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $826
ARGP4
ADDRLP4 84
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $824
line 700
;700:		{
line 701
;701:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 88
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 88
INDIRP4
ASGNP4
line 702
;702:			bmin = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 92
INDIRF4
ASGNF4
line 704
;703:
;704:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 96
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 705
;705:			bmax = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 100
INDIRF4
ASGNF4
line 706
;706:			continue;
ADDRGP4 $795
JUMPV
LABELV $824
line 708
;707:		}
;708:		else if ( !Q_stricmp( token, "timetomove") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $829
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $827
line 709
;709:		{
line 710
;710:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 92
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 92
INDIRP4
ASGNP4
line 711
;711:			cmin = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 96
INDIRF4
ASGNF4
line 713
;712:
;713:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 100
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 714
;714:			cmax = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 104
INDIRF4
ASGNF4
line 715
;715:			continue;
ADDRGP4 $795
JUMPV
LABELV $827
line 717
;716:		}
;717:		else if ( !Q_stricmp( token, "gusttimes") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $832
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $830
line 718
;718:		{
line 719
;719:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 96
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 720
;720:			gmin = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 100
INDIRF4
ASGNF4
line 722
;721:
;722:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 104
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 104
INDIRP4
ASGNP4
line 723
;723:			gmax = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 108
INDIRF4
ASGNF4
line 724
;724:			continue;
ADDRGP4 $795
JUMPV
LABELV $830
line 726
;725:		}
;726:		else if ( !Q_stricmp( token, "basevector") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $835
ARGP4
ADDRLP4 96
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $833
line 727
;727:		{  
line 728
;728:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 100
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 729
;729:			cg_atmFx.baseVec[0] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184112
ADDRLP4 104
INDIRF4
ASGNF4
line 731
;730:
;731:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 108
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 108
INDIRP4
ASGNP4
line 732
;732:			cg_atmFx.baseVec[1] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184112+4
ADDRLP4 112
INDIRF4
ASGNF4
line 733
;733:			continue;
ADDRGP4 $795
JUMPV
LABELV $833
line 735
;734:		}
;735:		else if ( !Q_stricmp( token, "gustvector") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $841
ARGP4
ADDRLP4 100
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
NEI4 $839
line 736
;736:		{  
line 737
;737:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 104
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 104
INDIRP4
ASGNP4
line 738
;738:			cg_atmFx.gustVec[0] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184124
ADDRLP4 108
INDIRF4
ASGNF4
line 740
;739:
;740:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 112
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 741
;741:			cg_atmFx.gustVec[1] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184124+4
ADDRLP4 116
INDIRF4
ASGNF4
line 742
;742:			continue;
ADDRGP4 $795
JUMPV
LABELV $839
line 744
;743:		} 
;744:		else if ( !Q_stricmp( token, "weight") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $847
ARGP4
ADDRLP4 104
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
NEI4 $845
line 745
;745:		{   
line 747
;746:
;747:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 108
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 108
INDIRP4
ASGNP4
line 748
;748:			cg_atmFx.baseWeight = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184080
ADDRLP4 112
INDIRF4
ASGNF4
line 750
;749:
;750:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 116
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 116
INDIRP4
ASGNP4
line 751
;751:			cg_atmFx.gustWeight = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 cg_atmFx+184084
ADDRLP4 120
INDIRF4
ASGNF4
line 752
;752:			continue;
ADDRGP4 $795
JUMPV
LABELV $845
line 754
;753:		}
;754:		else if ( !Q_stricmp( token, "impacteffects") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $852
ARGP4
ADDRLP4 108
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $850
line 755
;755:		{   
line 757
;756:
;757:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 112
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 112
INDIRP4
ASGNP4
line 758
;758:			if (!Q_stricmp( token, "true" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $855
ARGP4
ADDRLP4 116
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $853
line 759
;759:				wsplash = 1;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
ADDRGP4 $854
JUMPV
LABELV $853
line 761
;760:			else
;761:				wsplash = 0;
ADDRLP4 36
CNSTF4 0
ASGNF4
LABELV $854
line 763
;762:
;763:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 120
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 120
INDIRP4
ASGNP4
line 764
;764:			if (!Q_stricmp( token, "true" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $855
ARGP4
ADDRLP4 124
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 0
NEI4 $856
line 765
;765:				lsplash = 1;
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
ADDRGP4 $795
JUMPV
LABELV $856
line 767
;766:			else
;767:				lsplash = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 769
;768:
;769:			continue;
ADDRGP4 $795
JUMPV
LABELV $850
line 771
;770:		}
;771:		else if ( !Q_stricmp( token, "num_drops") )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $860
ARGP4
ADDRLP4 112
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $858
line 772
;772:		{   
line 774
;773:
;774:			token = COM_Parse( &text_p );			
ADDRFP4 0
ARGP4
ADDRLP4 116
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 116
INDIRP4
ASGNP4
line 775
;775:			bdrop = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 44
ADDRLP4 120
INDIRF4
ASGNF4
line 777
;776:
;777:			token = COM_Parse( &text_p );
ADDRFP4 0
ARGP4
ADDRLP4 124
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 124
INDIRP4
ASGNP4
line 778
;778:			gdrop = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 128
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 128
INDIRF4
ASGNF4
line 779
;779:			continue;
ADDRGP4 $795
JUMPV
LABELV $858
line 781
;780:		}
;781:		else if ( !Q_stricmp( token, "height" ) )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $863
ARGP4
ADDRLP4 116
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $861
line 782
;782:		{
line 783
;783:			height = atof(COM_Parse( &text_p ) );
ADDRFP4 0
ARGP4
ADDRLP4 120
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 52
ADDRLP4 124
INDIRF4
ASGNF4
line 784
;784:			continue;
ADDRGP4 $795
JUMPV
LABELV $861
line 787
;785:		}
;786:		else
;787:		{
line 788
;788:			CG_Error("Unknown token (%s).\n", token );
ADDRGP4 $864
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 789
;789:			break;
ADDRGP4 $796
JUMPV
LABELV $795
line 658
ADDRGP4 $794
JUMPV
LABELV $796
line 793
;790:		}
;791:	}
;792:
;793:	if( !type )
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $865
line 794
;794:  	{
line 796
;795:  	  	// No effects 
;796:  	  	cg_atmFx.numDrops = -1;
ADDRGP4 cg_atmFx+184036
CNSTI4 -1
ASGNI4
line 797
;797:  	  	return;
ADDRGP4 $780
JUMPV
LABELV $865
line 814
;798:	}  
;799:	/*
;800:  	cg_atmFx.baseVec[0] = cg_atmFx.baseVec[1] = 0;
;801:  	cg_atmFx.gustVec[0] = cg_atmFx.gustVec[1] = 100;
;802:  	bmin = 5;
;803:  	bmax = 10;
;804:  	cmin = 1;
;805:  	cmax = 1;
;806:  	gmin = 0;
;807:  	gmax = 2;
;808:  	bdrop = gdrop = 300;
;809:  	cg_atmFx.baseWeight = 0.7f;
;810:  	cg_atmFx.gustWeight = 1.5f;
;811:  	wsplash = 1;
;812:  	lsplash = 1;*/
;813:
;814:	cg_atmFx.baseMinTime	=	1000 * bmin;
ADDRGP4 cg_atmFx+184072
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 815
;815:  	cg_atmFx.baseMaxTime	=	1000 * bmax;
ADDRGP4 cg_atmFx+184076
CNSTF4 1148846080
ADDRLP4 16
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 816
;816:  	cg_atmFx.changeMinTime	=	1000 * cmin;
ADDRGP4 cg_atmFx+184064
CNSTF4 1148846080
ADDRLP4 20
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 817
;817:  	cg_atmFx.changeMaxTime	=	1000 * cmax;
ADDRGP4 cg_atmFx+184068
CNSTF4 1148846080
ADDRLP4 24
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 818
;818:  	cg_atmFx.gustMinTime	=	1000 * gmin;
ADDRGP4 cg_atmFx+184056
CNSTF4 1148846080
ADDRLP4 28
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 819
;819:  	cg_atmFx.gustMaxTime	=	1000 * gmax;
ADDRGP4 cg_atmFx+184060
CNSTF4 1148846080
ADDRLP4 32
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 820
;820:  	cg_atmFx.baseDrops		=	bdrop;
ADDRGP4 cg_atmFx+184088
ADDRLP4 44
INDIRF4
CVFI4 4
ASGNI4
line 821
;821:  	cg_atmFx.gustDrops		=	gdrop;
ADDRGP4 cg_atmFx+184092
ADDRLP4 48
INDIRF4
CVFI4 4
ASGNI4
line 822
;822:  	cg_atmFx.waterSplash	=	wsplash;
ADDRGP4 cg_atmFx+184104
ADDRLP4 36
INDIRF4
CVFI4 4
ASGNI4
line 823
;823:  	cg_atmFx.landSplash		=	lsplash;
ADDRGP4 cg_atmFx+184108
ADDRLP4 40
INDIRF4
CVFI4 4
ASGNI4
line 824
;824:	cg_atmFx.height			=	height;
ADDRGP4 cg_atmFx+184096
ADDRLP4 52
INDIRF4
ASGNF4
line 826
;825:
;826:  	cg_atmFx.numDrops = (cg_atmFx.baseDrops > cg_atmFx.gustDrops) ? cg_atmFx.baseDrops : cg_atmFx.gustDrops;
ADDRGP4 cg_atmFx+184088
INDIRI4
ADDRGP4 cg_atmFx+184092
INDIRI4
LEI4 $885
ADDRLP4 72
ADDRGP4 cg_atmFx+184088
INDIRI4
ASGNI4
ADDRGP4 $886
JUMPV
LABELV $885
ADDRLP4 72
ADDRGP4 cg_atmFx+184092
INDIRI4
ASGNI4
LABELV $886
ADDRGP4 cg_atmFx+184036
ADDRLP4 72
INDIRI4
ASGNI4
line 828
;827:
;828:  	if( cg_atmFx.numDrops > MAX_ATMOSPHERIC_PARTICLES )
ADDRGP4 cg_atmFx+184036
INDIRI4
CNSTI4 2000
LEI4 $887
line 829
;829:  	  	cg_atmFx.numDrops = MAX_ATMOSPHERIC_PARTICLES;
ADDRGP4 cg_atmFx+184036
CNSTI4 2000
ASGNI4
LABELV $887
line 836
;830:
;831:	//
;832:  	// Load graphics
;833:	//
;834:
;835:  	// Rain
;836:  	if( !Q_stricmp(type , "rain" ) ) {
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $808
ARGP4
ADDRLP4 76
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $891
line 837
;837:  	  	cg_atmFx.numEffectShaders = 1;
ADDRGP4 cg_atmFx+184100
CNSTI4 1
ASGNI4
line 839
;838:		
;839:		cg_atmFx.effectshaders[0] = trap_R_RegisterShader( "gfx/atmosphere/raindrop" );
ADDRGP4 $895
ARGP4
ADDRLP4 80
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184000
ADDRLP4 80
INDIRI4
ASGNI4
line 841
;840:
;841:  	  	if( !(cg_atmFx.effectshaders[0]) )
ADDRGP4 cg_atmFx+184000
INDIRI4
CNSTI4 0
NEI4 $896
line 842
;842:  	  	  	cg_atmFx.effectshaders[0] = -1;
ADDRGP4 cg_atmFx+184000
CNSTI4 -1
ASGNI4
LABELV $896
line 844
;843:
;844:  	  	if( cg_atmFx.waterSplash )
ADDRGP4 cg_atmFx+184104
INDIRI4
CNSTI4 0
EQI4 $900
line 845
;845:  	  	  	cg_atmFx.effectwatershader = trap_R_RegisterShader( "gfx/atmosphere/raindropwater" );
ADDRGP4 $904
ARGP4
ADDRLP4 84
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184024
ADDRLP4 84
INDIRI4
ASGNI4
LABELV $900
line 846
;846:  	  	if( cg_atmFx.landSplash )
ADDRGP4 cg_atmFx+184108
INDIRI4
CNSTI4 0
EQI4 $892
line 847
;847:  	  	  	cg_atmFx.effectlandshader = trap_R_RegisterShader( "gfx/atmosphere/raindropsolid" );
ADDRGP4 $909
ARGP4
ADDRLP4 88
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184028
ADDRLP4 88
INDIRI4
ASGNI4
line 848
;848:   	} // Snow
ADDRGP4 $892
JUMPV
LABELV $891
line 849
;849:	else if( !Q_stricmp(type , "snow" ) ) 
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $818
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $910
line 850
;850:	{
line 851
;851:  	  	for( cg_atmFx.numEffectShaders = 0; cg_atmFx.numEffectShaders < 6; cg_atmFx.numEffectShaders++ ) 
ADDRGP4 cg_atmFx+184100
CNSTI4 0
ASGNI4
ADDRGP4 $915
JUMPV
LABELV $912
line 852
;852:		{
line 853
;853:			cg_atmFx.effectshaders[cg_atmFx.numEffectShaders] = trap_R_RegisterShader( va("gfx/atmosphere/snowflake0%i", cg_atmFx.numEffectShaders ) );
ADDRGP4 $921
ARGP4
ADDRGP4 cg_atmFx+184100
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184100
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_atmFx+184000
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 855
;854:
;855:  	  	  	if( !( cg_atmFx.effectshaders[cg_atmFx.numEffectShaders] ) )
ADDRGP4 cg_atmFx+184100
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_atmFx+184000
ADDP4
INDIRI4
CNSTI4 0
NEI4 $923
line 856
;856:  	  	  	  	cg_atmFx.effectshaders[cg_atmFx.numEffectShaders] = -1;  	// we had some kind of a problem
ADDRGP4 cg_atmFx+184100
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg_atmFx+184000
ADDP4
CNSTI4 -1
ASGNI4
LABELV $923
line 857
;857:  	  	}
LABELV $913
line 851
ADDRLP4 84
ADDRGP4 cg_atmFx+184100
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $915
ADDRGP4 cg_atmFx+184100
INDIRI4
CNSTI4 6
LTI4 $912
line 858
;858:  	  	cg_atmFx.waterSplash = 0;
ADDRGP4 cg_atmFx+184104
CNSTI4 0
ASGNI4
line 859
;859:  	  	cg_atmFx.landSplash = 1; 
ADDRGP4 cg_atmFx+184108
CNSTI4 1
ASGNI4
line 861
;860:
;861:  	  	  	cg_atmFx.effectlandshader = trap_R_RegisterShader( "gfx/atmosphere/raindropsolid" );
ADDRGP4 $909
ARGP4
ADDRLP4 88
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cg_atmFx+184028
ADDRLP4 88
INDIRI4
ASGNI4
line 862
;862:  	} // This really should never happen
ADDRGP4 $911
JUMPV
LABELV $910
line 864
;863:	else
;864:  	  	cg_atmFx.numEffectShaders = 0;
ADDRGP4 cg_atmFx+184100
CNSTI4 0
ASGNI4
LABELV $911
LABELV $892
line 867
;865:
;866:  	  	// Initialise atmospheric effect to prevent all particles falling at the start
;867:  	for( count = 0; count < cg_atmFx.numDrops; count++ )
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $936
JUMPV
LABELV $933
line 868
;868:  	  	cg_atmFx.particles[count].nextDropTime = ATMOSPHERIC_DROPDELAY + (rand() % ATMOSPHERIC_DROPDELAY);
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
CNSTI4 100
ASGNI4
CNSTI4 92
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cg_atmFx+84
ADDP4
ADDRLP4 84
INDIRI4
ADDRLP4 88
INDIRI4
MODI4
ADDRLP4 88
INDIRI4
ADDI4
ASGNI4
LABELV $934
line 867
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $936
ADDRLP4 4
INDIRI4
ADDRGP4 cg_atmFx+184036
INDIRI4
LTI4 $933
line 870
;869:
;870:  	CG_EffectGust();
ADDRGP4 CG_EffectGust
CALLV
pop
line 874
;871:
;872:	
;873:
;874:}
LABELV $780
endproc CG_EnviromentParse 132 8
bss
align 4
LABELV kludgeResult
skip 4
align 4
LABELV kludgeChecked
skip 4
align 4
LABELV cg_atmFx
skip 184148
export currvec
align 4
LABELV currvec
skip 12
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $921
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 115
byte 1 110
byte 1 111
byte 1 119
byte 1 102
byte 1 108
byte 1 97
byte 1 107
byte 1 101
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $909
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 0
align 1
LABELV $904
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 119
byte 1 97
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $895
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 0
align 1
LABELV $864
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 111
byte 1 107
byte 1 101
byte 1 110
byte 1 32
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $863
byte 1 104
byte 1 101
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $860
byte 1 110
byte 1 117
byte 1 109
byte 1 95
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $855
byte 1 116
byte 1 114
byte 1 117
byte 1 101
byte 1 0
align 1
LABELV $852
byte 1 105
byte 1 109
byte 1 112
byte 1 97
byte 1 99
byte 1 116
byte 1 101
byte 1 102
byte 1 102
byte 1 101
byte 1 99
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $847
byte 1 119
byte 1 101
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $841
byte 1 103
byte 1 117
byte 1 115
byte 1 116
byte 1 118
byte 1 101
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $835
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 118
byte 1 101
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $832
byte 1 103
byte 1 117
byte 1 115
byte 1 116
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $829
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 116
byte 1 111
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 0
align 1
LABELV $826
byte 1 98
byte 1 97
byte 1 115
byte 1 101
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $823
byte 1 87
byte 1 114
byte 1 111
byte 1 110
byte 1 103
byte 1 32
byte 1 101
byte 1 102
byte 1 102
byte 1 101
byte 1 99
byte 1 116
byte 1 32
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 46
byte 1 10
byte 1 0
align 1
LABELV $818
byte 1 115
byte 1 110
byte 1 111
byte 1 119
byte 1 0
align 1
LABELV $808
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $805
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $802
byte 1 125
byte 1 0
align 1
LABELV $799
byte 1 73
byte 1 110
byte 1 118
byte 1 97
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 69
byte 1 110
byte 1 100
byte 1 45
byte 1 111
byte 1 102
byte 1 45
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 46
byte 1 32
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 110
byte 1 103
byte 1 32
byte 1 39
byte 1 125
byte 1 39
byte 1 0
align 1
LABELV $783
byte 1 84
byte 1 114
byte 1 105
byte 1 101
byte 1 100
byte 1 32
byte 1 116
byte 1 111
byte 1 32
byte 1 112
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 32
byte 1 69
byte 1 110
byte 1 118
byte 1 105
byte 1 114
byte 1 111
byte 1 109
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 86
byte 1 97
byte 1 114
byte 1 105
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 115
byte 1 46
byte 1 32
byte 1 116
byte 1 101
byte 1 120
byte 1 116
byte 1 95
byte 1 112
byte 1 32
byte 1 61
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
align 1
LABELV $90
byte 1 67
byte 1 71
byte 1 95
byte 1 69
byte 1 102
byte 1 102
byte 1 101
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
