code
proc CG_EjectBrass 148 8
file "../cg_weapons.c"
line 28
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2:// u
;3://
;4:// cg_weapons.c -- events and effects dealing with weapons
;5:
;6:// every line of code that differs from the quake3:arena SDK
;7:// is property of manfred nerurkar
;8:// no commercial explotation allowed
;9:// you are only allowed to use this code in navy seals: covert operations 
;10:// a quake3 arena modifiation
;11:// defcon-x@ns-co.net
;12:
;13:#include "cg_local.h"
;14:
;15:#include "variables.h"
;16:
;17:
;18://#include "cg_seals.h"
;19:#define METALSPARK ( WP_NUM_WEAPONS + 1)
;20: 
;21:#define MACMILLAN_BRASS_EJECTTIME	1000
;22:#define SW629_BRASS_EJECTTIME		1545
;23:extern vmCvar_t cg_smallGuns;
;24:
;25:// first shot
;26:qboolean firstshot;
;27:
;28:static void CG_EjectBrass( centity_t *cent, vec3_t origin, brasstype_t bType, qboolean firstperson  ) {
line 33
;29:	localEntity_t	*le;
;30:	refEntity_t		*re;
;31:	vec3_t			velocity, xvelocity;
;32://	vec3_t			offset, xoffset;
;33:	float			waterScale = 1.0f;
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
line 34
;34:	qboolean		left = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 37
;35:	vec3_t			v[3];
;36:
;37:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $85
line 38
;38:		return;
ADDRGP4 $84
JUMPV
LABELV $85
line 41
;39:	}
;40:
;41:	le = CG_AllocLocalEntity();
ADDRLP4 76
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 76
INDIRP4
ASGNP4
line 42
;42:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 44
;43:
;44:	if ( bType == BRASS_PISTOL || bType == BRASS_PISTOL_LEFT || bType == BRASS_COLT )
ADDRLP4 80
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 1
EQI4 $91
ADDRLP4 80
INDIRI4
CNSTI4 2
EQI4 $91
ADDRLP4 80
INDIRI4
CNSTI4 7
NEI4 $88
LABELV $91
line 45
;45:		re->hModel = cgs.media.shellPistol;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+205084+316
INDIRI4
ASGNI4
ADDRGP4 $89
JUMPV
LABELV $88
line 46
;46:	else if ( bType == BRASS_RIFLE || bType == BRASS_RIFLE_LEFT)
ADDRLP4 84
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 3
EQI4 $96
ADDRLP4 84
INDIRI4
CNSTI4 4
NEI4 $94
LABELV $96
line 47
;47:		re->hModel = cgs.media.shellRifle;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+205084+312
INDIRI4
ASGNI4
ADDRGP4 $95
JUMPV
LABELV $94
line 48
;48:	else if ( bType == BRASS_SHOTGUN || bType == BRASS_SHOTGUN_LEFT)
ADDRLP4 88
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 5
EQI4 $101
ADDRLP4 88
INDIRI4
CNSTI4 6
NEI4 $84
LABELV $101
line 49
;49:		re->hModel = cgs.media.shellShotgun;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+205084+320
INDIRI4
ASGNI4
line 51
;50:	else
;51:		return;
LABELV $100
LABELV $95
LABELV $89
line 53
;52:
;53:	if ( bType == BRASS_PISTOL_LEFT || bType == BRASS_RIFLE_LEFT || bType == BRASS_SHOTGUN_LEFT )
ADDRLP4 92
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
EQI4 $107
ADDRLP4 92
INDIRI4
CNSTI4 4
EQI4 $107
ADDRLP4 92
INDIRI4
CNSTI4 6
NEI4 $104
LABELV $107
line 54
;54:		left = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
LABELV $104
line 56
;55:
;56:	velocity[0] = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 57
;57:	velocity[1] = -30 + 5 * crandom();
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3253731328
ADDF4
ASGNF4
line 58
;58:	velocity[2] = 100 + 5 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4+8
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 62
;59:/// 	velocity[1] = -30 + 20 * crandom();
;60://	velocity[2] = 100 + 25 * crandom();
;61:
;62:	if ( bType == BRASS_COLT )
ADDRFP4 8
INDIRI4
CNSTI4 7
NEI4 $110
line 63
;63:		VectorClear( velocity );
ADDRLP4 104
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 104
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 104
INDIRF4
ASGNF4
LABELV $110
line 65
;64:
;65:	if ( left )
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $114
line 66
;66:		velocity[1] *= -1;
ADDRLP4 4+4
CNSTF4 3212836864
ADDRLP4 4+4
INDIRF4
MULF4
ASGNF4
LABELV $114
line 68
;67:
;68:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 69
;69:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 70
;70:	if ( cg_brassTime.integer == -1 )
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 -1
NEI4 $118
line 71
;71:		le->endTime = le->startTime + 65535;// a buncha
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 65535
ADDI4
ASGNI4
ADDRGP4 $119
JUMPV
LABELV $118
line 73
;72:	else
;73:		le->endTime = le->startTime + cg_brassTime.integer ;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
ASGNI4
LABELV $119
line 76
;74:
;75:	
;76:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 77
;77:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 80
;78:
;79:	
;80:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 82
;81: 
;82:	VectorCopy( origin, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 83
;83:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 85
;84:
;85:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $123
line 86
;86:		waterScale = 0.10f;
ADDRLP4 68
CNSTF4 1036831949
ASGNF4
line 87
;87:	}
LABELV $123
line 89
;88:
;89:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 52
ADDRLP4 4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 16+12
INDIRF4
MULF4
ADDF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 16+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 90
;90:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 52+4
ADDRLP4 4
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 16+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 16+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 91
;91:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 52+8
ADDRLP4 4
INDIRF4
ADDRLP4 16+8
INDIRF4
MULF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 16+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 16+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 94
;92: 
;93:
;94:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 52
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 52+4
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 52+8
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
line 96
;95:
;96:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 98
;97:
;98: 	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1053609165
ADDRLP4 68
INDIRF4
MULF4
ASGNF4
line 100
;99:
;100:	VectorCopy( cent->lerpAngles , le->angles.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 712
ADDP4
INDIRB
ASGNB 12
line 102
;101:
;102:	le->angles.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 5
ASGNI4
line 103
;103:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 105
;104:
;105:	le->angles.trDuration = 0; 
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
CNSTI4 0
ASGNI4
line 108
;106:		
;107:	// let them spin around
;108:	le->angles.trDelta[0] = crandom()*200;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 109
;109:	le->angles.trDelta[1] = crandom()*200;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1128792064
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 112
;110:
;111:	// make them look real
;112:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 113
;113:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 114
;114:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 116
;115:
;116:	if ( firstperson )
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $148
line 117
;117:	{
line 118
;118:		le->leFlags |= LEF_3RDPERSON;
ADDRLP4 132
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 121
;119:
;120:		// "real" physics
;121:	 	VectorAdd( le->pos.trDelta, cg.snap->ps.velocity, le->pos.trDelta );	
ADDRLP4 136
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 140
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 144
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDF4
ASGNF4
line 122
;122:	}
LABELV $148
line 123
;123:} 
LABELV $84
endproc CG_EjectBrass 148 8
proc CG_SmokeGrenade 100 48
line 127
;124:  
;125:
;126:static void CG_SmokeGrenade( centity_t *ent, const weaponInfo_t *wi )
;127:{
line 137
;128:	int		step;
;129:	vec3_t	origin, lastPos;
;130:	int		t;
;131:	int		startTime, contents;
;132:	int		lastContents;
;133:	entityState_t	*es;
;134:	vec3_t	up;
;135:	localEntity_t	*smoke;
;136:
;137:	up[0] = random()*2;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 138
;138:	up[1] = random()*2;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28+4
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 139
;139:	up[2] = random()*10;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28+8
CNSTF4 1092616192
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 141
;140:
;141:	step = 35;
ADDRLP4 20
CNSTI4 35
ASGNI4
line 143
;142:
;143:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 144
;144:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
ASGNI4
line 145
;145:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 147
;146:
;147:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 148
;148:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 80
INDIRI4
ASGNI4
line 150
;149:
;150: 	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 151
;151:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 84
INDIRI4
ASGNI4
line 153
;152:
;153:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 155
;154:
;155:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $165
line 156
;156:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $153
line 157
;157:			CG_BubbleTrail( lastPos, origin, 4 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1082130432
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 158
;158:		}
line 159
;159:		return;
ADDRGP4 $153
JUMPV
line 162
;160:	}
;161:
;162:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $162
line 163
;163:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 166
;164:  
;165:
;166:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1133903872
ARGF4
ADDRLP4 88
CNSTF4 1065353216
ASGNF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
CNSTF4 1161527296
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 92
CNSTI4 0
ASGNI4
ADDRLP4 92
INDIRI4
ARGI4
ADDRLP4 92
INDIRI4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 96
INDIRP4
ASGNP4
line 174
;167:					    300, 
;168:					  1, 1, 1, 1,
;169:					  3000, 
;170:					  cg.time,
;171:					  0, 0,
;172:					  cgs.media.smokePuffShader );
;173:		// use the optimized local entity add
;174:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 175
;175:	}
LABELV $163
line 162
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $165
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
LEI4 $162
line 176
;176:}
LABELV $153
endproc CG_SmokeGrenade 100 48
proc CG_40mmGrenadeTrail 92 48
line 183
;177:
;178:/*
;179:==========================
;180:CG_40mmGrenadeTrail
;181:==========================
;182:*/
;183:static void CG_40mmGrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 193
;184:	int		step;
;185:	vec3_t	origin, lastPos;
;186:	int		t;
;187:	int		startTime, contents;
;188:	int		lastContents;
;189:	entityState_t	*es;
;190:	vec3_t	up;
;191:	localEntity_t	*smoke;
;192:
;193:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 194
;194:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 195
;195:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 197
;196:
;197:	step = 35;
ADDRLP4 20
CNSTI4 35
ASGNI4
line 199
;198:
;199:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 200
;200:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
ASGNI4
line 201
;201:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 203
;202:
;203:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 204
;204:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 207
;205:
;206:	// if object (e.g. grenade) is stationary, don't toss up smoke
;207:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $173
line 208
;208:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 209
;209:		return;
ADDRGP4 $169
JUMPV
LABELV $173
line 212
;210:	}
;211:
;212:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 213
;213:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 215
;214:
;215:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 217
;216:
;217:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $184
line 218
;218:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $169
line 219
;219:			CG_BubbleTrail( lastPos, origin, 4 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1082130432
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 220
;220:		}
line 221
;221:		return;
ADDRGP4 $169
JUMPV
line 224
;222:	}
;223:
;224:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $181
line 225
;225:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 228
;226:  
;227:
;228:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 276
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 280
ADDP4
INDIRF4
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 236
;229:					  wi->trailRadius, 
;230:					  1, 1, 1, 0.33f,
;231:					  wi->wiTrailTime, 
;232:					  cg.time,
;233:					  0, 0,
;234:					  cgs.media.smokePuffShader );
;235:		// use the optimized local entity add
;236:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 237
;237:	}
LABELV $182
line 224
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $184
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
LEI4 $181
line 239
;238:
;239:} 
LABELV $169
endproc CG_40mmGrenadeTrail 92 48
export CG_GrappleTrail
proc CG_GrappleTrail 184 16
line 245
;240:/*
;241:==========================
;242:CG_GrappleTrail
;243:==========================
;244:*/
;245:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 251
;246:	vec3_t	origin;
;247:	entityState_t	*es;
;248:	vec3_t			forward, up;
;249:	refEntity_t		beam;
;250:
;251:	es = &ent->currentState;
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
line 253
;252:
;253:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 164
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 152
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 254
;254:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 456
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 256
;255:
;256:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 258
;257:	//FIXME adjust for muzzle position
;258:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
CNSTI4 728
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+700
ADDP4
INDIRB
ASGNB 12
line 259
;259:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 260
;260:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
CNSTI4 728
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+712
ADDP4
ARGP4
ADDRLP4 168
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 261
;261:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
CNSTF4 3233808384
ADDRLP4 140
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 3233808384
ADDRLP4 140+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 3233808384
ADDRLP4 140+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 262
;262:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 152
INDIRB
ASGNB 12
line 264
;263:
;264:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 180
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 180
INDIRF4
CNSTF4 1115684864
GEF4 $209
line 265
;265:		return; // Don't draw if close
ADDRGP4 $188
JUMPV
LABELV $209
line 267
;266:
;267:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 268
;268:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+205084+28
INDIRI4
ASGNI4
line 270
;269:
;270:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 271
;271:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 272
;272:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 273
;273:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 274
;274:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 275
;275:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 276
;276:}
LABELV $188
endproc CG_GrappleTrail 184 16
export CG_RegisterWeapon
proc CG_RegisterWeapon 616 16
line 298
;277:
;278:#if 0
;279:/*
;280:==========================
;281:CG_GrenadeTrail
;282:==========================
;283:*/
;284:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
;285:	CG_RocketTrail( ent, wi );
;286:}
;287:#endif
;288:
;289:
;290:/*
;291:=================
;292:CG_RegisterWeapon
;293:
;294:The server says this item is used on this level
;295:=================
;296:*/
;297:void CG_RegisterWeapon( int weaponNum ) 
;298:{
line 305
;299:	weaponInfo_t	*weaponInfo;
;300:	gitem_t			*item;
;301:	char			path[MAX_QPATH];
;302://	vec3_t			mins, maxs;
;303:	int				i; 
;304:
;305:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 0
CNSTI4 296
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 307
;306:
;307:	if ( weaponNum == 0 ) { 
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $225
line 308
;308:		return;
ADDRGP4 $224
JUMPV
LABELV $225
line 311
;309:	}
;310:
;311:	if ( weaponInfo->registered ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $227
line 312
;312:		return;
ADDRGP4 $224
JUMPV
LABELV $227
line 315
;313:	}
;314:
;315:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 296
ARGI4
ADDRGP4 memset
CALLP4
pop
line 316
;316:	weaponInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 318
;317: 
;318:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 72
ADDRGP4 bg_itemlist+56
ASGNP4
ADDRGP4 $232
JUMPV
LABELV $229
line 319
;319:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 72
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $234
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $234
line 320
;320:			weaponInfo->item = item;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 72
INDIRP4
ASGNP4
line 321
;321:			break;
ADDRGP4 $231
JUMPV
LABELV $234
line 323
;322:		}
;323:	}
LABELV $230
line 318
ADDRLP4 72
ADDRLP4 72
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
LABELV $232
ADDRLP4 72
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $229
LABELV $231
line 324
;324:	if ( !item->classname ) {
ADDRLP4 72
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $236
line 325
;325:		CG_Error( "Couldn't find weapon %i", weaponNum );
ADDRGP4 $238
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 326
;326:	}
LABELV $236
line 327
;327:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 72
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 331
;328:
;329:	// load cmodel before model so filecache works
;330:
;331:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 232
ADDP4
ADDRLP4 76
INDIRI4
ASGNI4
line 334
;332://	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
;333:
;334:	weaponInfo->reloadSound = 0;
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
CNSTI4 0
ASGNI4
line 335
;335:	weaponInfo->reloadEmptySound = 0;
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
CNSTI4 0
ASGNI4
line 336
;336:	weaponInfo->ejectBrassNum = 0;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 0
ASGNI4
line 337
;337:	weaponInfo->kickBack = 2;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 2
ASGNI4
line 353
;338:
;339:	/*
;340:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
;341:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
;342:			break;
;343:		}
;344:	} 
;345:	if ( ammo->classname && ammo->world_model[0] ) {
;346:		weaponInfo->ammoModel = trap_R_RegisterModel( ammo->world_model[0] );
;347:	}
;348:*/
;349:	/* ==========
;350:		Muzzle Flash
;351:		==========
;352:		*/
;353:	if ( BG_IsPrimary( weaponNum) || BG_IsSecondary( weaponNum ) && weaponNum != WP_SL8SD )
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $241
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $239
ADDRFP4 0
INDIRI4
CNSTI4 24
EQI4 $239
LABELV $241
line 354
;354:	{
line 355
;355:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 356
;356:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 357
;357:		strcat( path, "_flash.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $242
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 358
;358:		weaponInfo->flashModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 88
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 360
;359:
;360:		if ( !weaponInfo->flashModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CNSTI4 0
NEI4 $243
line 362
;361:			// new default ;
;362:			CG_Printf("Couldn't register: Flash Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $245
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 363
;363:		}
LABELV $243
line 364
;364:	}
LABELV $239
line 370
;365:
;366:	/* ==========
;367:		Scope
;368:		==========
;369:		*/
;370:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_SCOPE ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $246
line 371
;371:	{
line 372
;372:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 373
;373:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 374
;374:		strcat( path, "_scope.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $248
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 375
;375:		weaponInfo->scopeModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 92
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 377
;376:		// vweap
;377:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 378
;378:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 379
;379:		strcat( path, "_scope_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $249
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 380
;380:		weaponInfo->v_scopeModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 96
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 382
;381:
;382:		if ( !weaponInfo->scopeModel  ) {
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
NEI4 $250
line 384
;383:			// new default ;
;384:			CG_Printf("Couldn't register: Scope Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $252
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 385
;385:		}
LABELV $250
line 386
;386:	}
LABELV $246
line 392
;387:
;388:	/* ==========
;389:		Laser sight Model
;390:		==========
;391:		*/
;392:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_LASER ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $253
line 393
;393:	{
line 394
;394:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 395
;395:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 396
;396:		strcat( path, "_laser.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $255
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 397
;397:		weaponInfo->lasersightModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 96
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 399
;398:		// vweap
;399:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 400
;400:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 401
;401:		strcat( path, "_laser_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $256
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 402
;402:		weaponInfo->v_lasersightModel = trap_R_RegisterModel( path ); 
ADDRLP4 4
ARGP4
ADDRLP4 100
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 404
;403:
;404:		if ( !weaponInfo->lasersightModel  ) {
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 0
NEI4 $257
line 406
;405:			// new default ;
;406:			CG_Printf("Couldn't register: Lasersight Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $259
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 407
;407:		}
LABELV $257
line 408
;408:	}
LABELV $253
line 414
;409:
;410:	/* ==========
;411:		Silencer Model
;412:		==========
;413:		*/
;414:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_SILENCER ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $260
line 415
;415:	{
line 416
;416:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 417
;417:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 418
;418:		strcat( path, "_silencer.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $262
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 419
;419:		weaponInfo->silencerModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 100
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 421
;420:		// vweap
;421:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 422
;422:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 423
;423:		strcat( path, "_silencer_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $263
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 424
;424:		weaponInfo->v_silencerModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 426
;425:
;426:		if ( !weaponInfo->silencerModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
NEI4 $264
line 428
;427:			// new default ;
;428:			CG_Printf("Couldn't register: Silencer Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $266
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 429
;429:		}
LABELV $264
line 430
;430:	}
LABELV $260
line 436
;431:
;432:	/* ==========
;433:		Flashlight Model
;434:		==========
;435:		*/
;436:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_FLASHLIGHT ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $267
line 437
;437:	{
line 438
;438:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 439
;439:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 440
;440:		strcat( path, "_flashlight.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $269
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 441
;441:		weaponInfo->glModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 443
;442:		// vweap
;443:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 444
;444:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 445
;445:		strcat( path, "_flashlight_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $270
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 446
;446:		weaponInfo->v_glModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 448
;447:
;448:		if ( !weaponInfo->glModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $271
line 450
;449:			// new default ;
;450:			CG_Printf("Couldn't register: Flashlight Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $273
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 451
;451:		}
LABELV $271
line 452
;452:	}
LABELV $267
line 458
;453:
;454:	/* ==========
;455:		Duckbill Model
;456:		==========
;457:		*/
;458:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_DUCKBILL ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $274
line 459
;459:	{
line 460
;460:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 461
;461:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 462
;462:		strcat( path, "_duckbill.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $276
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 463
;463:		weaponInfo->silencerModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 465
;464:		// vweap
;465:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 466
;466:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 467
;467:		strcat( path, "_duckbill_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $277
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 468
;468:		weaponInfo->v_silencerModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 470
;469:
;470:		if ( !weaponInfo->silencerModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
NEI4 $278
line 472
;471:			// new default ;
;472:			CG_Printf("Couldn't register: Duckbill Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $280
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 473
;473:		}
LABELV $278
line 474
;474:	}
LABELV $274
line 480
;475:
;476:	/* ==========
;477:		Bayonet Model
;478:		==========
;479:		*/
;480:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_BAYONET ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $281
line 481
;481:	{
line 483
;482:
;483:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 484
;484:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 485
;485:		strcat( path, "_bayonet.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $283
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 486
;486:		weaponInfo->bayonetModel = trap_R_RegisterModel( path );  
ADDRLP4 4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 488
;487:		// vweap
;488:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 489
;489:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 490
;490:		strcat( path, "_bayonet_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $284
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 491
;491:		weaponInfo->v_bayonetModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 116
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 493
;492:
;493:		if ( !weaponInfo->bayonetModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
NEI4 $285
line 495
;494:			// new default ;
;495:			CG_Printf("Couldn't register: Bayonet Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $287
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 496
;496:		}
LABELV $285
line 497
;497:	}
LABELV $281
line 504
;498: 
;499:	/* ==========
;500:		GrenadeLauncher Model
;501:		==========
;502:		*/
;503:
;504:	if ( BG_WeaponMods( weaponNum ) & ( 1 << WM_GRENADELAUNCHER ) ) 
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $288
line 505
;505:	{
line 506
;506:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 507
;507:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 508
;508:		if ( item->giTag == WP_M4 )
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 16
NEI4 $290
line 509
;509:			strcat( path, "_m203_1stperson.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $292
ARGP4
ADDRGP4 strcat
CALLP4
pop
ADDRGP4 $291
JUMPV
LABELV $290
line 511
;510:		else
;511:			strcat( path, "_bg15_1stperson.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $293
ARGP4
ADDRGP4 strcat
CALLP4
pop
LABELV $291
line 513
;512:
;513:		weaponInfo->glModel  = trap_R_RegisterModel( path );	
ADDRLP4 4
ARGP4
ADDRLP4 116
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 516
;514:		
;515:		// vweap
;516:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 517
;517:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 518
;518:		if ( item->giTag == WP_M4 )
ADDRLP4 72
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 16
NEI4 $294
line 519
;519:			strcat( path, "_m203_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $296
ARGP4
ADDRGP4 strcat
CALLP4
pop
ADDRGP4 $295
JUMPV
LABELV $294
line 521
;520:		else
;521:			strcat( path, "_bg15_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $297
ARGP4
ADDRGP4 strcat
CALLP4
pop
LABELV $295
line 523
;522:
;523:		weaponInfo->v_glModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 525
;524:
;525:		if ( !weaponInfo->glModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 0
NEI4 $298
line 527
;526:			// new default ;
;527:			CG_Printf("Couldn't register: GrenadeLauncher Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $300
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 528
;528:		}
LABELV $298
line 529
;529:	}
LABELV $288
line 537
;530:
;531:
;532:
;533:	/* ==========
;534:	1st Person Model [ Weapon ]
;535:	==========
;536:	*/
;537:	if ( weaponNum != WP_C4 )
ADDRFP4 0
INDIRI4
CNSTI4 3
EQI4 $301
line 538
;538:	{
line 539
;539:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 540
;540:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 541
;541:		strcat( path, "_1stperson_body.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $303
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 542
;542:		weaponInfo->weaponModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 116
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 544
;543:
;544:		if ( !weaponInfo->weaponModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $304
line 545
;545: 			CG_Printf("Couldn't register: 1rd Person Model[WEAPON] (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $306
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 546
;546:		}
LABELV $304
line 547
;547:	}
LABELV $301
line 553
;548:
;549:	/* ==========
;550:		1st Person Model [ Hands ]
;551:		==========
;552:		*/
;553:	strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 554
;554:	COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 555
;555:	strcat( path, "_1stperson.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $307
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 556
;556:	weaponInfo->handsModel = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 116
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 558
;557:
;558:	if ( !weaponInfo->handsModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $308
line 559
;559: 		CG_Printf("Couldn't register: 1rd Person Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $310
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 560
;560:	}
LABELV $308
line 566
;561:
;562:	/* ==========
;563:	1st Person Model Skins [ Tango Hand Skin]
;564:	==========
;565:	*/ 
;566:	if ( !cg_disableTangoHandSkin.integer )
ADDRGP4 cg_disableTangoHandSkin+12
INDIRI4
CNSTI4 0
NEI4 $311
line 567
;567:	{
line 568
;568:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 569
;569:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 570
;570:		strcat( path, "_t.skin" );
ADDRLP4 4
ARGP4
ADDRGP4 $314
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 571
;571:		weaponInfo->t_viewweaponSkin = trap_R_RegisterSkin( path );
ADDRLP4 4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 573
;572:
;573:		if ( !weaponInfo->t_viewweaponSkin ) {
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 0
NEI4 $315
line 574
;574: 			CG_Printf("Couldn't register Tango Hand Skin for: %s\n", weaponInfo->item->pickup_name);
ADDRGP4 $317
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 575
;575:		}
LABELV $315
line 576
;576:	}
LABELV $311
line 582
;577:
;578:	/* ==========
;579:		View Weapon
;580:		==========
;581:		*/
;582:	strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 583
;583:	COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 584
;584:	strcat( path, "_vweap.md3" );
ADDRLP4 4
ARGP4
ADDRGP4 $318
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 585
;585:	weaponInfo->viewweaponModel  = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 120
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 587
;586:
;587:	if ( !weaponInfo->viewweaponModel ) {
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 0
NEI4 $319
line 588
;588:		CG_Printf("Couldn't register: View Weapon Model (for: %s)\n", weaponInfo->item->pickup_name);
ADDRGP4 $321
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 589
;589:	}
LABELV $319
line 597
;590:
;591:	// calc midpoint for rotation
;592:/*	trap_R_ModelBounds( weaponInfo->viewweaponModel, mins, maxs );
;593:	for ( i = 0 ; i < 3 ; i++ ) {
;594:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
;595:	}
;596:*/
;597:	if ( !cgs.media.bulletExplosionShader )
ADDRGP4 cgs+205084+208
INDIRI4
CNSTI4 0
NEI4 $322
line 598
;598:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $328
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+205084+208
ADDRLP4 124
INDIRI4
ASGNI4
LABELV $322
line 600
;599:
;600:	weaponInfo->partTags[0] = "";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $329
ASGNP4
line 602
;601:
;602:	switch ( weaponNum ) { 
ADDRLP4 128
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 1
LTI4 $330
ADDRLP4 128
INDIRI4
CNSTI4 25
GTI4 $330
ADDRLP4 128
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $482-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $482
address $332
address $332
address $330
address $478
address $475
address $434
address $419
address $454
address $428
address $448
address $443
address $368
address $359
address $375
address $384
address $408
address $353
address $336
address $474
address $469
address $463
address $393
address $399
address $344
address $480
code
LABELV $332
line 606
;603:	case WP_SEALKNIFE:
;604:	case WP_KHURKURI: 
;605://		weaponInfo->firingSound = trap_S_RegisterSound( "sound/weapons/melee/fstrun.wav" );
;606:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/melee/knifeslash1.wav",qfalse );
ADDRGP4 $333
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 132
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 607
;607:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/melee/knifeslash2.wav",qfalse );
ADDRGP4 $334
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 136
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 608
;608:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/melee/knifeslash3.wav",qfalse );
ADDRGP4 $335
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 609
;609:		break;
ADDRGP4 $331
JUMPV
LABELV $336
line 612
;610:  		// NS +
;611:	case WP_MACMILLAN:
;612:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1065353216
ASGNF4
line 613
;613:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/macmillan/fire1.wav",qfalse );		
ADDRGP4 $337
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 614
;614:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/macmillan/fire2.wav",qfalse );		
ADDRGP4 $338
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 615
;615:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/macmillan/fire3.wav",qfalse );				
ADDRGP4 $339
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 617
;616:
;617:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/macmillan/reload.wav",qfalse );
ADDRGP4 $340
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 156
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 618
;618:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/macmillan/boltaction.wav",qfalse );
ADDRGP4 $341
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 160
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 160
INDIRI4
ASGNI4
line 620
;619:
;620:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 621
;621:		weaponInfo->partTags[1] = "mag"; 
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 622
;622:		weaponInfo->partTags[2] = "";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $329
ASGNP4
line 624
;623:
;624:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 625
;625:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 626
;626:		weaponInfo->kickBack = 6; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 6
ASGNI4
line 627
;627:		break;
ADDRGP4 $331
JUMPV
LABELV $344
line 630
;628:#ifdef SL8SD
;629:	case WP_SL8SD: // WP_SL8SD
;630:		MAKERGB( weaponInfo->flashDlightColor, 0.9f, 0.9f, 0.9f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1063675494
ASGNF4
line 631
;631:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/sl8sd/fire1.wav",qfalse );		
ADDRGP4 $345
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 164
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
line 632
;632:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/sl8sd/fire2.wav",qfalse );		
ADDRGP4 $346
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 633
;633:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/sl8sd/fire3.wav",qfalse );	
ADDRGP4 $347
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
line 634
;634:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/sl8sd/reload.wav",qfalse );
ADDRGP4 $348
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 176
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 635
;635:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/sl8sd/reload_empty.wav",qfalse );
ADDRGP4 $349
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 180
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 637
;636:  
;637:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 638
;638:		weaponInfo->partTags[1] = "mag"; 
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 639
;639:		weaponInfo->partTags[3] = "mageject";		
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $350
ASGNP4
line 640
;640:		weaponInfo->partTags[2] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 641
;641:		weaponInfo->partTags[5] = "cock2";		
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 $352
ASGNP4
line 642
;642:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 645
;643:
;644:
;645:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 646
;646:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 647
;647:		weaponInfo->kickBack = 4; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 648
;648:		break;
ADDRGP4 $331
JUMPV
LABELV $353
line 651
;649:#endif
;650:	case WP_PSG1:
;651:		MAKERGB( weaponInfo->flashDlightColor, 0.9f, 0.9f, 0.9f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1063675494
ASGNF4
line 652
;652:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/psg-1/fire1.wav",qfalse );		
ADDRGP4 $354
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 184
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 653
;653:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/psg-1/fire2.wav",qfalse );		
ADDRGP4 $355
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 654
;654:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/psg-1/fire3.wav",qfalse );	
ADDRGP4 $356
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 655
;655:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/psg-1/reload.wav",qfalse );
ADDRGP4 $357
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 656
;656:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/psg-1/reload_empty.wav",qfalse );
ADDRGP4 $358
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 658
;657:  
;658:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 659
;659:		weaponInfo->partTags[1] = "mag"; 
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 660
;660:		weaponInfo->partTags[2] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 661
;661:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 664
;662:
;663:
;664:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 665
;665:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 666
;666:		weaponInfo->kickBack = 6; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 6
ASGNI4
line 667
;667:		break;
ADDRGP4 $331
JUMPV
LABELV $359
line 669
;668:	case WP_MAC10:
;669:		MAKERGB( weaponInfo->flashDlightColor, 0.8f, 0.8f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 670
;670:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/mac10/fire1.wav",qfalse );
ADDRGP4 $360
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 671
;671:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/mac10/fire2.wav",qfalse );
ADDRGP4 $361
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 672
;672:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/mac10/fire3.wav",qfalse );
ADDRGP4 $362
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 674
;673:
;674:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/mac10/fire1_sil.wav",qfalse );
ADDRGP4 $363
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 216
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 675
;675:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/mac10/fire2_sil.wav",qfalse );		
ADDRGP4 $364
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 676
;676:		weaponInfo->sil_flashSound[2] = trap_S_RegisterSound( "sound/weapons/mac10/fire3_sil.wav",qfalse );		
ADDRGP4 $365
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 678
;677:
;678:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/mac10/reload.wav",qfalse );
ADDRGP4 $366
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 679
;679:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/mac10/reload_empty.wav",qfalse );
ADDRGP4 $367
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 681
;680:
;681:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 682
;682:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 683
;683:		weaponInfo->partTags[2] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 684
;684:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 686
;685:
;686:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 687
;687:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 688
;688:		weaponInfo->kickBack = 2; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 2
ASGNI4
line 689
;689:		break;
ADDRGP4 $331
JUMPV
LABELV $368
line 691
;690:	case WP_PDW:	
;691:		MAKERGB( weaponInfo->flashDlightColor, 0.7f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 692
;692:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/pdw/fire1.wav",qfalse );
ADDRGP4 $369
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 236
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 693
;693:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/pdw/fire2.wav",qfalse );
ADDRGP4 $370
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 694
;694:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/pdw/fire3.wav",qfalse );
ADDRGP4 $371
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 244
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 695
;695: 		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/pdw/reload.wav",qfalse );
ADDRGP4 $372
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 248
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 248
INDIRI4
ASGNI4
line 696
;696:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/pdw/reload_empty.wav",qfalse );
ADDRGP4 $373
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 252
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 697
;697:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 698
;698:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 699
;699:		weaponInfo->kickBack = 3;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 701
;700:
;701:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 702
;702:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 703
;703:		weaponInfo->partTags[2] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 704
;704:		weaponInfo->partTags[3] = "catcher";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $374
ASGNP4
line 705
;705:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 708
;706:
;707:
;708:		break;
ADDRGP4 $331
JUMPV
LABELV $375
line 710
;709:	case WP_MP5: 
;710:		MAKERGB( weaponInfo->flashDlightColor, 0.7f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 711
;711:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/mp5/fire1.wav",qfalse );
ADDRGP4 $376
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 256
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 256
INDIRI4
ASGNI4
line 712
;712:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/mp5/fire2.wav",qfalse );
ADDRGP4 $377
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 260
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 713
;713:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/mp5/fire3.wav",qfalse );
ADDRGP4 $378
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 264
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 715
;714:
;715:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/mp5/fire1_sil.wav",qfalse );
ADDRGP4 $379
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 268
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 268
INDIRI4
ASGNI4
line 716
;716:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/mp5/fire2_sil.wav",qfalse );
ADDRGP4 $380
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 272
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 717
;717:		weaponInfo->sil_flashSound[2] = trap_S_RegisterSound( "sound/weapons/mp5/fire3_sil.wav",qfalse );
ADDRGP4 $381
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 276
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 719
;718:
;719:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 720
;720:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 721
;721:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 722
;722:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 724
;723:
;724:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/mp5/reload.wav",qfalse );
ADDRGP4 $382
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 280
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 280
INDIRI4
ASGNI4
line 725
;725:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/mp5/reload_empty.wav",qfalse );
ADDRGP4 $383
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 284
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 726
;726:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 727
;727:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 728
;728:		weaponInfo->kickBack = 2; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 2
ASGNI4
line 729
;729:		break;
ADDRGP4 $331
JUMPV
LABELV $384
line 731
;730:	case WP_AK47: 
;731:		MAKERGB( weaponInfo->flashDlightColor, 0.9f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 732
;732:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/ak47/fire1.wav",qfalse );
ADDRGP4 $385
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 733
;733:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/ak47/fire2.wav",qfalse );
ADDRGP4 $386
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 292
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 734
;734:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/ak47/fire3.wav",qfalse );
ADDRGP4 $387
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 296
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 296
INDIRI4
ASGNI4
line 736
;735:
;736:		weaponInfo->otherflashSound[0] = trap_S_RegisterSound( "sound/weapons/ak47/gl.wav",qfalse );
ADDRGP4 $388
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 300
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 300
INDIRI4
ASGNI4
line 738
;737:
;738:		weaponInfo->sil_flashSound[0] = weaponInfo->flashSound[0];
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 739
;739:		weaponInfo->sil_flashSound[1] = weaponInfo->flashSound[1];
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 740
;740:		weaponInfo->sil_flashSound[2] = weaponInfo->flashSound[2];
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 742
;741:
;742:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/ak47/reload.wav",qfalse );
ADDRGP4 $389
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 316
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 316
INDIRI4
ASGNI4
line 743
;743:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/ak47/reload_empty.wav",qfalse );
ADDRGP4 $390
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 320
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 320
INDIRI4
ASGNI4
line 744
;744:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 745
;745:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 747
;746:
;747:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 748
;748:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 749
;749:		weaponInfo->partTags[2] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 750
;750:	 	weaponInfo->partTags[3] = "gl";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $391
ASGNP4
line 751
;751:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 753
;752:
;753:		weaponInfo->missileModel = trap_R_RegisterModel( "models/misc/bullets/bullet_40mm.md3" );
ADDRGP4 $392
ARGP4
ADDRLP4 324
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 324
INDIRI4
ASGNI4
line 754
;754: 		weaponInfo->missileTrailFunc = CG_40mmGrenadeTrail;
ADDRLP4 0
INDIRP4
CNSTI4 244
ADDP4
ADDRGP4 CG_40mmGrenadeTrail
ASGNP4
line 755
;755:		weaponInfo->wiTrailTime = 200;
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
CNSTF4 1128792064
ASGNF4
line 756
;756:		weaponInfo->missileDlight = 0;
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
CNSTF4 0
ASGNF4
line 757
;757:		weaponInfo->trailRadius = 4.5f; 
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
CNSTF4 1083179008
ASGNF4
line 759
;758:
;759:		weaponInfo->kickBack = 3;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 761
;760: 
;761:		break;
ADDRGP4 $331
JUMPV
LABELV $393
line 763
;762:	case WP_M14:
;763:		MAKERGB( weaponInfo->flashDlightColor, 0.90f, 0.80f, 0.80f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1061997773
ASGNF4
line 764
;764:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/m14/fire1.wav", qfalse );
ADDRGP4 $394
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 328
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 328
INDIRI4
ASGNI4
line 765
;765:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/m14/fire2.wav", qfalse );
ADDRGP4 $395
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 332
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 332
INDIRI4
ASGNI4
line 766
;766:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/m14/fire3.wav", qfalse ),
ADDRGP4 $396
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 336
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 336
INDIRI4
ASGNI4
ADDRGP4 $397
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 340
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 340
INDIRI4
ASGNI4
line 768
;767:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/m14/reload.wav", qfalse );
;768:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/m14/reload_empty.wav", qfalse );
ADDRGP4 $398
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 344
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 344
INDIRI4
ASGNI4
line 770
;769:	
;770:		weaponInfo->partTags[0] = "cock";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $351
ASGNP4
line 771
;771:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 772
;772:		weaponInfo->partTags[2] = "";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $329
ASGNP4
line 774
;773:
;774:		weaponInfo->kickBack = 4;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 775
;775:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 776
;776:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 777
;777:		break;
ADDRGP4 $331
JUMPV
LABELV $399
line 780
;778:		
;779:	case WP_M249:
;780:		MAKERGB( weaponInfo->flashDlightColor, 0.85f, 0.85f, 0.85f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1062836634
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1062836634
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1062836634
ASGNF4
line 782
;781:
;782:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/m249/fire1.wav",qfalse );
ADDRGP4 $400
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 348
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 348
INDIRI4
ASGNI4
line 783
;783:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/m249/fire2.wav",qfalse );
ADDRGP4 $401
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 352
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 352
INDIRI4
ASGNI4
line 784
;784:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/m249/fire3.wav",qfalse );
ADDRGP4 $402
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 356
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 356
INDIRI4
ASGNI4
line 786
;785:
;786: 		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/m249/reload.wav",qfalse );
ADDRGP4 $403
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 360
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 360
INDIRI4
ASGNI4
line 787
;787:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/m249/reload_empty.wav",qfalse );
ADDRGP4 $404
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 364
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 364
INDIRI4
ASGNI4
line 789
;788:		
;789:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 790
;790:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 791
;791:		weaponInfo->partTags[2] = "lid"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $405
ASGNP4
line 792
;792:		weaponInfo->partTags[3] = "bullet";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $406
ASGNP4
line 793
;793:		weaponInfo->partTags[4] = "belt";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $407
ASGNP4
line 794
;794:		weaponInfo->partTags[5] = "";
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 $329
ASGNP4
line 796
;795: 
;796:		weaponInfo->kickBack = 4;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 798
;797:
;798:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 799
;799:		weaponInfo->ejectBrassNum = 1; 
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 800
;800:		break;
ADDRGP4 $331
JUMPV
LABELV $408
line 802
;801:	case WP_M4: 
;802:		MAKERGB( weaponInfo->flashDlightColor, 0.85f, 0.85f, 0.85f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1062836634
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1062836634
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1062836634
ASGNF4
line 804
;803:
;804:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/m4/fire1.wav",qfalse );
ADDRGP4 $409
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 368
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 368
INDIRI4
ASGNI4
line 805
;805:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/m4/fire2.wav",qfalse );
ADDRGP4 $410
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 372
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 372
INDIRI4
ASGNI4
line 806
;806:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/m4/fire3.wav",qfalse );
ADDRGP4 $411
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 376
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 376
INDIRI4
ASGNI4
line 808
;807:
;808:		weaponInfo->sil_flashSound[0] = weaponInfo->flashSound[0];
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 809
;809:		weaponInfo->sil_flashSound[1] = weaponInfo->flashSound[1];
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 810
;810:		weaponInfo->sil_flashSound[2] = weaponInfo->flashSound[2];
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 812
;811:
;812:		weaponInfo->otherflashSound[0] = trap_S_RegisterSound( "sound/weapons/m4/gl.wav",qfalse );
ADDRGP4 $412
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 392
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 392
INDIRI4
ASGNI4
line 814
;813:
;814:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/m4/reload.wav",qfalse );
ADDRGP4 $413
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 396
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 396
INDIRI4
ASGNI4
line 815
;815:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/m4/reload_empty.wav",qfalse );
ADDRGP4 $414
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 400
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 400
INDIRI4
ASGNI4
line 817
;816:		
;817:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 818
;818:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 819
;819:		weaponInfo->partTags[2] = "m203gren"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $415
ASGNP4
line 820
;820:		weaponInfo->partTags[3] = "m203rel";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $416
ASGNP4
line 821
;821:		weaponInfo->partTags[4] = "m203";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $417
ASGNP4
line 822
;822:		weaponInfo->partTags[5] = "handle";
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 $418
ASGNP4
line 823
;823:		weaponInfo->partTags[6] = "";
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRGP4 $329
ASGNP4
line 826
;824:
;825:
;826:		weaponInfo->missileModel = trap_R_RegisterModel( "models/misc/bullets/bullet_40mm.md3" );
ADDRGP4 $392
ARGP4
ADDRLP4 404
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 404
INDIRI4
ASGNI4
line 827
;827:	 	weaponInfo->missileTrailFunc = CG_40mmGrenadeTrail;
ADDRLP4 0
INDIRP4
CNSTI4 244
ADDP4
ADDRGP4 CG_40mmGrenadeTrail
ASGNP4
line 828
;828:		weaponInfo->wiTrailTime = 1000;
ADDRLP4 0
INDIRP4
CNSTI4 280
ADDP4
CNSTF4 1148846080
ASGNF4
line 829
;829:		weaponInfo->missileDlight = 0;
ADDRLP4 0
INDIRP4
CNSTI4 248
ADDP4
CNSTF4 0
ASGNF4
line 830
;830:		weaponInfo->trailRadius = 20.0f; 
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
CNSTF4 1101004800
ASGNF4
line 832
;831:
;832:		weaponInfo->kickBack = 3;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 834
;833:
;834:		weaponInfo->ejectBrassType = BRASS_RIFLE;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 3
ASGNI4
line 835
;835:		weaponInfo->ejectBrassNum = 1; 
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 836
;836:		break;
ADDRGP4 $331
JUMPV
LABELV $419
line 840
;837:
;838:
;839:	case WP_GLOCK:
;840:		MAKERGB( weaponInfo->flashDlightColor, 0.7f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 842
;841:
;842:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/glock30/fire1.wav",qfalse );
ADDRGP4 $420
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 408
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 408
INDIRI4
ASGNI4
line 843
;843:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/glock30/fire2.wav",qfalse );
ADDRGP4 $421
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 412
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 412
INDIRI4
ASGNI4
line 844
;844:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/glock30/fire3.wav",qfalse );
ADDRGP4 $422
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 416
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 416
INDIRI4
ASGNI4
line 846
;845:
;846:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/glock30/fire1_sil.wav",qfalse );
ADDRGP4 $423
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 420
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 420
INDIRI4
ASGNI4
line 847
;847:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/glock30/fire2_sil.wav",qfalse );
ADDRGP4 $424
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 424
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 424
INDIRI4
ASGNI4
line 849
;848:
;849:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/glock30/reload.wav",qfalse );
ADDRGP4 $425
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 428
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 428
INDIRI4
ASGNI4
line 850
;850:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/glock30/reload_empty.wav",qfalse );
ADDRGP4 $426
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 432
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 432
INDIRI4
ASGNI4
line 851
;851:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 852
;852:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 854
;853:
;854:		weaponInfo->kickBack = 2;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 2
ASGNI4
line 856
;855: 
;856:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 857
;857:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 858
;858:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 859
;859:		weaponInfo->partTags[3] = "sled";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $427
ASGNP4
line 860
;860:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 863
;861:
;862:
;863:		break;
ADDRGP4 $331
JUMPV
LABELV $428
line 865
;864:	case WP_P9S:
;865:		MAKERGB( weaponInfo->flashDlightColor, 0.7f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 866
;866:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/p9s/fire1.wav",qfalse );
ADDRGP4 $429
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 436
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 436
INDIRI4
ASGNI4
line 867
;867:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/p9s/fire2.wav",qfalse );
ADDRGP4 $430
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 440
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 440
INDIRI4
ASGNI4
line 868
;868:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/p9s/fire3.wav",qfalse );
ADDRGP4 $431
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 444
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 444
INDIRI4
ASGNI4
line 870
;869:
;870:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/glock30/fire1_sil.wav",qfalse );
ADDRGP4 $423
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 448
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 448
INDIRI4
ASGNI4
line 871
;871:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/glock30/fire2_sil.wav",qfalse );
ADDRGP4 $424
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 452
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 452
INDIRI4
ASGNI4
line 873
;872:
;873:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/p9s/reload.wav",qfalse );
ADDRGP4 $432
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 456
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 456
INDIRI4
ASGNI4
line 874
;874:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/p9s/reload_empty.wav",qfalse );
ADDRGP4 $433
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 460
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 460
INDIRI4
ASGNI4
line 875
;875:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 876
;876:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 878
;877:
;878:		weaponInfo->kickBack = 2;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 2
ASGNI4
line 880
;879:
;880: 		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 881
;881:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 882
;882:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 883
;883:		weaponInfo->partTags[3] = "sled";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $427
ASGNP4
line 884
;884:		weaponInfo->partTags[4] = ""; 
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 885
;885:		break;
ADDRGP4 $331
JUMPV
LABELV $434
line 887
;886:	case WP_MK23:
;887:		MAKERGB( weaponInfo->flashDlightColor, 0.8f, 0.8f, 0.8f);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1061997773
ASGNF4
line 888
;888:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/mk23/fire1.wav",qfalse );
ADDRGP4 $435
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 464
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 464
INDIRI4
ASGNI4
line 889
;889:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/mk23/fire2.wav",qfalse );
ADDRGP4 $436
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 468
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 468
INDIRI4
ASGNI4
line 890
;890:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/mk23/fire3.wav",qfalse );
ADDRGP4 $437
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 472
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 472
INDIRI4
ASGNI4
line 892
;891:
;892:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/mk23/fire1_sil.wav",qfalse );
ADDRGP4 $438
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 476
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 476
INDIRI4
ASGNI4
line 893
;893:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/mk23/fire2_sil.wav",qfalse );
ADDRGP4 $439
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 480
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 480
INDIRI4
ASGNI4
line 895
;894:
;895:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/mk23/reload.wav",qfalse );
ADDRGP4 $440
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 484
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 484
INDIRI4
ASGNI4
line 896
;896:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/mk23/reload_empty.wav",qfalse );
ADDRGP4 $441
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 488
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 488
INDIRI4
ASGNI4
line 897
;897:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 898
;898:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 900
;899:
;900:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 901
;901:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 902
;902:		weaponInfo->partTags[2] = "bolt"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $442
ASGNP4
line 903
;903:		weaponInfo->partTags[3] = "sled";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $427
ASGNP4
line 904
;904:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 906
;905:
;906:		weaponInfo->kickBack = 3; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 907
;907:		break;
ADDRGP4 $331
JUMPV
LABELV $443
line 909
;908:	case WP_SW629:
;909:		MAKERGB( weaponInfo->flashDlightColor, 0.9f, 0.6f, 0.6f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1063675494
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1058642330
ASGNF4
line 910
;910:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/sw629/fire1.wav",qfalse );
ADDRGP4 $444
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 492
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 492
INDIRI4
ASGNI4
line 911
;911:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/sw629/fire2.wav",qfalse );
ADDRGP4 $445
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 496
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 496
INDIRI4
ASGNI4
line 912
;912: 		weaponInfo->ejectBrassType = BRASS_COLT;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 7
ASGNI4
line 914
;913: 
;914:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/sw629/reload.wav",qfalse );
ADDRGP4 $446
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 500
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 500
INDIRI4
ASGNI4
line 915
;915:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/sw629/reload.wav",qfalse );
ADDRGP4 $446
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 504
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 504
INDIRI4
ASGNI4
line 917
;916:
;917:		weaponInfo->partTags[0] = "barrel";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $447
ASGNP4
line 918
;918:		weaponInfo->partTags[1] = "bolt";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $442
ASGNP4
line 919
;919:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 920
;920:		weaponInfo->partTags[3] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $343
ASGNP4
line 921
;921:		weaponInfo->partTags[4] = "sled"; 
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $427
ASGNP4
line 922
;922:		weaponInfo->partTags[5] = ""; 
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRGP4 $329
ASGNP4
line 925
;923:
;924:
;925:		weaponInfo->kickBack = 3; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 926
;926:		break;
ADDRGP4 $331
JUMPV
LABELV $448
line 929
;927:
;928:	case WP_DEAGLE:
;929:		MAKERGB( weaponInfo->flashDlightColor, 0.8f, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 930
;930:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/deagle/fire1.wav",qfalse );
ADDRGP4 $449
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 508
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 508
INDIRI4
ASGNI4
line 931
;931:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/deagle/fire2.wav",qfalse );
ADDRGP4 $450
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 512
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 512
INDIRI4
ASGNI4
line 932
;932:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/deagle/fire3.wav",qfalse );
ADDRGP4 $451
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 516
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 516
INDIRI4
ASGNI4
line 934
;933:
;934:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 935
;935:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 936
;936:		weaponInfo->partTags[2] = "sled";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $427
ASGNP4
line 937
;937:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 939
;938:
;939: 		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 940
;940:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 941
;941:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/deagle/reload.wav",qfalse );
ADDRGP4 $452
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 520
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 520
INDIRI4
ASGNI4
line 942
;942:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/deagle/reload_empty.wav",qfalse );
ADDRGP4 $453
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 524
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 524
INDIRI4
ASGNI4
line 944
;943:
;944:		weaponInfo->kickBack = 4; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 945
;945:		break;
ADDRGP4 $331
JUMPV
LABELV $454
line 947
;946:	case WP_SW40T:
;947:		MAKERGB( weaponInfo->flashDlightColor, 0.8f, 0.8f, 0.8f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1061997773
ASGNF4
line 948
;948:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/sw40t/fire1.wav",qfalse );
ADDRGP4 $455
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 528
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 528
INDIRI4
ASGNI4
line 949
;949:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/sw40t/fire2.wav",qfalse );
ADDRGP4 $456
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 532
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 532
INDIRI4
ASGNI4
line 950
;950:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/sw40t/fire3.wav",qfalse );
ADDRGP4 $457
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 536
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 536
INDIRI4
ASGNI4
line 952
;951:
;952:		weaponInfo->sil_flashSound[0] = trap_S_RegisterSound( "sound/weapons/sw40t/fire1_sil.wav",qfalse );
ADDRGP4 $458
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 540
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 540
INDIRI4
ASGNI4
line 953
;953:		weaponInfo->sil_flashSound[1] = trap_S_RegisterSound( "sound/weapons/sw40t/fire2_sil.wav",qfalse );
ADDRGP4 $459
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 544
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 544
INDIRI4
ASGNI4
line 954
;954:		weaponInfo->sil_flashSound[2] = trap_S_RegisterSound( "sound/weapons/sw40t/fire3_sil.wav",qfalse );
ADDRGP4 $460
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 548
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 548
INDIRI4
ASGNI4
line 955
;955:		weaponInfo->ejectBrassType = BRASS_PISTOL;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 1
ASGNI4
line 956
;956:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 958
;957:
;958:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/sw40t/reload.wav",qfalse );
ADDRGP4 $461
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 552
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 552
INDIRI4
ASGNI4
line 959
;959:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/sw40t/reload_empty.wav",qfalse );
ADDRGP4 $462
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 556
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 556
INDIRI4
ASGNI4
line 961
;960: 
;961:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 962
;962:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 963
;963:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 964
;964:		weaponInfo->partTags[3] = "sled";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $427
ASGNP4
line 965
;965:		weaponInfo->partTags[4] = "";
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
ADDRGP4 $329
ASGNP4
line 967
;966:
;967:		weaponInfo->kickBack = 3; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 3
ASGNI4
line 968
;968:		break;
ADDRGP4 $331
JUMPV
LABELV $463
line 970
;969:	case WP_SPAS15:
;970:		MAKERGB( weaponInfo->flashDlightColor, 0.8f, 0.8f, 0.8f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1061997773
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1061997773
ASGNF4
line 971
;971:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/spas15/fire1.wav",qfalse );
ADDRGP4 $464
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 560
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 560
INDIRI4
ASGNI4
line 972
;972:		weaponInfo->flashSound[1] = trap_S_RegisterSound( "sound/weapons/spas15/fire2.wav",qfalse );
ADDRGP4 $465
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 564
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ADDRLP4 564
INDIRI4
ASGNI4
line 973
;973:		weaponInfo->flashSound[2] = trap_S_RegisterSound( "sound/weapons/spas15/fire3.wav",qfalse );
ADDRGP4 $466
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 568
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 568
INDIRI4
ASGNI4
line 974
;974:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/spas15/reload.wav",qfalse );
ADDRGP4 $467
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 572
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 572
INDIRI4
ASGNI4
line 975
;975:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/spas15/reload_empty.wav",qfalse );
ADDRGP4 $468
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 576
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 576
INDIRI4
ASGNI4
line 976
;976:		weaponInfo->ejectBrassType = BRASS_SHOTGUN;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 5
ASGNI4
line 977
;977:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 979
;978:
;979:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 980
;980:		weaponInfo->partTags[1] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $343
ASGNP4
line 981
;981:		weaponInfo->partTags[2] = "cock"; 
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $351
ASGNP4
line 982
;982:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 985
;983:
;984:
;985:		weaponInfo->kickBack = 6; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 6
ASGNI4
line 986
;986:		break;
ADDRGP4 $331
JUMPV
LABELV $469
line 988
;987:	case WP_M590:
;988:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 989
;989:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/870/fire1.wav",qfalse );
ADDRGP4 $470
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 580
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 580
INDIRI4
ASGNI4
line 990
;990:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/870/shellin.wav",qfalse );
ADDRGP4 $471
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 584
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 584
INDIRI4
ASGNI4
line 991
;991:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/870/cock.wav",qfalse );
ADDRGP4 $472
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 588
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 588
INDIRI4
ASGNI4
line 992
;992:		weaponInfo->ejectBrassType = BRASS_SHOTGUN_LEFT;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 6
ASGNI4
line 993
;993:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 995
;994:
;995:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 996
;996:		weaponInfo->partTags[1] = "pump";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $473
ASGNP4
line 997
;997:		weaponInfo->partTags[2] = "mag";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $343
ASGNP4
line 998
;998:		weaponInfo->partTags[3] = "";
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRGP4 $329
ASGNP4
line 1000
;999:
;1000:		weaponInfo->kickBack = 4; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 1001
;1001:		break;
ADDRGP4 $331
JUMPV
LABELV $474
line 1003
;1002:	case WP_870:
;1003:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.7f, 0.7f );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1060320051
ASGNF4
line 1005
;1004:
;1005:		weaponInfo->partTags[0] = "trigger";
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $342
ASGNP4
line 1006
;1006:		weaponInfo->partTags[1] = "pump";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $473
ASGNP4
line 1007
;1007:		weaponInfo->partTags[2] = "";
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 $329
ASGNP4
line 1009
;1008: 
;1009:		weaponInfo->flashSound[0] = trap_S_RegisterSound( "sound/weapons/870/fire1.wav",qfalse );
ADDRGP4 $470
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 592
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 592
INDIRI4
ASGNI4
line 1010
;1010:		weaponInfo->reloadSound = trap_S_RegisterSound( "sound/weapons/870/shellin.wav",qfalse );
ADDRGP4 $471
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 596
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
ADDRLP4 596
INDIRI4
ASGNI4
line 1011
;1011:		weaponInfo->reloadEmptySound = trap_S_RegisterSound( "sound/weapons/870/cock.wav",qfalse );
ADDRGP4 $472
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 600
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 600
INDIRI4
ASGNI4
line 1012
;1012:		weaponInfo->ejectBrassType = BRASS_SHOTGUN_LEFT;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
CNSTI4 6
ASGNI4
line 1013
;1013:		weaponInfo->ejectBrassNum = 1;
ADDRLP4 0
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 1
ASGNI4
line 1015
;1014:
;1015:		weaponInfo->kickBack = 4; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 4
ASGNI4
line 1016
;1016:		break;
ADDRGP4 $331
JUMPV
LABELV $475
line 1019
;1017:		// NS - 
;1018:	case WP_FLASHBANG:
;1019:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weapons/flashbang/flashbang_thrown.md3" );
ADDRGP4 $476
ARGP4
ADDRLP4 604
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 604
INDIRI4
ASGNI4
line 1020
;1020:		weaponInfo->kickBack = 0;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 0
ASGNI4
line 1022
;1021:
;1022:		weaponInfo->partTags[0] = "pin"; 
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $477
ASGNP4
line 1023
;1023:		weaponInfo->partTags[1] = "";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $329
ASGNP4
line 1025
;1024:
;1025:  		break;
ADDRGP4 $331
JUMPV
LABELV $478
line 1027
;1026:	case WP_GRENADE:
;1027:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weapons/mk26/mk26_thrown.md3" );
ADDRGP4 $479
ARGP4
ADDRLP4 608
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 608
INDIRI4
ASGNI4
line 1028
;1028:		weaponInfo->kickBack = 0;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 0
ASGNI4
line 1030
;1029:
;1030:		weaponInfo->partTags[0] = "pin"; 
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $477
ASGNP4
line 1031
;1031:		weaponInfo->partTags[1] = "";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $329
ASGNP4
line 1032
;1032: 		break;
ADDRGP4 $331
JUMPV
LABELV $480
line 1034
;1033:	case WP_SMOKE:
;1034:		weaponInfo->missileModel = trap_R_RegisterModel( "models/weapons/smoke/smoke_thrown.md3" );
ADDRGP4 $481
ARGP4
ADDRLP4 612
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 612
INDIRI4
ASGNI4
line 1035
;1035:		weaponInfo->kickBack = 0; 
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 0
ASGNI4
line 1037
;1036:
;1037:		weaponInfo->partTags[0] = "pin"; 
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRGP4 $477
ASGNP4
line 1038
;1038:		weaponInfo->partTags[1] = "";
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRGP4 $329
ASGNP4
line 1039
;1039: 		break;
ADDRGP4 $331
JUMPV
LABELV $330
line 1043
;1040: 
;1041:
;1042:	 default:
;1043:		weaponInfo->kickBack = 0;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
CNSTI4 0
ASGNI4
line 1044
;1044:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
CNSTF4 1065353216
ASGNF4
line 1045
;1045:		break;
LABELV $331
line 1048
;1046:	} 
;1047:
;1048:	i = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRGP4 $485
JUMPV
LABELV $484
line 1051
;1049:  
;1050:	while ( strlen(weaponInfo->partTags[i]) > 0 && i < MAX_WEAPONPARTS )
;1051:	{
line 1052
;1052:		strcpy( path, item->world_model[0] );
ADDRLP4 4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1053
;1053:		COM_StripExtension( path, path );
ADDRLP4 4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 1055
;1054:
;1055:		if ( !Q_stricmp( "handle", weaponInfo->partTags[i] ) ) {
ADDRGP4 $418
ARGP4
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
NEI4 $487
line 1056
;1056:			weaponInfo->v_flashModel = trap_R_RegisterModel( va("%s_handle_vweap.md3",path) );
ADDRGP4 $489
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 136
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 140
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 1057
;1057:			strcat( path, va("_%s.md3", weaponInfo->partTags[i] )  );
ADDRGP4 $490
ARGP4
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 1058
;1058:		}
ADDRGP4 $488
JUMPV
LABELV $487
line 1060
;1059:		else
;1060:			strcat( path, va("_1stperson_%s.md3", weaponInfo->partTags[i] )  );
ADDRGP4 $491
ARGP4
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 136
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
LABELV $488
line 1062
;1061:
;1062:		weaponInfo->weaponParts[i] = trap_R_RegisterModel( path );
ADDRLP4 4
ARGP4
ADDRLP4 140
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 1064
;1063:
;1064:		if ( !weaponInfo->partTags[i]  /*|| 1*/ ) {
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $492
line 1066
;1065:
;1066:			if ( !weaponInfo->partTags[i] )
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $494
line 1067
;1067:				Com_Error( ERR_DROP, "Couldn't register Modelpart %s (for: %s)\n", path, weaponInfo->item->pickup_name);
CNSTI4 1
ARGI4
ADDRGP4 $496
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRGP4 Com_Error
CALLV
pop
LABELV $494
line 1068
;1068:		}
LABELV $492
line 1069
;1069:		i++;
ADDRLP4 68
ADDRLP4 68
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1070
;1070:	} 
LABELV $485
line 1050
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
LEI4 $497
ADDRLP4 68
INDIRI4
CNSTI4 12
LTI4 $484
LABELV $497
line 1071
;1071:}
LABELV $224
endproc CG_RegisterWeapon 616 16
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 16 12
line 1080
;1072:
;1073:/*
;1074:=================
;1075:CG_RegisterItemVisuals
;1076:
;1077:The server says this item is used on this level
;1078:=================
;1079:*/
;1080:void CG_RegisterItemVisuals( int itemNum ) {
line 1084
;1081:	itemInfo_t		*itemInfo;
;1082:	gitem_t			*item;
;1083:
;1084:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 0
CNSTI4 24
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 1085
;1085:	if ( itemInfo->registered ) {
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $499
line 1086
;1086:		return;
ADDRGP4 $498
JUMPV
LABELV $499
line 1089
;1087:	}
;1088:
;1089:	item = &bg_itemlist[ itemNum ];
ADDRLP4 4
CNSTI4 56
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 1091
;1090:
;1091:	memset( itemInfo, 0, sizeof( &itemInfo ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1092
;1092:	itemInfo->registered = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 1
ASGNI4
line 1094
;1093:
;1094:	itemInfo->models[0] = trap_R_RegisterModel( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1096
;1095:
;1096:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1098
;1097:
;1098:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 1
NEI4 $501
line 1099
;1099:		CG_RegisterWeapon( item->giTag ); 
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1100
;1100:	}
LABELV $501
line 1102
;1101: 
;1102:}
LABELV $498
endproc CG_RegisterItemVisuals 16 12
export CG_CalculateWeaponPosition
proc CG_CalculateWeaponPosition 244 28
line 1131
;1103:
;1104:
;1105:/*
;1106:========================================================================================
;1107:
;1108:VIEW WEAPON
;1109:
;1110:========================================================================================
;1111:*/
;1112:  
;1113:void CG_Spark( vec3_t org, vec3_t dir, float width ); 
;1114:
;1115:/*
;1116:==============
;1117:CG_CalculateWeaponPosition
;1118:==============
;1119:*/
;1120:extern vmCvar_t	cg_isgun_z;
;1121:extern vmCvar_t	cg_isgun_y;
;1122:extern vmCvar_t	cg_isgun_x;
;1123:extern vmCvar_t	cg_isgun_roll;
;1124:extern vmCvar_t	cg_isgun_yaw;
;1125:extern vmCvar_t	cg_isgun_pitch;
;1126:extern vmCvar_t	cg_isgun_step;
;1127:extern vmCvar_t	cg_weaponYaw;
;1128:extern vmCvar_t	cg_weaponPitch;
;1129:extern vmCvar_t	cg_weaponRoll;
;1130:
;1131:void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 1140
;1132:	float		scale;
;1133:	int			delta;
;1134:	float		fracsin;
;1135:	vec3_t		forward,right,up;
;1136:	vec3_t		end;
;1137:	trace_t		trace;
;1138://	qboolean	ladder = qfalse;
;1139:
;1140:	VectorCopy( cg.refdef.vieworg, origin ); 
ADDRFP4 0
INDIRP4
ADDRGP4 cg+109044+24
INDIRB
ASGNB 12
line 1141
;1141:	VectorCopy( cg.weaponAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+117876
INDIRB
ASGNB 12
line 1143
;1142:
;1143:	AngleVectors( angles, forward,right,up );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 16
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1145
;1144:	
;1145: 	VectorMA( origin, 50, forward, end );
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
CNSTF4 1112014848
ASGNF4
ADDRLP4 32
ADDRLP4 116
INDIRP4
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1112014848
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1148
;1146:
;1147:	// trace a line from previous position to new position
;1148:	CG_Trace( &trace, origin, NULL, NULL, end, cg.predictedPlayerState.clientNum, CONTENTS_SOLID );
ADDRLP4 44
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 124
CNSTP4 0
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 cg+107636+140
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1150
;1149:   
;1150:	if (trace.fraction < 1 && cg.weaponPos > 0.0f ) {
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
GEF4 $513
ADDRGP4 cg+116308
INDIRF4
CNSTF4 0
LEF4 $513
line 1151
;1151:		if ( cg.weaponPos > trace.fraction )
ADDRGP4 cg+116308
INDIRF4
ADDRLP4 44+8
INDIRF4
LEF4 $517
line 1152
;1152:			cg.weaponPos -= 0.1f;
ADDRLP4 128
ADDRGP4 cg+116308
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
CNSTF4 1036831949
SUBF4
ASGNF4
LABELV $517
line 1154
;1153:
;1154:		if ( cg.weaponPos < trace.fraction )
ADDRGP4 cg+116308
INDIRF4
ADDRLP4 44+8
INDIRF4
GEF4 $514
line 1155
;1155:			cg.weaponPos = trace.fraction;
ADDRGP4 cg+116308
ADDRLP4 44+8
INDIRF4
ASGNF4
line 1156
;1156:	} else if ( cg.weaponPos < 1.0f && trace.fraction > cg.weaponPos ) 
ADDRGP4 $514
JUMPV
LABELV $513
ADDRGP4 cg+116308
INDIRF4
CNSTF4 1065353216
GEF4 $528
ADDRLP4 44+8
INDIRF4
ADDRGP4 cg+116308
INDIRF4
LEF4 $528
line 1158
;1157:		// get close if we're close		
;1158:			cg.weaponPos += 0.1f; 
ADDRLP4 128
ADDRGP4 cg+116308
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
CNSTF4 1036831949
ADDF4
ASGNF4
LABELV $528
LABELV $514
line 1160
;1159:
;1160:	if (cg.weaponPos > 1.0f) cg.weaponPos = 1.0;
ADDRGP4 cg+116308
INDIRF4
CNSTF4 1065353216
LEF4 $534
ADDRGP4 cg+116308
CNSTF4 1065353216
ASGNF4
LABELV $534
line 1161
;1161:	if (cg.weaponPos < 0.0f) cg.weaponPos = 0.0;
ADDRGP4 cg+116308
INDIRF4
CNSTF4 0
GEF4 $538
ADDRGP4 cg+116308
CNSTF4 0
ASGNF4
LABELV $538
line 1163
;1162:	 
;1163:	if (cg.weaponPos != 1.0f)
ADDRGP4 cg+116308
INDIRF4
CNSTF4 1065353216
EQF4 $542
line 1164
;1164:	{
line 1169
;1165:		// BLUTENGEL:
;1166:		// here seems to be the part of the code where the weapon 
;1167:		// drawback is calculated. I reduced the weapondrawback from
;1168:		// primary weapons from a maximum of -10 to a maximum of -5
;1169:    switch (cg.snap->ps.weapon) {
ADDRLP4 132
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 6
LTI4 $545
ADDRLP4 132
INDIRI4
CNSTI4 18
GTI4 $566
ADDRLP4 132
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $567-24
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $567
address $555
address $555
address $555
address $555
address $555
address $555
address $545
address $545
address $545
address $545
address $545
address $549
address $549
code
LABELV $566
ADDRLP4 132
INDIRI4
CNSTI4 24
EQI4 $549
ADDRGP4 $545
JUMPV
LABELV $549
line 1173
;1170:      case WP_PSG1:
;1171:      case WP_MACMILLAN:
;1172:      case WP_SL8SD:
;1173:        VectorMA( origin, -1 + cg.weaponPos*1, forward, origin);
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3212836864
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3212836864
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 148
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3212836864
ADDF4
MULF4
ADDF4
ASGNF4
line 1174
;1174:        break;
ADDRGP4 $546
JUMPV
LABELV $555
line 1181
;1175:      case WP_P9S:
;1176:      case WP_GLOCK:
;1177:      case WP_MK23:
;1178:      case WP_SW40T:
;1179:      case WP_DEAGLE:
;1180:      case WP_SW629:
;1181:        VectorMA( origin, -2 + cg.weaponPos*2, forward, origin);
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3221225472
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1073741824
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3221225472
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1073741824
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3221225472
ADDF4
MULF4
ADDF4
ASGNF4
line 1182
;1182:        break;
ADDRGP4 $546
JUMPV
LABELV $545
line 1184
;1183:      default:
;1184:    		VectorMA( origin, -3 + cg.weaponPos*3, forward, origin );
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
CNSTF4 1077936128
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3225419776
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
CNSTF4 1077936128
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3225419776
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 172
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
CNSTF4 1077936128
ADDRGP4 cg+116308
INDIRF4
MULF4
CNSTF4 3225419776
ADDF4
MULF4
ADDF4
ASGNF4
line 1185
;1185:    }
LABELV $546
line 1186
;1186:	}
LABELV $542
line 1190
;1187:
;1188:
;1189:	// on odd legs, invert some angles
;1190:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+115396
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $569
line 1191
;1191:		scale = -cg.xyspeed;
ADDRLP4 28
ADDRGP4 cg+115400
INDIRF4
NEGF4
ASGNF4
line 1192
;1192:	} else {
ADDRGP4 $570
JUMPV
LABELV $569
line 1193
;1193:		scale = cg.xyspeed;
ADDRLP4 28
ADDRGP4 cg+115400
INDIRF4
ASGNF4
line 1194
;1194:	}
LABELV $570
line 1197
;1195:
;1196:	// gun angles from bobbing
;1197:	angles[ROLL] += scale * cg.bobfracsin * 0.005 * cg_weaponRoll.value;
ADDRLP4 132
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 28
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDRGP4 cg_weaponRoll+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1198
;1198:	angles[YAW] += scale * cg.bobfracsin * 0.01 * cg_weaponYaw.value;
ADDRLP4 136
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 28
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDRGP4 cg_weaponYaw+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1199
;1199:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005 * cg_weaponPitch.value;
ADDRLP4 140
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+115400
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDRGP4 cg_weaponPitch+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1202
;1200:
;1201:	// drop the weapon when landing
;1202:	delta = cg.time - cg.landTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108940
INDIRI4
SUBI4
ASGNI4
line 1203
;1203:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 12
INDIRI4
CNSTI4 500
GEI4 $583
line 1204
;1204:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108936
INDIRF4
MULF4
ADDRLP4 12
INDIRI4
CVIF4 4
MULF4
CNSTF4 1140457472
DIVF4
ADDF4
ASGNF4
line 1205
;1205:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $584
JUMPV
LABELV $583
ADDRLP4 12
INDIRI4
CNSTI4 1000
GEI4 $586
line 1206
;1206:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108936
INDIRF4
MULF4
CNSTI4 1000
ADDRLP4 12
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1140457472
DIVF4
ADDF4
ASGNF4
line 1208
;1207:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1208:	}
LABELV $586
LABELV $584
line 1212
;1209:
;1210:#if 1
;1211:	// drop the weapon when stair climbing
;1212:	delta = cg.time - cg.stepTime;
ADDRLP4 12
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108924
INDIRI4
SUBI4
ASGNI4
line 1213
;1213:	if ( delta < STEP_TIME/2 ) {
ADDRLP4 12
INDIRI4
CNSTI4 100
GEI4 $591
line 1214
;1214:		origin[2] -= cg.stepChange*0.15 * delta / (STEP_TIME/2);
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
CNSTF4 1041865114
ADDRGP4 cg+108920
INDIRF4
MULF4
ADDRLP4 12
INDIRI4
CVIF4 4
MULF4
CNSTF4 1120403456
DIVF4
SUBF4
ASGNF4
line 1215
;1215:	} else if ( delta < STEP_TIME ) {
ADDRGP4 $592
JUMPV
LABELV $591
ADDRLP4 12
INDIRI4
CNSTI4 200
GEI4 $594
line 1216
;1216:		origin[2] -= cg.stepChange*0.15 * (STEP_TIME - delta) / (STEP_TIME/2);
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
CNSTF4 1041865114
ADDRGP4 cg+108920
INDIRF4
MULF4
CNSTI4 200
ADDRLP4 12
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1120403456
DIVF4
SUBF4
ASGNF4
line 1217
;1217:	}
LABELV $594
LABELV $592
line 1221
;1218:#endif
;1219:
;1220:	
;1221:	if ( cg.ns_ironsightState )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 0
EQI4 $597
line 1222
;1222:	{
line 1223
;1223:		if ( cg.ns_ironsightX < cg_isgun_x.value )
ADDRGP4 cg+116692
INDIRF4
ADDRGP4 cg_isgun_x+8
INDIRF4
GEF4 $600
line 1224
;1224:			cg.ns_ironsightX += cg_isgun_step.value;
ADDRLP4 144
ADDRGP4 cg+116692
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $601
JUMPV
LABELV $600
line 1225
;1225:		else if ( cg.ns_ironsightX > cg_isgun_x.value )
ADDRGP4 cg+116692
INDIRF4
ADDRGP4 cg_isgun_x+8
INDIRF4
LEF4 $606
line 1226
;1226:			cg.ns_ironsightX -= cg_isgun_step.value;
ADDRLP4 148
ADDRGP4 cg+116692
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $606
LABELV $601
line 1228
;1227:
;1228:		if ( cg.ns_ironsightY < cg_isgun_y.value )
ADDRGP4 cg+116696
INDIRF4
ADDRGP4 cg_isgun_y+8
INDIRF4
GEF4 $612
line 1229
;1229:			cg.ns_ironsightY += cg_isgun_step.value;
ADDRLP4 152
ADDRGP4 cg+116696
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $613
JUMPV
LABELV $612
line 1230
;1230:		else if ( cg.ns_ironsightY > cg_isgun_y.value )
ADDRGP4 cg+116696
INDIRF4
ADDRGP4 cg_isgun_y+8
INDIRF4
LEF4 $618
line 1231
;1231:			cg.ns_ironsightY -= cg_isgun_step.value;
ADDRLP4 156
ADDRGP4 cg+116696
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $618
LABELV $613
line 1233
;1232:
;1233:		if ( cg.ns_ironsightZ < cg_isgun_z.value )
ADDRGP4 cg+116700
INDIRF4
ADDRGP4 cg_isgun_z+8
INDIRF4
GEF4 $624
line 1234
;1234:			cg.ns_ironsightZ += cg_isgun_step.value;
ADDRLP4 160
ADDRGP4 cg+116700
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $625
JUMPV
LABELV $624
line 1235
;1235:		else if ( cg.ns_ironsightZ > cg_isgun_z.value )
ADDRGP4 cg+116700
INDIRF4
ADDRGP4 cg_isgun_z+8
INDIRF4
LEF4 $630
line 1236
;1236:			cg.ns_ironsightZ -= cg_isgun_step.value; 
ADDRLP4 164
ADDRGP4 cg+116700
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $630
LABELV $625
line 1239
;1237:
;1238:		// new gun angles.
;1239:		if ( cg.ns_ironsightAngles[PITCH] < cg_isgun_pitch.value )
ADDRGP4 cg+116704
INDIRF4
ADDRGP4 cg_isgun_pitch+8
INDIRF4
GEF4 $636
line 1240
;1240:			cg.ns_ironsightAngles[PITCH] += cg_isgun_step.value;
ADDRLP4 168
ADDRGP4 cg+116704
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $637
JUMPV
LABELV $636
line 1241
;1241:		else if ( cg.ns_ironsightAngles[PITCH] > cg_isgun_pitch.value )
ADDRGP4 cg+116704
INDIRF4
ADDRGP4 cg_isgun_pitch+8
INDIRF4
LEF4 $642
line 1242
;1242:			cg.ns_ironsightAngles[PITCH] -= cg_isgun_step.value;
ADDRLP4 172
ADDRGP4 cg+116704
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $642
LABELV $637
line 1244
;1243:
;1244:		if ( cg.ns_ironsightAngles[YAW] < cg_isgun_yaw.value )
ADDRGP4 cg+116704+4
INDIRF4
ADDRGP4 cg_isgun_yaw+8
INDIRF4
GEF4 $648
line 1245
;1245:			cg.ns_ironsightAngles[YAW] += cg_isgun_step.value;
ADDRLP4 176
ADDRGP4 cg+116704+4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $649
JUMPV
LABELV $648
line 1246
;1246:		else if ( cg.ns_ironsightAngles[YAW] > cg_isgun_yaw.value )
ADDRGP4 cg+116704+4
INDIRF4
ADDRGP4 cg_isgun_yaw+8
INDIRF4
LEF4 $656
line 1247
;1247:			cg.ns_ironsightAngles[YAW] -= cg_isgun_step.value;
ADDRLP4 180
ADDRGP4 cg+116704+4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $656
LABELV $649
line 1249
;1248:
;1249:		if ( cg.ns_ironsightAngles[ROLL] < cg_isgun_roll.value )
ADDRGP4 cg+116704+8
INDIRF4
ADDRGP4 cg_isgun_roll+8
INDIRF4
GEF4 $664
line 1250
;1250:			cg.ns_ironsightAngles[ROLL] += cg_isgun_step.value;
ADDRLP4 184
ADDRGP4 cg+116704+8
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
ADDRGP4 $665
JUMPV
LABELV $664
line 1251
;1251:		else if ( cg.ns_ironsightAngles[ROLL] > cg_isgun_roll.value )
ADDRGP4 cg+116704+8
INDIRF4
ADDRGP4 cg_isgun_roll+8
INDIRF4
LEF4 $672
line 1252
;1252:			cg.ns_ironsightAngles[ROLL] -= cg_isgun_step.value;
ADDRLP4 188
ADDRGP4 cg+116704+8
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
LABELV $672
LABELV $665
line 1255
;1253:
;1254:
;1255:		VectorMA( origin, cg.ns_ironsightX , forward, origin );
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 196
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 200
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
line 1256
;1256:		VectorMA( origin, cg.ns_ironsightY , right, origin );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 208
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 208
INDIRP4
ADDRLP4 208
INDIRP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
line 1257
;1257:	 	VectorMA( origin, cg.ns_ironsightZ , up, origin ); 
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 224
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 224
INDIRP4
ADDRLP4 224
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
line 1259
;1258:
;1259:		angles[YAW] += cg.ns_ironsightAngles[YAW];
ADDRLP4 228
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 228
INDIRP4
ADDRLP4 228
INDIRP4
INDIRF4
ADDRGP4 cg+116704+4
INDIRF4
ADDF4
ASGNF4
line 1260
;1260:		angles[ROLL] += cg.ns_ironsightAngles[ROLL];
ADDRLP4 232
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 232
INDIRP4
ADDRLP4 232
INDIRP4
INDIRF4
ADDRGP4 cg+116704+8
INDIRF4
ADDF4
ASGNF4
line 1261
;1261:		angles[PITCH] += cg.ns_ironsightAngles[PITCH];
ADDRLP4 236
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 236
INDIRP4
ADDRLP4 236
INDIRP4
INDIRF4
ADDRGP4 cg+116704
INDIRF4
ADDF4
ASGNF4
line 1265
;1262:
;1263:
;1264:	//	CG_Printf("IS: %f %f %f\n", cg.ns_ironsightX,cg.ns_ironsightY, cg.ns_ironsightZ );
;1265:	}
ADDRGP4 $598
JUMPV
LABELV $597
line 1267
;1266:	else // idle drift
;1267:	{
line 1269
;1268:		
;1269:		if (cg.xyspeed == 0) {
ADDRGP4 cg+115400
INDIRF4
CNSTF4 0
NEF4 $700
line 1270
;1270:			scale = cg.xyspeed + 40;
ADDRLP4 28
ADDRGP4 cg+115400
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1271
;1271:			fracsin = sin( cg.time * 0.001 );
CNSTF4 981668463
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 112
ADDRLP4 144
INDIRF4
ASGNF4
line 1272
;1272:			angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 148
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 28
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1273
;1273:			angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 28
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1274
;1274:			angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 156
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 28
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1275
;1275:		}
LABELV $700
line 1277
;1276:
;1277:		if ( cg.ns_ironsightX != 0.0f || cg.ns_ironsightY != 0.0f || cg.ns_ironsightZ != 0.0f )
ADDRLP4 144
CNSTF4 0
ASGNF4
ADDRGP4 cg+116692
INDIRF4
ADDRLP4 144
INDIRF4
NEF4 $711
ADDRGP4 cg+116696
INDIRF4
ADDRLP4 144
INDIRF4
NEF4 $711
ADDRGP4 cg+116700
INDIRF4
ADDRLP4 144
INDIRF4
EQF4 $705
LABELV $711
line 1278
;1278:		{ 
line 1280
;1279:
;1280:			if ( cg.ns_ironsightAngles[PITCH] != 0.0f && cg.ns_ironsightAngles[PITCH] >= cg_isgun_step.value )
ADDRGP4 cg+116704
INDIRF4
CNSTF4 0
EQF4 $712
ADDRGP4 cg+116704
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $712
line 1281
;1281:				cg.ns_ironsightAngles[PITCH] -= cg_isgun_step.value;
ADDRLP4 148
ADDRGP4 cg+116704
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $713
JUMPV
LABELV $712
line 1282
;1282:			else if ( cg.ns_ironsightAngles[PITCH] != 0.0f && cg.ns_ironsightAngles[PITCH] <= -cg_isgun_step.value )
ADDRGP4 cg+116704
INDIRF4
CNSTF4 0
EQF4 $719
ADDRGP4 cg+116704
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $719
line 1283
;1283:				cg.ns_ironsightAngles[PITCH] += cg_isgun_step.value;
ADDRLP4 152
ADDRGP4 cg+116704
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $719
LABELV $713
line 1285
;1284:
;1285:			if ( cg.ns_ironsightAngles[YAW] != 0.0f && cg.ns_ironsightAngles[YAW] >= cg_isgun_step.value )
ADDRGP4 cg+116704+4
INDIRF4
CNSTF4 0
EQF4 $726
ADDRGP4 cg+116704+4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $726
line 1286
;1286:				cg.ns_ironsightAngles[YAW] -= cg_isgun_step.value;
ADDRLP4 156
ADDRGP4 cg+116704+4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $727
JUMPV
LABELV $726
line 1287
;1287:			else if ( cg.ns_ironsightAngles[YAW] != 0.0f && cg.ns_ironsightAngles[YAW] <= -cg_isgun_step.value )
ADDRGP4 cg+116704+4
INDIRF4
CNSTF4 0
EQF4 $736
ADDRGP4 cg+116704+4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $736
line 1288
;1288:				cg.ns_ironsightAngles[YAW] += cg_isgun_step.value;
ADDRLP4 160
ADDRGP4 cg+116704+4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $736
LABELV $727
line 1290
;1289:
;1290:			if ( cg.ns_ironsightAngles[ROLL] != 0.0f && cg.ns_ironsightAngles[ROLL] >= cg_isgun_step.value )
ADDRGP4 cg+116704+8
INDIRF4
CNSTF4 0
EQF4 $746
ADDRGP4 cg+116704+8
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $746
line 1291
;1291:				cg.ns_ironsightAngles[ROLL] -= cg_isgun_step.value;
ADDRLP4 164
ADDRGP4 cg+116704+8
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $747
JUMPV
LABELV $746
line 1292
;1292:			else if ( cg.ns_ironsightAngles[ROLL] != 0.0f && cg.ns_ironsightAngles[ROLL] <= -cg_isgun_step.value )
ADDRGP4 cg+116704+8
INDIRF4
CNSTF4 0
EQF4 $756
ADDRGP4 cg+116704+8
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $756
line 1293
;1293:				cg.ns_ironsightAngles[ROLL] += cg_isgun_step.value;
ADDRLP4 168
ADDRGP4 cg+116704+8
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $756
LABELV $747
line 1295
;1294:
;1295:			if ( cg.ns_ironsightX >= cg_isgun_step.value )
ADDRGP4 cg+116692
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $766
line 1296
;1296:				cg.ns_ironsightX -= cg_isgun_step.value;
ADDRLP4 172
ADDRGP4 cg+116692
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $767
JUMPV
LABELV $766
line 1297
;1297:			else if ( cg.ns_ironsightX <= -cg_isgun_step.value )
ADDRGP4 cg+116692
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $772
line 1298
;1298:				cg.ns_ironsightX += cg_isgun_step.value;
ADDRLP4 176
ADDRGP4 cg+116692
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $772
LABELV $767
line 1300
;1299:
;1300:			if ( cg.ns_ironsightY >= cg_isgun_step.value )
ADDRGP4 cg+116696
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $778
line 1301
;1301:				cg.ns_ironsightY -= cg_isgun_step.value;
ADDRLP4 180
ADDRGP4 cg+116696
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $779
JUMPV
LABELV $778
line 1302
;1302:			else if ( cg.ns_ironsightY <= -cg_isgun_step.value )
ADDRGP4 cg+116696
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $784
line 1303
;1303:				cg.ns_ironsightY += cg_isgun_step.value;
ADDRLP4 184
ADDRGP4 cg+116696
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $784
LABELV $779
line 1305
;1304:
;1305:			if ( cg.ns_ironsightZ >= cg_isgun_step.value )
ADDRGP4 cg+116700
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
LTF4 $790
line 1306
;1306:				cg.ns_ironsightZ -= cg_isgun_step.value;
ADDRLP4 188
ADDRGP4 cg+116700
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
SUBF4
ASGNF4
ADDRGP4 $791
JUMPV
LABELV $790
line 1307
;1307:			else if ( cg.ns_ironsightZ <= -cg_isgun_step.value )
ADDRGP4 cg+116700
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
NEGF4
GTF4 $796
line 1308
;1308:				cg.ns_ironsightZ += cg_isgun_step.value;
ADDRLP4 192
ADDRGP4 cg+116700
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
ADDRGP4 cg_isgun_step+8
INDIRF4
ADDF4
ASGNF4
LABELV $796
LABELV $791
line 1310
;1309:
;1310:			VectorMA( origin, cg.ns_ironsightX , forward, origin );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 200
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRGP4 cg+116692
INDIRF4
MULF4
ADDF4
ASGNF4
line 1311
;1311:			VectorMA( origin, cg.ns_ironsightY , right, origin );
ADDRLP4 208
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 208
INDIRP4
ADDRLP4 208
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 100+4
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
ADDRLP4 100+8
INDIRF4
ADDRGP4 cg+116696
INDIRF4
MULF4
ADDF4
ASGNF4
line 1312
;1312:	 		VectorMA( origin, cg.ns_ironsightZ , up, origin ); 
ADDRLP4 220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 224
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 224
INDIRP4
ADDRLP4 224
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 228
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 228
INDIRP4
ADDRLP4 228
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+116700
INDIRF4
MULF4
ADDF4
ASGNF4
line 1314
;1313:
;1314:			angles[YAW] += cg.ns_ironsightAngles[YAW];
ADDRLP4 232
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 232
INDIRP4
ADDRLP4 232
INDIRP4
INDIRF4
ADDRGP4 cg+116704+4
INDIRF4
ADDF4
ASGNF4
line 1315
;1315:			angles[ROLL] += cg.ns_ironsightAngles[ROLL];
ADDRLP4 236
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 236
INDIRP4
ADDRLP4 236
INDIRP4
INDIRF4
ADDRGP4 cg+116704+8
INDIRF4
ADDF4
ASGNF4
line 1316
;1316:			angles[PITCH] += cg.ns_ironsightAngles[PITCH];
ADDRLP4 240
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 240
INDIRP4
ADDRLP4 240
INDIRP4
INDIRF4
ADDRGP4 cg+116704
INDIRF4
ADDF4
ASGNF4
line 1318
;1317:
;1318:		}
LABELV $705
line 1320
;1319:
;1320:	}
LABELV $598
line 1323
;1321:
;1322:
;1323:	if ( cg.snap->ps.pm_flags & PMF_CLIMB ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $822
line 1325
;1324:					
;1325:		if ( cg.ladderWeaponTime < 35 )
ADDRGP4 cg+116380
INDIRI4
CNSTI4 35
GEI4 $823
line 1326
;1326:			cg.ladderWeaponTime +=2; 
ADDRLP4 144
ADDRGP4 cg+116380
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 2
ADDI4
ASGNI4
line 1328
;1327:		
;1328:	} else if ( cg.ladderWeaponTime > 0 )
ADDRGP4 $823
JUMPV
LABELV $822
ADDRGP4 cg+116380
INDIRI4
CNSTI4 0
LEI4 $829
line 1329
;1329:		cg.ladderWeaponTime-=2;
ADDRLP4 144
ADDRGP4 cg+116380
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 2
SUBI4
ASGNI4
LABELV $829
LABELV $823
line 1331
;1330: 
;1331: 	VectorMA( origin, -( (float)(cg.ladderWeaponTime) / 1.0f ), up, origin );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
ADDRGP4 cg+116380
INDIRI4
CVIF4 4
CNSTF4 1065353216
DIVF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+116380
INDIRI4
CVIF4 4
CNSTF4 1065353216
DIVF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+116380
INDIRI4
CVIF4 4
CNSTF4 1065353216
DIVF4
NEGF4
MULF4
ADDF4
ASGNF4
line 1338
;1332:
;1333:#if DEBUG_BUILD
;1334:	if ( cg.ladderWeaponTime || cg.snap->ps.pm_flags & PMF_CLIMB)
;1335:		CG_Printf("laddertime: %f origin: %s\n",(float)(cg.ladderWeaponTime) , vtos(origin) );
;1336:#endif
;1337:
;1338:}
LABELV $503
endproc CG_CalculateWeaponPosition 244 28
export CG_CalculateWeaponPosition2
proc CG_CalculateWeaponPosition2 40 4
line 1345
;1339:
;1340:/*
;1341:==============
;1342:CG_CalculateWeaponPosition
;1343:==============
;1344:*/
;1345:void CG_CalculateWeaponPosition2( vec3_t origin, vec3_t angles ) {
line 1352
;1346:	float	scale;
;1347:	int		delta;
;1348:	float	fracsin;
;1349: 
;1350:
;1351:	// on odd legs, invert some angles
;1352:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+115396
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $839
line 1353
;1353:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+115400
INDIRF4
NEGF4
ASGNF4
line 1354
;1354:	} else {
ADDRGP4 $840
JUMPV
LABELV $839
line 1355
;1355:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+115400
INDIRF4
ASGNF4
line 1356
;1356:	}
LABELV $840
line 1359
;1357:
;1358:	// gun angles from bobbing
;1359:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 0
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1360
;1360:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1361
;1361:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+115400
INDIRF4
ADDRGP4 cg+115392
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1364
;1362:
;1363:	// drop the weapon when landing
;1364:	delta = cg.time - cg.landTime;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108940
INDIRI4
SUBI4
ASGNI4
line 1365
;1365:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 4
INDIRI4
CNSTI4 500
GEI4 $850
line 1366
;1366:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108936
INDIRF4
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CNSTF4 1140457472
DIVF4
ADDF4
ASGNF4
line 1367
;1367:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $851
JUMPV
LABELV $850
ADDRLP4 4
INDIRI4
CNSTI4 1000
GEI4 $853
line 1368
;1368:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108936
INDIRF4
MULF4
CNSTI4 1000
ADDRLP4 4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1140457472
DIVF4
ADDF4
ASGNF4
line 1370
;1369:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1370:	}
LABELV $853
LABELV $851
line 1374
;1371:
;1372:#if 1
;1373:	// drop the weapon when stair climbing
;1374:	delta = cg.time - cg.stepTime;
ADDRLP4 4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+108924
INDIRI4
SUBI4
ASGNI4
line 1375
;1375:	if ( delta < STEP_TIME/2 ) {
ADDRLP4 4
INDIRI4
CNSTI4 100
GEI4 $858
line 1376
;1376:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108920
INDIRF4
MULF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CNSTF4 1120403456
DIVF4
SUBF4
ASGNF4
line 1377
;1377:	} else if ( delta < STEP_TIME ) {
ADDRGP4 $859
JUMPV
LABELV $858
ADDRLP4 4
INDIRI4
CNSTI4 200
GEI4 $861
line 1378
;1378:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+108920
INDIRF4
MULF4
CNSTI4 200
ADDRLP4 4
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1120403456
DIVF4
SUBF4
ASGNF4
line 1379
;1379:	}
LABELV $861
LABELV $859
line 1383
;1380:#endif
;1381:
;1382:	// idle drift
;1383:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+115400
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1384
;1384:	fracsin = sin( cg.time * 0.001 );
CNSTF4 981668463
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 24
INDIRF4
ASGNF4
line 1385
;1385:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1386
;1386:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1387
;1387:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1388
;1388:}
LABELV $838
endproc CG_CalculateWeaponPosition2 40 4
export CG_AddWeaponWithPowerups
proc CG_AddWeaponWithPowerups 140 16
line 1402
;1389:
;1390:
;1391:
;1392:/*
;1393:========================
;1394:CG_AddWeaponWithPowerups
;1395:
;1396:  This is used for worldmodel rendering.
;1397:
;1398:  Very sad that we have to do so many hacks to make ns-co run on the limited resources we got
;1399:========================
;1400:*/
;1401:void CG_AddWeaponWithPowerups( refEntity_t gun, weaponInfo_t	*weapon,int i_equipment, int eFlags ) 
;1402:{
line 1406
;1403:	refEntity_t equipment;
;1404:
;1405:		// fix me: move this into addweapon w/p
;1406:   	if ( eFlags & EF_SILENCED )
ADDRFP4 12
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $867
line 1407
;1407:	{
line 1408
;1408:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1409
;1409:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1410
;1410:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1411
;1411:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1413
;1412:
;1413:		equipment.hModel = weapon->v_silencerModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 1415
;1414:
;1415:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $873
line 1416
;1416:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $873
line 1418
;1417:
;1418:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_flash"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1420
;1419:
;1420:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $877
line 1421
;1421:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $877
line 1422
;1422:	} 
LABELV $867
line 1425
;1423:
;1424:	// add powerup effects
;1425:	if ( i_equipment & ( 1 << PW_DUCKBILL ) )
ADDRFP4 8
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $880
line 1426
;1426:	{
line 1427
;1427:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1428
;1428:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1429
;1429:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1430
;1430:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1432
;1431:
;1432:		equipment.hModel = weapon->v_silencerModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 1434
;1433:
;1434:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $886
line 1435
;1435:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $886
line 1437
;1436:
;1437:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_flash"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1439
;1438:
;1439:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $889
line 1440
;1440:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $889
line 1442
;1441:
;1442:	}
LABELV $880
line 1444
;1443:
;1444:	if ( i_equipment & ( 1 << PW_LASERSIGHT ) )
ADDRFP4 8
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $892
line 1445
;1445:	{
line 1446
;1446:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1447
;1447:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1448
;1448:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1449
;1449:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1451
;1450:
;1451:		equipment.hModel = weapon->v_lasersightModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 1453
;1452:
;1453:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $898
line 1454
;1454:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $898
line 1456
;1455:
;1456:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1458
;1457:
;1458:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $902
line 1459
;1459:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $902
line 1461
;1460:
;1461:	}
LABELV $892
line 1462
;1462:	if ( i_equipment & ( 1 << PW_SCOPE ) ) // 
ADDRFP4 8
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $905
line 1463
;1463:	{
line 1464
;1464:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1465
;1465:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1466
;1466:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1467
;1467:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1469
;1468:
;1469:		equipment.hModel = weapon->v_scopeModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
line 1471
;1470:
;1471:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $911
line 1472
;1472:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $911
line 1474
;1473:
;1474:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1476
;1475:
;1476:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $906
line 1477
;1477:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1478
;1478:	} else if ( weapon->item->giTag == WP_M4 ) {
ADDRGP4 $906
JUMPV
LABELV $905
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 16
NEI4 $917
line 1479
;1479:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1480
;1480:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1481
;1481:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1482
;1482:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1484
;1483:
;1484:		equipment.hModel = weapon->v_flashModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ASGNI4
line 1486
;1485:
;1486:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $923
line 1487
;1487:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $923
line 1489
;1488:
;1489:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1491
;1490:
;1491:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $926
line 1492
;1492:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $926
line 1493
;1493:	}
LABELV $917
LABELV $906
line 1495
;1494:
;1495:	if ( i_equipment & ( 1 << PW_M203GL ) ) // 
ADDRFP4 8
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $929
line 1496
;1496:	{
line 1497
;1497:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1498
;1498:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1499
;1499:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1500
;1500:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1502
;1501:
;1502:		equipment.hModel = weapon->v_glModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1504
;1503:
;1504:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $935
line 1505
;1505:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $935
line 1507
;1506:
;1507:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1509
;1508:
;1509:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $930
line 1510
;1510:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1512
;1511:
;1512:	} 
ADDRGP4 $930
JUMPV
LABELV $929
line 1513
;1513:	else if ( i_equipment & ( 1 << PW_FLASHLIGHT ) ) // 
ADDRFP4 8
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $941
line 1514
;1514:	{
line 1515
;1515:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1516
;1516:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1517
;1517:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1518
;1518:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1520
;1519:
;1520:		equipment.hModel = weapon->v_glModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1522
;1521:
;1522:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $947
line 1523
;1523:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $947
line 1525
;1524:
;1525:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1527
;1526:
;1527:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $950
line 1528
;1528:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $950
line 1530
;1529:
;1530:	} 
LABELV $941
LABELV $930
line 1531
;1531:	if ( i_equipment & ( 1 << PW_BAYONET ) ) // 
ADDRFP4 8
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $953
line 1532
;1532:	{
line 1533
;1533:		memset( &equipment, 0, sizeof( equipment ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1534
;1534:		VectorCopy( gun.lightingOrigin, equipment.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1535
;1535:		equipment.shadowPlane = gun.shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1536
;1536:		equipment.renderfx = gun.renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1538
;1537:
;1538:		equipment.hModel = weapon->v_bayonetModel; 
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ASGNI4
line 1540
;1539:
;1540:		if ( gun.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $959
line 1541
;1541:			equipment.customSkin = gun.customSkin;
ADDRLP4 0+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $959
line 1543
;1542:
;1543:		CG_PositionEntityOnTag( &equipment, &gun, weapon->viewweaponModel,"tag_weapon"); 
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1545
;1544:
;1545:		if ( equipment.hModel )
ADDRLP4 0+8
INDIRI4
CNSTI4 0
EQI4 $962
line 1546
;1546:			trap_R_AddRefEntityToScene( &equipment );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $962
line 1548
;1547:
;1548:	} 	
LABELV $953
line 1549
;1549:	trap_R_AddRefEntityToScene( &gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1550
;1550:}
LABELV $866
endproc CG_AddWeaponWithPowerups 140 16
export CG_AddWeaponParts
proc CG_AddWeaponParts 192 16
line 1562
;1551:
;1552:/*
;1553:========================
;1554:CG_AddWeaponParts
;1555:
;1556:  This is used for worldmodel rendering.
;1557:
;1558:  draws all the models parts on the weapon
;1559:========================
;1560:*/
;1561:void CG_AddWeaponParts( refEntity_t hands, weaponInfo_t	*weapon ) 
;1562:{
line 1565
;1563:	refEntity_t part;
;1564:	char		*tagname;
;1565:	int			i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1567
;1566: 
;1567:	if ( cg.predictedPlayerState.weapon == WP_C4 )
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 3
NEI4 $966
line 1568
;1568:		return;
ADDRGP4 $965
JUMPV
LABELV $966
line 1570
;1569:
;1570: 	memset( &part, 0, sizeof( part ) );
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1571
;1571:	VectorCopy( hands.lightingOrigin, part.lightingOrigin );
ADDRLP4 4+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1572
;1572:	part.shadowPlane = hands.shadowPlane;
ADDRLP4 4+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1573
;1573:	part.renderfx = hands.renderfx;
ADDRLP4 4+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1575
;1574:
;1575:	if ( hands.customSkin )
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $973
line 1576
;1576:		part.customSkin = hands.customSkin;
ADDRLP4 4+108
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
LABELV $973
line 1579
;1577: 
;1578:	// render base weapon body
;1579:	part.hModel = weapon->weaponModel; 
ADDRLP4 4+8
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1582
;1580:
;1581:	
;1582:	CG_PositionEntityOnTag( &part, &hands, hands.hModel, "tag_weapon"); 
ADDRLP4 4
ARGP4
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1584
;1583:
;1584:	trap_R_AddRefEntityToScene( &part ); 
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1587
;1585:
;1586:	// no weaponparts to render
;1587:	if ( strlen( weapon->partTags[0] ) <= 1 )
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRP4
ARGP4
ADDRLP4 152
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 1
GTI4 $980
line 1588
;1588:		return;
ADDRGP4 $965
JUMPV
LABELV $979
line 1592
;1589:
;1590: 	// render all parts for this weapon
;1591:	while ( strlen( weapon->partTags[i] ) > 1 )
;1592:	{
line 1593
;1593:		tagname = va("tag_%s",weapon->partTags[i] ); 
ADDRGP4 $982
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 144
ADDRLP4 156
INDIRP4
ASGNP4
line 1596
;1594:		
;1595:		// special handling for belt feeded weapons
;1596:		if ( !Q_stricmp( "belt" , weapon->partTags[i] ) ||
ADDRGP4 $407
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 160
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $985
ADDRGP4 $406
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $983
LABELV $985
line 1599
;1597:			 !Q_stricmp( "bullet" , weapon->partTags[i] )
;1598:			)
;1599:		{
line 1600
;1600:			int rounds = cg.predictedPlayerState.stats[STAT_ROUNDS];
ADDRLP4 172
ADDRGP4 cg+107636+184+52
INDIRI4
ASGNI4
line 1601
;1601:			int j = 0;
ADDRLP4 168
CNSTI4 0
ASGNI4
line 1603
;1602:
;1603:			if ( rounds > 8 )
ADDRLP4 172
INDIRI4
CNSTI4 8
LEI4 $989
line 1604
;1604:				rounds = 8;
ADDRLP4 172
CNSTI4 8
ASGNI4
LABELV $989
line 1606
;1605:			
;1606:			rounds--;
ADDRLP4 172
ADDRLP4 172
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1608
;1607:
;1608:			if ( rounds > 0 )
ADDRLP4 172
INDIRI4
CNSTI4 0
LEI4 $991
line 1609
;1609:				for ( j=0; j<rounds; j++ )
ADDRLP4 168
CNSTI4 0
ASGNI4
ADDRGP4 $996
JUMPV
LABELV $993
line 1610
;1610:				{
line 1611
;1611:					if ( !Q_stricmp( "bullet" , weapon->partTags[i] ) )
ADDRGP4 $406
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $997
line 1612
;1612:						tagname = va( "tag_bullet0%i", j+1 );
ADDRGP4 $999
ARGP4
ADDRLP4 168
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 180
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 144
ADDRLP4 180
INDIRP4
ASGNP4
ADDRGP4 $998
JUMPV
LABELV $997
line 1614
;1613:					else
;1614:						tagname = va( "tag_belt0%i", j+1 );
ADDRGP4 $1000
ARGP4
ADDRLP4 168
INDIRI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 184
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 144
ADDRLP4 184
INDIRP4
ASGNP4
LABELV $998
line 1616
;1615:
;1616:						part.hModel = weapon->weaponParts[i];  
ADDRLP4 4+8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1618
;1617:
;1618:						CG_PositionEntityOnTag( &part, &hands, hands.hModel, tagname); 
ADDRLP4 4
ARGP4
ADDRLP4 188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 188
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 144
INDIRP4
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1620
;1619:
;1620:						trap_R_AddRefEntityToScene( &part );
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1621
;1621:				}
LABELV $994
line 1609
ADDRLP4 168
ADDRLP4 168
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $996
ADDRLP4 168
INDIRI4
ADDRLP4 172
INDIRI4
LTI4 $993
LABELV $991
line 1624
;1622:
;1623:				
;1624:			i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1625
;1625:			continue;
ADDRGP4 $980
JUMPV
LABELV $983
line 1628
;1626:		}
;1627:
;1628:		if ( !Q_stricmp( "gl" , weapon->partTags[i] ) ||
ADDRGP4 $391
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $1006
ADDRGP4 $415
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
EQI4 $1006
ADDRGP4 $416
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
EQI4 $1006
ADDRGP4 $417
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $1002
LABELV $1006
line 1632
;1629:			!Q_stricmp( "m203gren" , weapon->partTags[i] ) ||
;1630:			!Q_stricmp( "m203rel" , weapon->partTags[i] ) ||
;1631:			!Q_stricmp( "m203" , weapon->partTags[i] ))
;1632:		{
line 1633
;1633:			if( !(cg.predictedPlayerState.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) ) ) {
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
NEI4 $1007
line 1634
;1634:				i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1635
;1635:				continue;
ADDRGP4 $980
JUMPV
LABELV $1007
line 1638
;1636:			}
;1637:
;1638:			if ( !Q_stricmp( "gl" , weapon->partTags[i] ) ||
ADDRGP4 $391
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $1014
ADDRGP4 $417
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $1012
LABELV $1014
line 1640
;1639:				!Q_stricmp( "m203" , weapon->partTags[i] ))
;1640:				tagname = "tag_weapon";
ADDRLP4 144
ADDRGP4 $901
ASGNP4
LABELV $1012
line 1641
;1641:		}
LABELV $1002
line 1644
;1642:
;1643:		
;1644:		if ( !Q_stricmp( "handle" , weapon->partTags[i] ) )
ADDRGP4 $418
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $1015
line 1645
;1645:		{	
line 1646
;1646:			if( cg.predictedPlayerState.stats[STAT_WEAPONMODE] & ( 1 << WM_SCOPE ) ) {
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $1017
line 1647
;1647:				i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1648
;1648:				continue;
ADDRGP4 $980
JUMPV
LABELV $1017
line 1651
;1649:			}
;1650:
;1651:			tagname = "tag_weapon";
ADDRLP4 144
ADDRGP4 $901
ASGNP4
line 1652
;1652:		} 
LABELV $1015
line 1654
;1653:  
;1654:		part.hModel = weapon->weaponParts[i];  
ADDRLP4 4+8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDP4
INDIRI4
ASGNI4
line 1656
;1655:
;1656:		CG_PositionEntityOnTag( &part, &hands, hands.hModel, tagname); 
ADDRLP4 4
ARGP4
ADDRLP4 188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 188
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 144
INDIRP4
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1658
;1657:
;1658:		trap_R_AddRefEntityToScene( &part );
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1659
;1659:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1660
;1660:	} 
LABELV $980
line 1591
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 1
GTI4 $979
line 1662
;1661:
;1662:}
LABELV $965
endproc CG_AddWeaponParts 192 16
export pointinfrontmindot
proc pointinfrontmindot 48 16
line 1675
;1663:
;1664:
;1665:/*
;1666:=============
;1667:CG_AddPlayerWeapon
;1668:
;1669:Used for the world modelother character models (ps is NULL)
;1670:The main player will have this called for BOTH cases, so effects like light and
;1671:sound should only be done on the world model case.
;1672:=============
;1673:*/
;1674:qboolean pointinfrontmindot (vec3_t angles, vec3_t origin, vec3_t point, float mindot)
;1675:{
line 1680
;1676:	vec3_t	vec;
;1677:	float	dot;
;1678:	vec3_t	forward;
;1679:	
;1680:	AngleVectors (angles, forward, NULL, NULL);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 28
CNSTP4 0
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1681
;1681:	VectorSubtract (point, origin, vec);
ADDRLP4 32
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 32
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1682
;1682:	VectorNormalize (vec);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1683
;1683:	dot = DotProduct (vec, forward);
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1685
;1684:	
;1685:	if (dot > mindot)
ADDRLP4 24
INDIRF4
ADDRFP4 12
INDIRF4
LEF4 $1030
line 1686
;1686:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1023
JUMPV
LABELV $1030
line 1687
;1687:	return qfalse;
CNSTI4 0
RETI4
LABELV $1023
endproc pointinfrontmindot 48 16
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 744 48
line 1691
;1688:} 
;1689:
;1690:void _CG_Flare( centity_t *cent, vec3_t lerpOrigin, float size, float r, float g, float b, qboolean showCorona );
;1691:void CG_AddPlayerWeapon( refEntity_t *leftArm, refEntity_t *rightArm, playerState_t *ps, centity_t *cent ) {
line 1699
;1692:	refEntity_t	gun;
;1693:	refEntity_t	flash;
;1694: 	vec3_t		angles;
;1695:	int	weaponNum;
;1696:	weaponInfo_t	*weapon;
;1697:	centity_t	*nonPredictedCent;
;1698:
;1699:	weaponNum = cent->currentState.weapon;
ADDRLP4 284
ADDRFP4 12
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1702
;1700:
;1701:	// CG_RegisterWeapon( weaponNum );
;1702:	weapon = &cg_weapons[weaponNum];
ADDRLP4 140
CNSTI4 296
ADDRLP4 284
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1705
;1703:
;1704:	// add the weapon
;1705:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 144
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1706
;1706:	VectorCopy( rightArm->lightingOrigin, gun.lightingOrigin );
ADDRLP4 144+12
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1707
;1707:	gun.shadowPlane = rightArm->shadowPlane;
ADDRLP4 144+24
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1708
;1708:	gun.renderfx = rightArm->renderfx;
ADDRLP4 144+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1710
;1709:  
;1710:	gun.hModel = weapon->viewweaponModel;
ADDRLP4 144+8
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ASGNI4
line 1714
;1711:	//
;1712:	// apply tango skin
;1713:	//
;1714:	if ( !cg_disableTangoHandSkin.integer )
ADDRGP4 cg_disableTangoHandSkin+12
INDIRI4
CNSTI4 0
NEI4 $1037
line 1715
;1715:	{
line 1716
;1716:		clientInfo_t	*ci = &cgs.clientinfo[ cent->currentState.number ];
ADDRLP4 304
CNSTI4 2484
ADDRFP4 12
INDIRP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 1719
;1717:		
;1718:		
;1719:		if ( ci->team  == TEAM_BLUE)
ADDRLP4 304
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1041
line 1720
;1720:			gun.customSkin = weapon->t_viewweaponSkin; 
ADDRLP4 144+108
ADDRLP4 140
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
LABELV $1041
line 1724
;1721:
;1722:		// we're caching this here because it's only one weapon that uses this
;1723:		// it's not worth adding a _v.skin for every weapon
;1724:		if ( cent->currentState.eFlags & EF_VIP && BG_IsPistol( weaponNum ) )
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1044
ADDRLP4 284
INDIRI4
ARGI4
ADDRLP4 308
ADDRGP4 BG_IsPistol
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
EQI4 $1044
line 1725
;1725:		{
line 1729
;1726:			char			path[MAX_QPATH];
;1727:			gitem_t			*item;
;1728:
;1729:			item = BG_FindItemForWeapon( weaponNum );
ADDRLP4 284
INDIRI4
ARGI4
ADDRLP4 380
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 376
ADDRLP4 380
INDIRP4
ASGNP4
line 1731
;1730:
;1731:			if ( item )
ADDRLP4 376
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1046
line 1732
;1732:			{
line 1733
;1733:				strcpy( path, item->world_model[0] );
ADDRLP4 312
ARGP4
ADDRLP4 376
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 1734
;1734:				COM_StripExtension( path, path );
ADDRLP4 312
ARGP4
ADDRLP4 312
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 1735
;1735:				strcat( path, "_v.skin" );
ADDRLP4 312
ARGP4
ADDRGP4 $1048
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 1737
;1736:
;1737:				gun.customSkin =  trap_R_RegisterSkin( path );
ADDRLP4 312
ARGP4
ADDRLP4 384
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 144+108
ADDRLP4 384
INDIRI4
ASGNI4
line 1738
;1738:			}
LABELV $1046
line 1739
;1739:		}
LABELV $1044
line 1742
;1740:
;1741:
;1742:	}
LABELV $1037
line 1743
;1743:	if (!gun.hModel) {
ADDRLP4 144+8
INDIRI4
CNSTI4 0
NEI4 $1050
line 1744
;1744:		return;
ADDRGP4 $1032
JUMPV
LABELV $1050
line 1747
;1745:	}
;1746: 
;1747:	CG_PositionEntityOnTag( &gun, rightArm, rightArm->hModel, "tag_weapon");
ADDRLP4 144
ARGP4
ADDRLP4 304
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 304
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 1749
;1748:
;1749:	CG_AddWeaponWithPowerups( gun, weapon, cent->currentState.powerups, cent->currentState.eFlags );
ADDRLP4 308
ADDRLP4 144
INDIRB
ASGNB 140
ADDRLP4 308
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 448
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 448
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 448
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1752
;1750: 
;1751:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1752:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 300
CNSTI4 728
ADDRFP4 12
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1757
;1753:
;1754:	// if the index of the nonPredictedCent is not the same as the clientNum
;1755:	// then this is a fake player (like on teh single player podiums), so
;1756:	// go ahead and use the cent
;1757:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 300
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 728
DIVI4
ADDRFP4 12
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $1053
line 1758
;1758:		nonPredictedCent = cent;
ADDRLP4 300
ADDRFP4 12
INDIRP4
ASGNP4
line 1759
;1759:	}
LABELV $1053
line 1764
;1760:
;1761:	//
;1762:	// flashlight
;1763:	//
;1764: 	if ( cent->currentState.eFlags & EF_WEAPONMODE3 ) // flashlight
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $1055
line 1765
;1765:	{
line 1776
;1766:		
;1767:		vec3_t forward,right;
;1768:		trace_t		trace;
;1769:		vec3_t			muzzlePoint, endPoint;
;1770:   		refEntity_t		beam;
;1771://		qhandle_t laser;
;1772://		int	rf;
;1773://		vec4_t	rgba;
;1774:#define FLASHLIGHT_RANGE	2000
;1775:	 
;1776: 		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 556
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1777
;1777:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1779
;1778:  		
;1779:		VectorCopy( cent->currentState.pos.trBase , muzzlePoint );
ADDRLP4 544
ADDRFP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1781
;1780:
;1781: 		AngleVectors( cent->currentState.apos.trBase , forward, right, NULL );
ADDRFP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 520
ARGP4
ADDRLP4 532
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1784
;1782:
;1783:		// project forward by the lightning range
;1784:		VectorMA( cent->currentState.pos.trBase , FLASHLIGHT_RANGE, forward, endPoint );
ADDRLP4 696
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 700
CNSTF4 1157234688
ASGNF4
ADDRLP4 452
ADDRLP4 696
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 520
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+4
ADDRLP4 696
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 520+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+8
ADDRFP4 12
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1157234688
ADDRLP4 520+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1786
;1785:
;1786:		{
line 1789
;1787:			int anim;
;1788:
;1789:			anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 704
ADDRFP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1791
;1790:				
;1791:			if ( anim == LEGS_WALKCR || anim == LEGS_BACKCR || anim == LEGS_IDLECR ) {
ADDRLP4 708
ADDRLP4 704
INDIRI4
ASGNI4
ADDRLP4 708
INDIRI4
CNSTI4 42
EQI4 $1064
ADDRLP4 708
INDIRI4
CNSTI4 55
EQI4 $1064
ADDRLP4 708
INDIRI4
CNSTI4 41
NEI4 $1061
LABELV $1064
line 1792
;1792:				endPoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 452+8
ADDRLP4 452+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 1793
;1793:				muzzlePoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 544+8
ADDRLP4 544+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 1794
;1794:			}
ADDRGP4 $1062
JUMPV
LABELV $1061
line 1795
;1795:			else {
line 1796
;1796:				endPoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 452+8
ADDRLP4 452+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1797
;1797:				muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 544+8
ADDRLP4 544+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1798
;1798:			}
LABELV $1062
line 1799
;1799:		}
line 1802
;1800:  
;1801:		// see if it hit a wall
;1802:		CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 464
ARGP4
ADDRLP4 544
ARGP4
ADDRLP4 704
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 704
INDIRP4
ARGP4
ADDRLP4 704
INDIRP4
ARGP4
ADDRLP4 452
ARGP4
ADDRFP4 12
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1811
;1803:			cent->currentState.number, MASK_SHOT ); 
;1804: 
;1805:		// create the lightning
;1806:		//trap_R_AddAdditiveLightToScene( trace.endpos, 200, 0.3f,0.3f,0.3f);
;1807:		//
;1808:		// BLUTENGEL 20040207
;1809:		/*trap_R_AddLightToScene( trace.endpos, 150, 1.0f-trace.fraction,1.0f-trace.fraction,1.0f-trace.fraction);
;1810:		trap_R_AddLightToScene( trace.endpos, 200, 1.0f-trace.fraction,1.0f-trace.fraction,1.0f-trace.fraction);*/
;1811:		VectorMA(trace.endpos, -32.0, forward, trace.endpos);
ADDRLP4 464+12
ADDRLP4 464+12
INDIRF4
CNSTF4 3254779904
ADDRLP4 520
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 464+12+4
ADDRLP4 464+12+4
INDIRF4
CNSTF4 3254779904
ADDRLP4 520+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 464+12+8
ADDRLP4 464+12+8
INDIRF4
CNSTF4 3254779904
ADDRLP4 520+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1812
;1812:		trap_R_AddAdditiveLightToScene( trace.endpos, 300-trace.fraction*150, 0.02f, 0.02f, 0.03f);
ADDRLP4 464+12
ARGP4
CNSTF4 1133903872
CNSTF4 1125515264
ADDRLP4 464+8
INDIRF4
MULF4
SUBF4
ARGF4
ADDRLP4 708
CNSTF4 1017370378
ASGNF4
ADDRLP4 708
INDIRF4
ARGF4
ADDRLP4 708
INDIRF4
ARGF4
CNSTF4 1022739087
ARGF4
ADDRGP4 trap_R_AddAdditiveLightToScene
CALLV
pop
line 1813
;1813:		trap_R_AddAdditiveLightToScene( trace.endpos, 100-trace.fraction*50, 0.08f, 0.08f, 0.10f);
ADDRLP4 464+12
ARGP4
CNSTF4 1120403456
CNSTF4 1112014848
ADDRLP4 464+8
INDIRF4
MULF4
SUBF4
ARGF4
ADDRLP4 712
CNSTF4 1034147594
ASGNF4
ADDRLP4 712
INDIRF4
ARGF4
ADDRLP4 712
INDIRF4
ARGF4
CNSTF4 1036831949
ARGF4
ADDRGP4 trap_R_AddAdditiveLightToScene
CALLV
pop
line 1816
;1814:  
;1815:		// render the lensflare effect
;1816: 		CG_GetOriginFromTag(&gun, weapon->viewweaponModel , "tag_flash", endPoint );
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRLP4 452
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
line 1818
;1817:
;1818:		VectorMA( endPoint, 1, right, endPoint );
ADDRLP4 716
CNSTF4 1065353216
ASGNF4
ADDRLP4 452
ADDRLP4 452
INDIRF4
ADDRLP4 716
INDIRF4
ADDRLP4 532
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+4
ADDRLP4 452+4
INDIRF4
ADDRLP4 716
INDIRF4
ADDRLP4 532+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+8
ADDRLP4 452+8
INDIRF4
CNSTF4 1065353216
ADDRLP4 532+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1822
;1819:
;1820:  		// this is ugly. we have to trace back from org to the player model to see wheter
;1821:		// the flash would be sticking through a wall or not...
;1822:		CG_Trace( &trace, endPoint, vec3_origin, vec3_origin, cent->lerpOrigin, -1, MASK_SHOT ); 
ADDRLP4 464
ARGP4
ADDRLP4 452
ARGP4
ADDRLP4 720
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 720
INDIRP4
ARGP4
ADDRLP4 720
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
CNSTI4 700
ADDP4
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1824
;1823:
;1824:		if ( trace.entityNum == cent->currentState.clientNum )
ADDRLP4 464+52
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
NEI4 $1091
line 1825
;1825:		{ 
line 1826
;1826:			if ( pointinfrontmindot( cent->currentState.apos.trBase,endPoint, cg.refdef.vieworg , -0.3 + test_x.value ) )
ADDRFP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 452
ARGP4
ADDRGP4 cg+109044+24
ARGP4
ADDRGP4 test_x+8
INDIRF4
CNSTF4 3197737370
ADDF4
ARGF4
ADDRLP4 724
ADDRGP4 pointinfrontmindot
CALLI4
ASGNI4
ADDRLP4 724
INDIRI4
CNSTI4 0
EQI4 $1094
line 1827
;1827:			{
line 1828
;1828:				_CG_Flare( cent, endPoint, 10, 100 ,100 ,100 ,qtrue );
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 452
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 728
CNSTF4 1120403456
ASGNF4
ADDRLP4 728
INDIRF4
ARGF4
ADDRLP4 728
INDIRF4
ARGF4
ADDRLP4 728
INDIRF4
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 _CG_Flare
CALLV
pop
line 1829
;1829:			}
LABELV $1094
line 1830
;1830:		} 
LABELV $1091
line 1831
;1831: 	} 
LABELV $1055
line 1836
;1832:
;1833:	//
;1834:	// laserbeam
;1835:	//
;1836:	if ( cent->currentState.eFlags & EF_LASERSIGHT )
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1099
line 1837
;1837:	{
line 1846
;1838:		
;1839:		vec3_t forward;
;1840:		trace_t		trace;
;1841:		vec3_t			muzzlePoint, endPoint;
;1842:   		refEntity_t		beam;
;1843:		qhandle_t laser;
;1844:		int	rf;
;1845:	 
;1846: 		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 532
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1847
;1847:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1850
;1848:  
;1849:		
;1850:		CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_laser");
ADDRLP4 0
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1101
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1852
;1851:		// find muzzle point for this frame
;1852:		VectorCopy ( flash.origin,muzzlePoint ); 
ADDRLP4 672
ADDRLP4 0+68
INDIRB
ASGNB 12
line 1854
;1853:	  
;1854: 		AngleVectors( cent->currentState.apos.trBase , forward, NULL, NULL );
ADDRFP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 464
ARGP4
ADDRLP4 692
CNSTP4 0
ASGNP4
ADDRLP4 692
INDIRP4
ARGP4
ADDRLP4 692
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1857
;1855:
;1856:		// project forward by the lightning range
;1857:		VectorMA( cent->currentState.pos.trBase , LIGHTNING_RANGE, forward, endPoint );
ADDRLP4 696
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 700
CNSTF4 1145044992
ASGNF4
ADDRLP4 452
ADDRLP4 696
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 464
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+4
ADDRLP4 696
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 700
INDIRF4
ADDRLP4 464+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 452+8
ADDRFP4 12
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1145044992
ADDRLP4 464+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1859
;1858:
;1859:		{ // 0711-9970713
line 1862
;1860:			int anim;
;1861:
;1862:			anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 704
ADDRFP4 12
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 1864
;1863:				
;1864:			if ( anim == LEGS_WALKCR  || anim == LEGS_BACKCR || anim == LEGS_IDLECR )
ADDRLP4 708
ADDRLP4 704
INDIRI4
ASGNI4
ADDRLP4 708
INDIRI4
CNSTI4 42
EQI4 $1110
ADDRLP4 708
INDIRI4
CNSTI4 55
EQI4 $1110
ADDRLP4 708
INDIRI4
CNSTI4 41
NEI4 $1107
LABELV $1110
line 1865
;1865:				endPoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 452+8
ADDRLP4 452+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
ADDRGP4 $1108
JUMPV
LABELV $1107
line 1867
;1866:			else
;1867:				endPoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 452+8
ADDRLP4 452+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
LABELV $1108
line 1868
;1868:		}
line 1870
;1869: 
;1870:		laser = trap_R_RegisterShader( "gfx/misc/ns_laserbeam" ); 
ADDRGP4 $1113
ARGP4
ADDRLP4 704
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 688
ADDRLP4 704
INDIRI4
ASGNI4
line 1872
;1871:		// see if it hit a wall
;1872:		CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 476
ARGP4
ADDRLP4 672
ARGP4
ADDRLP4 708
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 708
INDIRP4
ARGP4
ADDRLP4 708
INDIRP4
ARGP4
ADDRLP4 452
ARGP4
ADDRFP4 12
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1875
;1873:			cent->currentState.number, MASK_SHOT ); 
;1874:
;1875:		VectorCopy( trace.endpos , endPoint );
ADDRLP4 452
ADDRLP4 476+12
INDIRB
ASGNB 12
line 1877
;1876:
;1877:		if ( cent->currentState.number == cg.snap->ps.clientNum && !cg.renderingThirdPerson ) {
ADDRFP4 12
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1115
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
NEI4 $1115
line 1878
;1878:			rf = RF_THIRD_PERSON;		// only show in mirrors
ADDRLP4 684
CNSTI4 2
ASGNI4
line 1879
;1879:		} else {
ADDRGP4 $1116
JUMPV
LABELV $1115
line 1880
;1880:			rf = 0;
ADDRLP4 684
CNSTI4 0
ASGNI4
line 1881
;1881:		}
LABELV $1116
line 1883
;1882:
;1883:		if (! (CG_PointContents( muzzlePoint, cent->currentState.number ) & CONTENTS_SOLID) &&
ADDRLP4 672
ARGP4
ADDRFP4 12
INDIRP4
INDIRI4
ARGI4
ADDRLP4 712
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 716
CNSTI4 0
ASGNI4
ADDRLP4 712
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 716
INDIRI4
NEI4 $1119
ADDRLP4 476+4
INDIRI4
ADDRLP4 716
INDIRI4
NEI4 $1119
line 1885
;1884:			!trace.startsolid )
;1885:		{
line 1886
;1886:			if ( !rf) {
ADDRLP4 684
INDIRI4
CNSTI4 0
NEI4 $1122
line 1889
;1887:				vec4_t rgba;
;1888:
;1889:				rgba[0] = rgba[1] = rgba[2] = 1;
ADDRLP4 736
CNSTF4 1065353216
ASGNF4
ADDRLP4 720+8
ADDRLP4 736
INDIRF4
ASGNF4
ADDRLP4 720+4
ADDRLP4 736
INDIRF4
ASGNF4
ADDRLP4 720
ADDRLP4 736
INDIRF4
ASGNF4
line 1890
;1890:				rgba[3] = 0.6f;
ADDRLP4 720+12
CNSTF4 1058642330
ASGNF4
line 1892
;1891:
;1892:				CG_Tracer( muzzlePoint, endPoint, 0.1f, laser , rgba );
ADDRLP4 672
ARGP4
ADDRLP4 452
ARGP4
CNSTF4 1036831949
ARGF4
ADDRLP4 688
INDIRI4
ARGI4
ADDRLP4 720
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 1893
;1893:			}
LABELV $1122
line 1896
;1894:
;1895:			// add the impact flare if it hit something
;1896:			if ( trace.fraction < 1.0 ) {
ADDRLP4 476+8
INDIRF4
CNSTF4 1065353216
GEF4 $1127
line 1900
;1897:				vec3_t	angles;   
;1898: 
;1899:
;1900:				beam.customShader = cgs.media.laserShader;
ADDRLP4 532+112
ADDRGP4 cgs+205084+640
INDIRI4
ASGNI4
line 1901
;1901:				beam.reType = RT_SPRITE;
ADDRLP4 532
CNSTI4 2
ASGNI4
line 1902
;1902:				beam.radius = 0.5;
ADDRLP4 532+132
CNSTF4 1056964608
ASGNF4
line 1904
;1903:
;1904:				beam.renderfx = rf;
ADDRLP4 532+4
ADDRLP4 684
INDIRI4
ASGNI4
line 1905
;1905:				VectorMA( trace.endpos, -0.4, forward, beam.origin );
ADDRLP4 532+68
ADDRLP4 476+12
INDIRF4
CNSTF4 3201092813
ADDRLP4 464
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 532+68+4
ADDRLP4 476+12+4
INDIRF4
CNSTF4 3201092813
ADDRLP4 464+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 532+68+8
ADDRLP4 476+12+8
INDIRF4
CNSTF4 3201092813
ADDRLP4 464+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1908
;1906:
;1907:				// make a random orientation
;1908:				angles[0] = rand() % 360;
ADDRLP4 732
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 720
ADDRLP4 732
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1909
;1909:				angles[1] = rand() % 360;
ADDRLP4 736
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 720+4
ADDRLP4 736
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1910
;1910:				angles[2] = rand() % 360;
ADDRLP4 740
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 720+8
ADDRLP4 740
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1911
;1911:				AnglesToAxis( angles, beam.axis );
ADDRLP4 720
ARGP4
ADDRLP4 532+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1912
;1912:				trap_R_AddRefEntityToScene( &beam );
ADDRLP4 532
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1913
;1913:			} 
LABELV $1127
line 1914
;1914:		}
LABELV $1119
line 1915
;1915:	} 
LABELV $1099
line 1919
;1916:	//
;1917:	// shell ejection
;1918:	// 	
;1919:	if ( cg_brassTime.value > 0 && weapon->ejectBrassNum && cent->brassEjected > 0 ) 
ADDRGP4 cg_brassTime+8
INDIRF4
CNSTF4 0
LEF4 $1150
ADDRLP4 452
CNSTI4 0
ASGNI4
ADDRLP4 140
INDIRP4
CNSTI4 272
ADDP4
INDIRI4
ADDRLP4 452
INDIRI4
EQI4 $1150
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
ADDRLP4 452
INDIRI4
LEI4 $1150
line 1920
;1920:	{ 
line 1922
;1921:		// only draw these if we're not our client
;1922:		if ( cent->currentState.number != cg.snap->ps.clientNum || cg.renderingThirdPerson ) 
ADDRFP4 12
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1157
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $1153
LABELV $1157
line 1923
;1923:		{
line 1925
;1924:	//		CG_Printf("%i \n",cg.time - cent->muzzleFlashTime); 
;1925:			if ( weaponNum == WP_SW629 && cg.time - cent->muzzleFlashTime < ( SW629_BRASS_EJECTTIME + MUZZLE_FLASH_TIME ) )
ADDRLP4 284
INDIRI4
CNSTI4 11
NEI4 $1158
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 1565
GEI4 $1158
line 1926
;1926:				;
ADDRGP4 $1159
JUMPV
LABELV $1158
line 1927
;1927:			else if ( weaponNum == WP_MACMILLAN && cg.time - cent->muzzleFlashTime < MACMILLAN_BRASS_EJECTTIME )
ADDRLP4 284
INDIRI4
CNSTI4 18
NEI4 $1161
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
GEI4 $1161
line 1928
;1928:				;
ADDRGP4 $1162
JUMPV
LABELV $1161
line 1929
;1929:			else {
line 1932
;1930:				vec3_t origin;
;1931:
;1932:				if ( weaponNum == WP_SW629 )
ADDRLP4 284
INDIRI4
CNSTI4 11
NEI4 $1164
line 1933
;1933:				{
line 1934
;1934:					char *tag_name = "tag_ejection";
ADDRLP4 468
ADDRGP4 $1166
ASGNP4
line 1936
;1935:
;1936:					if ( cent->brassEjected == 6 )
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1167
line 1937
;1937:						tag_name = "tag_ejection6";
ADDRLP4 468
ADDRGP4 $1169
ASGNP4
ADDRGP4 $1168
JUMPV
LABELV $1167
line 1938
;1938:					else if ( cent->brassEjected == 5 )
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1170
line 1939
;1939:						tag_name = "tag_ejection5";
ADDRLP4 468
ADDRGP4 $1172
ASGNP4
ADDRGP4 $1171
JUMPV
LABELV $1170
line 1940
;1940:					else if ( cent->brassEjected == 4 )
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 4
NEI4 $1173
line 1941
;1941:						tag_name = "tag_ejection4";
ADDRLP4 468
ADDRGP4 $1175
ASGNP4
ADDRGP4 $1174
JUMPV
LABELV $1173
line 1942
;1942:					else if ( cent->brassEjected == 3 )
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1176
line 1943
;1943:						tag_name = "tag_ejection3";
ADDRLP4 468
ADDRGP4 $1178
ASGNP4
ADDRGP4 $1177
JUMPV
LABELV $1176
line 1944
;1944:					else if ( cent->brassEjected == 2 )
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1179
line 1945
;1945:						tag_name = "tag_ejection2";
ADDRLP4 468
ADDRGP4 $1181
ASGNP4
LABELV $1179
LABELV $1177
LABELV $1174
LABELV $1171
LABELV $1168
line 1948
;1946:
;1947:					// sw629 special rule
;1948:					CG_GetOriginFromTag( &gun, weapon->viewweaponModel, tag_name, origin );		
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRLP4 468
INDIRP4
ARGP4
ADDRLP4 456
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
line 1949
;1949:				}
ADDRGP4 $1165
JUMPV
LABELV $1164
line 1951
;1950:				else
;1951:					CG_GetOriginFromTag( &gun, weapon->viewweaponModel, "tag_ejection", origin );		
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1166
ARGP4
ADDRLP4 456
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
LABELV $1165
line 1953
;1952:
;1953:				CG_EjectBrass( cent, origin , weapon->ejectBrassType, qfalse );
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 456
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 CG_EjectBrass
CALLV
pop
line 1955
;1954:
;1955:				cent->brassEjected--;
ADDRLP4 468
ADDRFP4 12
INDIRP4
CNSTI4 432
ADDP4
ASGNP4
ADDRLP4 468
INDIRP4
ADDRLP4 468
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1956
;1956:			}
LABELV $1162
LABELV $1159
line 1957
;1957:		}
LABELV $1153
line 1958
;1958:	}	 
LABELV $1150
line 1960
;1959:
;1960:	if ( cent->gunSmokePuff )
ADDRFP4 12
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1182
line 1961
;1961:	{
line 1987
;1962:		/*
;1963: 		vec3_t up;
;1964:		localEntity_t *smoke;
;1965:		vec3_t	forward;
;1966:
;1967: 		AngleVectors( cent->currentState.apos.trBase , forward, NULL, NULL );
;1968:
;1969:		memset( &flash, 0, sizeof( flash ) );
;1970: 
;1971:		// find muzzle point for this frame  
;1972:		CG_CalculateWeaponPosition( flash.origin, angles ); 
;1973:		AngleVectors( angles  , forward, NULL, NULL );
;1974:		VectorMA( up, 15, forward, up );
;1975:
;1976:		up[2] = 5;
;1977:
;1978:		if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) )
;1979:			CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_flash2");
;1980:		else
;1981:			CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_flash");
;1982:
;1983:		cent->gunSmokePuff = qfalse;
;1984:
;1985:		smoke = CG_SmokePuff( flash.origin, up, 7.5f,1,1,1,1,225,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
;1986:		*/
;1987: 	}
LABELV $1182
line 1991
;1988:	//
;1989:	// gun smoke
;1990:	//
;1991:	if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME ) 
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 12
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $1184
line 1992
;1992:	{
line 1993
;1993:		if ( cent->gunSmokeTime - cg.time > 0 && ( !BG_IsMelee( weaponNum ) && !BG_IsGrenade( weaponNum ) && weaponNum != WP_C4 ) && ( cg_gunSmoke.integer > 1 || cg_gunSmoke.integer == -1 ) )
ADDRFP4 12
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 0
LEI4 $1032
ADDRLP4 284
INDIRI4
ARGI4
ADDRLP4 456
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 456
INDIRI4
CNSTI4 0
NEI4 $1032
ADDRLP4 284
INDIRI4
ARGI4
ADDRLP4 460
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 460
INDIRI4
CNSTI4 0
NEI4 $1032
ADDRLP4 284
INDIRI4
CNSTI4 3
EQI4 $1032
ADDRGP4 cg_gunSmoke+12
INDIRI4
CNSTI4 1
GTI4 $1192
ADDRGP4 cg_gunSmoke+12
INDIRI4
CNSTI4 -1
NEI4 $1032
LABELV $1192
line 1994
;1994:			if ( cent->currentState.number != cg.snap->ps.clientNum || cg.renderingThirdPerson )
ADDRFP4 12
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1197
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $1032
LABELV $1197
line 1995
;1995: 		{
line 1998
;1996:			vec3_t up;
;1997:			localEntity_t *a;
;1998:			memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2000
;1999:
;2000:			if ( cent->currentState.eFlags & EF_SILENCED &&
ADDRLP4 480
CNSTI4 8
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 480
INDIRI4
ADDP4
INDIRI4
ADDRLP4 480
INDIRI4
BANDI4
CNSTI4 0
EQI4 $1198
ADDRLP4 284
INDIRI4
CNSTI4 15
EQI4 $1198
ADDRLP4 284
INDIRI4
CNSTI4 16
EQI4 $1198
line 2002
;2001:				(weaponNum != WP_AK47 && weaponNum != WP_M4 ) )
;2002:				CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_flash2");
ADDRLP4 0
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
ADDRGP4 $1199
JUMPV
LABELV $1198
line 2005
;2003:			
;2004:			else
;2005:				CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
LABELV $1199
line 2007
;2006:
;2007:			up[0] = random()*3;
ADDRLP4 488
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 464
CNSTF4 1077936128
ADDRLP4 488
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 2008
;2008:			up[1] = random()*3;
ADDRLP4 492
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 464+4
CNSTF4 1077936128
ADDRLP4 492
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 2009
;2009:			up[2] = 2 + random()*3;
ADDRLP4 496
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 464+8
CNSTF4 1077936128
ADDRLP4 496
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1073741824
ADDF4
ASGNF4
line 2011
;2010:
;2011:			if ( cent->gunSmokeTime - cg.time < 1000 )
ADDRFP4 12
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 1000
GEI4 $1203
line 2012
;2012:			{
line 2015
;2013:				float t;
;2014:
;2015:				t = (float)((float)( cent->gunSmokeTime - cg.time ) / 2000 ); 
ADDRLP4 500
ADDRFP4 12
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1157234688
DIVF4
ASGNF4
line 2017
;2016:
;2017:				a = CG_SmokePuff(  flash.origin, up, cg_gunSmokeTime.integer / 333 + 1,1,1,1,t,cg_gunSmokeTime.integer,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
ADDRLP4 0+68
ARGP4
ADDRLP4 464
ARGP4
ADDRGP4 cg_gunSmokeTime+12
INDIRI4
CNSTI4 333
DIVI4
CNSTI4 1
ADDI4
CVIF4 4
ARGF4
ADDRLP4 504
CNSTF4 1065353216
ASGNF4
ADDRLP4 504
INDIRF4
ARGF4
ADDRLP4 504
INDIRF4
ARGF4
ADDRLP4 504
INDIRF4
ARGF4
ADDRLP4 500
INDIRF4
ARGF4
ADDRGP4 cg_gunSmokeTime+12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 508
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 476
ADDRLP4 508
INDIRP4
ASGNP4
line 2018
;2018:			}
ADDRGP4 $1032
JUMPV
LABELV $1203
line 2020
;2019:			else
;2020:				a = CG_SmokePuff(  flash.origin, up, cg_gunSmokeTime.integer / 333 + 1,1,1,1,0.5,cg_gunSmokeTime.integer,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
ADDRLP4 0+68
ARGP4
ADDRLP4 464
ARGP4
ADDRGP4 cg_gunSmokeTime+12
INDIRI4
CNSTI4 333
DIVI4
CNSTI4 1
ADDI4
CVIF4 4
ARGF4
ADDRLP4 500
CNSTF4 1065353216
ASGNF4
ADDRLP4 500
INDIRF4
ARGF4
ADDRLP4 500
INDIRF4
ARGF4
ADDRLP4 500
INDIRF4
ARGF4
CNSTF4 1056964608
ARGF4
ADDRGP4 cg_gunSmokeTime+12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 504
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 476
ADDRLP4 504
INDIRP4
ASGNP4
line 2022
;2021: 
;2022:		}
line 2023
;2023:		return;
ADDRGP4 $1032
JUMPV
LABELV $1184
line 2026
;2024:	} 
;2025:	// no muzzle flash when a silencer attached.		
;2026:	if ( cent->currentState.eFlags & EF_SILENCED )
ADDRLP4 456
CNSTI4 8
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 456
INDIRI4
ADDP4
INDIRI4
ADDRLP4 456
INDIRI4
BANDI4
CNSTI4 0
EQI4 $1219
line 2027
;2027:		return;
ADDRGP4 $1032
JUMPV
LABELV $1219
line 2032
;2028:
;2029:	//
;2030:	// impulse flash
;2031:	//
;2032:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2033
;2033:	VectorCopy( rightArm->lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 2034
;2034:	flash.shadowPlane = rightArm->shadowPlane;
ADDRLP4 0+24
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2035
;2035:	flash.renderfx = rightArm->renderfx;
ADDRLP4 0+4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2037
;2036:
;2037:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 140
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 2038
;2038:	if (!flash.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1225
line 2039
;2039:		return;
ADDRGP4 $1032
JUMPV
LABELV $1225
line 2044
;2040:	}  
;2041:	//
;2042:	// randomly scale the muzzle flash 
;2043:	
;2044:	angles[YAW] = 0;
ADDRLP4 288+4
CNSTF4 0
ASGNF4
line 2045
;2045:	angles[PITCH] = 0;
ADDRLP4 288
CNSTF4 0
ASGNF4
line 2046
;2046:	angles[ROLL] = 0;
ADDRLP4 288+8
CNSTF4 0
ASGNF4
line 2048
;2047:
;2048:	{
line 2053
;2049:		float size;
;2050:		int i;
;2051:		int a;
;2052:
;2053:		size = random() + 0.5f;
ADDRLP4 472
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 468
ADDRLP4 472
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 2055
;2054:		
;2055:		if (!BG_IsRifle(weaponNum))
ADDRLP4 284
INDIRI4
ARGI4
ADDRLP4 476
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 476
INDIRI4
CNSTI4 0
NEI4 $1230
line 2056
;2056:			angles[ROLL] = rand() % 360;
ADDRLP4 480
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 288+8
ADDRLP4 480
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
LABELV $1230
line 2058
;2057:
;2058:		AnglesToAxis( angles, flash.axis );
ADDRLP4 288
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 2060
;2059:
;2060:		if ( size > 1.50f )
ADDRLP4 468
INDIRF4
CNSTF4 1069547520
LEF4 $1234
line 2061
;2061:			size = 1.50f;
ADDRLP4 468
CNSTF4 1069547520
ASGNF4
LABELV $1234
line 2063
;2062:	
;2063:		for ( i = 0; i < 3; i++ )
ADDRLP4 464
CNSTI4 0
ASGNI4
LABELV $1236
line 2064
;2064:			for ( a = 0; a < 3; a++ )
ADDRLP4 460
CNSTI4 0
ASGNI4
LABELV $1240
line 2065
;2065:				flash.axis[i][a] *= size; 
ADDRLP4 484
ADDRLP4 460
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 12
ADDRLP4 464
INDIRI4
MULI4
ADDRLP4 0+28
ADDP4
ADDP4
ASGNP4
ADDRLP4 484
INDIRP4
ADDRLP4 484
INDIRP4
INDIRF4
ADDRLP4 468
INDIRF4
MULF4
ASGNF4
LABELV $1241
line 2064
ADDRLP4 460
ADDRLP4 460
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 460
INDIRI4
CNSTI4 3
LTI4 $1240
LABELV $1237
line 2063
ADDRLP4 464
ADDRLP4 464
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 464
INDIRI4
CNSTI4 3
LTI4 $1236
line 2066
;2066:	}
line 2068
;2067:
;2068: 	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->viewweaponModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 144
ARGP4
ADDRLP4 140
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 2070
;2069:
;2070:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 2090
;2071:
;2072:#if 0 // ENABLE TO MAKE THE MUZZLEFLASH CREATE LENSFLARES
;2073:	// this is ugly. we have to trace back from org to the player model to see wheter
;2074:	// the flash would be sticking through a wall or not...
;2075:	{ 
;2076:		trace_t	trace;
;2077:
;2078:		CG_Trace( &trace, flash.origin, vec3_origin, vec3_origin, cent->lerpOrigin, -1, MASK_SHOT ); 
;2079:
;2080:		if ( trace.entityNum == cent->currentState.clientNum )
;2081:		{ 
;2082:			if ( pointinfrontmindot( cent->currentState.apos.trBase,flash.origin, cg.refdef.vieworg , -0.3 + test_x.value ) )
;2083:			{
;2084:				_CG_Flare( cent, flash.origin, 15, 100 ,100 ,100 ,qfalse );
;2085:			}
;2086:		} 
;2087:	}
;2088:#endif
;2089:	// make a dlight for the flash
;2090:	if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 464
CNSTF4 0
ASGNF4
ADDRLP4 140
INDIRP4
CNSTI4 172
ADDP4
INDIRF4
ADDRLP4 464
INDIRF4
NEF4 $1248
ADDRLP4 140
INDIRP4
CNSTI4 176
ADDP4
INDIRF4
ADDRLP4 464
INDIRF4
NEF4 $1248
ADDRLP4 140
INDIRP4
CNSTI4 180
ADDP4
INDIRF4
ADDRLP4 464
INDIRF4
EQF4 $1245
LABELV $1248
line 2091
;2091:		trap_R_AddLightToScene( flash.origin, 200 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 468
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+68
ARGP4
ADDRLP4 468
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 140
INDIRP4
CNSTI4 172
ADDP4
INDIRF4
ARGF4
ADDRLP4 140
INDIRP4
CNSTI4 176
ADDP4
INDIRF4
ARGF4
ADDRLP4 140
INDIRP4
CNSTI4 180
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 2093
;2092:			weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;2093:	}
LABELV $1245
line 2094
;2094:}
LABELV $1032
endproc CG_AddPlayerWeapon 744 48
proc CG_WeaponSelectable 4 8
line 2110
;2095:  
;2096:
;2097:/*
;2098:==============================================================================
;2099:
;2100:WEAPON SELECTION
;2101:
;2102:==============================================================================
;2103:*/
;2104:
;2105:/*
;2106:===============
;2107:CG_WeaponSelectable
;2108:===============
;2109:*/
;2110:static qboolean CG_WeaponSelectable( int i ) {
line 2112
;2111: 
;2112:	if ( ! (BG_GotWeapon( i, cg.snap->ps.stats) ) ) {
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 BG_GotWeapon
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1251
line 2113
;2113:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1250
JUMPV
LABELV $1251
line 2116
;2114:	}
;2115:
;2116:	return qtrue;
CNSTI4 1
RETI4
LABELV $1250
endproc CG_WeaponSelectable 4 8
export CG_DrawWeaponSelect
proc CG_DrawWeaponSelect 88 36
line 2132
;2117:}
;2118:
;2119:/*
;2120:===================
;2121:CG_DrawWeaponSelect
;2122:===================
;2123:*/
;2124:#define IN_INVENTORYSPACER 8
;2125:#define IN_INACTIVE_SMALL_W	16
;2126:#define IN_INACTIVE_BIG_W	128
;2127:#define IN_INACTIVE_HEIGHT	16
;2128:
;2129:#define IN_ACTIVE_W			128
;2130:#define IN_ACTIVE_H			16
;2131:
;2132:void CG_DrawWeaponSelect( void ) { 
line 2140
;2133:	int		x, y; 
;2134:	int		xpos[5]; 
;2135:	vec4_t	color; 	
;2136:	int		axy;	
;2137:	int		s; 
;2138:	float	alpha;
;2139:
;2140:	color[0] = 1.0f;
ADDRLP4 36
CNSTF4 1065353216
ASGNF4
line 2141
;2141:	color[1] = 1.0f;
ADDRLP4 36+4
CNSTF4 1065353216
ASGNF4
line 2142
;2142:	color[2] = 1.0f;
ADDRLP4 36+8
CNSTF4 1065353216
ASGNF4
line 2143
;2143:	color[3] = 1.0f;
ADDRLP4 36+12
CNSTF4 1065353216
ASGNF4
line 2145
;2144:
;2145:	if ( cg.InventoryFadeTime )
ADDRGP4 cg+116280
INDIRI4
CNSTI4 0
EQI4 $1258
line 2146
;2146:	{
line 2147
;2147:		alpha = (float)(cg.InventoryFadeTime - cg.time)/1000.0f;
ADDRLP4 52
ADDRGP4 cg+116280
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 2149
;2148: 
;2149:		color[3] = alpha; 
ADDRLP4 36+12
ADDRLP4 52
INDIRF4
ASGNF4
line 2151
;2150: 
;2151:		trap_R_SetColor( color );
ADDRLP4 36
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2153
;2152:
;2153:		if ( alpha <= 0.0f )
ADDRLP4 52
INDIRF4
CNSTF4 0
GTF4 $1259
line 2154
;2154:		{
line 2155
;2155:			cg.curInventory = 666;
ADDRGP4 cg+115732
CNSTI4 666
ASGNI4
line 2156
;2156:			cg.activeInventory = 0;
ADDRGP4 cg+115728
CNSTI4 0
ASGNI4
line 2157
;2157:			cg.InventoryFadeTime = 0;
ADDRGP4 cg+116280
CNSTI4 0
ASGNI4
line 2158
;2158:			return;
ADDRGP4 $1254
JUMPV
line 2160
;2159:		}
;2160:	} else	trap_R_SetColor( color );
LABELV $1258
ADDRLP4 36
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
LABELV $1259
line 2163
;2161:
;2162:	// don't display if dead
;2163:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 )
ADDRGP4 cg+107636+184
INDIRI4
CNSTI4 0
GTI4 $1269
line 2164
;2164:		return;
ADDRGP4 $1254
JUMPV
LABELV $1269
line 2166
;2165:
;2166:	if ( !cg.activeInventory )
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
NEI4 $1273
line 2167
;2167:		return;
ADDRGP4 $1254
JUMPV
LABELV $1273
line 2170
;2168:
;2169:
;2170:	x = 8;
ADDRLP4 8
CNSTI4 8
ASGNI4
line 2172
;2171:  
;2172:	if ( cg.activeInventory == 1 ) // primary  
ADDRGP4 cg+115728
INDIRI4
CNSTI4 1
NEI4 $1276
line 2173
;2173:		trap_R_DrawStretchPic(x,32, IN_ACTIVE_W,IN_ACTIVE_H, 0, 0, 1, 1,cgs.media.weaponMenuActive[0] );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1124073472
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 60
CNSTF4 1065353216
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRGP4 cgs+205084+812
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
ADDRGP4 $1277
JUMPV
LABELV $1276
line 2174
;2174:	else  {
line 2176
;2175:
;2176:		trap_R_DrawStretchPic(x,32, IN_INACTIVE_SMALL_W,IN_ACTIVE_H, 0, 0, 1, 1,cgs.media.weaponMenuInactive[0] );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 64
CNSTF4 1098907648
ASGNF4
ADDRLP4 64
INDIRF4
ARGF4
ADDRLP4 64
INDIRF4
ARGF4
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRGP4 cgs+205084+832
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2178
;2177: 
;2178:	}
LABELV $1277
line 2180
;2179:
;2180:	xpos[0] = x;
ADDRLP4 12
ADDRLP4 8
INDIRI4
ASGNI4
line 2181
;2181:	xpos[1] = BIGCHAR_WIDTH + xpos[0];
ADDRLP4 12+4
ADDRLP4 12
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 2182
;2182:	xpos[2] = BIGCHAR_WIDTH + xpos[1];
ADDRLP4 12+8
ADDRLP4 12+4
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 2183
;2183:	xpos[3] = BIGCHAR_WIDTH + xpos[2];
ADDRLP4 12+12
ADDRLP4 12+8
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 2184
;2184:	xpos[4] = BIGCHAR_WIDTH + xpos[3];
ADDRLP4 12+16
ADDRLP4 12+12
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 2185
;2185:	xpos[5] = BIGCHAR_WIDTH + xpos[4];
ADDRLP4 12+20
ADDRLP4 12+16
INDIRI4
CNSTI4 16
ADDI4
ASGNI4
line 2187
;2186:
;2187:	for (axy = cg.activeInventory; axy <= 4; axy++)
ADDRLP4 32
ADDRGP4 cg+115728
INDIRI4
ASGNI4
ADDRGP4 $1295
JUMPV
LABELV $1292
line 2188
;2188:		xpos[axy] += 128 ;
ADDRLP4 64
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 128
ADDI4
ASGNI4
LABELV $1293
line 2187
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1295
ADDRLP4 32
INDIRI4
CNSTI4 4
LEI4 $1292
line 2190
;2189:
;2190:	axy = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 2192
;2191:
;2192:	for ( x = 0; x <= 4 ; x ++ )
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $1297
line 2193
;2193:	{
line 2194
;2194:		y = 32 + TINYCHAR_HEIGHT + IN_INVENTORYSPACER;
ADDRLP4 4
CNSTI4 48
ASGNI4
line 2196
;2195:
;2196:		if ( x == cg.activeInventory-1 ) 			
ADDRLP4 8
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 1
SUBI4
NEI4 $1301
line 2197
;2197:		{					
line 2199
;2198:
;2199:			for ( s = 0;  s <  cg.Inventorypos[cg.activeInventory-1]; s++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1307
JUMPV
LABELV $1304
line 2200
;2200:			{
line 2201
;2201:				if ( s == cg.curInventory-1 ) 
ADDRLP4 0
INDIRI4
ADDRGP4 cg+115732
INDIRI4
CNSTI4 1
SUBI4
NEI4 $1311
line 2202
;2202:				{		
line 2204
;2203:					// only powerup in inventory?
;2204:					if ( cg.Inventory[ cg.activeInventory -1][s] <= 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1314
line 2206
;2205:						gitem_t *item;
;2206:						int pw = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 2211
;2207:						qhandle_t shader;
;2208:
;2209:						
;2210:						
;2211:						pw = cg.Inventory[ cg.activeInventory -1][s] * -1;
ADDRLP4 68
CNSTI4 -1
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
MULI4
ASGNI4
line 2213
;2212:
;2213:						if ( pw == PW_BRIEFCASE )
ADDRLP4 68
INDIRI4
CNSTI4 8
NEI4 $1322
line 2214
;2214:						{
line 2215
;2215:							shader = trap_R_RegisterShader("icons/weapons/icon_suitcase");
ADDRGP4 $1324
ARGP4
ADDRLP4 80
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 80
INDIRI4
ASGNI4
line 2216
;2216:						}
ADDRGP4 $1323
JUMPV
LABELV $1322
line 2218
;2217:						else 
;2218:						{
line 2219
;2219:							item = BG_FindItemForPowerup( pw );
ADDRLP4 68
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 80
INDIRP4
ASGNP4
line 2221
;2220:	
;2221:							shader = cg_items[ ITEM_INDEX(item) ].icon;
ADDRLP4 72
CNSTI4 24
ADDRLP4 76
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ASGNI4
line 2222
;2222:						}
LABELV $1323
line 2224
;2223:
;2224:						trap_R_DrawStretchPic(xpos[x],y,IN_INACTIVE_BIG_W,IN_INACTIVE_HEIGHT*4, 0, 0, 1, 1,shader );	
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124073472
ARGF4
CNSTF4 1115684864
ARGF4
ADDRLP4 80
CNSTF4 0
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 84
CNSTF4 1065353216
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2225
;2225:					}
ADDRGP4 $1315
JUMPV
LABELV $1314
line 2226
;2226:					else {
line 2228
;2227:						// CG_RegisterWeapon(  cg.Inventory[ cg.activeInventory-1 ] [ s ] );
;2228:						trap_R_DrawStretchPic(xpos[x],y,IN_INACTIVE_BIG_W,IN_INACTIVE_HEIGHT*4, 0, 0, 1, 1,cg_weapons[ cg.Inventory[ cg.activeInventory-1 ] [ s ] ].weaponIcon  );
ADDRLP4 68
CNSTI4 2
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 68
INDIRI4
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124073472
ARGF4
CNSTF4 1115684864
ARGF4
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 76
CNSTF4 1065353216
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
CNSTI4 296
ADDRLP4 0
INDIRI4
ADDRLP4 68
INDIRI4
LSHI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons+232
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2229
;2229:					}
LABELV $1315
line 2231
;2230:					
;2231:					y += IN_INACTIVE_HEIGHT*4 + IN_INVENTORYSPACER;	 
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 72
ADDI4
ASGNI4
line 2232
;2232:				}
ADDRGP4 $1312
JUMPV
LABELV $1311
line 2234
;2233:				else 
;2234:				{						
line 2236
;2235: 					// render inactive inventory (but in active list )
;2236:					if ( cg.curInventory > 0 ) 
ADDRGP4 cg+115732
INDIRI4
CNSTI4 0
LEI4 $1330
line 2237
;2237:						trap_R_DrawStretchPic( xpos[ x ], y , IN_INACTIVE_BIG_W,IN_INACTIVE_HEIGHT, 0, 0, 1, 1,cgs.media.weaponSelInactiveBig );
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1124073472
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 72
CNSTF4 1065353216
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRGP4 cgs+205084+852
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
ADDRGP4 $1331
JUMPV
LABELV $1330
line 2239
;2238:					else
;2239:						trap_R_DrawStretchPic( xpos[ x ],y, IN_INACTIVE_SMALL_W,IN_INACTIVE_HEIGHT, 0, 0, 1, 1,cgs.media.weaponSelInactiveSmall );
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
CNSTF4 1098907648
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 0
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 84
CNSTF4 1065353216
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRGP4 cgs+205084+856
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
LABELV $1331
line 2241
;2240: 
;2241:					y += IN_INACTIVE_HEIGHT + IN_INVENTORYSPACER;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 24
ADDI4
ASGNI4
line 2242
;2242:				}
LABELV $1312
line 2243
;2243:			}
LABELV $1305
line 2199
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1307
ADDRLP4 0
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
LTI4 $1304
line 2244
;2244:		}
ADDRGP4 $1302
JUMPV
LABELV $1301
line 2246
;2245:		else
;2246:		{
line 2250
;2247:			//
;2248:			// render inactive inventory
;2249:			//
;2250:			for ( s = 0;  s <  cg.Inventorypos[x]; s++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1340
JUMPV
LABELV $1337
line 2251
;2251:			{  					
line 2252
;2252: 				trap_R_DrawStretchPic(xpos[ x ],y, IN_INACTIVE_SMALL_W,IN_INACTIVE_HEIGHT, 0, 0, 1, 1,cgs.media.weaponSelInactiveSmall );					
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 68
CNSTF4 1098907648
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 76
CNSTF4 1065353216
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRGP4 cgs+205084+856
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2254
;2253: 
;2254:				y += IN_INACTIVE_HEIGHT + IN_INVENTORYSPACER;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 24
ADDI4
ASGNI4
line 2255
;2255:			}
LABELV $1338
line 2250
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1340
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260
ADDP4
INDIRI4
LTI4 $1337
line 2256
;2256:		}
LABELV $1302
line 2257
;2257:	}
LABELV $1298
line 2192
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 4
LEI4 $1297
line 2262
;2258: 
;2259:	//
;2260:	// render the rest of the titlebars
;2261:	//
;2262:	for ( s = 1; s < 5;s++) 
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1344
line 2263
;2263:	{ 
line 2264
;2264:		if ( s == cg.activeInventory-1 ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 1
SUBI4
NEI4 $1348
line 2265
;2265:			trap_R_DrawStretchPic(xpos[s],32, IN_ACTIVE_W,IN_ACTIVE_H, 0, 0, 1, 1,cgs.media.weaponMenuActive[s] );
ADDRLP4 68
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 68
INDIRI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
CNSTF4 1124073472
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 76
CNSTF4 1065353216
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 68
INDIRI4
ADDRGP4 cgs+205084+812
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2266
;2266:		}
ADDRGP4 $1349
JUMPV
LABELV $1348
line 2267
;2267:		else {		
line 2268
;2268: 			trap_R_DrawStretchPic(xpos[s],32, IN_INACTIVE_SMALL_W,IN_ACTIVE_H, 0, 0, 1, 1,cgs.media.weaponMenuInactive[s] );
ADDRLP4 68
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 68
INDIRI4
ADDRLP4 12
ADDP4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1107296256
ARGF4
ADDRLP4 72
CNSTF4 1098907648
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 76
CNSTF4 0
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 68
INDIRI4
ADDRGP4 cgs+205084+832
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_R_DrawStretchPic
CALLV
pop
line 2269
;2269:		}
LABELV $1349
line 2270
;2270:	}
LABELV $1345
line 2262
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 5
LTI4 $1344
line 2272
;2271:	
;2272:	trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 2274
;2273:
;2274:}
LABELV $1254
endproc CG_DrawWeaponSelect 88 36
export CG_InvenSelect
proc CG_InvenSelect 8 16
line 2293
;2275:
;2276:
;2277:#define PRIMARY			0
;2278:#define SECONDARY		1
;2279:#define MELEE			2
;2280:#define EXPLO			3
;2281:#define MISC			4
;2282:#define INVENTORYITEMS	5
;2283:
;2284:/*
;2285:==================
;2286:CG_Invenselect(...)
;2287:
;2288:  uses selected menu item
;2289:==================
;2290:*/
;2291:
;2292:void CG_InvenSelect ( void ) 
;2293:{
line 2294
;2294:	if (!cg.activeInventory) 
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
NEI4 $1356
line 2295
;2295:		return; 
ADDRGP4 $1355
JUMPV
LABELV $1356
line 2296
;2296:	if ( cg.curInventory >  cg.Inventorypos[ cg.activeInventory - 1 ] ) 
ADDRGP4 cg+115732
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
LEI4 $1359
line 2297
;2297:		return;
ADDRGP4 $1355
JUMPV
LABELV $1359
line 2298
;2298:	if ( cg.curInventory < 0 ) 
ADDRGP4 cg+115732
INDIRI4
CNSTI4 0
GEI4 $1365
line 2299
;2299:		return;	
ADDRGP4 $1355
JUMPV
LABELV $1365
line 2300
;2300:	if ( cg.Inventorypos[ cg.activeInventory-1] == 0 )
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1368
line 2301
;2301:		return;
ADDRGP4 $1355
JUMPV
LABELV $1368
line 2303
;2302:
;2303:	if ( 1 )
line 2304
;2304:	{
line 2305
;2305:		int pw = cg.Inventory[ cg.activeInventory -1][ cg.curInventory - 1] * -1;
ADDRLP4 0
CNSTI4 -1
ADDRGP4 cg+115732
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
MULI4
ASGNI4
line 2307
;2306:
;2307:		if ( pw == PW_BRIEFCASE )
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $1379
line 2308
;2308:		{ 
line 2310
;2309:			// don't select this weapon. just ignore.
;2310: 			trap_SendClientCommand( "dropmissionobjective\n" );
ADDRGP4 $1381
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2311
;2311:			cg.curInventory = 666;
ADDRGP4 cg+115732
CNSTI4 666
ASGNI4
line 2312
;2312:			cg.activeInventory = 0;
ADDRGP4 cg+115728
CNSTI4 0
ASGNI4
line 2314
;2313:			// play select sound
;2314:			if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/select.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1355
ADDRGP4 $1389
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 4
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2315
;2315:			return;
ADDRGP4 $1355
JUMPV
LABELV $1379
line 2317
;2316:		}
;2317:	}
LABELV $1373
line 2319
;2318:
;2319:	if ( cg.Inventory[cg.activeInventory-1][cg.curInventory-1] <= 0 )
ADDRGP4 cg+115732
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1390
line 2320
;2320:		return;
ADDRGP4 $1355
JUMPV
LABELV $1390
line 2322
;2321: 
;2322:	cg.InventoryTime = 0; 
ADDRGP4 cg+115736
CNSTI4 0
ASGNI4
line 2324
;2323:	
;2324:	if (cg.curInventory == 666 ) {
ADDRGP4 cg+115732
INDIRI4
CNSTI4 666
NEI4 $1397
line 2325
;2325:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/close.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1400
ADDRGP4 $1405
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1400
line 2326
;2326:		cg.curInventory = 666;
ADDRGP4 cg+115732
CNSTI4 666
ASGNI4
line 2327
;2327:		cg.activeInventory = 0;
ADDRGP4 cg+115728
CNSTI4 0
ASGNI4
line 2328
;2328:		cg.weaponSelect = cg.snap->ps.weapon;
ADDRGP4 cg+108944
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 2329
;2329:		return;
ADDRGP4 $1355
JUMPV
LABELV $1397
line 2333
;2330:	}
;2331:
;2332:	// select that weapon
;2333:	cg.weaponSelect = cg.Inventory[ cg.activeInventory-1 ] [ cg.curInventory - 1];
ADDRGP4 cg+108944
ADDRGP4 cg+115732
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4
SUBI4
CNSTI4 104
ADDRGP4 cg+115728
INDIRI4
MULI4
ADDRGP4 cg+115740-104
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2339
;2334:/*
;2335:	cg.curInventory = 666;
;2336:	cg.activeInventory = 0;
;2337:	cg.weaponSelectTime = cg.time + 1000;
;2338:	*/
;2339:	cg.InventoryFadeTime = cg.time + 1000;
ADDRGP4 cg+116280
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2341
;2340:
;2341:	cg.weaponSelectTime = cg.time + 1000;
ADDRGP4 cg+115300
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2343
;2342:	// play select sound
;2343:	if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/select.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1419
ADDRGP4 $1389
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1419
line 2344
;2344:}
LABELV $1355
endproc CG_InvenSelect 8 16
export CG_MWheel_f
proc CG_MWheel_f 1068 16
line 2346
;2345:
;2346:void CG_MWheel_f ( int prev ) {
line 2347
;2347:	int		num = 1; 
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2350
;2348:	int i;
;2349:	char var[MAX_TOKEN_CHARS];
;2350:	int  count = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2352
;2351:
;2352:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1425
line 2353
;2353:		return;
ADDRGP4 $1424
JUMPV
LABELV $1425
line 2355
;2354:	}
;2355:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1428
line 2356
;2356:		return;
ADDRGP4 $1424
JUMPV
LABELV $1428
line 2358
;2357:	} 
;2358:	if ( cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP )
ADDRLP4 1036
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 1036
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $1435
ADDRGP4 cg+36
INDIRP4
ADDRLP4 1036
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1431
LABELV $1435
line 2359
;2359:		return;
ADDRGP4 $1424
JUMPV
LABELV $1431
line 2362
;2360:
;2361:	// new time at any keypress ( for auto weapon select )
;2362:	cg.InventoryTime = cg.time + cg_enableTimeSelect.integer * 1000;
ADDRGP4 cg+115736
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDRGP4 cg_enableTimeSelect+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 2369
;2363:	
;2364:	//
;2365:	// update list on key press
;2366:	//
;2367:
;2368:	// clear old inventory
;2369:	cg.Inventorypos[PRIMARY] = cg.Inventorypos[SECONDARY] = cg.Inventorypos[MELEE] = cg.Inventorypos[EXPLO] = cg.Inventorypos[MISC] = 0;
ADDRLP4 1040
CNSTI4 0
ASGNI4
ADDRGP4 cg+116260+16
ADDRLP4 1040
INDIRI4
ASGNI4
ADDRGP4 cg+116260+12
ADDRLP4 1040
INDIRI4
ASGNI4
ADDRGP4 cg+116260+8
ADDRLP4 1040
INDIRI4
ASGNI4
ADDRGP4 cg+116260+4
ADDRLP4 1040
INDIRI4
ASGNI4
ADDRGP4 cg+116260
ADDRLP4 1040
INDIRI4
ASGNI4
line 2371
;2370:
;2371:	for ( i = 1 ; i < WP_NUM_WEAPONS ; i++ ) 
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1448
line 2372
;2372:	{
line 2373
;2373:		if ( BG_GotWeapon( i , cg.snap->ps.stats ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 1044
ADDRGP4 BG_GotWeapon
CALLI4
ASGNI4
ADDRLP4 1044
INDIRI4
CNSTI4 0
EQI4 $1452
line 2374
;2374:		{
line 2377
;2375:			// CG_RegisterWeapon( i );
;2376:
;2377:			if ( BG_IsPrimary( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1048
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 0
EQI4 $1455
line 2378
;2378:			{ 
line 2379
;2379:				cg.Inventory[PRIMARY][ cg.Inventorypos[PRIMARY] ] = i;
ADDRGP4 cg+116260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2380
;2380:				cg.Inventorypos[PRIMARY]++;
ADDRLP4 1052
ADDRGP4 cg+116260
ASGNP4
ADDRLP4 1052
INDIRP4
ADDRLP4 1052
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2381
;2381:			}
ADDRGP4 $1456
JUMPV
LABELV $1455
line 2382
;2382:			else if ( BG_IsSecondary( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1052
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 0
EQI4 $1460
line 2383
;2383:			{ 
line 2384
;2384:				cg.Inventory[SECONDARY][ cg.Inventorypos[SECONDARY] ] = i;
ADDRGP4 cg+116260+4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+104
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2385
;2385:				cg.Inventorypos[SECONDARY]++;
ADDRLP4 1056
ADDRGP4 cg+116260+4
ASGNP4
ADDRLP4 1056
INDIRP4
ADDRLP4 1056
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2386
;2386:			}
ADDRGP4 $1461
JUMPV
LABELV $1460
line 2387
;2387:			else if ( BG_IsMelee( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1056
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 1056
INDIRI4
CNSTI4 0
EQI4 $1468
line 2388
;2388:			{ 
line 2389
;2389:				cg.Inventory[MELEE][ cg.Inventorypos[MELEE] ] = i;
ADDRGP4 cg+116260+8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+208
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2390
;2390:				cg.Inventorypos[MELEE]++;
ADDRLP4 1060
ADDRGP4 cg+116260+8
ASGNP4
ADDRLP4 1060
INDIRP4
ADDRLP4 1060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2391
;2391:			}
ADDRGP4 $1469
JUMPV
LABELV $1468
line 2392
;2392:			else if ( i == WP_GRENADE ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $1476
line 2393
;2393:				trap_Cvar_VariableStringBuffer("inven_ammo_mk26", var, sizeof(var));
ADDRGP4 $1478
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2394
;2394:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1060
INDIRI4
ASGNI4
line 2395
;2395:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1477
line 2396
;2396:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2397
;2397:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1064
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1064
INDIRP4
ADDRLP4 1064
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2398
;2398:				}
line 2399
;2399:			}
ADDRGP4 $1477
JUMPV
LABELV $1476
line 2400
;2400:			else if ( i == WP_FLASHBANG ) {
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $1487
line 2401
;2401:				trap_Cvar_VariableStringBuffer("inven_ammo_flash", var, sizeof(var));
ADDRGP4 $1489
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2402
;2402:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1060
INDIRI4
ASGNI4
line 2403
;2403:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1488
line 2404
;2404:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2405
;2405:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1064
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1064
INDIRP4
ADDRLP4 1064
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2406
;2406:				}
line 2407
;2407:			}
ADDRGP4 $1488
JUMPV
LABELV $1487
line 2408
;2408:			else if ( i == WP_SMOKE ) {
ADDRLP4 0
INDIRI4
CNSTI4 25
NEI4 $1498
line 2409
;2409:				trap_Cvar_VariableStringBuffer("inven_ammo_smoke", var, sizeof(var));
ADDRGP4 $1500
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2410
;2410:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1060
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1060
INDIRI4
ASGNI4
line 2411
;2411:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1499
line 2412
;2412:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2413
;2413:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1064
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1064
INDIRP4
ADDRLP4 1064
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2414
;2414:				}
line 2415
;2415:			}
ADDRGP4 $1499
JUMPV
LABELV $1498
line 2416
;2416:			else if ( i == WP_C4 ) { 
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $1509
line 2417
;2417:				cg.Inventory[MISC][ cg.Inventorypos[MISC] ] = i;
ADDRGP4 cg+116260+16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+416
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2418
;2418:				cg.Inventorypos[MISC]++;
ADDRLP4 1060
ADDRGP4 cg+116260+16
ASGNP4
ADDRLP4 1060
INDIRP4
ADDRLP4 1060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2419
;2419:			}
LABELV $1509
LABELV $1499
LABELV $1488
LABELV $1477
LABELV $1469
LABELV $1461
LABELV $1456
line 2420
;2420:		}			
LABELV $1452
line 2421
;2421:	}
LABELV $1449
line 2371
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LTI4 $1448
line 2424
;2422:
;2423:	// add powerups here:
;2424:	if( cg.snap->ps.powerups[PW_BRIEFCASE] )
ADDRGP4 cg+36
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1517
line 2425
;2425:	{
line 2426
;2426:		cg.Inventory[MISC][ cg.Inventorypos[MISC] ] = PW_BRIEFCASE *-1;
ADDRGP4 cg+116260+16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+416
ADDP4
CNSTI4 -8
ASGNI4
line 2427
;2427:		cg.Inventorypos[MISC]++;
ADDRLP4 1044
ADDRGP4 cg+116260+16
ASGNP4
ADDRLP4 1044
INDIRP4
ADDRLP4 1044
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2428
;2428:	}
LABELV $1517
line 2431
;2429:
;2430:	// still in valid range?
;2431:	if ( cg.activeInventory < 0 || cg.activeInventory > 5 ) 
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
LTI4 $1530
ADDRGP4 cg+115728
INDIRI4
CNSTI4 5
LEI4 $1526
LABELV $1530
line 2432
;2432:		cg.activeInventory = 0;
ADDRGP4 cg+115728
CNSTI4 0
ASGNI4
LABELV $1526
line 2435
;2433:
;2434:	// not opened any menu
;2435:	if ( !cg.activeInventory ) 
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
NEI4 $1532
line 2436
;2436:	{
line 2437
;2437:		if ( num < 0 || num > 5 ) // primary,secondary,melee,explo,misc
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $1537
ADDRLP4 4
INDIRI4
CNSTI4 5
LEI4 $1535
LABELV $1537
line 2438
;2438:			return; 
ADDRGP4 $1424
JUMPV
LABELV $1535
line 2441
;2439:
;2440:		// fixme: play open sound	
;2441:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1538
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1048
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1048
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1538
line 2443
;2442:
;2443:		if ( prev )
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1544
line 2444
;2444:			cg.activeInventory = 5;
ADDRGP4 cg+115728
CNSTI4 5
ASGNI4
ADDRGP4 $1545
JUMPV
LABELV $1544
line 2446
;2445:		else
;2446:			cg.activeInventory = 1;
ADDRGP4 cg+115728
CNSTI4 1
ASGNI4
LABELV $1545
line 2448
;2447:
;2448:		cg.curInventory = 0; 
ADDRGP4 cg+115732
CNSTI4 0
ASGNI4
line 2449
;2449:		return;
ADDRGP4 $1424
JUMPV
LABELV $1532
line 2452
;2450:	}
;2451: 
;2452:	if ( prev )
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1549
line 2453
;2453:	{
line 2454
;2454:		num = cg.curInventory--;
ADDRLP4 1048
ADDRGP4 cg+115732
ASGNP4
ADDRLP4 1044
ADDRLP4 1048
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 1048
INDIRP4
ADDRLP4 1044
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 4
ADDRLP4 1044
INDIRI4
ASGNI4
line 2456
;2455: 
;2456:		if ( cg.curInventory <= 0) 
ADDRGP4 cg+115732
INDIRI4
CNSTI4 0
GTI4 $1552
line 2457
;2457:		{
line 2458
;2458:			if (cg.activeInventory-1 == 0) // skip to misc
ADDRGP4 cg+115728
INDIRI4
CNSTI4 1
SUBI4
CNSTI4 0
NEI4 $1555
line 2459
;2459:				cg.curInventory = cg.Inventorypos[ MISC ];
ADDRGP4 cg+115732
ADDRGP4 cg+116260+16
INDIRI4
ASGNI4
ADDRGP4 $1556
JUMPV
LABELV $1555
line 2461
;2460:			else
;2461:				cg.curInventory = cg.Inventorypos[ cg.activeInventory - 2 ];
ADDRGP4 cg+115732
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-8
ADDP4
INDIRI4
ASGNI4
LABELV $1556
line 2463
;2462:
;2463:			cg.activeInventory--; 
ADDRLP4 1052
ADDRGP4 cg+115728
ASGNP4
ADDRLP4 1052
INDIRP4
ADDRLP4 1052
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2465
;2464:
;2465:			if ( cg.activeInventory <= 0)
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
GTI4 $1566
line 2466
;2466:				cg.activeInventory = 5;
ADDRGP4 cg+115728
CNSTI4 5
ASGNI4
LABELV $1566
line 2468
;2467: 
;2468:			if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1424
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1056
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1056
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2469
;2469:			return;
ADDRGP4 $1424
JUMPV
LABELV $1552
line 2472
;2470:		} 
;2471:
;2472:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/moveselect.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1424
ADDRGP4 $1580
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1052
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1052
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2473
;2473:		return;
ADDRGP4 $1424
JUMPV
LABELV $1549
line 2477
;2474:
;2475:	}
;2476:	// open next
;2477:	else if ( num > cg.Inventorypos[ cg.activeInventory-1 ] ) 
ADDRLP4 4
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
LEI4 $1581
line 2478
;2478:	{  
line 2479
;2479:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1586
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1044
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1044
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1586
line 2481
;2480:
;2481:		if ( cg.activeInventory < 5 && !prev)
ADDRGP4 cg+115728
INDIRI4
CNSTI4 5
GEI4 $1591
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1591
line 2482
;2482:			cg.activeInventory++;
ADDRLP4 1048
ADDRGP4 cg+115728
ASGNP4
ADDRLP4 1048
INDIRP4
ADDRLP4 1048
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRGP4 $1592
JUMPV
LABELV $1591
line 2483
;2483:		else if ( cg.activeInventory > 1 && prev)
ADDRGP4 cg+115728
INDIRI4
CNSTI4 1
LEI4 $1595
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1595
line 2484
;2484:			cg.activeInventory--;
ADDRLP4 1052
ADDRGP4 cg+115728
ASGNP4
ADDRLP4 1052
INDIRP4
ADDRLP4 1052
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRGP4 $1596
JUMPV
LABELV $1595
line 2485
;2485:		else if ( !prev )
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $1599
line 2486
;2486:			cg.activeInventory = 1;
ADDRGP4 cg+115728
CNSTI4 1
ASGNI4
ADDRGP4 $1600
JUMPV
LABELV $1599
line 2487
;2487:		else if ( prev )
ADDRFP4 0
INDIRI4
CNSTI4 0
EQI4 $1602
line 2488
;2488:			cg.activeInventory = 5;			
ADDRGP4 cg+115728
CNSTI4 5
ASGNI4
LABELV $1602
LABELV $1600
LABELV $1596
LABELV $1592
line 2490
;2489:
;2490:		cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
line 2491
;2491:		return;
ADDRGP4 $1424
JUMPV
LABELV $1581
line 2494
;2492:	} 
;2493:	else 
;2494:	{
line 2495
;2495:		num = cg.curInventory++;
ADDRLP4 1048
ADDRGP4 cg+115732
ASGNP4
ADDRLP4 1044
ADDRLP4 1048
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 1048
INDIRP4
ADDRLP4 1044
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
ADDRLP4 1044
INDIRI4
ASGNI4
line 2497
;2496:
;2497:		if ( cg.curInventory > cg.Inventorypos[ cg.activeInventory - 1 ]) 
ADDRGP4 cg+115732
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
LEI4 $1607
line 2498
;2498:		{
line 2499
;2499:			cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
line 2500
;2500:			cg.activeInventory++;
ADDRLP4 1052
ADDRGP4 cg+115728
ASGNP4
ADDRLP4 1052
INDIRP4
ADDRLP4 1052
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2501
;2501:			if ( cg.activeInventory > 5)
ADDRGP4 cg+115728
INDIRI4
CNSTI4 5
LEI4 $1615
line 2502
;2502:				cg.activeInventory = 1;
ADDRGP4 cg+115728
CNSTI4 1
ASGNI4
LABELV $1615
line 2503
;2503:			if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1424
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1056
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1056
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2504
;2504:			return;
ADDRGP4 $1424
JUMPV
LABELV $1607
line 2507
;2505:		} 
;2506:
;2507:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/moveselect.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1424
ADDRGP4 $1580
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1052
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1052
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2508
;2508:		return;
LABELV $1424
endproc CG_MWheel_f 1068 16
export CG_Weapon_f
proc CG_Weapon_f 1076 16
line 2517
;2509:	}
;2510:
;2511:}
;2512:
;2513:/*
;2514:CG_Weapon_f
;2515:===============
;2516:*/
;2517:void CG_Weapon_f( void ) {
line 2521
;2518:	int		num;
;2519:	int		i;
;2520:	char var[MAX_TOKEN_CHARS];
;2521:	int  count = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2523
;2522:
;2523:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1630
line 2524
;2524:		return;
ADDRGP4 $1629
JUMPV
LABELV $1630
line 2526
;2525:	}
;2526:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1633
line 2527
;2527:		return;
ADDRGP4 $1629
JUMPV
LABELV $1633
line 2529
;2528:	}
;2529:	if ( cg.snap->ps.pm_type == PM_SPECTATOR || cg.snap->ps.pm_type == PM_NOCLIP )
ADDRLP4 1036
CNSTI4 48
ASGNI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 1036
INDIRI4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $1640
ADDRGP4 cg+36
INDIRP4
ADDRLP4 1036
INDIRI4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1636
LABELV $1640
line 2530
;2530:		return;
ADDRGP4 $1629
JUMPV
LABELV $1636
line 2531
;2531:	if ( cg.viewCmd )
ADDRGP4 cg+171500
INDIRI4
CNSTI4 0
EQI4 $1641
line 2532
;2532:		return;
ADDRGP4 $1629
JUMPV
LABELV $1641
line 2533
;2533:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 1040
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 1040
INDIRP4
ARGP4
ADDRLP4 1044
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1044
INDIRI4
ASGNI4
line 2535
;2534:
;2535:	if (cg.inMenu)
ADDRGP4 cg+115696
INDIRI4
CNSTI4 0
EQI4 $1644
line 2536
;2536:	{ 
line 2538
;2537:		// not a valid slot
;2538:		if ( num < 1 || num > cg.menuValidSlots )
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $1650
ADDRLP4 4
INDIRI4
ADDRGP4 cg+115704
INDIRI4
LEI4 $1647
LABELV $1650
line 2539
;2539:			return;
ADDRGP4 $1629
JUMPV
LABELV $1647
line 2541
;2540:
;2541: 		cg.inMenu = qfalse;
ADDRGP4 cg+115696
CNSTI4 0
ASGNI4
line 2542
;2542:		cg.menuValidSlots = 0; 
ADDRGP4 cg+115704
CNSTI4 0
ASGNI4
line 2545
;2543:
;2544:		//then send the commmand		
;2545:		trap_SendClientCommand( va("menuselect %i",num) );
ADDRGP4 $1653
ARGP4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 1052
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 1052
INDIRP4
ARGP4
ADDRGP4 trap_SendClientCommand
CALLV
pop
line 2547
;2546:
;2547:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_LOCAL, cgs.media.noAmmoSound);
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1629
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+205084+1460
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2549
;2548:
;2549:		return;
ADDRGP4 $1629
JUMPV
LABELV $1644
line 2553
;2550:	}
;2551:
;2552:	// give the user more time to choose
;2553:	cg.InventoryTime = cg.time + cg_enableTimeSelect.integer * 1000;
ADDRGP4 cg+115736
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1000
ADDRGP4 cg_enableTimeSelect+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 2557
;2554:	// update list on key press
;2555:
;2556:	// clear
;2557:	cg.Inventorypos[PRIMARY] = cg.Inventorypos[SECONDARY] = cg.Inventorypos[MELEE] = cg.Inventorypos[EXPLO] = cg.Inventorypos[MISC] = 0;
ADDRLP4 1048
CNSTI4 0
ASGNI4
ADDRGP4 cg+116260+16
ADDRLP4 1048
INDIRI4
ASGNI4
ADDRGP4 cg+116260+12
ADDRLP4 1048
INDIRI4
ASGNI4
ADDRGP4 cg+116260+8
ADDRLP4 1048
INDIRI4
ASGNI4
ADDRGP4 cg+116260+4
ADDRLP4 1048
INDIRI4
ASGNI4
ADDRGP4 cg+116260
ADDRLP4 1048
INDIRI4
ASGNI4
line 2559
;2558:
;2559:	for ( i = 1 ; i < WP_NUM_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1673
line 2560
;2560:		if ( BG_GotWeapon( i , cg.snap->ps.stats ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 228
ADDP4
ARGP4
ADDRLP4 1052
ADDRGP4 BG_GotWeapon
CALLI4
ASGNI4
ADDRLP4 1052
INDIRI4
CNSTI4 0
EQI4 $1677
line 2561
;2561:		{
line 2563
;2562:			// CG_RegisterWeapon( i );
;2563:			if ( BG_IsPrimary( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1056
ADDRGP4 BG_IsPrimary
CALLI4
ASGNI4
ADDRLP4 1056
INDIRI4
CNSTI4 0
EQI4 $1680
line 2564
;2564:			{ 
line 2565
;2565:				cg.Inventory[PRIMARY][ cg.Inventorypos[PRIMARY] ] = i;
ADDRGP4 cg+116260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2566
;2566:				cg.Inventorypos[PRIMARY]++;
ADDRLP4 1060
ADDRGP4 cg+116260
ASGNP4
ADDRLP4 1060
INDIRP4
ADDRLP4 1060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2567
;2567:			}
ADDRGP4 $1681
JUMPV
LABELV $1680
line 2568
;2568:			else if ( BG_IsSecondary( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1060
ADDRGP4 BG_IsSecondary
CALLI4
ASGNI4
ADDRLP4 1060
INDIRI4
CNSTI4 0
EQI4 $1685
line 2569
;2569:			{ 
line 2570
;2570:				cg.Inventory[SECONDARY][ cg.Inventorypos[SECONDARY] ] = i;
ADDRGP4 cg+116260+4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+104
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2571
;2571:				cg.Inventorypos[SECONDARY]++;
ADDRLP4 1064
ADDRGP4 cg+116260+4
ASGNP4
ADDRLP4 1064
INDIRP4
ADDRLP4 1064
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2572
;2572:			}
ADDRGP4 $1686
JUMPV
LABELV $1685
line 2573
;2573:			else if ( BG_IsMelee( i ) )
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 1064
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 1064
INDIRI4
CNSTI4 0
EQI4 $1693
line 2574
;2574:			{ 
line 2575
;2575:				cg.Inventory[MELEE][ cg.Inventorypos[MELEE] ] = i;
ADDRGP4 cg+116260+8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+208
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2576
;2576:				cg.Inventorypos[MELEE]++;
ADDRLP4 1068
ADDRGP4 cg+116260+8
ASGNP4
ADDRLP4 1068
INDIRP4
ADDRLP4 1068
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2577
;2577:			}
ADDRGP4 $1694
JUMPV
LABELV $1693
line 2578
;2578:			else if ( i == WP_GRENADE ) {
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $1701
line 2579
;2579:				trap_Cvar_VariableStringBuffer("inven_ammo_mk26", var, sizeof(var));
ADDRGP4 $1478
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2580
;2580:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1068
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1068
INDIRI4
ASGNI4
line 2581
;2581:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1702
line 2582
;2582:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2583
;2583:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1072
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1072
INDIRP4
ADDRLP4 1072
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2584
;2584:				}
line 2585
;2585:			}
ADDRGP4 $1702
JUMPV
LABELV $1701
line 2586
;2586:			else if ( i == WP_FLASHBANG ) {
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $1711
line 2587
;2587:				trap_Cvar_VariableStringBuffer("inven_ammo_flash", var, sizeof(var));
ADDRGP4 $1489
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2588
;2588:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1068
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1068
INDIRI4
ASGNI4
line 2589
;2589:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1712
line 2590
;2590:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2591
;2591:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1072
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1072
INDIRP4
ADDRLP4 1072
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2592
;2592:				}
line 2593
;2593:			}
ADDRGP4 $1712
JUMPV
LABELV $1711
line 2594
;2594:			else if ( i == WP_SMOKE ) {
ADDRLP4 0
INDIRI4
CNSTI4 25
NEI4 $1721
line 2595
;2595:				trap_Cvar_VariableStringBuffer("inven_ammo_smoke", var, sizeof(var));
ADDRGP4 $1500
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_Cvar_VariableStringBuffer
CALLV
pop
line 2596
;2596:				count = atoi(var);
ADDRLP4 12
ARGP4
ADDRLP4 1068
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 1068
INDIRI4
ASGNI4
line 2597
;2597:				if (count > 0) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $1722
line 2598
;2598:				cg.Inventory[EXPLO][ cg.Inventorypos[EXPLO] ] = i;
ADDRGP4 cg+116260+12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+312
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2599
;2599:				cg.Inventorypos[EXPLO]++;
ADDRLP4 1072
ADDRGP4 cg+116260+12
ASGNP4
ADDRLP4 1072
INDIRP4
ADDRLP4 1072
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2600
;2600:				}
line 2601
;2601:			}
ADDRGP4 $1722
JUMPV
LABELV $1721
line 2602
;2602:			else if ( i == WP_C4 ) { 
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $1731
line 2603
;2603:				cg.Inventory[MISC][ cg.Inventorypos[MISC] ] = i;
ADDRGP4 cg+116260+16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+416
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2604
;2604:				cg.Inventorypos[MISC]++;
ADDRLP4 1068
ADDRGP4 cg+116260+16
ASGNP4
ADDRLP4 1068
INDIRP4
ADDRLP4 1068
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2605
;2605:			}
LABELV $1731
LABELV $1722
LABELV $1712
LABELV $1702
LABELV $1694
LABELV $1686
LABELV $1681
line 2606
;2606:		}			
LABELV $1677
line 2607
;2607:	}
LABELV $1674
line 2559
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 26
LTI4 $1673
line 2610
;2608:
;2609:	// the user should know that he got it 
;2610:	if( cg.snap->ps.powerups[PW_BRIEFCASE] )
ADDRGP4 cg+36
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1739
line 2611
;2611:	{
line 2613
;2612:		// he can't activate it, so it set it to -1
;2613:		cg.Inventory[MISC][ cg.Inventorypos[MISC] ] = PW_BRIEFCASE*-1;
ADDRGP4 cg+116260+16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+115740+416
ADDP4
CNSTI4 -8
ASGNI4
line 2614
;2614:		cg.Inventorypos[MISC]++;
ADDRLP4 1052
ADDRGP4 cg+116260+16
ASGNP4
ADDRLP4 1052
INDIRP4
ADDRLP4 1052
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2615
;2615:	}
LABELV $1739
line 2618
;2616:
;2617:	// currently the inventory isn't open so open the desired one
;2618:	if ( cg.activeInventory < 0 || cg.activeInventory > 5 ) {
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
LTI4 $1752
ADDRGP4 cg+115728
INDIRI4
CNSTI4 5
LEI4 $1748
LABELV $1752
line 2619
;2619:		cg.activeInventory = 0; 
ADDRGP4 cg+115728
CNSTI4 0
ASGNI4
line 2620
;2620:	}		 
LABELV $1748
line 2623
;2621:
;2622:	// inventory contains one spot so quick select
;2623:	if ( /*cg.Inventorypos[ num-1 ] <= 1*/1 ) 
line 2624
;2624:	{
line 2626
;2625:		// if key is not in range of valid slots
;2626:		if ( num < 0 || num > 5 ) // primary,secondary,melee,explo,misc
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $1758
ADDRLP4 4
INDIRI4
CNSTI4 5
LEI4 $1756
LABELV $1758
line 2627
;2627:			return;
ADDRGP4 $1629
JUMPV
LABELV $1756
line 2630
;2628:
;2629:		// nothing in inventory, return
;2630:		if ( cg.Inventorypos[ num-1 ] <= 0 )  { 
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1759
line 2631
;2631:			return;
ADDRGP4 $1629
JUMPV
LABELV $1759
line 2635
;2632:		}
;2633:
;2634:		// fixme: play open sound	
;2635:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1763
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1056
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1056
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1763
line 2638
;2636:
;2637:		// set the active inventory
;2638:		if ( !cg.activeInventory )
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
NEI4 $1768
line 2639
;2639:			cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
LABELV $1768
line 2643
;2640:
;2641:		
;2642:
;2643:		if ( cg.Inventorypos[ num-1 ] != 1 ) // only one item here? the go for it
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1772
line 2644
;2644:		{
line 2645
;2645:			if (cg.activeInventory == num )
ADDRGP4 cg+115728
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $1776
line 2646
;2646:				cg.curInventory++;
ADDRLP4 1060
ADDRGP4 cg+115732
ASGNP4
ADDRLP4 1060
INDIRP4
ADDRLP4 1060
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1776
line 2647
;2647:		}
LABELV $1772
line 2648
;2648:		if ( cg.activeInventory != num )
ADDRGP4 cg+115728
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1780
line 2649
;2649:			cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
LABELV $1780
line 2651
;2650:
;2651:		cg.activeInventory = num;
ADDRGP4 cg+115728
ADDRLP4 4
INDIRI4
ASGNI4
line 2653
;2652:
;2653:		if ( cg.curInventory > cg.Inventorypos[ cg.activeInventory - 1 ] )
ADDRGP4 cg+115732
INDIRI4
ADDRGP4 cg+115728
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
LEI4 $1785
line 2654
;2654:			cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
LABELV $1785
line 2656
;2655:		
;2656:		CG_InvenSelect( );
ADDRGP4 CG_InvenSelect
CALLV
pop
line 2658
;2657:
;2658:		return;
ADDRGP4 $1629
JUMPV
LABELV $1754
line 2660
;2659:	}
;2660:	if ( !cg.activeInventory )
ADDRGP4 cg+115728
INDIRI4
CNSTI4 0
NEI4 $1792
line 2661
;2661:	{
line 2662
;2662:		if ( cg.Inventorypos[ num-1] > 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116260-4
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1795
line 2663
;2663:			cg.activeInventory = num;
ADDRGP4 cg+115728
ADDRLP4 4
INDIRI4
ASGNI4
line 2664
;2664:			cg.curInventory = 1;
ADDRGP4 cg+115732
CNSTI4 1
ASGNI4
line 2665
;2665:		}
LABELV $1795
line 2666
;2666:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/open.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1629
ADDRGP4 $1543
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1052
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1052
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2667
;2667:		return;
ADDRGP4 $1629
JUMPV
LABELV $1792
line 2671
;2668:	} 
;2669:	
;2670:	// now we pressed the key twice ( we're already on slot#num )
;2671:	if (cg.curInventory == num)
ADDRGP4 cg+115732
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $1806
line 2672
;2672:	{
line 2673
;2673:		CG_InvenSelect(); 
ADDRGP4 CG_InvenSelect
CALLV
pop
line 2674
;2674:		return;
ADDRGP4 $1629
JUMPV
LABELV $1806
line 2678
;2675:	} 
;2676:
;2677:	// just set this slot as the active one
;2678:	cg.curInventory = num;
ADDRGP4 cg+115732
ADDRLP4 4
INDIRI4
ASGNI4
line 2681
;2679:
;2680:	// play sound
;2681:	if ((cg.DeafTime < cg.time)) trap_S_StartSound (NULL, cg.snap->ps.clientNum, CHAN_ITEM, trap_S_RegisterSound("sound/hud/moveselect.wav",qfalse) );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1810
ADDRGP4 $1580
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 1052
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 1052
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1810
line 2682
;2682:}
LABELV $1629
endproc CG_Weapon_f 1076 16
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 2691
;2683:
;2684:/*
;2685:===================
;2686:CG_OutOfAmmoChange
;2687:
;2688:The current weapon has just run out of ammo
;2689:===================
;2690:*/
;2691:void CG_OutOfAmmoChange( void ) {
line 2694
;2692:	int		i;
;2693:
;2694:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+115300
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2696
;2695:
;2696:	for ( i = 15 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1818
line 2697
;2697:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1822
line 2698
;2698:			cg.weaponSelect = i;
ADDRGP4 cg+108944
ADDRLP4 0
INDIRI4
ASGNI4
line 2699
;2699:			break;
ADDRGP4 $1820
JUMPV
LABELV $1822
line 2701
;2700:		}
;2701:	}
LABELV $1819
line 2696
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1818
LABELV $1820
line 2702
;2702:}
LABELV $1815
endproc CG_OutOfAmmoChange 8 4
export CG_ReloadWeapon
proc CG_ReloadWeapon 16 16
line 2721
;2703:
;2704:
;2705:
;2706:/*
;2707:===================================================================================================
;2708:
;2709:WEAPON EVENTS
;2710:
;2711:===================================================================================================
;2712:*/
;2713:
;2714:/*
;2715:================
;2716:CG_ReloadWeapon
;2717:
;2718:Caused by an EV_FIRE_WEAPON event
;2719:================
;2720:*/
;2721:void CG_ReloadWeapon( centity_t *cent, int last_rnd ) {
line 2726
;2722:	entityState_t *ent;
;2723://	int				c;
;2724:	weaponInfo_t	*weap;
;2725:
;2726:	ent = &cent->currentState;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 2727
;2727:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1826
line 2728
;2728:		return;
ADDRGP4 $1825
JUMPV
LABELV $1826
line 2730
;2729:	}
;2730:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 26
LTI4 $1828
line 2731
;2731:		CG_Error( "CG_ReloadWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $1830
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2732
;2732:		return;
ADDRGP4 $1825
JUMPV
LABELV $1828
line 2734
;2733:	}
;2734:	weap = &cg_weapons[ ent->weapon ];  
ADDRLP4 4
CNSTI4 296
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2736
;2735: 
;2736:	if ( ent->weapon == WP_SW629 )
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1831
line 2737
;2737:	{
line 2738
;2738:		cent->muzzleFlashTime = MUZZLE_FLASH_TIME;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 20
ASGNI4
line 2739
;2739:		cent->brassEjected = 6;
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
CNSTI4 6
ASGNI4
line 2740
;2740:	}
LABELV $1831
line 2742
;2741: 
;2742:	if ( weap->reloadSound && !last_rnd) {
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 288
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $1833
ADDRFP4 4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1833
line 2743
;2743:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->reloadSound ); 
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1825
CNSTP4 0
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 288
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2744
;2744:		return;
ADDRGP4 $1825
JUMPV
LABELV $1833
line 2747
;2745:	}
;2746:
;2747:	if ( last_rnd && !weap->reloadEmptySound )
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $1839
ADDRLP4 4
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $1839
line 2748
;2748:		return; 
ADDRGP4 $1825
JUMPV
LABELV $1839
line 2750
;2749:
;2750:	if ((cg.DeafTime < cg.time)) trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->reloadEmptySound );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1841
CNSTP4 0
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1841
line 2751
;2751:}
LABELV $1825
endproc CG_ReloadWeapon 16 16
export CG_FireWeapon
proc CG_FireWeapon 56 16
line 2762
;2752: 
;2753:void CG_PredictFireLead();
;2754:void CG_PredictFireShotgun();
;2755:/*
;2756:================
;2757:CG_FireWeapon
;2758:
;2759:Caused by an EV_FIRE_WEAPON event
;2760:================
;2761:*/
;2762:void CG_FireWeapon( centity_t *cent, qboolean othermode ) {
line 2767
;2763:	entityState_t *ent;
;2764:	int				c;
;2765:	weaponInfo_t	*weap;
;2766:
;2767:	ent = &cent->currentState;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
line 2768
;2768:	if ( ent->weapon == WP_NONE ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1846
line 2769
;2769:		return;
ADDRGP4 $1845
JUMPV
LABELV $1846
line 2771
;2770:	}
;2771:	if ( ent->weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 26
LTI4 $1848
line 2772
;2772:		CG_Error( "CG_FireWeapon: ent->weapon >= WP_NUM_WEAPONS" );
ADDRGP4 $1850
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2773
;2773:		return;
ADDRGP4 $1845
JUMPV
LABELV $1848
line 2775
;2774:	}
;2775:	weap = &cg_weapons[ ent->weapon ];
ADDRLP4 4
CNSTI4 296
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2779
;2776:
;2777:	// mark the entity as muzzle flashing, so when it is added it will
;2778:	// append the flash to the weapon model
;2779:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2782
;2780:
;2781:	// is this 'our' client then increase crosshair size
;2782:	if ( weap->kickBack && ( cent->currentState.number == cg.snap->ps.clientNum ) )
ADDRLP4 4
INDIRP4
CNSTI4 284
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1852
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1852
line 2783
;2783:		cg.crosshairMod += weap->kickBack;
ADDRLP4 12
ADDRGP4 cg+116364
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 284
ADDP4
INDIRI4
ADDI4
ASGNI4
LABELV $1852
line 2785
;2784:
;2785:	if ( cg.crosshairMod > 50 )
ADDRGP4 cg+116364
INDIRI4
CNSTI4 50
LEI4 $1856
line 2786
;2786:		cg.crosshairMod = 50; 
ADDRGP4 cg+116364
CNSTI4 50
ASGNI4
LABELV $1856
line 2788
;2787:// firing using a silenced weapon , play a silenced sound then  
;2788:	if ( othermode )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1860
line 2789
;2789:	{
line 2790
;2790:		for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1862
line 2791
;2791:			if ( !weap->otherflashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1866
line 2792
;2792:				break;
ADDRGP4 $1864
JUMPV
LABELV $1866
line 2794
;2793:			}
;2794:		}
LABELV $1863
line 2790
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1862
LABELV $1864
line 2796
;2795:
;2796:		if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1861
line 2797
;2797:			c = rand() % c;
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 2798
;2798:			if ( weap->otherflashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1861
line 2799
;2799:			{
line 2800
;2800:				if ((cg.DeafTime < cg.time)) trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->otherflashSound[c] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1861
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 20
CNSTI4 2
ASGNI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2801
;2801:			}
line 2802
;2802:		}
line 2803
;2803:	}
ADDRGP4 $1861
JUMPV
LABELV $1860
line 2804
;2804:	else if ( cent->currentState.eFlags & EF_SILENCED )
ADDRLP4 16
CNSTI4 8
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
BANDI4
CNSTI4 0
EQI4 $1876
line 2805
;2805:	{
line 2806
;2806:		for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1878
line 2807
;2807:			if ( !weap->sil_flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1882
line 2808
;2808:				break;
ADDRGP4 $1880
JUMPV
LABELV $1882
line 2810
;2809:			}
;2810:		}
LABELV $1879
line 2806
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1878
LABELV $1880
line 2812
;2811:
;2812:		if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1877
line 2813
;2813:			c = rand() % c;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 2814
;2814:			if ( weap->sil_flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1877
line 2815
;2815:			{
line 2816
;2816:				if ((cg.DeafTime < cg.time)) trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->sil_flashSound[c] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1877
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2817
;2817:			}
line 2818
;2818:		}
line 2819
;2819:	}
ADDRGP4 $1877
JUMPV
LABELV $1876
line 2820
;2820:	else {
line 2822
;2821:		// play a normal firing sound
;2822:		for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1892
line 2823
;2823:			if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1896
line 2824
;2824:				break;
ADDRGP4 $1894
JUMPV
LABELV $1896
line 2826
;2825:			}
;2826:		}
LABELV $1893
line 2822
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1892
LABELV $1894
line 2828
;2827:
;2828:		if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1898
line 2829
;2829:			c = rand() % c;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 2830
;2830:			if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1900
line 2831
;2831:			{
line 2832
;2832:				if ((cg.DeafTime < cg.time)) trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1902
CNSTP4 0
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $1902
line 2833
;2833:			}
LABELV $1900
line 2834
;2834:		}
LABELV $1898
line 2835
;2835:	}
LABELV $1877
LABELV $1861
line 2838
;2836:
;2837:	// do brass ejection
;2838:	if ( weap->ejectBrassNum > 0 && weap->ejectBrassType > BRASS_NONE && cg_brassTime.value > 0)
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 272
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $1906
ADDRLP4 4
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $1906
ADDRGP4 cg_brassTime+8
INDIRF4
CNSTF4 0
LEF4 $1906
line 2839
;2839:	{
line 2840
;2840:		if ( BG_IsZooming( cg.snap->ps.stats[STAT_WEAPONMODE] ) && cg.snap->ps.clientNum == cent->currentState.clientNum && cg.snap->ps.weapon != WP_MACMILLAN )
ADDRGP4 cg+36
INDIRP4
CNSTI4 264
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_IsZooming
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $1909
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
NEI4 $1909
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 18
EQI4 $1909
line 2841
;2841:			cent->brassEjected = 0;
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $1910
JUMPV
LABELV $1909
line 2843
;2842:		else
;2843:			cent->brassEjected = weap->ejectBrassNum;
ADDRFP4 0
INDIRP4
CNSTI4 432
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 272
ADDP4
INDIRI4
ASGNI4
LABELV $1910
line 2844
;2844:	}
LABELV $1906
line 2850
;2845:
;2846:/*	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
;2847:		weap->ejectBrassFunc( cent );
;2848:	}
;2849:*/  
;2850:	if ( !BG_IsGrenade( ent->weapon ) && !BG_IsMelee(ent->weapon) && ent->weapon != WP_C4 )
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $1914
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $1914
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1914
line 2851
;2851:	{
line 2852
;2852:		cent->gunSmokePuff = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 1
ASGNI4
line 2854
;2853:
;2854:		if ( cent->gunSmokeTime < cg.time )
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $1916
line 2855
;2855:			cent->gunSmokeTime = cg.time + 500;
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
ADDRGP4 $1917
JUMPV
LABELV $1916
line 2856
;2856:		else if ( cent->gunSmokeTime - cg.time < 2000 )
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CNSTI4 2000
GEI4 $1920
line 2857
;2857:			cent->gunSmokeTime += 400;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
LABELV $1920
LABELV $1917
line 2859
;2858:
;2859:	}
LABELV $1914
line 2860
;2860:	if ( cent->currentState.clientNum == cg.snap->ps.clientNum &&
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1923
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1923
line 2862
;2861:		BG_IsShotgun( cg.snap->ps.weapon ) )
;2862:	{
line 2863
;2863:		if (cg_bulletpredict.integer) CG_PredictFireShotgun( );
ADDRGP4 cg_bulletpredict+12
INDIRI4
CNSTI4 0
EQI4 $1924
ADDRGP4 CG_PredictFireShotgun
CALLV
pop
line 2864
;2864:	}
ADDRGP4 $1924
JUMPV
LABELV $1923
line 2865
;2865:	else if ( cent->currentState.clientNum == cg.snap->ps.clientNum
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1930
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $1930
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 BG_IsMelee
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $1930
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $1930
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $1930
line 2871
;2866:		&& !BG_IsGrenade( cg.snap->ps.weapon ) 
;2867:		&& !BG_IsMelee( cg.snap->ps.weapon )
;2868:		&& !BG_IsGrenade( cg.snap->ps.weapon )
;2869:		&& !BG_IsShotgun( cg.snap->ps.weapon )
;2870:		)
;2871:	{
line 2873
;2872:
;2873:		if (cg_bulletpredict.integer) {
ADDRGP4 cg_bulletpredict+12
INDIRI4
CNSTI4 0
EQI4 $1937
line 2874
;2874:			CG_PredictFireLead( );
ADDRGP4 CG_PredictFireLead
CALLV
pop
line 2875
;2875:		}
LABELV $1937
line 2876
;2876:	}
LABELV $1930
LABELV $1924
line 2878
;2877:	
;2878:}
LABELV $1845
endproc CG_FireWeapon 56 16
export CG_GrenadeShrapnel
proc CG_GrenadeShrapnel 20 0
line 2883
;2879: 
;2880:
;2881:
;2882:
;2883:void CG_GrenadeShrapnel( vec3_t org, vec3_t dir ) {
line 2887
;2884:	localEntity_t	*le;
;2885:	refEntity_t		*re;
;2886:
;2887:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2888
;2888:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 2890
;2889:
;2890:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2891
;2891:	VectorScale(dir, 800, le->pos.trDelta);
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1145569280
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1145569280
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1145569280
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2892
;2892:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 2893
;2893:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2894
;2894:	le->leType = LE_SHRAPNEL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 2895
;2895:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2896
;2896:	le->endTime = cg.time + random() * 2000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1157234688
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2897
;2897:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 2898
;2898:	le->radius = 0.7f;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1060320051
ASGNF4
line 2899
;2899:	le->leFlags = cgs.media.sparkShader;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1080
INDIRI4
ASGNI4
line 2900
;2900:	le->bounceFactor = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1048576000
ASGNF4
line 2901
;2901:}
LABELV $1940
endproc CG_GrenadeShrapnel 20 0
export CG_RocketShrapnel
proc CG_RocketShrapnel 32 0
line 2903
;2902:
;2903:void CG_RocketShrapnel( vec3_t org, vec3_t dir ) {
line 2907
;2904:	localEntity_t	*le;
;2905:	refEntity_t		*re;
;2906:
;2907:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2908
;2908:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 2910
;2909:
;2910:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2911
;2911:	VectorScale(dir, random() * 400 + 200, le->pos.trDelta);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1137180672
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1137180672
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1137180672
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
line 2912
;2912:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 2913
;2913:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2914
;2914:	le->leType = LE_SHRAPNEL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 2915
;2915:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2916
;2916:	le->endTime = cg.time + random() * 5000;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CVIF4 4
CNSTF4 1167867904
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2917
;2917:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 2918
;2918:	le->radius = 1;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1065353216
ASGNF4
line 2919
;2919:	le->leFlags = cgs.media.sparkShader;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1080
INDIRI4
ASGNI4
line 2920
;2920:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 2921
;2921:}
LABELV $1946
endproc CG_RocketShrapnel 32 0
export CG_Spark
proc CG_Spark 28 0
line 2923
;2922: 
;2923:void CG_Spark( vec3_t org, vec3_t dir, float width ) {
line 2927
;2924:	localEntity_t	*le;
;2925:	refEntity_t		*re;
;2926:
;2927:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2928
;2928:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 2930
;2929:
;2930:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2931
;2931:	VectorScale(dir, 125 + crandom()*30, le->pos.trDelta);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1123680256
ADDF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1123680256
ADDF4
MULF4
ASGNF4
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1106247680
CNSTF4 1073741824
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1123680256
ADDF4
MULF4
ASGNF4
line 2932
;2932:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 2933
;2933:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2934
;2934:	le->leType = LE_SHRAPNEL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 2935
;2935:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2936
;2936:	le->endTime = cg.time + 400;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
line 2937
;2937:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 2938
;2938:	le->radius = width;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 2939
;2939:	le->leFlags = cgs.media.sparkShader;//sparkShader;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1080
INDIRI4
ASGNI4
line 2940
;2940:	le->bounceFactor = 0.5f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1056964608
ASGNF4
line 2941
;2941:} 
LABELV $1952
endproc CG_Spark 28 0
export CG_SpawnTracer
proc CG_SpawnTracer 16 0
line 2944
;2942:
;2943:
;2944:void CG_SpawnTracer( vec3_t start, vec3_t end ) {
line 2948
;2945:	localEntity_t	*le;
;2946:	refEntity_t		*re;
;2947:
;2948:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2949
;2949:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 2952
;2950:
;2951:	// rape those vectors
;2952:	VectorCopy(start, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2953
;2953: 	VectorCopy(end, le->angles.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 2955
;2954:  
;2955:	le->leType = LE_TRACER;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 11
ASGNI4
line 2956
;2956:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2957
;2957:	le->endTime = cg.time + 250;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 2958
;2958:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 2959
;2959:	le->leFlags = cgs.media.sparkShader; 
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1080
INDIRI4
ASGNI4
line 2960
;2960:} 
LABELV $1958
endproc CG_SpawnTracer 16 0
export CG_MetalSpark
proc CG_MetalSpark 28 0
line 2962
;2961:
;2962:void CG_MetalSpark( vec3_t org, vec3_t dir, float width ) {
line 2966
;2963:	localEntity_t	*le;
;2964:	refEntity_t		*re;
;2965:
;2966:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2967
;2967:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 2969
;2968:
;2969:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 2970
;2970:	VectorScale(dir, 200 + crandom()*50, le->pos.trDelta);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1128792064
ADDF4
MULF4
ASGNF4
line 2976
;2971:
;2972:	/*
;2973:	if ( width < 0 ) // is negative ~ the circles have to be linear
;2974:		le->pos.trType = TR_GRAVITY;
;2975:	else*/
;2976:		le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 2978
;2977:
;2978:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2979
;2979:	le->leType = LE_SHRAPNEL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 2980
;2980:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 2981
;2981:	le->endTime = cg.time + 300;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 2982
;2982:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 2983
;2983:	le->radius = width;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 2984
;2984:	le->leFlags = cgs.media.metalsparkShader;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+1084
INDIRI4
ASGNI4
line 2985
;2985:	le->bounceFactor = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1065353216
ASGNF4
line 2987
;2986: 
;2987:} 
LABELV $1963
endproc CG_MetalSpark 28 0
export CG_LightParticles
proc CG_LightParticles 48 16
line 2995
;2988:
;2989:/*
;2990:=================
;2991:CG_LightParticles
;2992:=================
;2993:*/
;2994:void CG_LightParticles( vec3_t origin, vec4_t hcolor, float limit )
;2995:{ 
line 3000
;2996:	vec3_t			ambientLight;
;2997:	vec3_t			lightDir;
;2998:	vec3_t			directedLight;
;2999:
;3000:	trap_R_LightForPoint( origin, ambientLight, directedLight, lightDir );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 trap_R_LightForPoint
CALLI4
pop
line 3002
;3001: 
;3002:	directedLight[0] /= 255;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 3003
;3003:	directedLight[1] /= 255;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 3004
;3004:	directedLight[2] /= 255;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 3006
;3005:	
;3006:	if ( limit > 0.0f )
ADDRFP4 8
INDIRF4
CNSTF4 0
LEF4 $1972
line 3007
;3007:	{
line 3008
;3008:		if ( directedLight[0] < limit )
ADDRLP4 0
INDIRF4
ADDRFP4 8
INDIRF4
GEF4 $1974
line 3009
;3009:			directedLight[0] = limit;
ADDRLP4 0
ADDRFP4 8
INDIRF4
ASGNF4
LABELV $1974
line 3010
;3010:		if ( directedLight[1] < limit )
ADDRLP4 0+4
INDIRF4
ADDRFP4 8
INDIRF4
GEF4 $1976
line 3011
;3011:			directedLight[1] = limit;
ADDRLP4 0+4
ADDRFP4 8
INDIRF4
ASGNF4
LABELV $1976
line 3012
;3012:		if ( directedLight[2] < limit )
ADDRLP4 0+8
INDIRF4
ADDRFP4 8
INDIRF4
GEF4 $1980
line 3013
;3013:			directedLight[2] = limit;
ADDRLP4 0+8
ADDRFP4 8
INDIRF4
ASGNF4
LABELV $1980
line 3014
;3014:	}
LABELV $1972
line 3015
;3015:	hcolor[0] = (directedLight[0] * hcolor[0]);
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
MULF4
ASGNF4
line 3016
;3016:	hcolor[1] = (directedLight[1] * hcolor[1]);
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 40
INDIRP4
INDIRF4
MULF4
ASGNF4
line 3017
;3017:	hcolor[2] = (directedLight[2] * hcolor[2]);
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ASGNF4
line 3019
;3018:
;3019:  	return;
LABELV $1969
endproc CG_LightParticles 48 16
export CG_SpawnParticle
proc CG_SpawnParticle 20 12
line 3021
;3020:}
;3021:localEntity_t *CG_SpawnParticle( vec3_t org, vec3_t dir, float speed, float bouncefactor, float radius, float r,float g,float b,float a, qboolean size ) {
line 3025
;3022:	localEntity_t	*le;
;3023:	refEntity_t		*re;
;3024:
;3025:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 3026
;3026:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 3028
;3027:
;3028:	VectorCopy( org, le->pos.trBase ); // move to origin vector org
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 3029
;3029:	VectorCopy( org, le->refEntity.origin ); // move to origin vector org
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 3030
;3030:	VectorScale(dir, speed, le->pos.trDelta); // add velocity vector based on speed
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 3031
;3031:	le->pos.trType = TR_GRAVITY; // movement type
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 3032
;3032:	le->pos.trTime = cg.time; // set start time of calculation
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3033
;3033:	le->leType = LE_PARTICLE; // render as particle
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 10
ASGNI4
line 3034
;3034:	le->startTime = cg.time; // start time
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3035
;3035:	le->endTime = cg.time + cg_particleTime.integer; // time it will be removed from the scene
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg_particleTime+12
INDIRI4
ADDI4
ASGNI4
line 3036
;3036:	le->lifeRate = 1.0 / ( le->endTime - le->startTime ); 
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 3037
;3037:	le->radius = radius * 0.75f; // 
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1061158912
ADDRFP4 16
INDIRF4
MULF4
ASGNF4
line 3038
;3038:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 3039
;3039:	le->color[1] = g;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 3040
;3040:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 3041
;3041:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 32
INDIRF4
ASGNF4
line 3045
;3042:
;3043:	 
;3044:	// light particles
;3045:	CG_LightParticles( org, le->color, 0.2f );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ARGP4
CNSTF4 1045220557
ARGF4
ADDRGP4 CG_LightParticles
CALLV
pop
line 3047
;3046:
;3047:	le->bounceFactor = bouncefactor;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 3048
;3048:	le->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 3049
;3049:	le->leBounceSoundType = 0;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 3050
;3050:	if (!size)
ADDRFP4 36
INDIRI4
CNSTI4 0
NEI4 $1991
line 3051
;3051:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
LABELV $1991
line 3052
;3052:	le->refEntity.customShader = trap_R_RegisterShader("gfx/misc/particle_08.tga");
ADDRGP4 $1993
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 3054
;3053:
;3054:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $1986
endproc CG_SpawnParticle 20 12
export CG_SpawnBloodParticle
proc CG_SpawnBloodParticle 20 0
line 3059
;3055:
;3056://	trap_R_AddLightToScene( org, 20, 0.5f, 0.5f, 0.5f ); 
;3057:
;3058:} 
;3059:localEntity_t *CG_SpawnBloodParticle( vec3_t org, vec3_t dir, float speed, float bouncefactor, float radius, float r,float g,float b,float a, qboolean size ) {
line 3063
;3060:	localEntity_t	*le;
;3061:	refEntity_t		*re;
;3062:
;3063:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 3064
;3064:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 3066
;3065:
;3066:	VectorCopy( org, le->pos.trBase ); // move to origin vector org
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 3067
;3067:	VectorCopy( org, le->refEntity.origin ); // move to origin vector org
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 3068
;3068:	VectorScale(dir, speed, le->pos.trDelta); // add velocity vector based on speed
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 3069
;3069:	le->pos.trType = TR_GRAVITY; // movement type
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 3070
;3070:	le->pos.trTime = cg.time; // set start time of calculation
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3071
;3071:	le->leType = LE_PARTICLE; // render as particle
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 10
ASGNI4
line 3072
;3072:	le->startTime = cg.time; // start time
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3073
;3073:	le->endTime = cg.time + 600; // time it will be removed from the scene
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 3074
;3074:	le->lifeRate = 1.0 / ( le->endTime - le->startTime ); 
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 3075
;3075:	le->radius = radius; // 
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 3076
;3076:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 3077
;3077:	le->color[1] = g;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 3078
;3078:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 28
INDIRF4
ASGNF4
line 3079
;3079:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 32
INDIRF4
ASGNF4
line 3080
;3080:	le->bounceFactor = bouncefactor;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 3081
;3081:	le->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 3082
;3082:	if ( random() < ( 0.25 * cg_goreLevel.value ) )
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1048576000
ADDRGP4 cg_goreLevel+8
INDIRF4
MULF4
GEF4 $1998
line 3083
;3083:		le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 3
ASGNI4
ADDRGP4 $1999
JUMPV
LABELV $1998
line 3085
;3084:	else
;3085:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
LABELV $1999
line 3086
;3086:	le->leBounceSoundType = 0;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 3087
;3087:	if (!size)
ADDRFP4 36
INDIRI4
CNSTI4 0
NEI4 $2001
line 3088
;3088:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
LABELV $2001
line 3089
;3089:	le->refEntity.customShader = cgs.media.bloodparticleShaders[0];
ADDRLP4 0
INDIRP4
CNSTI4 264
ADDP4
ADDRGP4 cgs+205084+688
INDIRI4
ASGNI4
line 3091
;3090:
;3091:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $1994
endproc CG_SpawnBloodParticle 20 0
export CG_SurfaceEffect
proc CG_SurfaceEffect 212 48
line 3098
;3092:
;3093://	trap_R_AddLightToScene( org, 20, 0.5f, 0.5f, 0.5f ); 
;3094:
;3095:} 
;3096:
;3097:void CG_SurfaceEffect( vec3_t origin, vec3_t dir , int surface, int weapon, float radius)
;3098:{
line 3099
;3099:	int max = 2 + random()*2;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 8
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1073741824
ADDF4
CVFI4 4
ASGNI4
line 3100
;3100:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3103
;3101:
;3102:	// se disabled.
;3103:	if ( cg_particleTime.integer <= 0 )
ADDRGP4 cg_particleTime+12
INDIRI4
CNSTI4 0
GTI4 $2006
line 3104
;3104:		return;
ADDRGP4 $2005
JUMPV
LABELV $2006
line 3106
;3105:
;3106:	if ( BG_IsGrenade( weapon ) && cg_grenadeSparks.integer < 2 )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $2009
ADDRGP4 cg_grenadeSparks+12
INDIRI4
CNSTI4 2
GEI4 $2009
line 3107
;3107:		return;
ADDRGP4 $2005
JUMPV
LABELV $2009
line 3120
;3108:/*
;3109:	vec3_t testorg;
;3110:	qboolean up = qtrue; // add upwards velocity
;3111:
;3112:	VectorCopy( origin, testorg );
;3113:
;3114:	testorg[2] += 1;
;3115:
;3116:	// is the point a solid, if yeah then we can't go up
;3117:	if ( trap_CM_PointContents( testorg, 0 ) == CONTENTS_SOLID )
;3118:		up = qfalse;
;3119:*/ 
;3120:	if ( surface == BHOLE_NORMAL && !BG_IsShotgun( weapon ) )
ADDRFP4 8
INDIRI4
CNSTI4 0
NEI4 $2012
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $2012
line 3121
;3121:	{
line 3123
;3122:		// add a strong but small dynamic light on impact
;3123: 		float spread = 1;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
line 3128
;3124:		vec3_t	movedir;
;3125:		vec3_t up;
;3126:		localEntity_t *smoke;
;3127:
;3128:		VectorCopy ( dir, up );
ADDRLP4 40
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3129
;3129:		up[2] += 2; 
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
CNSTF4 1073741824
ADDF4
ASGNF4
line 3131
;3130:
;3131:		smoke = CG_SmokePuff( origin, up, 2.5 + radius + random(), 1, 1, 1, 1, 1000 + random()*500, cg.time-250, cg.time-250,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
ADDRFP4 16
INDIRF4
CNSTF4 1075838976
ADDF4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ARGF4
ADDRLP4 60
CNSTF4 1065353216
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
CNSTF4 1140457472
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1148846080
ADDF4
ARGF4
ADDRLP4 64
CNSTI4 250
ASGNI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 64
INDIRI4
SUBI4
ARGI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 64
INDIRI4
SUBI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 68
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 68
INDIRP4
ASGNP4
line 3135
;3132:
;3133://		smoke = CG_SmokePuff( origin, up, 0.5 + radius + random(), 1, 1, 1, 1, 1000 + random()*500, cg.time, 0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
;3134:
;3135:		VectorScale( dir, 5, smoke->pos.trDelta );
ADDRLP4 36
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1084227584
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1084227584
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 3137
;3136:
;3137:		smoke->pos.trDelta[2] += 5;
ADDRLP4 72
ADDRLP4 36
INDIRP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
CNSTF4 1084227584
ADDF4
ASGNF4
line 3138
;3138:		smoke->refEntity.renderfx = 0;
ADDRLP4 36
INDIRP4
CNSTI4 156
ADDP4
CNSTI4 0
ASGNI4
line 3140
;3139:
;3140:		VectorMA( origin, 0.5, dir, smoke->pos.trBase);
ADDRLP4 36
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
CNSTI4 4
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 48
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
CNSTI4 8
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3142
;3141:
;3142:		for ( i = 0; i < 4; i++ ) 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2019
line 3143
;3143:		{
line 3144
;3144:			spread = 1 + random();
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 3146
;3145:
;3146:			VectorCopy( dir, movedir );  
ADDRLP4 20
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3148
;3147:
;3148:			if ( random() < 0.33 )
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2023
line 3149
;3149:				movedir[0] += random()/spread;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2024
JUMPV
LABELV $2023
line 3150
;3150:			else if ( random() < 0.66 )
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2025
line 3151
;3151:				movedir[0] -= random()/spread;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2025
LABELV $2024
line 3153
;3152:
;3153:			if ( random() < 0.33 )
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2027
line 3154
;3154:				movedir[1] += random()/spread;
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2028
JUMPV
LABELV $2027
line 3155
;3155:			else if ( random() < 0.66 )
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2030
line 3156
;3156:				movedir[1] -= random()/spread;
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2030
LABELV $2028
line 3158
;3157:		
;3158:			if ( dir[2] > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $2033
line 3159
;3159:				movedir[2] += 2 + random();		
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
ADDRGP4 $2034
JUMPV
LABELV $2033
line 3160
;3160:			else if ( dir[2] < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $2036
line 3161
;3161:				movedir[2] -= 2 + random();	
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
SUBF4
ASGNF4
ADDRGP4 $2037
JUMPV
LABELV $2036
line 3163
;3162:			else
;3163:				movedir[2] += 1 + random();	 
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ADDF4
ASGNF4
LABELV $2037
LABELV $2034
line 3165
;3164: 
;3165:			VectorScale( movedir, 0.25f + random()/10 , movedir );
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
line 3167
;3166:
;3167:			CG_Spark(origin, movedir, radius/5 ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRFP4 16
INDIRF4
CNSTF4 1084227584
DIVF4
ARGF4
ADDRGP4 CG_Spark
CALLV
pop
line 3168
;3168:		} 
LABELV $2020
line 3142
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $2019
line 3169
;3169:	}
LABELV $2012
line 3172
;3170:
;3171:
;3172:	if ( surface == BHOLE_METAL )
ADDRFP4 8
INDIRI4
CNSTI4 2
NEI4 $2044
line 3173
;3173:	{
line 3176
;3174:		// add a strong but small dynamic light on impact
;3175:		float value;
;3176:		float intensity = 18;
ADDRLP4 36
CNSTF4 1099956224
ASGNF4
line 3177
;3177:		float spread = 0.1f;
ADDRLP4 32
CNSTF4 1036831949
ASGNF4
line 3178
;3178:		int		max = 10;
ADDRLP4 44
CNSTI4 10
ASGNI4
line 3181
;3179:		vec3_t	movedir;
;3180:
;3181:		value = 0.6f + random()/5;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1084227584
DIVF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 3183
;3182:
;3183:		intensity += random()*4;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 36
INDIRF4
CNSTF4 1082130432
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
line 3185
;3184:
;3185:		if ( BG_IsShotgun(weapon) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $2046
line 3186
;3186:		{
line 3187
;3187:			max = 2;
ADDRLP4 44
CNSTI4 2
ASGNI4
line 3188
;3188:		}
ADDRGP4 $2047
JUMPV
LABELV $2046
line 3190
;3189:		else
;3190:			trap_R_AddLightToScene( origin, intensity, value, value, value ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 60
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 60
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
LABELV $2047
line 3192
;3191:
;3192:		for ( i = 0; i < 10; i++ ) 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2048
line 3193
;3193:		{
line 3194
;3194:			spread = 1 + random();
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 3196
;3195:
;3196:			VectorCopy( dir, movedir );  
ADDRLP4 20
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3198
;3197:
;3198:			if ( random() < 0.33 )
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2052
line 3199
;3199:				movedir[0] += random()/spread;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2053
JUMPV
LABELV $2052
line 3200
;3200:			else if ( random() < 0.66 )
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2054
line 3201
;3201:				movedir[0] -= random()/spread;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2054
LABELV $2053
line 3203
;3202:
;3203:			if ( random() < 0.33 )
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2056
line 3204
;3204:				movedir[1] += random()/spread;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2057
JUMPV
LABELV $2056
line 3205
;3205:			else if ( random() < 0.66 )
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2059
line 3206
;3206:				movedir[1] -= random()/spread;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 32
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2059
LABELV $2057
line 3215
;3207:		/*
;3208:			if ( dir[2] > 0 )
;3209:				movedir[2] += 2 + random();		
;3210:			else if ( dir[2] < 0 )
;3211:				movedir[2] -= 2 + random();	
;3212:			else
;3213:				movedir[2] += 1 + random();	 */
;3214:
;3215:			VectorScale( movedir, 0.25f + random()/10, movedir );
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1048576000
ADDF4
MULF4
ASGNF4
line 3217
;3216:
;3217:			if ( random() < 0.4 )
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1053609165
GEF4 $2066
line 3218
;3218:				CG_MetalSpark(origin, movedir, 0.1 + random()/4 );
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1082130432
DIVF4
CNSTF4 1036831949
ADDF4
ARGF4
ADDRGP4 CG_MetalSpark
CALLV
pop
ADDRGP4 $2067
JUMPV
LABELV $2066
line 3220
;3219:			else
;3220:				CG_MetalSpark(origin, movedir, -(0.2+random()/5) );
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1084227584
DIVF4
CNSTF4 1045220557
ADDF4
NEGF4
ARGF4
ADDRGP4 CG_MetalSpark
CALLV
pop
LABELV $2067
line 3221
;3221:		}
LABELV $2049
line 3192
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 10
LTI4 $2048
line 3222
;3222:		return;
ADDRGP4 $2005
JUMPV
LABELV $2044
line 3224
;3223:	}
;3224:	else if ( surface == BHOLE_SNOW || surface == BHOLE_DIRT || surface == BHOLE_SAND )
ADDRLP4 20
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $2071
ADDRLP4 20
INDIRI4
CNSTI4 8
EQI4 $2071
ADDRLP4 20
INDIRI4
CNSTI4 3
NEI4 $2068
LABELV $2071
line 3225
;3225:	{
line 3226
;3226:		max = 14 + random()*6;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1086324736
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1096810496
ADDF4
CVFI4 4
ASGNI4
line 3228
;3227:		
;3228:		VectorMA( origin, 0.5, dir, origin);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
CNSTI4 4
ASGNI4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40
CNSTI4 8
ASGNI4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3230
;3229:
;3230:		if ( BG_IsShotgun( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $2072
line 3231
;3231:			max /= 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 4
DIVI4
ASGNI4
LABELV $2072
line 3234
;3232:
;3233:		// launch 4x grenades.
;3234:		if ( BG_IsGrenade( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $2074
line 3235
;3235:			max *= 4;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
LABELV $2074
line 3237
;3236:
;3237:		for ( i = 0; i < max; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $2079
JUMPV
LABELV $2076
line 3240
;3238:			vec3_t	movedir;
;3239:			float	randomcolor[3];
;3240:			float	spread = 3;
ADDRLP4 80
CNSTF4 1077936128
ASGNF4
line 3242
;3241:			
;3242:			if ( surface == BHOLE_SNOW )
ADDRFP4 8
INDIRI4
CNSTI4 4
NEI4 $2080
line 3243
;3243:				randomcolor[0] = randomcolor[1] = randomcolor[2] = 0.5 + random()/3;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 88
INDIRF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 88
INDIRF4
ASGNF4
ADDRLP4 56
ADDRLP4 88
INDIRF4
ASGNF4
ADDRGP4 $2081
JUMPV
LABELV $2080
line 3244
;3244:			else if ( surface == BHOLE_DIRT )
ADDRFP4 8
INDIRI4
CNSTI4 8
NEI4 $2084
line 3245
;3245:			{
line 3246
;3246:				randomcolor[0] = 0.2 + random()/3.3; //we'll create our brown
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1079194419
DIVF4
CNSTF4 1045220557
ADDF4
ASGNF4
line 3247
;3247:				randomcolor[1] = 0.2 + random()/10;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1045220557
ADDF4
ASGNF4
line 3248
;3248:				randomcolor[2] = 0.1 + random()/5;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1084227584
DIVF4
CNSTF4 1036831949
ADDF4
ASGNF4
line 3249
;3249:			}
ADDRGP4 $2085
JUMPV
LABELV $2084
line 3251
;3250:			else // sand
;3251:			{
line 3253
;3252:				// sand color
;3253:				randomcolor[0] = 0.6 + random()/6;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1086324736
DIVF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 3254
;3254:				randomcolor[1] = 0.5 + random()/6;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1086324736
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 3255
;3255:				randomcolor[2] = random()/10;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
ASGNF4
line 3256
;3256:				spread = 1.5;
ADDRLP4 80
CNSTF4 1069547520
ASGNF4
line 3257
;3257:			}
LABELV $2085
LABELV $2081
line 3259
;3258:
;3259:			VectorCopy( dir, movedir );  
ADDRLP4 68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3261
;3260:
;3261:			if ( random() < 0.33 )
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2090
line 3262
;3262:				movedir[0] += random()/spread;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 80
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2091
JUMPV
LABELV $2090
line 3263
;3263:			else if ( random() < 0.66 )
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2092
line 3264
;3264:				movedir[0] -= random()/spread;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 68
INDIRF4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 80
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2092
LABELV $2091
line 3266
;3265:
;3266:			if ( random() < 0.33 )
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2094
line 3267
;3267:				movedir[1] += random()/spread;
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68+4
ADDRLP4 68+4
INDIRF4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 80
INDIRF4
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2095
JUMPV
LABELV $2094
line 3268
;3268:			else if ( random() < 0.66 )
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2097
line 3269
;3269:				movedir[1] -= random()/spread;
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68+4
ADDRLP4 68+4
INDIRF4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 80
INDIRF4
DIVF4
SUBF4
ASGNF4
LABELV $2097
LABELV $2095
line 3271
;3270:		
;3271:			if ( dir[2] > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $2100
line 3272
;3272:				movedir[2] += 2 + random();		
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68+8
ADDRLP4 68+8
INDIRF4
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
ADDRGP4 $2101
JUMPV
LABELV $2100
line 3273
;3273:			else if ( dir[2] < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $2103
line 3274
;3274:				movedir[2] -= 2 + random();	
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68+8
ADDRLP4 68+8
INDIRF4
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
SUBF4
ASGNF4
ADDRGP4 $2104
JUMPV
LABELV $2103
line 3276
;3275:			else
;3276:				movedir[2] += 1 + random();	
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68+8
ADDRLP4 68+8
INDIRF4
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ADDF4
ASGNF4
LABELV $2104
LABELV $2101
line 3278
;3277:
;3278:			if ( BG_IsGrenade ( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 136
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 0
EQI4 $2107
line 3279
;3279:				CG_SpawnParticle( origin, movedir, (surface == BHOLE_SAND)?(300+random()*200):(500 + random()*200), random()/2.5,(surface == BHOLE_SAND)?(random()/2+random()/3 ):( 0.1 + random() + random()/2), randomcolor[0],randomcolor[1],randomcolor[2], 1.0f, qfalse );
ADDRFP4 8
INDIRI4
CNSTI4 3
NEI4 $2113
ADDRLP4 148
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 140
CNSTF4 1128792064
ADDRLP4 148
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1133903872
ADDF4
ASGNF4
ADDRGP4 $2114
JUMPV
LABELV $2113
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 140
CNSTF4 1128792064
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1140457472
ADDF4
ASGNF4
LABELV $2114
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 8
INDIRI4
CNSTI4 3
NEI4 $2115
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 144
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2116
JUMPV
LABELV $2115
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 144
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1036831949
ADDF4
ADDRLP4 172
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
LABELV $2116
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
ADDRLP4 144
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56+4
INDIRF4
ARGF4
ADDRLP4 56+8
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
ADDRGP4 $2108
JUMPV
LABELV $2107
line 3281
;3280:			else
;3281:				CG_SpawnParticle( origin, movedir, (surface == BHOLE_SAND)?(30+random()*25):(50 + random()*20), random()/2.5,(surface == BHOLE_SAND)?(random()/2+random()/3 ):( 0.1 + random() + random()/2), randomcolor[0],randomcolor[1],randomcolor[2], 1.0f, qfalse );
ADDRFP4 8
INDIRI4
CNSTI4 3
NEI4 $2121
ADDRLP4 184
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 176
CNSTF4 1103626240
ADDRLP4 184
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
ADDRGP4 $2122
JUMPV
LABELV $2121
ADDRLP4 188
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 176
CNSTF4 1101004800
ADDRLP4 188
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
LABELV $2122
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 8
INDIRI4
CNSTI4 3
NEI4 $2123
ADDRLP4 196
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 180
ADDRLP4 196
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2124
JUMPV
LABELV $2123
ADDRLP4 204
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 208
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 180
ADDRLP4 204
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1036831949
ADDF4
ADDRLP4 208
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
LABELV $2124
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
ADDRLP4 180
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56+4
INDIRF4
ARGF4
ADDRLP4 56+8
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
LABELV $2108
line 3282
;3282:		} 
LABELV $2077
line 3237
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2079
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $2076
line 3283
;3283:		return;
ADDRGP4 $2005
JUMPV
LABELV $2068
line 3285
;3284:	}
;3285:	else if ( surface == BHOLE_WOOD || surface == BHOLE_GLASS || surface == BHOLE_SOFT)
ADDRLP4 24
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 6
EQI4 $2128
ADDRLP4 24
INDIRI4
CNSTI4 1
EQI4 $2128
ADDRLP4 24
INDIRI4
CNSTI4 5
NEI4 $2125
LABELV $2128
line 3286
;3286:	{
line 3287
;3287:		max = 1 + random()*2;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1065353216
ADDF4
CVFI4 4
ASGNI4
line 3289
;3288:
;3289:		if ( surface == BHOLE_SOFT )
ADDRFP4 8
INDIRI4
CNSTI4 5
NEI4 $2129
line 3290
;3290:			max = 3 + random()*2;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1077936128
ADDF4
CVFI4 4
ASGNI4
LABELV $2129
line 3292
;3291:
;3292:		if ( BG_IsShotgun( weapon ) || weapon == WP_PDW )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $2133
ADDRFP4 12
INDIRI4
CNSTI4 12
NEI4 $2131
LABELV $2133
line 3293
;3293:			max = 1;
ADDRLP4 4
CNSTI4 1
ASGNI4
LABELV $2131
line 3295
;3294:
;3295:		if ( surface == BHOLE_WOOD )
ADDRFP4 8
INDIRI4
CNSTI4 6
NEI4 $2134
line 3296
;3296:		{
line 3299
;3297:			vec3_t movedir;
;3298:
;3299:			VectorCopy( dir, movedir );  
ADDRLP4 40
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3301
;3300:
;3301:			VectorScale(movedir, 3, movedir);
ADDRLP4 52
CNSTF4 1077936128
ASGNF4
ADDRLP4 40
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 52
INDIRF4
ADDRLP4 40+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40+8
CNSTF4 1077936128
ADDRLP4 40+8
INDIRF4
MULF4
ASGNF4
line 3303
;3302:
;3303:			CG_SmokePuff( origin, movedir, 14, 0.4f, 0.2f, 0.0, 0.9f, 1000, cg.time-250,cg.time-250,LE_MOVE_SCALE_FADE,cgs.media.smokePuffShader );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
CNSTF4 1096810496
ARGF4
CNSTF4 1053609165
ARGF4
CNSTF4 1045220557
ARGF4
CNSTF4 0
ARGF4
CNSTF4 1063675494
ARGF4
CNSTF4 1148846080
ARGF4
ADDRLP4 56
CNSTI4 250
ASGNI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 56
INDIRI4
SUBI4
ARGI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 56
INDIRI4
SUBI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 3304
;3304:		}
LABELV $2134
line 3306
;3305:
;3306:		for ( i = 0; i < max; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $2147
JUMPV
LABELV $2144
line 3310
;3307:			localEntity_t *bp;
;3308:			vec3_t movedir;
;3309:
;3310:			if ( surface == BHOLE_WOOD )
ADDRFP4 8
INDIRI4
CNSTI4 6
NEI4 $2148
line 3311
;3311:			{				
line 3312
;3312:				bp = CG_MakeExplosion( origin, dir, cgs.media.woodSplinter, 0, cg_particleTime.integer + random()*1000, qfalse );
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+205084+760
INDIRI4
ARGI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 cg_particleTime+12
INDIRI4
CVIF4 4
CNSTF4 1148846080
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 64
INDIRP4
ASGNP4
line 3313
;3313:			}
ADDRGP4 $2149
JUMPV
LABELV $2148
line 3314
;3314:			else if ( surface == BHOLE_GLASS )
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $2153
line 3315
;3315:				bp = CG_MakeExplosion( origin, dir, cgs.media.glassSplinter, 0, cg_particleTime.integer + random()*1000, qfalse );
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+205084+764
INDIRI4
ARGI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 cg_particleTime+12
INDIRI4
CVIF4 4
CNSTF4 1148846080
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 64
INDIRP4
ASGNP4
ADDRGP4 $2154
JUMPV
LABELV $2153
line 3316
;3316:			else if ( surface == BHOLE_SOFT )
ADDRFP4 8
INDIRI4
CNSTI4 5
NEI4 $2005
line 3317
;3317:				bp = CG_MakeExplosion( origin, dir, cgs.media.softSplinter, 0, cg_particleTime.integer + random()*1000, qfalse );
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 cgs+205084+768
INDIRI4
ARGI4
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 cg_particleTime+12
INDIRI4
CVIF4 4
CNSTF4 1148846080
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 76
INDIRP4
ASGNP4
line 3319
;3318:			else
;3319:				return;
LABELV $2159
LABELV $2154
LABELV $2149
line 3321
;3320:
;3321:			VectorCopy( dir, movedir ); 
ADDRLP4 44
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3323
;3322:
;3323:			if ( random() < 0.33 )
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2163
line 3324
;3324:				movedir[0] += random();
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2164
JUMPV
LABELV $2163
line 3325
;3325:			else if ( random() < 0.66 )
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2165
line 3326
;3326:				movedir[0] -= random();
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2165
LABELV $2164
line 3328
;3327:
;3328:			if ( random() < 0.33 )
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2167
line 3329
;3329:				movedir[1] += random();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
ADDRLP4 44+4
INDIRF4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2168
JUMPV
LABELV $2167
line 3330
;3330:			else if ( random() < 0.66 )
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2170
line 3331
;3331:				movedir[1] -= random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
ADDRLP4 44+4
INDIRF4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2170
LABELV $2168
line 3333
;3332:
;3333:			if ( dir[2] > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $2173
line 3334
;3334:				movedir[2] += 2 + random();		
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
ADDRLP4 44+8
INDIRF4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
ADDRGP4 $2174
JUMPV
LABELV $2173
line 3335
;3335:			else if ( dir[2] < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $2176
line 3336
;3336:				movedir[2] -= 2 + random();	
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
ADDRLP4 44+8
INDIRF4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
SUBF4
ASGNF4
ADDRGP4 $2177
JUMPV
LABELV $2176
line 3338
;3337:			else
;3338:				movedir[2] += 1 + random();	
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
ADDRLP4 44+8
INDIRF4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ADDF4
ASGNF4
LABELV $2177
LABELV $2174
line 3340
;3339:
;3340:			VectorMA( origin, 0.5, dir, bp->pos.trBase );
ADDRLP4 40
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124
CNSTI4 4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 48
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 128
CNSTI4 8
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRFP4 4
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3342
;3341:
;3342:			VectorScale( movedir, 50, bp->pos.trDelta );
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1112014848
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1112014848
ADDRLP4 44+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1112014848
ADDRLP4 44+8
INDIRF4
MULF4
ASGNF4
line 3344
;3343:
;3344:			bp->leType = LE_FRAGMENT; 
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 3345
;3345:			bp->pos.trType = TR_GRAVITY;  
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 3346
;3346:			bp->pos.trTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3347
;3347:			bp->leFlags = LEF_TUMBLE;
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 3348
;3348:			bp->angles.trType = TR_LINEAR;
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 3349
;3349:			bp->angles.trTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 3350
;3350:			bp->angles.trBase[0] = rand()&360;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 360
BANDI4
CVIF4 4
ASGNF4
line 3351
;3351:			bp->angles.trBase[1] = rand()&360;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 136
INDIRI4
CNSTI4 360
BANDI4
CVIF4 4
ASGNF4
line 3352
;3352:			bp->angles.trBase[2] = rand()&360;
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 140
INDIRI4
CNSTI4 360
BANDI4
CVIF4 4
ASGNF4
line 3354
;3353:
;3354:			bp->angles.trDelta[0] = rand() % 150;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 144
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 3355
;3355:			bp->angles.trDelta[1] = rand() % 150;
ADDRLP4 148
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 148
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 3356
;3356:			bp->angles.trDelta[2] = rand() % 150;
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 152
INDIRI4
CNSTI4 150
MODI4
CVIF4 4
ASGNF4
line 3358
;3357:
;3358:			{
line 3359
;3359:				float size = 0.3 + random() / 2 + random() / 2;
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 156
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
CNSTF4 1050253722
ADDF4
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 3361
;3360:
;3361:				if ( BG_IsPistol( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 BG_IsPistol
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $2184
line 3362
;3362:					size /= 3;
ADDRLP4 156
ADDRLP4 156
INDIRF4
CNSTF4 1077936128
DIVF4
ASGNF4
ADDRGP4 $2185
JUMPV
LABELV $2184
line 3363
;3363:				else if ( BG_IsRifle( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
EQI4 $2186
line 3364
;3364:					size /= 2;
ADDRLP4 156
ADDRLP4 156
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
LABELV $2186
LABELV $2185
line 3366
;3365:
;3366:				bp->refEntity.axis[0][0] *= size;
ADDRLP4 176
ADDRLP4 40
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3367
;3367:				bp->refEntity.axis[1][0] *= size;
ADDRLP4 180
ADDRLP4 40
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3368
;3368:				bp->refEntity.axis[2][0] *= size;
ADDRLP4 184
ADDRLP4 40
INDIRP4
CNSTI4 204
ADDP4
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3369
;3369:				bp->refEntity.axis[0][1] *= size;
ADDRLP4 188
ADDRLP4 40
INDIRP4
CNSTI4 184
ADDP4
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3370
;3370:				bp->refEntity.axis[1][1] *= size;
ADDRLP4 192
ADDRLP4 40
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3371
;3371:				bp->refEntity.axis[2][1] *= size;
ADDRLP4 196
ADDRLP4 40
INDIRP4
CNSTI4 208
ADDP4
ASGNP4
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3372
;3372:				bp->refEntity.axis[0][2] *= size;
ADDRLP4 200
ADDRLP4 40
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3373
;3373:				bp->refEntity.axis[1][2] *= size;
ADDRLP4 204
ADDRLP4 40
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3374
;3374:				bp->refEntity.axis[2][2] *= size;
ADDRLP4 208
ADDRLP4 40
INDIRP4
CNSTI4 212
ADDP4
ASGNP4
ADDRLP4 208
INDIRP4
ADDRLP4 208
INDIRP4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 3375
;3375:			}
line 3377
;3376:
;3377:			bp->leMarkType = LEMT_NONE; 
ADDRLP4 40
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 3379
;3378:
;3379:		}
LABELV $2145
line 3306
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2147
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $2144
line 3381
;3380:		
;3381:		max = 4 + random()*2; 
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1082130432
ADDF4
CVFI4 4
ASGNI4
line 3383
;3382:
;3383:		if ( BG_IsShotgun( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $2188
line 3384
;3384:			max /= 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
LABELV $2188
line 3386
;3385:
;3386:		for ( i = 0; i < max; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $2193
JUMPV
LABELV $2190
line 3390
;3387:			vec3_t movedir;
;3388:			float randombrown[3];
;3389:
;3390:			if ( surface == BHOLE_GLASS ) {
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $2194
line 3391
;3391:				randombrown[0] = randombrown[1] = randombrown[2] = 0.1 + random()/3;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1036831949
ADDF4
ASGNF4
ADDRLP4 48+8
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 48+4
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 48
ADDRLP4 76
INDIRF4
ASGNF4
line 3392
;3392:			}
ADDRGP4 $2195
JUMPV
LABELV $2194
line 3393
;3393:			else if ( surface == BHOLE_SOFT ) {
ADDRFP4 8
INDIRI4
CNSTI4 5
NEI4 $2198
line 3394
;3394:				randombrown[0] = 0.45 + random()/4; //we'll create our brown
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1082130432
DIVF4
CNSTF4 1055286886
ADDF4
ASGNF4
line 3395
;3395:				randombrown[1] = 0.5 + random()/4;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48+4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1082130432
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 3396
;3396:				randombrown[2] = 0.4 + random()/4;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48+8
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1082130432
DIVF4
CNSTF4 1053609165
ADDF4
ASGNF4
line 3397
;3397:			}
ADDRGP4 $2199
JUMPV
LABELV $2198
line 3398
;3398:			else {
line 3399
;3399:				randombrown[0] = 0.3 + random()/3.3; //we'll create our brown
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1079194419
DIVF4
CNSTF4 1050253722
ADDF4
ASGNF4
line 3400
;3400:				randombrown[1] = 0.2 + random()/10;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 48+4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1045220557
ADDF4
ASGNF4
line 3401
;3401:				randombrown[2] = 0;
ADDRLP4 48+8
CNSTF4 0
ASGNF4
line 3402
;3402:			}
LABELV $2199
LABELV $2195
line 3404
;3403:
;3404:			VectorCopy( dir, movedir ); 
ADDRLP4 60
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3406
;3405:
;3406:			if ( random() < 0.33 )
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2204
line 3407
;3407:				movedir[0] += random();
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 60
INDIRF4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2205
JUMPV
LABELV $2204
line 3408
;3408:			else if ( random() < 0.66 )
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2206
line 3409
;3409:				movedir[0] -= random();
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 60
INDIRF4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2206
LABELV $2205
line 3411
;3410:
;3411:			if ( random() < 0.33 )
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2208
line 3412
;3412:				movedir[1] += random();
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60+4
ADDRLP4 60+4
INDIRF4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2209
JUMPV
LABELV $2208
line 3413
;3413:			else if ( random() < 0.66 )
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2211
line 3414
;3414:				movedir[1] -= random();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60+4
ADDRLP4 60+4
INDIRF4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2211
LABELV $2209
line 3416
;3415:
;3416:			if ( dir[2] > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $2214
line 3417
;3417:				movedir[2] += 2 + random();		
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
ADDRGP4 $2215
JUMPV
LABELV $2214
line 3418
;3418:			else if ( dir[2] < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $2217
line 3419
;3419:				movedir[2] -= 2 + random();	
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
SUBF4
ASGNF4
ADDRGP4 $2218
JUMPV
LABELV $2217
line 3421
;3420:			else
;3421:				movedir[2] += 1 + random();	 
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60+8
ADDRLP4 60+8
INDIRF4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ADDF4
ASGNF4
LABELV $2218
LABELV $2215
line 3423
;3422:
;3423:			if ( surface == BHOLE_SOFT )
ADDRFP4 8
INDIRI4
CNSTI4 5
NEI4 $2221
line 3424
;3424:				CG_SpawnParticle( origin, movedir, 40 + random()*10, random()/2.5, 0.7 - random()/3, randombrown[0],randombrown[1],randombrown[2], 1.0f,qfalse );
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 60
ARGP4
CNSTF4 1092616192
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1109393408
ADDF4
ARGF4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
CNSTF4 1060320051
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
SUBF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48+4
INDIRF4
ARGF4
ADDRLP4 48+8
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
ADDRGP4 $2222
JUMPV
LABELV $2221
line 3426
;3425:			else
;3426:				CG_SpawnParticle( origin, movedir, 20 + random()*10, random()/2.5, 0.7 - random()/3, randombrown[0],randombrown[1],randombrown[2], 1.0f,qfalse );		
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 60
ARGP4
CNSTF4 1092616192
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1101004800
ADDF4
ARGF4
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
CNSTF4 1060320051
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
SUBF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48+4
INDIRF4
ARGF4
ADDRLP4 48+8
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
LABELV $2222
line 3427
;3427:		} 	 
LABELV $2191
line 3386
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2193
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $2190
line 3428
;3428:	} 
ADDRGP4 $2126
JUMPV
LABELV $2125
line 3430
;3429:	else
;3430:	{
line 3431
;3431:		max = 5 + random()*5; 
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1084227584
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1084227584
ADDF4
CVFI4 4
ASGNI4
line 3433
;3432:
;3433:		if ( BG_IsShotgun( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $2227
line 3434
;3434:			max /= 3;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 3
DIVI4
ASGNI4
LABELV $2227
line 3436
;3435:
;3436:		if ( BG_IsGrenade( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $2229
line 3437
;3437:			max = 50;
ADDRLP4 4
CNSTI4 50
ASGNI4
LABELV $2229
line 3439
;3438:
;3439:		for ( i = 0; i < max; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $2234
JUMPV
LABELV $2231
line 3441
;3440:			vec3_t movedir;
;3441:			float randomdarkgrey = random()/3; 
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
ASGNF4
line 3443
;3442:
;3443:			VectorCopy( dir, movedir ); 
ADDRLP4 40
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 3445
;3444:
;3445:			if ( random() < 0.33 )
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2235
line 3446
;3446:				movedir[0] += random();
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRF4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2236
JUMPV
LABELV $2235
line 3447
;3447:			else if ( random() < 0.66 )
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2237
line 3448
;3448:				movedir[0] -= random();
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRF4
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2237
LABELV $2236
line 3450
;3449:
;3450:			if ( random() < 0.33 )
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1051260355
GEF4 $2239
line 3451
;3451:				movedir[1] += random();
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
ADDRGP4 $2240
JUMPV
LABELV $2239
line 3452
;3452:			else if ( random() < 0.66 )
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1059648963
GEF4 $2242
line 3453
;3453:				movedir[1] -= random();
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
LABELV $2242
LABELV $2240
line 3455
;3454:
;3455:			if ( dir[2] > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $2245
line 3456
;3456:				movedir[2] += 2 + random();		
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ADDF4
ASGNF4
ADDRGP4 $2246
JUMPV
LABELV $2245
line 3457
;3457:			else if ( dir[2] < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
GEF4 $2248
line 3458
;3458:				movedir[2] -= 2 + random();	
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
SUBF4
ASGNF4
ADDRGP4 $2249
JUMPV
LABELV $2248
line 3460
;3459:			else
;3460:				movedir[2] += 1 + random();	 
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ADDF4
ASGNF4
LABELV $2249
LABELV $2246
line 3462
;3461:
;3462:			if ( BG_IsGrenade( weapon ) ) 
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $2252
line 3463
;3463:				CG_SpawnParticle( origin, movedir, 100 + random()*25, random()/2.5, 2.0f - random(), randomdarkgrey,randomdarkgrey,randomdarkgrey, 1.0f,qtrue );
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
CNSTF4 1103626240
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1120403456
ADDF4
ARGF4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
CNSTF4 1073741824
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
ADDRGP4 $2253
JUMPV
LABELV $2252
line 3465
;3464:			else
;3465:				CG_SpawnParticle( origin, movedir, 20 + random()*10, random()/2.5, 0.7 - random()/3, randomdarkgrey,randomdarkgrey,randomdarkgrey, 1.0f,qfalse );
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
ARGP4
CNSTF4 1092616192
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1101004800
ADDF4
ARGF4
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
DIVF4
ARGF4
CNSTF4 1060320051
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
SUBF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_SpawnParticle
CALLP4
pop
LABELV $2253
line 3466
;3466:		} 	
LABELV $2232
line 3439
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2234
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $2231
line 3467
;3467:	}
LABELV $2126
line 3468
;3468:}
LABELV $2005
endproc CG_SurfaceEffect 212 48
export CG_MissileHitWall
proc CG_MissileHitWall 204 48
line 3482
;3469:
;3470:int NS_BulletHoleTypeForSurface( int surface );
;3471:void CG_DirectImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir,
;3472:						 float orientation, float red, float green, float blue, float alpha,
;3473:						 qboolean alphaFade, float radius, qboolean temporary, int entityNum );
;3474:
;3475:/*
;3476:=================
;3477:CG_MissileHitWall
;3478:
;3479:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;3480:=================
;3481:*/
;3482:void CG_MissileHitWall( int weapon, int clientNum, vec3_t origin, vec3_t dir, int soundtype, int surfaceparms) {
line 3495
;3483:	qhandle_t		mod;
;3484:	qhandle_t		mark;
;3485:	qhandle_t		shader;
;3486:	sfxHandle_t		sfx;
;3487:	float			radius;
;3488:	float			mradius;
;3489:	float			light;
;3490:	vec3_t			lightColor;
;3491:	localEntity_t	*le;
;3492:	int				r; 
;3493:	qboolean		isSprite;
;3494:	int				duration;
;3495:	qboolean		water = ( CG_PointContents( origin, -1 ) & CONTENTS_WATER );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 64
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 64
INDIRI4
CNSTI4 32
BANDI4
ASGNI4
line 3496
;3496:	qboolean		metal = ( surfaceparms == BHOLE_METAL );
ADDRFP4 20
INDIRI4
CNSTI4 2
NEI4 $2256
ADDRLP4 68
CNSTI4 1
ASGNI4
ADDRGP4 $2257
JUMPV
LABELV $2256
ADDRLP4 68
CNSTI4 0
ASGNI4
LABELV $2257
ADDRLP4 32
ADDRLP4 68
INDIRI4
ASGNI4
line 3498
;3497:	 
;3498:	mark = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 3499
;3499:	mradius = 0;
ADDRLP4 52
CNSTF4 0
ASGNF4
line 3500
;3500:	radius = 32;
ADDRLP4 4
CNSTF4 1107296256
ASGNF4
line 3501
;3501:	sfx = 0;
ADDRLP4 40
CNSTI4 0
ASGNI4
line 3502
;3502:	mod = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 3503
;3503:	shader = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 3504
;3504:	light = 0;
ADDRLP4 44
CNSTF4 0
ASGNF4
line 3505
;3505:	lightColor[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 3506
;3506:	lightColor[1] = 1;
ADDRLP4 8+4
CNSTF4 1065353216
ASGNF4
line 3507
;3507:	lightColor[2] = 0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 3510
;3508:
;3509:	// set defaults
;3510:	isSprite = qfalse;
ADDRLP4 48
CNSTI4 0
ASGNI4
line 3511
;3511:	duration = 120;
ADDRLP4 36
CNSTI4 120
ASGNI4
line 3513
;3512:
;3513:	memset( &le, 0, sizeof(le) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 3515
;3514: 
;3515:	switch ( weapon  ) 
ADDRLP4 72
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 4
LTI4 $2254
ADDRLP4 72
INDIRI4
CNSTI4 48
GTI4 $2254
ADDRLP4 72
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2381-16
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2381
address $2282
address $2262
address $2334
address $2334
address $2334
address $2334
address $2317
address $2317
address $2334
address $2334
address $2334
address $2349
address $2349
address $2302
address $2302
address $2366
address $2366
address $2366
address $2349
address $2349
address $2302
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2254
address $2282
address $2254
address $2254
address $2282
code
line 3516
;3516:	{ 
LABELV $2262
line 3518
;3517:	case WP_FLASHBANG:
;3518:		mod = cgs.media.sphereFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+672
INDIRI4
ASGNI4
line 3519
;3519:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+216
INDIRI4
ASGNI4
line 3521
;3520:
;3521:		if ( water )
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $2267
line 3522
;3522:			shader = cgs.media.waterExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+224
INDIRI4
ASGNI4
LABELV $2267
line 3524
;3523:		
;3524:		sfx = cgs.media.flashbang_explode;
ADDRLP4 40
ADDRGP4 cgs+205084+1288
INDIRI4
ASGNI4
line 3525
;3525: 		radius = 128;
ADDRLP4 4
CNSTF4 1124073472
ASGNF4
line 3526
;3526:		light = 600;
ADDRLP4 44
CNSTF4 1142292480
ASGNF4
line 3527
;3527:		duration = 500;
ADDRLP4 36
CNSTI4 500
ASGNI4
line 3528
;3528:		mradius = 64; 
ADDRLP4 52
CNSTF4 1115684864
ASGNF4
line 3531
;3529:		
;3530:		// raise a bit if onground
;3531:		origin[2] += 1; 
ADDRLP4 76
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 3532
;3532:		{
line 3536
;3533:			int i;
;3534:			vec3_t	org;
;3535:
;3536:			VectorCopy(origin, org );
ADDRLP4 84
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3538
;3537: 
;3538:				for(i = 0; i < 64; i++)
ADDRLP4 80
CNSTI4 0
ASGNI4
LABELV $2273
line 3539
;3539:				{
line 3542
;3540:					vec3_t dir;
;3541:					
;3542:					dir[0] = crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3543
;3543:					dir[1] = crandom();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+4
CNSTF4 1073741824
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3544
;3544:					dir[2] = crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+8
CNSTF4 1073741824
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3547
;3545:
;3546:
;3547:					org[2] += i / 64;
ADDRLP4 84+8
ADDRLP4 84+8
INDIRF4
ADDRLP4 80
INDIRI4
CNSTI4 64
DIVI4
CVIF4 4
ADDF4
ASGNF4
line 3549
;3548:					  
;3549:					CG_RocketShrapnel(org, dir);
ADDRLP4 84
ARGP4
ADDRLP4 96
ARGP4
ADDRGP4 CG_RocketShrapnel
CALLV
pop
line 3550
;3550:				}
LABELV $2274
line 3538
ADDRLP4 80
ADDRLP4 80
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 64
LTI4 $2273
line 3551
;3551:		} 
line 3552
;3552:		lightColor[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 3553
;3553:		lightColor[1] = 1;
ADDRLP4 8+4
CNSTF4 1065353216
ASGNF4
line 3554
;3554:		lightColor[2] = 1;
ADDRLP4 8+8
CNSTF4 1065353216
ASGNF4
line 3556
;3555:		
;3556:		break;
ADDRGP4 $2261
JUMPV
LABELV $2282
line 3560
;3557:	case WP_M4*3:
;3558:	case WP_AK47*3:
;3559:	case WP_GRENADE:
;3560:		mod = cgs.media.sphereFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+672
INDIRI4
ASGNI4
line 3561
;3561:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+216
INDIRI4
ASGNI4
line 3562
;3562:		sfx = cgs.media.mk26_explode;
ADDRLP4 40
ADDRGP4 cgs+205084+1280
INDIRI4
ASGNI4
line 3563
;3563: 		radius = 128;
ADDRLP4 4
CNSTF4 1124073472
ASGNF4
line 3564
;3564:		light = 300;
ADDRLP4 44
CNSTF4 1133903872
ASGNF4
line 3565
;3565:		duration = 1000;
ADDRLP4 36
CNSTI4 1000
ASGNI4
line 3566
;3566:		mradius = 64;
ADDRLP4 52
CNSTF4 1115684864
ASGNF4
line 3568
;3567:			
;3568:		if ( water )
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $2289
line 3569
;3569:			shader = cgs.media.waterExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+224
INDIRI4
ASGNI4
LABELV $2289
line 3572
;3570:
;3571:		// raise a bit 
;3572:		origin[2] += 1;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 3573
;3573:		{
line 3577
;3574:			int i;
;3575:			vec3_t	org;
;3576:
;3577:			VectorCopy(origin, org );
ADDRLP4 88
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3579
;3578: 
;3579:			for(i = 0; i < 64; i++)
ADDRLP4 84
CNSTI4 0
ASGNI4
LABELV $2293
line 3580
;3580:			{
line 3583
;3581:				vec3_t dir;
;3582:				
;3583:				dir[0] = crandom();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 100
CNSTF4 1073741824
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3584
;3584:				dir[1] = crandom();
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 100+4
CNSTF4 1073741824
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3585
;3585:				dir[2] = crandom(); 
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 100+8
CNSTF4 1073741824
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 3587
;3586:
;3587:				org[2] += i / 64;
ADDRLP4 88+8
ADDRLP4 88+8
INDIRF4
ADDRLP4 84
INDIRI4
CNSTI4 64
DIVI4
CVIF4 4
ADDF4
ASGNF4
line 3589
;3588:				  
;3589:				CG_GrenadeShrapnel(org, dir);
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRGP4 CG_GrenadeShrapnel
CALLV
pop
line 3590
;3590:			}
LABELV $2294
line 3579
ADDRLP4 84
ADDRLP4 84
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 64
LTI4 $2293
line 3591
;3591:		} 
line 3592
;3592:		lightColor[0] = 1;
ADDRLP4 8
CNSTF4 1065353216
ASGNF4
line 3593
;3593:		lightColor[1] = 0.75;
ADDRLP4 8+4
CNSTF4 1061158912
ASGNF4
line 3594
;3594:		lightColor[2] = 0.0; 
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 3595
;3595:		break; 
ADDRGP4 $2261
JUMPV
LABELV $2302
line 3601
;3596:	case WP_MACMILLAN:
;3597:#ifdef SL8SD
;3598:	case WP_SL8SD:
;3599:#endif
;3600:	case WP_PSG1:
;3601:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+204
INDIRI4
ASGNI4
line 3602
;3602:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+208
INDIRI4
ASGNI4
line 3604
;3603:
;3604:		r = rand() & 3;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 84
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3606
;3605:
;3606:		if ( r < 2 ) {
ADDRLP4 60
INDIRI4
CNSTI4 2
GEI4 $2307
line 3607
;3607:			sfx = cgs.media.sfx_ric1;
ADDRLP4 40
ADDRGP4 cgs+205084+1420
INDIRI4
ASGNI4
line 3608
;3608:		} else if ( r == 2 ) {
ADDRGP4 $2308
JUMPV
LABELV $2307
ADDRLP4 60
INDIRI4
CNSTI4 2
NEI4 $2311
line 3609
;3609:			sfx = cgs.media.sfx_ric2;
ADDRLP4 40
ADDRGP4 cgs+205084+1424
INDIRI4
ASGNI4
line 3610
;3610:		} else {
ADDRGP4 $2312
JUMPV
LABELV $2311
line 3611
;3611:			sfx = cgs.media.sfx_ric3;
ADDRLP4 40
ADDRGP4 cgs+205084+1428
INDIRI4
ASGNI4
line 3612
;3612:		}
LABELV $2312
LABELV $2308
line 3614
;3613:
;3614:		radius = 3;
ADDRLP4 4
CNSTF4 1077936128
ASGNF4
line 3615
;3615:		break;
ADDRGP4 $2261
JUMPV
LABELV $2317
line 3619
;3616:
;3617:	case WP_SW629:
;3618:	case WP_DEAGLE:
;3619:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+204
INDIRI4
ASGNI4
line 3620
;3620:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+208
INDIRI4
ASGNI4
line 3622
;3621:
;3622:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3623
;3623:		if ( r < 2 ) {
ADDRLP4 60
INDIRI4
CNSTI4 2
GEI4 $2322
line 3624
;3624:			sfx = cgs.media.sfx_ric1;
ADDRLP4 40
ADDRGP4 cgs+205084+1420
INDIRI4
ASGNI4
line 3625
;3625:		} else if ( r == 2 ) {
ADDRGP4 $2323
JUMPV
LABELV $2322
ADDRLP4 60
INDIRI4
CNSTI4 2
NEI4 $2326
line 3626
;3626:			sfx = cgs.media.sfx_ric2;
ADDRLP4 40
ADDRGP4 cgs+205084+1424
INDIRI4
ASGNI4
line 3627
;3627:		} else {
ADDRGP4 $2327
JUMPV
LABELV $2326
line 3628
;3628:			sfx = cgs.media.sfx_ric3;
ADDRLP4 40
ADDRGP4 cgs+205084+1428
INDIRI4
ASGNI4
line 3629
;3629:		}
LABELV $2327
LABELV $2323
line 3631
;3630:
;3631:		if (weapon == WP_DEAGLE)
ADDRFP4 0
INDIRI4
CNSTI4 10
NEI4 $2332
line 3632
;3632:			radius = 3.3f;
ADDRLP4 4
CNSTF4 1079194419
ASGNF4
ADDRGP4 $2261
JUMPV
LABELV $2332
line 3634
;3633:		else
;3634:			radius = 3;
ADDRLP4 4
CNSTF4 1077936128
ASGNF4
line 3635
;3635:		break;
ADDRGP4 $2261
JUMPV
LABELV $2334
line 3644
;3636:	
;3637:	case WP_MAC10:
;3638:	case WP_GLOCK: 
;3639:	case WP_MK23:
;3640:	case WP_SW40T:
;3641:	case WP_PDW:
;3642:	case WP_P9S:
;3643:	case WP_MP5:
;3644:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+204
INDIRI4
ASGNI4
line 3645
;3645:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+208
INDIRI4
ASGNI4
line 3647
;3646:
;3647:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3648
;3648:		if ( r < 2 ) {
ADDRLP4 60
INDIRI4
CNSTI4 2
GEI4 $2339
line 3649
;3649:			sfx = cgs.media.sfx_ric1;
ADDRLP4 40
ADDRGP4 cgs+205084+1420
INDIRI4
ASGNI4
line 3650
;3650:		} else if ( r == 2 ) {
ADDRGP4 $2340
JUMPV
LABELV $2339
ADDRLP4 60
INDIRI4
CNSTI4 2
NEI4 $2343
line 3651
;3651:			sfx = cgs.media.sfx_ric2;
ADDRLP4 40
ADDRGP4 cgs+205084+1424
INDIRI4
ASGNI4
line 3652
;3652:		} else {
ADDRGP4 $2344
JUMPV
LABELV $2343
line 3653
;3653:			sfx = cgs.media.sfx_ric3;
ADDRLP4 40
ADDRGP4 cgs+205084+1428
INDIRI4
ASGNI4
line 3654
;3654:		}
LABELV $2344
LABELV $2340
line 3656
;3655:
;3656:		radius = 1.5;
ADDRLP4 4
CNSTF4 1069547520
ASGNF4
line 3658
;3657:
;3658:		break; 
ADDRGP4 $2261
JUMPV
LABELV $2349
line 3663
;3659:	case WP_M249:
;3660:	case WP_M14:
;3661:	case WP_M4:		
;3662:	case WP_AK47:
;3663:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+204
INDIRI4
ASGNI4
line 3664
;3664:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+208
INDIRI4
ASGNI4
line 3667
;3665:
;3666:
;3667:		r = rand() & 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 96
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3668
;3668:		if ( r < 2 ) {
ADDRLP4 60
INDIRI4
CNSTI4 2
GEI4 $2354
line 3669
;3669:			sfx = cgs.media.sfx_ric1;
ADDRLP4 40
ADDRGP4 cgs+205084+1420
INDIRI4
ASGNI4
line 3670
;3670:		} else if ( r == 2 ) {
ADDRGP4 $2355
JUMPV
LABELV $2354
ADDRLP4 60
INDIRI4
CNSTI4 2
NEI4 $2358
line 3671
;3671:			sfx = cgs.media.sfx_ric2;
ADDRLP4 40
ADDRGP4 cgs+205084+1424
INDIRI4
ASGNI4
line 3672
;3672:		} else {
ADDRGP4 $2359
JUMPV
LABELV $2358
line 3673
;3673:			sfx = cgs.media.sfx_ric3;
ADDRLP4 40
ADDRGP4 cgs+205084+1428
INDIRI4
ASGNI4
line 3674
;3674:		}
LABELV $2359
LABELV $2355
line 3676
;3675:
;3676:		if ( weapon == WP_M14 )
ADDRFP4 0
INDIRI4
CNSTI4 22
NEI4 $2364
line 3677
;3677:			radius = 2.85f;
ADDRLP4 4
CNSTF4 1077306982
ASGNF4
ADDRGP4 $2261
JUMPV
LABELV $2364
line 3679
;3678:		else
;3679:			radius = 2.5;
ADDRLP4 4
CNSTF4 1075838976
ASGNF4
line 3680
;3680:		break;  
ADDRGP4 $2261
JUMPV
LABELV $2366
line 3684
;3681:	case WP_SPAS15:
;3682:	case WP_M590:
;3683:	case WP_870: // default shotgun
;3684:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+205084+204
INDIRI4
ASGNI4
line 3685
;3685:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 28
ADDRGP4 cgs+205084+208
INDIRI4
ASGNI4
line 3687
;3686:
;3687:		r = rand() & 3;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 100
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 3688
;3688:		if ( r < 2 ) {
ADDRLP4 60
INDIRI4
CNSTI4 2
GEI4 $2371
line 3689
;3689:			sfx = cgs.media.sfx_ric1;
ADDRLP4 40
ADDRGP4 cgs+205084+1420
INDIRI4
ASGNI4
line 3690
;3690:		} else if ( r == 2 ) {
ADDRGP4 $2372
JUMPV
LABELV $2371
ADDRLP4 60
INDIRI4
CNSTI4 2
NEI4 $2375
line 3691
;3691:			sfx = cgs.media.sfx_ric2;
ADDRLP4 40
ADDRGP4 cgs+205084+1424
INDIRI4
ASGNI4
line 3692
;3692:		} else {
ADDRGP4 $2376
JUMPV
LABELV $2375
line 3693
;3693:			sfx = cgs.media.sfx_ric3;
ADDRLP4 40
ADDRGP4 cgs+205084+1428
INDIRI4
ASGNI4
line 3694
;3694:		}
LABELV $2376
LABELV $2372
line 3696
;3695:
;3696:		radius = 2+random()*2.5;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1075838976
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1073741824
ADDF4
ASGNF4
line 3697
;3697:		break;
line 3699
;3698:	default:
;3699:		return;
line 3700
;3700:		break;
LABELV $2261
line 3704
;3701:
;3702:	}
;3703:
;3704:	if ( soundtype == 1 ) // kevlar
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $2383
line 3705
;3705:	{
line 3706
;3706:		int rndnum = (int)(random()*2);
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
CNSTF4 1073741824
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3708
;3707:
;3708:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.bulletHitKevlar[rndnum] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $2384
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+988
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3709
;3709:	}
ADDRGP4 $2384
JUMPV
LABELV $2383
line 3710
;3710:	else if ( soundtype == 2 )
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $2391
line 3711
;3711:	{
line 3712
;3712:		int rndnum = (int)(random()*3);
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
CNSTF4 1077936128
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3714
;3713:
;3714:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.bulletHitHelmet[rndnum] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $2392
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 76
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+1000
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3715
;3715:	}
ADDRGP4 $2392
JUMPV
LABELV $2391
line 3716
;3716:	else if ( metal ) 
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $2399
line 3717
;3717:	{
line 3719
;3718: 		char sound[64];
;3719:		int	rndnum = (int)(random()*2); 
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3721
;3720:		
;3721:		rndnum++;		 
ADDRLP4 76
ADDRLP4 76
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3723
;3722:
;3723:		Com_sprintf(sound,sizeof(sound),"sound/misc/metal_ric%i.wav", rndnum);
ADDRLP4 80
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $2401
ARGP4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 Com_sprintf
CALLV
pop
line 3725
;3724:
;3725:		if ((cg.DeafTime < cg.time)) trap_S_StartSound ( origin , ENTITYNUM_WORLD, CHAN_AUTO, trap_S_RegisterSound( sound, qfalse )  );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $2400
ADDRLP4 80
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 148
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3726
;3726:	}
ADDRGP4 $2400
JUMPV
LABELV $2399
line 3727
;3727:	else if ( sfx ) {
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $2406
line 3728
;3728:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $2408
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $2408
line 3729
;3729:	}
LABELV $2406
LABELV $2400
LABELV $2392
LABELV $2384
line 3734
;3730:
;3731:	//
;3732:	// create the explosion
;3733:	//
;3734:	if ( mod ) 
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $2412
line 3735
;3735:	{
line 3738
;3736:
;3737:		// the flash
;3738:		if( weapon == WP_FLASHBANG )
ADDRFP4 0
INDIRI4
CNSTI4 5
NEI4 $2414
line 3739
;3739:		{
line 3740
;3740:			le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );		
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 76
INDIRP4
ASGNP4
line 3741
;3741:			le->light = light;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
line 3742
;3742:			le->lightColor[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 0
ASGNF4
line 3743
;3743:			le->lightColor[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1056964608
ASGNF4
line 3744
;3744:			le->lightColor[2] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTF4 1065353216
ASGNF4
line 3745
;3745:			le->refEntity.renderfx |= RF_EXPANDING;			
ADDRLP4 80
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
line 3746
;3746:			le->radius = 64;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1115684864
ASGNF4
line 3747
;3747:		} 
ADDRGP4 $2415
JUMPV
LABELV $2414
line 3748
;3748:		else if( weapon == WP_GRENADE || weapon == WP_AK47*3 || weapon == WP_M4*3 )
ADDRLP4 76
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 4
EQI4 $2419
ADDRLP4 76
INDIRI4
CNSTI4 45
EQI4 $2419
ADDRLP4 76
INDIRI4
CNSTI4 48
NEI4 $2416
LABELV $2419
line 3749
;3749:		{
line 3750
;3750:			le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );		
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
ASGNP4
line 3751
;3751:			le->light = 0;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
CNSTF4 0
ASGNF4
line 3752
;3752:			le->lightColor[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 0
ASGNF4
line 3753
;3753:			le->lightColor[1] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 3754
;3754:			le->lightColor[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTF4 0
ASGNF4
line 3755
;3755:			le->refEntity.renderfx |= RF_EXPANDING;			
ADDRLP4 84
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
line 3756
;3756:			le->radius = 32;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTF4 1107296256
ASGNF4
line 3757
;3757:			le->angles.trBase[YAW] = random()*360;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
CNSTF4 1135869952
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ASGNF4
line 3758
;3758:			le->startTime = cg.time - 250;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 250
SUBI4
ASGNI4
line 3759
;3759:		} 
LABELV $2416
LABELV $2415
line 3761
;3760:
;3761:		if ( !metal && ( surfaceparms != BHOLE_SNOW || surfaceparms != BHOLE_GLASS ) ) 
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $2421
ADDRLP4 80
ADDRFP4 20
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 4
NEI4 $2423
ADDRLP4 80
INDIRI4
CNSTI4 1
EQI4 $2421
LABELV $2423
line 3762
;3762:		{
line 3764
;3763:
;3764:			le = CG_MakeExplosion( origin, dir, mod, shader, duration, isSprite );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 84
INDIRP4
ASGNP4
line 3766
;3765: 
;3766:			if ( !le )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $2424
line 3767
;3767:				return;
ADDRGP4 $2254
JUMPV
LABELV $2424
line 3769
;3768:
;3769:			if(mradius)
ADDRLP4 52
INDIRF4
CNSTF4 0
EQF4 $2426
line 3770
;3770:				le->refEntity.radius = mradius;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
ADDRLP4 52
INDIRF4
ASGNF4
LABELV $2426
line 3771
;3771:				le->light = light;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 44
INDIRF4
ASGNF4
line 3773
;3772:
;3773:			VectorCopy( lightColor, le->lightColor );
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 3775
;3774:
;3775:			if ( weapon == WP_FLASHBANG || weapon == WP_GRENADE )
ADDRLP4 88
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 5
EQI4 $2430
ADDRLP4 88
INDIRI4
CNSTI4 4
NEI4 $2428
LABELV $2430
line 3776
;3776:				CG_ExplosionSparks( origin );  
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_ExplosionSparks
CALLV
pop
ADDRGP4 $2429
JUMPV
LABELV $2428
line 3778
;3777:			// size the explosion smaller depending on caliber
;3778:			else if ( !metal ) 
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $2431
line 3779
;3779:			{ 
line 3780
;3780:				le->refEntity.axis[0][0] *= radius * 2 / 10;
ADDRLP4 92
ADDRLP4 0
INDIRP4
CNSTI4 180
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3781
;3781:				le->refEntity.axis[1][0] *= radius * 2 / 10;
ADDRLP4 96
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3782
;3782:				le->refEntity.axis[2][0] *= radius * 2 / 10;
ADDRLP4 100
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3783
;3783:				le->refEntity.axis[0][1] *= radius * 2 / 10;
ADDRLP4 104
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3784
;3784:				le->refEntity.axis[1][1] *= radius * 2 / 10;
ADDRLP4 108
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3785
;3785:				le->refEntity.axis[2][1] *= radius * 2 / 10;
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3786
;3786:				le->refEntity.axis[0][2] *= radius * 2 / 10;
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3787
;3787:				le->refEntity.axis[1][2] *= radius * 2 / 10;
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3788
;3788:				le->refEntity.axis[2][2] *= radius * 2 / 10; 
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 212
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1092616192
DIVF4
MULF4
ASGNF4
line 3789
;3789:			}  
LABELV $2431
LABELV $2429
line 3790
;3790:		} 
LABELV $2421
line 3792
;3791: 
;3792:		if( BG_IsGrenade( weapon ) && ( !metal && ( surfaceparms != BHOLE_SNOW || surfaceparms != BHOLE_GLASS )  ) )
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ADDRLP4 88
INDIRI4
EQI4 $2433
ADDRLP4 32
INDIRI4
ADDRLP4 88
INDIRI4
NEI4 $2433
ADDRLP4 92
ADDRFP4 20
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 4
NEI4 $2435
ADDRLP4 92
INDIRI4
CNSTI4 1
EQI4 $2433
LABELV $2435
line 3793
;3793:		{
line 3798
;3794:			vec3_t up;
;3795:			vec3_t org2;
;3796:			int i;
;3797:
;3798:			up[0] = up[1] = 0;
ADDRLP4 124
CNSTF4 0
ASGNF4
ADDRLP4 108+4
ADDRLP4 124
INDIRF4
ASGNF4
ADDRLP4 108
ADDRLP4 124
INDIRF4
ASGNF4
line 3799
;3799:			up[2] = 10 + random()*20;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 108+8
CNSTF4 1101004800
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1092616192
ADDF4
ASGNF4
line 3801
;3800:			
;3801:			if ( !le || le->refEntity.origin == NULL)
ADDRLP4 132
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 136
CNSTU4 0
ASGNU4
ADDRLP4 132
INDIRP4
CVPU4 4
ADDRLP4 136
INDIRU4
EQU4 $2440
ADDRLP4 132
INDIRP4
CNSTI4 220
ADDP4
CVPU4 4
ADDRLP4 136
INDIRU4
NEU4 $2438
LABELV $2440
line 3802
;3802:				return;
ADDRGP4 $2254
JUMPV
LABELV $2438
line 3804
;3803:
;3804:			le->refEntity.renderfx |= RF_EXPANDING;			
ADDRLP4 140
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
line 3805
;3805:			le->startTime -= duration * 0.3;  
ADDRLP4 144
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CVIF4 4
CNSTF4 1050253722
ADDRLP4 36
INDIRI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 3807
;3806:
;3807:			if ( water )
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $2441
line 3808
;3808:			{
line 3809
;3809:				for ( i = 0; i < 4; i++ ) {
ADDRLP4 120
CNSTI4 0
ASGNI4
LABELV $2443
line 3812
;3810:					localEntity_t *smoke;
;3811:
;3812:					VectorCopy( origin, org2 );
ADDRLP4 96
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3814
;3813:
;3814:					org2[0] += random()*60 - random()*60;
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
ADDRLP4 96
INDIRF4
CNSTF4 1114636288
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1114636288
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ADDF4
ASGNF4
line 3815
;3815:					org2[1] += random()*60 - random()*60;
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
CNSTF4 1114636288
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1114636288
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ADDF4
ASGNF4
line 3816
;3816:					org2[2] += random()*5;
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
CNSTF4 1084227584
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
line 3818
;3817:
;3818:					up[0] = random();
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 108
ADDRLP4 172
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 3819
;3819:					up[1] = random();
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 108+4
ADDRLP4 176
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 3820
;3820:					up[2] = random();
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 108+8
ADDRLP4 180
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 3822
;3821:
;3822:					smoke = CG_SmokePuff( org2, up, 1 + random()*3, 1, 1, 1, 1, 2500 + random()*500, cg.time, 0,LE_MOVE_SCALE_FADE, cgs.media.waterBubbleShader  );
ADDRLP4 184
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 188
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
ARGP4
ADDRLP4 108
ARGP4
CNSTF4 1077936128
ADDRLP4 184
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1065353216
ADDF4
ARGF4
ADDRLP4 192
CNSTF4 1065353216
ASGNF4
ADDRLP4 192
INDIRF4
ARGF4
ADDRLP4 192
INDIRF4
ARGF4
ADDRLP4 192
INDIRF4
ARGF4
ADDRLP4 192
INDIRF4
ARGF4
CNSTF4 1140457472
ADDRLP4 188
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1159479296
ADDF4
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+116
INDIRI4
ARGI4
ADDRLP4 196
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 148
ADDRLP4 196
INDIRP4
ASGNP4
line 3823
;3823:					smoke->startTime -= 300;
ADDRLP4 200
ADDRLP4 148
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRI4
CNSTI4 300
SUBI4
ASGNI4
line 3824
;3824:				}				
LABELV $2444
line 3809
ADDRLP4 120
ADDRLP4 120
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 4
LTI4 $2443
line 3825
;3825:			}
ADDRGP4 $2442
JUMPV
LABELV $2441
line 3827
;3826:			else
;3827:				for ( i = 0; i < 3; i++ ) {
ADDRLP4 120
CNSTI4 0
ASGNI4
LABELV $2454
line 3830
;3828:					localEntity_t *smoke;
;3829:
;3830:					VectorCopy( origin, org2 );
ADDRLP4 96
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3832
;3831:
;3832:					org2[0] += 30 - random()*60;
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
ADDRLP4 96
INDIRF4
CNSTF4 1106247680
CNSTF4 1114636288
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ADDF4
ASGNF4
line 3833
;3833:					org2[1] += 30 - random()*60;
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
CNSTF4 1106247680
CNSTF4 1114636288
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
SUBF4
ADDF4
ASGNF4
line 3834
;3834:					org2[2] += random()*5;
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
CNSTF4 1084227584
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ASGNF4
line 3836
;3835:
;3836:					smoke = CG_SmokePuff( org2, up, 150 + random()*30, 1, 1, 1, 1, 5000 + random()*2000, cg.time-1000, cg.time-1000,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 96
ARGP4
ADDRLP4 108
ARGP4
CNSTF4 1106247680
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1125515264
ADDF4
ARGF4
ADDRLP4 172
CNSTF4 1065353216
ASGNF4
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 172
INDIRF4
ARGF4
CNSTF4 1157234688
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1167867904
ADDF4
ARGF4
ADDRLP4 176
CNSTI4 1000
ASGNI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 176
INDIRI4
SUBI4
ARGI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 176
INDIRI4
SUBI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 180
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 148
ADDRLP4 180
INDIRP4
ASGNP4
line 3837
;3837:				}
LABELV $2455
line 3827
ADDRLP4 120
ADDRLP4 120
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 3
LTI4 $2454
LABELV $2442
line 3839
;3838:
;3839:		} 
LABELV $2433
line 3840
;3840:	}
LABELV $2412
line 3845
;3841:
;3842:	//
;3843:	// surface depending effects
;3844:	//
;3845:	{
line 3847
;3846:
;3847:		CG_SurfaceEffect( origin, dir, surfaceparms , weapon, radius );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRGP4 CG_SurfaceEffect
CALLV
pop
line 3848
;3848:	}
line 3855
;3849:
;3850: 	//
;3851:	// impact mark
;3852:	//    
;3853:
;3854:	// don't spawn impact mark, if we're only here for sparks / debris
;3855:	if( soundtype > 0 )
ADDRFP4 16
INDIRI4
CNSTI4 0
LEI4 $2464
line 3856
;3856:	{
line 3857
;3857:		if ( soundtype > MAX_CLIENTS && soundtype < ENTITYNUM_MAX_NORMAL )
ADDRLP4 76
ADDRFP4 16
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 64
LEI4 $2254
ADDRLP4 76
INDIRI4
CNSTI4 1022
GEI4 $2254
line 3858
;3858:		{
line 3859
;3859:			if (!mark)
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $2468
line 3860
;3860:			{
line 3863
;3861:				int type;
;3862:				int number;
;3863:				int orientation = random()*360;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1135869952
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3865
;3864:
;3865:				type = surfaceparms;
ADDRLP4 84
ADDRFP4 20
INDIRI4
ASGNI4
line 3866
;3866:				number = random()*5;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 88
CNSTF4 1084227584
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3868
;3867:
;3868:				if ( type == BHOLE_METAL )
ADDRLP4 84
INDIRI4
CNSTI4 2
NEI4 $2470
line 3869
;3869:					orientation = ( random()*60 ) - 30 ;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1114636288
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1106247680
SUBF4
CVFI4 4
ASGNI4
LABELV $2470
line 3870
;3870:				if ( type == BHOLE_GLASS )
ADDRLP4 84
INDIRI4
CNSTI4 1
NEI4 $2472
line 3871
;3871:					radius = 12 + radius; 
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
LABELV $2472
line 3873
;3872:  						
;3873:				CG_DirectImpactMark( cgs.media.bulletholes[surfaceparms][number] , origin, dir, orientation, 1,1,1,1, qfalse, radius, qfalse, soundtype);
ADDRLP4 88
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 20
ADDRFP4 20
INDIRI4
MULI4
ADDRGP4 cgs+205084+1100
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 104
CNSTF4 1065353216
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 108
INDIRI4
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
line 3874
;3874:			}
ADDRGP4 $2254
JUMPV
LABELV $2468
line 3876
;3875:			else
;3876:			{
line 3877
;3877:				CG_DirectImpactMark( mark , origin, dir, random()*360, 1,1,1,1, qfalse, radius, qfalse, soundtype );
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 84
CNSTF4 1065353216
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 88
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 88
INDIRI4
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
line 3878
;3878:			}
line 3879
;3879:		}
line 3880
;3880:		return;
ADDRGP4 $2254
JUMPV
LABELV $2464
line 3884
;3881:	}
;3882:
;3883:
;3884:	if (!mark)
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $2476
line 3885
;3885:	{
line 3888
;3886:		int type;
;3887:		int number;
;3888:		int orientation = random()*360;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1135869952
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3890
;3889:
;3890:		type = surfaceparms;
ADDRLP4 76
ADDRFP4 20
INDIRI4
ASGNI4
line 3892
;3891:
;3892:		number = random()*5;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
CNSTF4 1084227584
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3894
;3893:
;3894:		if ( BG_IsGrenade( weapon ) )
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $2478
line 3895
;3895:		{
line 3896
;3896:			number = random()*2;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 84
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 3898
;3897:			
;3898:			CG_ImpactMark( cgs.media.burnMarkShaders[number], origin,dir, orientation, 0,0,0,1, qfalse, radius, qfalse );
ADDRLP4 84
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+188
ADDP4
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 104
CNSTF4 0
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 108
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3899
;3899:			return;
ADDRGP4 $2254
JUMPV
LABELV $2478
line 3902
;3900:		}
;3901:
;3902:		if ( type == BHOLE_METAL )
ADDRLP4 76
INDIRI4
CNSTI4 2
NEI4 $2482
line 3903
;3903:			orientation = ( random()*60 ) - 30 ;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 80
CNSTF4 1114636288
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1106247680
SUBF4
CVFI4 4
ASGNI4
LABELV $2482
line 3904
;3904:		if ( type == BHOLE_GLASS )
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $2484
line 3905
;3905:			radius = 12; 
ADDRLP4 4
CNSTF4 1094713344
ASGNF4
LABELV $2484
line 3907
;3906:		
;3907:		CG_ImpactMark( cgs.media.bulletholes[type][number] , origin, dir, orientation, 1,1,1,1, qfalse, radius, qfalse );
ADDRLP4 84
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 20
ADDRLP4 76
INDIRI4
MULI4
ADDRGP4 cgs+205084+1100
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 80
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 104
CNSTF4 1065353216
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 108
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 3908
;3908:	}
ADDRGP4 $2477
JUMPV
LABELV $2476
line 3910
;3909:	else
;3910:		CG_ImpactMark( mark , origin, dir, random()*360, 1,1,1,1, qfalse, radius, qfalse );
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
LABELV $2477
line 3912
;3911:
;3912:} 
LABELV $2254
endproc CG_MissileHitWall 204 48
export CG_Explosion
proc CG_Explosion 180 44
line 3921
;3913:
;3914:/*
;3915:=================
;3916:CG_Explosion
;3917:
;3918:Caused by an EV_EXPLOSION event, or directly 
;3919:=================
;3920:*/
;3921:void CG_Explosion( vec3_t origin, int c4explo ) {
line 3938
;3922:	qhandle_t		mod;
;3923:	qhandle_t		mark;
;3924:	qhandle_t		shader;
;3925:	sfxHandle_t		sfx;
;3926:	float			radius;
;3927:	float			mradius;
;3928:	float			light;
;3929:	vec3_t			lightColor;
;3930:	localEntity_t	*le;
;3931:	qboolean		isSprite;
;3932:	int				duration;
;3933:	vec3_t			dir;
;3934:	int i, r;
;3935:	float			alpha;
;3936:	trace_t		trace;
;3937:	int				number;
;3938:	qboolean		water = ( CG_PointContents( origin, -1 ) & CONTENTS_WATER );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 140
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 112
ADDRLP4 140
INDIRI4
CNSTI4 32
BANDI4
ASGNI4
line 3940
;3939:
;3940:	mark = 0;
ADDRLP4 132
CNSTI4 0
ASGNI4
line 3941
;3941:	mradius = 0;
ADDRLP4 120
CNSTF4 0
ASGNF4
line 3942
;3942:	radius = 32;
ADDRLP4 116
CNSTF4 1107296256
ASGNF4
line 3943
;3943:	sfx = 0;
ADDRLP4 84
CNSTI4 0
ASGNI4
line 3944
;3944:	mod = 0;
ADDRLP4 88
CNSTI4 0
ASGNI4
line 3945
;3945:	shader = 0;
ADDRLP4 80
CNSTI4 0
ASGNI4
line 3946
;3946:	light = 0;
ADDRLP4 92
CNSTF4 0
ASGNF4
line 3947
;3947:	lightColor[0] = 1;
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
line 3948
;3948:	lightColor[1] = 1;
ADDRLP4 68+4
CNSTF4 1065353216
ASGNF4
line 3949
;3949:	lightColor[2] = 0;
ADDRLP4 68+8
CNSTF4 0
ASGNF4
line 3952
;3950:
;3951:	// set defaults
;3952:	if (c4explo) {
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $2491
line 3953
;3953:		isSprite = qfalse; 
ADDRLP4 124
CNSTI4 0
ASGNI4
line 3954
;3954:  		mod = cgs.media.sphereFlashModel;
ADDRLP4 88
ADDRGP4 cgs+205084+672
INDIRI4
ASGNI4
line 3955
;3955:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 80
ADDRGP4 cgs+205084+216
INDIRI4
ASGNI4
line 3956
;3956:		if ( water )
ADDRLP4 112
INDIRI4
CNSTI4 0
EQI4 $2497
line 3957
;3957:			shader = cgs.media.waterExplosionShader;
ADDRLP4 80
ADDRGP4 cgs+205084+224
INDIRI4
ASGNI4
LABELV $2497
line 3958
;3958:		sfx = cgs.media.c4_explode;
ADDRLP4 84
ADDRGP4 cgs+205084+1284
INDIRI4
ASGNI4
line 3959
;3959: 		radius = 128;
ADDRLP4 116
CNSTF4 1124073472
ASGNF4
line 3960
;3960:		light = 600;
ADDRLP4 92
CNSTF4 1142292480
ASGNF4
line 3961
;3961:		duration = 1000;
ADDRLP4 96
CNSTI4 1000
ASGNI4
line 3962
;3962:		mradius = 256 / 2;
ADDRLP4 120
CNSTF4 1124073472
ASGNF4
line 3963
;3963:	} else {
ADDRGP4 $2492
JUMPV
LABELV $2491
line 3964
;3964:		isSprite = qfalse; 
ADDRLP4 124
CNSTI4 0
ASGNI4
line 3965
;3965:  		mod = cgs.media.sphereFlashModel;
ADDRLP4 88
ADDRGP4 cgs+205084+672
INDIRI4
ASGNI4
line 3966
;3966:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 80
ADDRGP4 cgs+205084+216
INDIRI4
ASGNI4
line 3967
;3967:		if ( water )
ADDRLP4 112
INDIRI4
CNSTI4 0
EQI4 $2507
line 3968
;3968:			shader = cgs.media.waterExplosionShader;
ADDRLP4 80
ADDRGP4 cgs+205084+224
INDIRI4
ASGNI4
LABELV $2507
line 3969
;3969:		sfx = cgs.media.mk26_explode;
ADDRLP4 84
ADDRGP4 cgs+205084+1280
INDIRI4
ASGNI4
line 3970
;3970: 		radius = 32;
ADDRLP4 116
CNSTF4 1107296256
ASGNF4
line 3971
;3971:		light = 400;
ADDRLP4 92
CNSTF4 1137180672
ASGNF4
line 3972
;3972:		duration = 1000;
ADDRLP4 96
CNSTI4 1000
ASGNI4
line 3973
;3973:		mradius = 128 / 2;
ADDRLP4 120
CNSTF4 1115684864
ASGNF4
line 3974
;3974:	}
LABELV $2492
line 3976
;3975:  
;3976:	if (!water)
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $2513
line 3978
;3977:	// alot fewer chunks than the origin explosion
;3978:		for(i = 0; i < 16; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2515
line 3979
;3979:		{
line 3980
;3980:			r = rand() & 255;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 144
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 3981
;3981:			CG_GrenadeShrapnel(origin, bytedirs[r]);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 12
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 bytedirs
ADDP4
ARGP4
ADDRGP4 CG_GrenadeShrapnel
CALLV
pop
line 3982
;3982:		} 
LABELV $2516
line 3978
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $2515
LABELV $2513
line 3984
;3983:
;3984:	if ( sfx ) {
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $2519
line 3985
;3985:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $2521
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $2521
line 3986
;3986:	}
LABELV $2519
line 3988
;3987:
;3988:	le = CG_MakeExplosion( origin, origin, 
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 88
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRLP4 124
INDIRI4
ARGI4
ADDRLP4 148
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 148
INDIRP4
ASGNP4
line 3992
;3989:				   mod,	shader,
;3990:				   duration, isSprite );		
;3991:
;3992:	le->light = light;
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 92
INDIRF4
ASGNF4
line 3994
;3993:
;3994:	VectorCopy( lightColor, le->lightColor ); 
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 68
INDIRB
ASGNB 12
line 3997
;3995:
;3996:	//le->refEntity.customShader = ;//cgs.media.plasmaBallShader;
;3997:	le->refEntity.renderfx |= RF_EXPANDING;			
ADDRLP4 152
ADDRLP4 8
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
line 3998
;3998:	le->startTime -= duration * 0.3; // make it start out with some size
ADDRLP4 156
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRI4
CVIF4 4
CNSTF4 1050253722
ADDRLP4 96
INDIRI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 4001
;3999:  
;4000:	// send a trace down from the origin to the ground
;4001:	VectorCopy( origin, dir );
ADDRLP4 100
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 4002
;4002:	dir[2] -= 128; // trace down max 128
ADDRLP4 100+8
ADDRLP4 100+8
INDIRF4
CNSTF4 1124073472
SUBF4
ASGNF4
line 4004
;4003:
;4004:	trap_CM_BoxTrace( &trace, origin, dir, NULL, NULL, 0, MASK_PLAYERSOLID );
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 160
CNSTP4 0
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 160
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 33619969
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 4007
;4005:
;4006:	// no mark if we're too high
;4007:	if ( trace.fraction == 1.0 ) {
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $2526
line 4008
;4008:		return;
ADDRGP4 $2488
JUMPV
LABELV $2526
line 4012
;4009:	}
;4010:
;4011:	// fade the mark out with height
;4012:	alpha = 1.0 - trace.fraction;
ADDRLP4 136
CNSTF4 1065353216
ADDRLP4 12+8
INDIRF4
SUBF4
ASGNF4
line 4014
;4013: 
;4014:	number = random()*2;
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 128
CNSTF4 1073741824
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 4017
;4015: 
;4016: 
;4017:	CG_ImpactMark( cgs.media.burnMarkShaders[number], trace.endpos,trace.plane.normal, 
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12+12
ARGP4
ADDRLP4 12+24
ARGP4
CNSTF4 1135869952
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 172
CNSTF4 0
ASGNF4
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 172
INDIRF4
ARGF4
ADDRLP4 172
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 176
CNSTI4 0
ASGNI4
ADDRLP4 176
INDIRI4
ARGI4
CNSTF4 1124073472
ARGF4
ADDRLP4 176
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 4019
;4018:		random()*360, 0,0,0,1, qfalse, 128, qfalse ); 
;4019:}
LABELV $2488
endproc CG_Explosion 180 44
proc CG_BloodParticle 52 0
line 4027
;4020:
;4021:#define BLOOD_MINI		0
;4022:#define BLOOD_SMALL		1
;4023:#define BLOOD_NORMAL	2
;4024:#define	BLOOD_NORMAL2	3
;4025:#define BLOOD_BIG		4
;4026:
;4027:static void CG_BloodParticle( vec3_t org, vec3_t dir, int size ) {
line 4031
;4028:	localEntity_t	*le;
;4029:	refEntity_t		*re;
;4030:
;4031:	if (!cg_blood.integer)
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $2535
line 4032
;4032:		return;
ADDRGP4 $2534
JUMPV
LABELV $2535
line 4034
;4033:
;4034:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 4035
;4035:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 4037
;4036:
;4037:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 4039
;4038:	
;4039:	VectorScale(dir, 75 + random()*20*cg_goreLevel.value, le->pos.trDelta);
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDRGP4 cg_goreLevel+8
INDIRF4
MULF4
CNSTF4 1117126656
ADDF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 16
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDRGP4 cg_goreLevel+8
INDIRF4
MULF4
CNSTF4 1117126656
ADDF4
MULF4
ASGNF4
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1101004800
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDRGP4 cg_goreLevel+8
INDIRF4
MULF4
CNSTF4 1117126656
ADDF4
MULF4
ASGNF4
line 4040
;4040:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 4041
;4041:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 4042
;4042:	le->leType = LE_SHRAPNEL;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 4043
;4043:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 4044
;4044:	le->endTime = cg.time + 1500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 4045
;4045:	le->lifeRate = 1.0 / ( le->endTime - le->startTime ); 
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 4047
;4046:
;4047:	switch (size) {
ADDRLP4 28
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
LTI4 $2545
ADDRLP4 28
INDIRI4
CNSTI4 4
GTI4 $2545
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2565
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2565
address $2546
address $2549
address $2553
address $2557
address $2561
code
LABELV $2546
line 4049
;4048:		case BLOOD_MINI:
;4049:			le->radius = 0.5 + random(); // base is 0.5 max is 1.5
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 4050
;4050:			le->leFlags = cgs.media.bloodparticleShaders[BLOOD_MINI];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+688
INDIRI4
ASGNI4
line 4051
;4051:			break;
ADDRGP4 $2545
JUMPV
LABELV $2549
line 4053
;4052:		case BLOOD_SMALL:
;4053:			le->radius = 1 + random();   // base is 1 max is 2
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 4054
;4054:			le->leFlags = cgs.media.bloodparticleShaders[BLOOD_SMALL];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+688+4
INDIRI4
ASGNI4
line 4055
;4055:			break;
ADDRGP4 $2545
JUMPV
LABELV $2553
line 4057
;4056:		case BLOOD_NORMAL:
;4057:			le->radius = 1.5 + random(); // base is 1.5 max is 2.5
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1069547520
ADDF4
ASGNF4
line 4058
;4058:			le->leFlags = cgs.media.bloodparticleShaders[BLOOD_NORMAL];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+688+8
INDIRI4
ASGNI4
line 4059
;4059:			break;
ADDRGP4 $2545
JUMPV
LABELV $2557
line 4061
;4060:		case BLOOD_NORMAL2:
;4061:			le->radius = 2 + random();   // base is 2 max is 3
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
ADDF4
ASGNF4
line 4062
;4062:			le->leFlags = cgs.media.bloodparticleShaders[BLOOD_NORMAL2];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+688+12
INDIRI4
ASGNI4
line 4063
;4063:			break;
ADDRGP4 $2545
JUMPV
LABELV $2561
line 4065
;4064:		case BLOOD_BIG:
;4065:			le->radius = 2.5 + random(); // base is 2.5 max is 3.5
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1075838976
ADDF4
ASGNF4
line 4066
;4066:			le->leFlags = cgs.media.bloodparticleShaders[BLOOD_BIG];
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cgs+205084+688+16
INDIRI4
ASGNI4
line 4067
;4067:			break;
line 4069
;4068:		default:
;4069:			break;
LABELV $2545
line 4072
;4070:	}
;4071: 
;4072:	le->bounceFactor = 0.1f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1036831949
ASGNF4
line 4074
;4073:	
;4074:	le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 3
ASGNI4
line 4078
;4075: 
;4076: 
;4077: 
;4078:}
LABELV $2534
endproc CG_BloodParticle 52 0
export CG_PlayerBleed
proc CG_PlayerBleed 72 48
line 4087
;4079:   
;4080:/*
;4081:=================
;4082:CG_PlayerBleed
;4083:
;4084:Caused by ev_bullet
;4085:=================
;4086:*/
;4087:void CG_PlayerBleed( int weapon, int clientNum, int damage, vec3_t origin, vec3_t dir ) {
line 4090
;4088://	int				r;
;4089: 	int			i;//, s;
;4090:	qboolean	headshot = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 4093
;4091:	vec3_t dir2;
;4092:
;4093:	if (!cg_blood.integer)
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $2567
line 4094
;4094:		return;
ADDRGP4 $2566
JUMPV
LABELV $2567
line 4096
;4095:
;4096:	if ( damage >= 100 )
ADDRFP4 8
INDIRI4
CNSTI4 100
LTI4 $2570
line 4097
;4097:		headshot = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
LABELV $2570
line 4100
;4098:
;4099:
;4100:	if (damage > 30)
ADDRFP4 8
INDIRI4
CNSTI4 30
LEI4 $2572
line 4101
;4101:		damage = 30;
ADDRFP4 8
CNSTI4 30
ASGNI4
LABELV $2572
line 4104
;4102:
;4103:	
;4104:	if (headshot)
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $2574
line 4105
;4105:		damage = 100;
ADDRFP4 8
CNSTI4 100
ASGNI4
LABELV $2574
line 4107
;4106:
;4107:	damage *= cg_goreLevel.value;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CVIF4 4
ADDRGP4 cg_goreLevel+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 4110
;4108:
;4109:
;4110:	CG_SmokePuff( origin, dir, 5, 1.0f, 0.2f, 0.2f, 0.8f, 750, cg.time-250,cg.time-250,LE_MOVE_SCALE_FADE,cgs.media.smokePuffShader );
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTF4 1084227584
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 20
CNSTF4 1045220557
ASGNF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
CNSTF4 1061997773
ARGF4
CNSTF4 1144750080
ARGF4
ADDRLP4 24
CNSTI4 250
ASGNI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ARGI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 4112
;4111:
;4112:	for(i = 0; i < damage; i++)
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $2584
JUMPV
LABELV $2581
line 4113
;4113:	{ 
line 4114
;4114:		if ( headshot )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $2585
line 4115
;4115:		{
line 4118
;4116:			int r,s;
;4117:
;4118:			r = rand() & 255;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 36
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 4119
;4119:			VectorCopy(bytedirs[r], dir2);
ADDRLP4 0
CNSTI4 12
ADDRLP4 32
INDIRI4
MULI4
ADDRGP4 bytedirs
ADDP4
INDIRB
ASGNB 12
line 4120
;4120:			s = DotProduct(dir, dir2);
ADDRLP4 40
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 4122
;4121:				
;4122:			if(s < 0)
ADDRLP4 28
INDIRI4
CNSTI4 0
GEI4 $2589
line 4123
;4123:				VectorMA(dir2, -2 * s, dir, dir2);
ADDRLP4 44
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 48
CNSTI4 -2
ADDRLP4 28
INDIRI4
MULI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTI4 -2
ADDRLP4 28
INDIRI4
MULI4
CVIF4 4
MULF4
ADDF4
ASGNF4
LABELV $2589
line 4124
;4124:			VectorNormalize(dir2);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4126
;4125:
;4126:			dir[2] += 2;
ADDRLP4 52
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDF4
ASGNF4
line 4128
;4127:
;4128:			CG_SpawnBloodParticle( origin, dir2, 100 + random()*50 , 0.0f, 4.0f +random(), 0.4+random()/10,0.1f,0.1f,1.0f, qtrue ); 
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1112014848
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1120403456
ADDF4
ARGF4
CNSTF4 0
ARGF4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1082130432
ADDF4
ARGF4
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1053609165
ADDF4
ARGF4
ADDRLP4 68
CNSTF4 1036831949
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_SpawnBloodParticle
CALLP4
pop
line 4129
;4129:		}
ADDRGP4 $2586
JUMPV
LABELV $2585
line 4131
;4130:		else
;4131:		{
line 4132
;4132:			VectorCopy( dir, dir2 );
ADDRLP4 0
ADDRFP4 16
INDIRP4
INDIRB
ASGNB 12
line 4134
;4133:
;4134:			dir2[0] += -0.50 + random();
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 3204448256
ADDF4
ADDF4
ASGNF4
line 4135
;4135:			dir2[1] += -0.50 + random();
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 3204448256
ADDF4
ADDF4
ASGNF4
line 4136
;4136:			dir2[2] -= random();
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
SUBF4
ASGNF4
line 4138
;4137:
;4138:			CG_SpawnBloodParticle( origin, dir2, 60 + i*3, 0.0f, 3.0f +random()/2.0f, 0.4+random()/10,0.1f,0.1f,1.0f, qtrue ); 
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 3
ADDRLP4 12
INDIRI4
MULI4
CNSTI4 60
ADDI4
CVIF4 4
ARGF4
CNSTF4 0
ARGF4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1073741824
DIVF4
CNSTF4 1077936128
ADDF4
ARGF4
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1092616192
DIVF4
CNSTF4 1053609165
ADDF4
ARGF4
ADDRLP4 48
CNSTF4 1036831949
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_SpawnBloodParticle
CALLP4
pop
line 4139
;4139:		} 
LABELV $2586
line 4140
;4140:	}
LABELV $2582
line 4112
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2584
ADDRLP4 12
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $2581
line 4141
;4141:}
LABELV $2566
endproc CG_PlayerBleed 72 48
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 12 24
line 4148
;4142:
;4143:/*
;4144:=================
;4145:CG_MissileHitPlayer
;4146:=================
;4147:*/
;4148:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum, int damage ) {
line 4149
;4149:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 4150
;4150:	CG_PlayerBleed( weapon, entityNum, damage, origin, dir );
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRFP4 16
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CG_PlayerBleed
CALLV
pop
line 4152
;4151: 
;4152:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 4
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $2600
ADDRLP4 0
INDIRI4
CNSTI4 5
EQI4 $2600
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $2599
LABELV $2601
ADDRFP4 0
INDIRI4
CNSTI4 25
EQI4 $2600
ADDRGP4 $2599
JUMPV
LABELV $2600
line 4156
;4153:		case WP_FLASHBANG:
;4154:		case WP_GRENADE:
;4155:		case WP_SMOKE: 
;4156:			CG_MissileHitWall( weapon, 0, origin, dir, 0, 0 );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4157
;4157:			break;
line 4159
;4158:		default:
;4159:		break;
LABELV $2599
line 4161
;4160:	}
;4161:}
LABELV $2597
endproc CG_MissileHitPlayer 12 24
proc CG_ShotgunPellet 148 44
line 4178
;4162:
;4163:
;4164:
;4165:/*
;4166:============================================================================
;4167:
;4168:SHOTGUN TRACING
;4169:
;4170:============================================================================
;4171:*/
;4172:
;4173:/*
;4174:================
;4175:CG_ShotgunPellet
;4176:================
;4177:*/
;4178:static void CG_ShotgunPellet( vec3_t start, vec3_t end, vec3_t forward, int skipNum ) {
line 4182
;4179:	trace_t		tr;
;4180:	int sourceContentType, destContentType;
;4181:
;4182:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 64
CNSTP4 0
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4184
;4183:
;4184:	sourceContentType = trap_CM_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 4185
;4185:	destContentType = trap_CM_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 72
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 4188
;4186:
;4187:	// FIXME: should probably move this cruft into CG_BubbleTrail
;4188:	if ( sourceContentType == destContentType ) {
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $2604
line 4189
;4189:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2605
line 4190
;4190:			CG_BubbleTrail( start, tr.endpos, 8 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4191
;4191:		}
line 4192
;4192:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $2605
JUMPV
LABELV $2604
ADDRLP4 56
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2609
line 4195
;4193:		trace_t trace;
;4194:
;4195:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 76
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 132
CNSTP4 0
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 4196
;4196:		CG_BubbleTrail( start, trace.endpos, 8 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76+12
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4198
;4197:
;4198:		CG_ImpactMark(cgs.media.wakeMarkShader, trace.endpos, trace.plane.normal , random()*360,1,1,1,1,qfalse, 4, qfalse );
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+205084+184
INDIRI4
ARGI4
ADDRLP4 76+12
ARGP4
ADDRLP4 76+24
ARGP4
CNSTF4 1135869952
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRLP4 144
INDIRI4
ARGI4
CNSTF4 1082130432
ARGF4
ADDRLP4 144
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 4199
;4199:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $2610
JUMPV
LABELV $2609
ADDRLP4 60
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2616
line 4202
;4200:		trace_t trace;
;4201:
;4202:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 76
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 132
CNSTP4 0
ASGNP4
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 132
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 4203
;4203:		CG_BubbleTrail( tr.endpos, trace.endpos, 8 );
ADDRLP4 0+12
ARGP4
ADDRLP4 76+12
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 4205
;4204:
;4205:		CG_ImpactMark(cgs.media.wakeMarkShader, trace.endpos, trace.plane.normal , random()*360,1,1,1,1,qfalse, 4, qfalse );
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cgs+205084+184
INDIRI4
ARGI4
ADDRLP4 76+12
ARGP4
ADDRLP4 76+24
ARGP4
CNSTF4 1135869952
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRLP4 144
INDIRI4
ARGI4
CNSTF4 1082130432
ARGF4
ADDRLP4 144
INDIRI4
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 4206
;4206:	}
LABELV $2616
LABELV $2610
LABELV $2605
line 4209
;4207:
;4208:	// really thin shotgun tracers
;4209:	if ( random() < cg_tracerChance.value ) { 
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $2624
line 4215
;4210:		vec4_t rgba;
;4211:		vec3_t	forward;
;4212:		vec3_t	trace_start;
;4213:
;4214:		// tracer
;4215:		VectorSubtract( end, start, forward );
ADDRLP4 120
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 124
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 128
CNSTI4 4
ASGNI4
ADDRLP4 80+4
ADDRLP4 120
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 132
CNSTI4 8
ASGNI4
ADDRLP4 80+8
ADDRFP4 4
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4216
;4216: 		VectorMA( start, 32.0, forward, trace_start );
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
CNSTF4 1107296256
ASGNF4
ADDRLP4 108
ADDRLP4 136
INDIRP4
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 80
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 136
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 80+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1107296256
ADDRLP4 80+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4218
;4217:
;4218:		rgba[0] = rgba[1] = rgba[2] = rgba[3] = 1;
ADDRLP4 144
CNSTF4 1065353216
ASGNF4
ADDRLP4 92+12
ADDRLP4 144
INDIRF4
ASGNF4
ADDRLP4 92+8
ADDRLP4 144
INDIRF4
ASGNF4
ADDRLP4 92+4
ADDRLP4 144
INDIRF4
ASGNF4
ADDRLP4 92
ADDRLP4 144
INDIRF4
ASGNF4
line 4220
;4219:
;4220:	 	CG_Tracer(trace_start, end, 1, cgs.media.tracerShader, rgba);
ADDRLP4 108
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 cgs+205084+52
INDIRI4
ARGI4
ADDRLP4 92
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 4221
;4221:	}
LABELV $2624
line 4223
;4222:
;4223:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2638
line 4224
;4224:		return;
ADDRGP4 $2602
JUMPV
LABELV $2638
line 4227
;4225:	}
;4226:
;4227:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2641
line 4229
;4228:		// if the player got a vest
;4229:		if ( cg_entities[tr.entityNum].currentState.powerups & ( 1 << PW_VEST ) || cg_entities[tr.entityNum].currentState.powerups & ( 1 << PW_HELMET ) )
ADDRLP4 80
CNSTI4 728
ASGNI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+188
ADDP4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 84
INDIRI4
NEI4 $2651
ADDRLP4 80
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+188
ADDP4
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 84
INDIRI4
EQI4 $2645
LABELV $2651
line 4230
;4230:		{
line 4234
;4231:			int viewheight;
;4232:			int anim;
;4233:			float pos;
;4234:			float h_1 = 1.125;
ADDRLP4 88
CNSTF4 1066401792
ASGNF4
line 4236
;4235: 
;4236:			anim = cg_entities[tr.entityNum].currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 92
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 4238
;4237:				
;4238:			if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR )
ADDRLP4 104
ADDRLP4 92
INDIRI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 42
EQI4 $2656
ADDRLP4 104
INDIRI4
CNSTI4 41
NEI4 $2654
LABELV $2656
line 4239
;4239:				viewheight = CROUCH_VIEWHEIGHT;
ADDRLP4 100
CNSTI4 12
ASGNI4
ADDRGP4 $2655
JUMPV
LABELV $2654
line 4241
;4240:			else
;4241:				viewheight = DEFAULT_VIEWHEIGHT;
ADDRLP4 100
CNSTI4 26
ASGNI4
LABELV $2655
line 4243
;4242:
;4243:			pos = cg_entities[tr.entityNum].currentState.origin[2] + viewheight - tr.endpos[2];
ADDRLP4 96
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+92+8
ADDP4
INDIRF4
ADDRLP4 100
INDIRI4
CVIF4 4
ADDF4
ADDRLP4 0+12+8
INDIRF4
SUBF4
ASGNF4
line 4246
;4244:
;4245:			// if above legs and below head hit the wall(the vest - just same gfx) 
;4246:			if ( cg_entities[tr.entityNum].currentState.powerups & ( 1 << PW_HELMET ) )
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+188
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $2662
line 4247
;4247:				h_1 = 0.1f;
ADDRLP4 88
CNSTF4 1036831949
ASGNF4
LABELV $2662
line 4249
;4248:
;4249:			if ( pos < 18 && pos > h_1 )  {  
ADDRLP4 108
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 108
INDIRF4
CNSTF4 1099956224
GEF4 $2666
ADDRLP4 108
INDIRF4
ADDRLP4 88
INDIRF4
LEF4 $2666
line 4251
;4250:				// reverse
;4251:				forward[0] *= -1;
ADDRLP4 112
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTF4 3212836864
ADDRLP4 112
INDIRP4
INDIRF4
MULF4
ASGNF4
line 4252
;4252:				forward[1] *= -1;
ADDRLP4 116
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTF4 3212836864
ADDRLP4 116
INDIRP4
INDIRF4
MULF4
ASGNF4
line 4253
;4253:				forward[2] *= -1;
ADDRLP4 120
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTF4 3212836864
ADDRLP4 120
INDIRP4
INDIRF4
MULF4
ASGNF4
line 4255
;4254:
;4255:				CG_MissileHitWall( WP_870, 0, tr.endpos, forward, 1, NS_BulletHoleTypeForSurface(tr.surfaceFlags) );
ADDRLP4 0+44
INDIRI4
ARGI4
ADDRLP4 124
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
CNSTI4 19
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 124
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4256
;4256:			}
ADDRGP4 $2642
JUMPV
LABELV $2666
line 4258
;4257:			else
;4258:				CG_MissileHitPlayer( WP_870, tr.endpos, forward, tr.entityNum, 4 );
CNSTI4 19
ARGI4
ADDRLP4 0+12
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 4259
;4259:		}
ADDRGP4 $2642
JUMPV
LABELV $2645
line 4261
;4260:		else
;4261:			CG_MissileHitPlayer( WP_870, tr.endpos, forward, tr.entityNum, 4 );
CNSTI4 19
ARGI4
ADDRLP4 0+12
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 4262
;4262:	} else {
ADDRGP4 $2642
JUMPV
LABELV $2641
line 4263
;4263:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2674
line 4265
;4264:			// SURF_NOIMPACT will not make a flame puff or a mark
;4265:			return;
ADDRGP4 $2602
JUMPV
LABELV $2674
line 4267
;4266:		}
;4267:		CG_MissileHitWall( WP_870, 0, tr.endpos, tr.plane.normal, 0, NS_BulletHoleTypeForSurface(tr.surfaceFlags));
ADDRLP4 0+44
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
CNSTI4 19
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4268
;4268:	}
LABELV $2642
line 4269
;4269:}
LABELV $2602
endproc CG_ShotgunPellet 148 44
export CG_BounceProjectile
proc CG_BounceProjectile 64 4
line 4278
;4270:float BG_MaximumWeaponRange( int weapon );
;4271: 
;4272:
;4273:/*
;4274:================
;4275:CG_BounceProjectile
;4276:================
;4277:*/
;4278:void CG_BounceProjectile( vec3_t start, vec3_t impact, vec3_t dir, vec3_t endout ) {
line 4282
;4279:	vec3_t v, newv;
;4280:	float dot;
;4281:
;4282:	VectorSubtract( impact, start, v );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 36
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4283
;4283:	dot = DotProduct( v, dir );
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 4284
;4284:	VectorMA( v, -2*dot, dir, newv );
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 52
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 4286
;4285:
;4286:	VectorNormalize(newv);
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4287
;4287:	VectorMA(impact, 8192, newv, endout);
ADDRFP4 12
INDIRP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
CNSTI4 4
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
CNSTI4 8
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4288
;4288:} 
LABELV $2680
endproc CG_BounceProjectile 64 4
export CG_PredictFireLead
proc CG_PredictFireLead 852 40
line 4291
;4289:
;4290:void CG_PredictFireLead ( void )
;4291:{
line 4299
;4292:	vec3_t		end;
;4293:	trace_t		trace,trace2;   
;4294:	int			hits; 
;4295:	vec3_t		tracefrom, start, temp, forward,right,up;
;4296:	int			wallhits, bulletHits;
;4297:	float		bulletThickn;
;4298:	int			ignoreent;//,savedent;
;4299:	float		r = 0,u = 0;
ADDRLP4 212
CNSTF4 0
ASGNF4
ADDRLP4 148
CNSTF4 0
ASGNF4
line 4300
;4300:	float		max_range = BG_MaximumWeaponRange ( cg.predictedPlayerState.weapon );
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 244
ADDRGP4 BG_MaximumWeaponRange
CALLF4
ASGNF4
ADDRLP4 232
ADDRLP4 244
INDIRF4
ASGNF4
line 4301
;4301:	int			*seed = &cg.predictedPlayerState.stats[STAT_SEED];
ADDRLP4 200
ADDRGP4 cg+107636+184+56
ASGNP4
line 4304
;4302: 	int			entityNum;
;4303: 
;4304:	gitem_t		*item = BG_FindItemForWeapon( cg.predictedPlayerState.weapon );
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 248
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 236
ADDRLP4 248
INDIRP4
ASGNP4
line 4305
;4305:	int			caliber = item->giAmmoTag;
ADDRLP4 152
ADDRLP4 236
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 4307
;4306:
;4307:	hits = wallhits = 0; 
ADDRLP4 252
CNSTI4 0
ASGNI4
ADDRLP4 208
ADDRLP4 252
INDIRI4
ASGNI4
ADDRLP4 240
ADDRLP4 252
INDIRI4
ASGNI4
line 4309
;4308:
;4309:	if ( BG_WeaponMods( cg.predictedPlayerState.weapon ) & WM_GRENADELAUNCHER )
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 256
ADDRGP4 BG_WeaponMods
CALLI4
ASGNI4
ADDRLP4 256
INDIRI4
CNSTI4 9
BANDI4
CNSTI4 0
EQI4 $2699
line 4310
;4310:	{
line 4312
;4311:		// no prediction if firing a grenade 
;4312:		if ( cg.predictedPlayerState.stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ) )
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $2703
line 4313
;4313:			return;
ADDRGP4 $2691
JUMPV
LABELV $2703
line 4314
;4314:	}
LABELV $2699
line 4316
;4315:
;4316:	ignoreent = cg.predictedPlayerState.clientNum; 
ADDRLP4 204
ADDRGP4 cg+107636+140
INDIRI4
ASGNI4
line 4317
;4317:	bulletThickn = MAX_9MM_BULLET_THICKN;
ADDRLP4 172
CNSTF4 1092616192
ASGNF4
line 4318
;4318:	bulletHits = MAX_BULLET_HITS;  
ADDRLP4 216
CNSTI4 3
ASGNI4
line 4327
;4319:
;4320:	// BLUTENGEL:
;4321:	// modified whole code for calculating weapon recoil
;4322:	
;4323:	// BLUTENGEL:
;4324:	//  SYNCHRONIZE THIS CODE ALWAYS WITH THE CODE IN g_weapons.c:
;4325:	
;4326:	// snipers
;4327:	if (SEALS_IS_SNIPER(cg.predictedPlayerState.weapon)) {
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 18
EQI4 $2719
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 24
EQI4 $2719
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 17
NEI4 $2710
LABELV $2719
line 4328
;4328:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2720
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2720
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2730
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2730
address $2724
address $2725
address $2726
address $2727
address $2728
address $2729
code
LABELV $2724
line 4330
;4329:			case SEALS_STANDING:
;4330:				r = SEALS_SNIPER_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4331
;4331:				u = SEALS_SNIPER_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4332
;4332:				break;
ADDRGP4 $2711
JUMPV
LABELV $2725
line 4334
;4333:			case SEALS_CROUCHING:
;4334:				r = SEALS_SNIPER_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1077936128
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
CNSTF4 1073741824
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4335
;4335:				u = SEALS_SNIPER_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1077936128
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
CNSTF4 1073741824
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4336
;4336:				break;
ADDRGP4 $2711
JUMPV
LABELV $2726
line 4338
;4337:			case SEALS_WALKING:
;4338:				r = SEALS_SNIPER_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1077936128
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
CNSTF4 1073741824
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4339
;4339:				u = SEALS_SNIPER_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1077936128
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
CNSTF4 1073741824
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4340
;4340:				break;
ADDRGP4 $2711
JUMPV
LABELV $2727
line 4342
;4341:			case SEALS_RUNNING:
;4342:				r = SEALS_SNIPER_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1082130432
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
CNSTF4 1073741824
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4343
;4343:				u = SEALS_SNIPER_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1082130432
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
CNSTF4 1073741824
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4344
;4344:				break;
ADDRGP4 $2711
JUMPV
LABELV $2728
line 4346
;4345:			case SEALS_SPRINTING:
;4346:				r = SEALS_SNIPER_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
CNSTF4 1073741824
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4347
;4347:				u = SEALS_SNIPER_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
CNSTF4 1073741824
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4348
;4348:				break;
ADDRGP4 $2711
JUMPV
LABELV $2729
line 4350
;4349:			case SEALS_JUMPING:
;4350:				r = SEALS_SNIPER_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
CNSTF4 1073741824
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4351
;4351:				u = SEALS_SNIPER_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
CNSTF4 1073741824
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4352
;4352:				break;
ADDRGP4 $2711
JUMPV
LABELV $2720
line 4354
;4353:			default:
;4354:				r = SEALS_SNIPER_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
CNSTF4 1073741824
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4355
;4355:				u = SEALS_SNIPER_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SNIPER_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
CNSTF4 1073741824
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4356
;4356:				break;
line 4359
;4357:		}
;4358:	// rifles
;4359:	} else if (SEALS_IS_RIFLE(cg.predictedPlayerState.weapon)) {
ADDRGP4 $2711
JUMPV
LABELV $2710
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 15
EQI4 $2740
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 16
EQI4 $2740
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 22
NEI4 $2731
LABELV $2740
line 4360
;4360:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2741
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2741
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2751
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2751
address $2745
address $2746
address $2747
address $2748
address $2749
address $2750
code
LABELV $2745
line 4362
;4361:			case SEALS_STANDING:
;4362:				r = SEALS_RIFLE_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1045220557
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
CNSTF4 1073741824
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4363
;4363:				u = SEALS_RIFLE_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1045220557
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
CNSTF4 1073741824
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4364
;4364:				break;
ADDRGP4 $2732
JUMPV
LABELV $2746
line 4366
;4365:			case SEALS_CROUCHING:
;4366:				r = SEALS_RIFLE_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1058642330
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
CNSTF4 1073741824
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4367
;4367:				u = SEALS_RIFLE_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1058642330
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
CNSTF4 1073741824
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4368
;4368:				break;
ADDRGP4 $2732
JUMPV
LABELV $2747
line 4370
;4369:			case SEALS_WALKING:
;4370:				r = SEALS_RIFLE_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1067030938
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
CNSTF4 1073741824
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4371
;4371:				u = SEALS_RIFLE_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1067030938
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
CNSTF4 1073741824
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4372
;4372:				break;
ADDRGP4 $2732
JUMPV
LABELV $2748
line 4374
;4373:			case SEALS_RUNNING:
;4374:				r = SEALS_RIFLE_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1075419546
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
CNSTF4 1073741824
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4375
;4375:				u = SEALS_RIFLE_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1075419546
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
CNSTF4 1073741824
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4376
;4376:				break;
ADDRGP4 $2732
JUMPV
LABELV $2749
line 4378
;4377:			case SEALS_SPRINTING:
;4378:				r = SEALS_RIFLE_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1082130432
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
CNSTF4 1073741824
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4379
;4379:				u = SEALS_RIFLE_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1082130432
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
CNSTF4 1073741824
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4380
;4380:				break;
ADDRGP4 $2732
JUMPV
LABELV $2750
line 4382
;4381:			case SEALS_JUMPING:
;4382:				r = SEALS_RIFLE_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
CNSTF4 1073741824
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4383
;4383:				u = SEALS_RIFLE_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
CNSTF4 1073741824
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4384
;4384:				break;
ADDRGP4 $2732
JUMPV
LABELV $2741
line 4386
;4385:			default:
;4386:				r = SEALS_RIFLE_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
CNSTF4 1073741824
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4387
;4387:				u = SEALS_RIFLE_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_RIFLE_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
CNSTF4 1073741824
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4388
;4388:				break;
line 4391
;4389:		}
;4390:	// smgs
;4391:	} else if (SEALS_IS_SMG(cg.predictedPlayerState.weapon)) {
ADDRGP4 $2732
JUMPV
LABELV $2731
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 13
EQI4 $2761
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 14
EQI4 $2761
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 12
NEI4 $2752
LABELV $2761
line 4392
;4392:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2762
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2762
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2772
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2772
address $2766
address $2767
address $2768
address $2769
address $2770
address $2771
code
LABELV $2766
line 4394
;4393:			case SEALS_STANDING:
;4394:				r = SEALS_SMG_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1061997773
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
CNSTF4 1073741824
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4395
;4395:				u = SEALS_SMG_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1061997773
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
CNSTF4 1073741824
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4396
;4396:				break;
ADDRGP4 $2753
JUMPV
LABELV $2767
line 4398
;4397:			case SEALS_CROUCHING:
;4398:				r = SEALS_SMG_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1067030938
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
CNSTF4 1073741824
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4399
;4399:				u = SEALS_SMG_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1067030938
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
CNSTF4 1073741824
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4400
;4400:				break;
ADDRGP4 $2753
JUMPV
LABELV $2768
line 4402
;4401:			case SEALS_WALKING:
;4402:				r = SEALS_SMG_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1075419546
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
CNSTF4 1073741824
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4403
;4403:				u = SEALS_SMG_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1075419546
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
CNSTF4 1073741824
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4404
;4404:				break;
ADDRGP4 $2753
JUMPV
LABELV $2769
line 4406
;4405:			case SEALS_RUNNING:
;4406:				r = SEALS_SMG_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1077936128
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
CNSTF4 1073741824
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4407
;4407:				u = SEALS_SMG_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1077936128
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
CNSTF4 1073741824
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4408
;4408:				break;
ADDRGP4 $2753
JUMPV
LABELV $2770
line 4410
;4409:			case SEALS_SPRINTING:
;4410:				r = SEALS_SMG_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1082130432
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
CNSTF4 1073741824
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4411
;4411:				u = SEALS_SMG_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1082130432
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
CNSTF4 1073741824
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4412
;4412:				break;
ADDRGP4 $2753
JUMPV
LABELV $2771
line 4414
;4413:			case SEALS_JUMPING:
;4414:				r = SEALS_SMG_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
CNSTF4 1073741824
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4415
;4415:				u = SEALS_SMG_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
CNSTF4 1073741824
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4416
;4416:				break;
ADDRGP4 $2753
JUMPV
LABELV $2762
line 4418
;4417:			default:
;4418:				r = SEALS_SMG_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
CNSTF4 1073741824
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4419
;4419:				u = SEALS_SMG_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SMG_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
CNSTF4 1073741824
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4420
;4420:				break;
line 4423
;4421:		}
;4422:	// pistols
;4423:	} else if (SEALS_IS_PISTOL(cg.predictedPlayerState.weapon)) {
ADDRGP4 $2753
JUMPV
LABELV $2752
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 9
EQI4 $2791
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
EQI4 $2791
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 6
EQI4 $2791
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 8
EQI4 $2791
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 11
EQI4 $2791
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 10
NEI4 $2773
LABELV $2791
line 4424
;4424:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2792
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2792
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2802
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2802
address $2796
address $2797
address $2798
address $2799
address $2800
address $2801
code
LABELV $2796
line 4426
;4425:			case SEALS_STANDING:
;4426:				r = SEALS_PISTOL_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1058642330
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
CNSTF4 1073741824
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4427
;4427:				u = SEALS_PISTOL_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1058642330
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
CNSTF4 1073741824
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4428
;4428:				break;
ADDRGP4 $2774
JUMPV
LABELV $2797
line 4430
;4429:			case SEALS_CROUCHING:
;4430:				r = SEALS_PISTOL_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1067030938
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
CNSTF4 1073741824
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4431
;4431:				u = SEALS_PISTOL_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1067030938
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
CNSTF4 1073741824
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4432
;4432:				break;
ADDRGP4 $2774
JUMPV
LABELV $2798
line 4434
;4433:			case SEALS_WALKING:
;4434:				r = SEALS_PISTOL_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1068708659
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
CNSTF4 1073741824
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4435
;4435:				u = SEALS_PISTOL_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1068708659
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
CNSTF4 1073741824
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4436
;4436:				break;
ADDRGP4 $2774
JUMPV
LABELV $2799
line 4438
;4437:			case SEALS_RUNNING:
;4438:				r = SEALS_PISTOL_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4439
;4439:				u = SEALS_PISTOL_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4440
;4440:				break;
ADDRGP4 $2774
JUMPV
LABELV $2800
line 4442
;4441:			case SEALS_SPRINTING:
;4442:				r = SEALS_PISTOL_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1077936128
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
CNSTF4 1073741824
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4443
;4443:				u = SEALS_PISTOL_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1077936128
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
CNSTF4 1073741824
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4444
;4444:				break;
ADDRGP4 $2774
JUMPV
LABELV $2801
line 4446
;4445:			case SEALS_JUMPING:
;4446:				r = SEALS_PISTOL_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1077936128
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
CNSTF4 1073741824
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4447
;4447:				u = SEALS_PISTOL_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1077936128
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
CNSTF4 1073741824
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4448
;4448:				break;
ADDRGP4 $2774
JUMPV
LABELV $2792
line 4450
;4449:			default:
;4450:				r = SEALS_PISTOL_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1082130432
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
CNSTF4 1073741824
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4451
;4451:				u = SEALS_PISTOL_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_PISTOL_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1082130432
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
CNSTF4 1073741824
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4452
;4452:				break;
line 4455
;4453:		}
;4454:	// shotguns
;4455:	} else if (SEALS_IS_SHOTGUN(cg.predictedPlayerState.weapon)) {
ADDRGP4 $2774
JUMPV
LABELV $2773
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 19
EQI4 $2812
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 20
EQI4 $2812
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 21
NEI4 $2803
LABELV $2812
line 4456
;4456:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2813
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2813
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2823
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2823
address $2817
address $2818
address $2819
address $2820
address $2821
address $2822
code
LABELV $2817
line 4458
;4457:			case SEALS_STANDING:
;4458:				r = SEALS_SHOTGUN_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4459
;4459:				u = SEALS_SHOTGUN_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4460
;4460:				break;
ADDRGP4 $2804
JUMPV
LABELV $2818
line 4462
;4461:			case SEALS_CROUCHING:
;4462:				r = SEALS_SHOTGUN_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4463
;4463:				u = SEALS_SHOTGUN_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4464
;4464:				break;
ADDRGP4 $2804
JUMPV
LABELV $2819
line 4466
;4465:			case SEALS_WALKING:
;4466:				r = SEALS_SHOTGUN_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4467
;4467:				u = SEALS_SHOTGUN_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4468
;4468:				break;
ADDRGP4 $2804
JUMPV
LABELV $2820
line 4470
;4469:			case SEALS_RUNNING:
;4470:				r = SEALS_SHOTGUN_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4471
;4471:				u = SEALS_SHOTGUN_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4472
;4472:				break;
ADDRGP4 $2804
JUMPV
LABELV $2821
line 4474
;4473:			case SEALS_SPRINTING:
;4474:				r = SEALS_SHOTGUN_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4475
;4475:				u = SEALS_SHOTGUN_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4476
;4476:				break;
ADDRGP4 $2804
JUMPV
LABELV $2822
line 4478
;4477:			case SEALS_JUMPING:
;4478:				r = SEALS_SHOTGUN_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4479
;4479:				u = SEALS_SHOTGUN_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4480
;4480:				break;
ADDRGP4 $2804
JUMPV
LABELV $2813
line 4482
;4481:			default:
;4482:				r = SEALS_SHOTGUN_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1073741824
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4483
;4483:				u = SEALS_SHOTGUN_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_SHOTGUN_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1073741824
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4484
;4484:				break;
line 4487
;4485:		}
;4486:	// mgs
;4487:	} else if (SEALS_IS_MG(cg.predictedPlayerState.weapon)) {
ADDRGP4 $2804
JUMPV
LABELV $2803
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 23
NEI4 $2824
line 4488
;4488:		switch(BG_CalcSpeed(cg.predictedPlayerState)) {
ADDRLP4 264
ADDRGP4 cg+107636
INDIRB
ASGNB 468
ADDRLP4 264
ARGP4
ADDRLP4 732
ADDRGP4 BG_CalcSpeed
CALLI4
ASGNI4
ADDRLP4 260
ADDRLP4 732
INDIRI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
LTI4 $2828
ADDRLP4 260
INDIRI4
CNSTI4 5
GTI4 $2828
ADDRLP4 260
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2838
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2838
address $2832
address $2833
address $2834
address $2835
address $2836
address $2837
code
LABELV $2832
line 4490
;4489:			case SEALS_STANDING:
;4490:				r = SEALS_MG_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 740
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 744
CNSTF4 1050253722
ASGNF4
ADDRLP4 212
ADDRLP4 744
INDIRF4
ADDRLP4 744
INDIRF4
CNSTF4 1073741824
ADDRLP4 740
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4491
;4491:				u = SEALS_MG_DEFLECTION_STANDING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_STANDING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 748
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 752
CNSTF4 1050253722
ASGNF4
ADDRLP4 148
ADDRLP4 752
INDIRF4
ADDRLP4 752
INDIRF4
CNSTF4 1073741824
ADDRLP4 748
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4492
;4492:				break;
ADDRGP4 $2829
JUMPV
LABELV $2833
line 4494
;4493:			case SEALS_CROUCHING:
;4494:				r = SEALS_MG_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 756
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 760
CNSTF4 1065353216
ASGNF4
ADDRLP4 212
ADDRLP4 760
INDIRF4
ADDRLP4 760
INDIRF4
CNSTF4 1073741824
ADDRLP4 756
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4495
;4495:				u = SEALS_MG_DEFLECTION_CROUCHING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_CROUCHING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 764
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 768
CNSTF4 1065353216
ASGNF4
ADDRLP4 148
ADDRLP4 768
INDIRF4
ADDRLP4 768
INDIRF4
CNSTF4 1073741824
ADDRLP4 764
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4496
;4496:				break;
ADDRGP4 $2829
JUMPV
LABELV $2834
line 4498
;4497:			case SEALS_WALKING:
;4498:				r = SEALS_MG_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 772
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 776
CNSTF4 1075838976
ASGNF4
ADDRLP4 212
ADDRLP4 776
INDIRF4
ADDRLP4 776
INDIRF4
CNSTF4 1073741824
ADDRLP4 772
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4499
;4499:				u = SEALS_MG_DEFLECTION_WALKING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_WALKING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 780
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 784
CNSTF4 1075838976
ASGNF4
ADDRLP4 148
ADDRLP4 784
INDIRF4
ADDRLP4 784
INDIRF4
CNSTF4 1073741824
ADDRLP4 780
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4500
;4500:				break;
ADDRGP4 $2829
JUMPV
LABELV $2835
line 4502
;4501:			case SEALS_RUNNING:
;4502:				r = SEALS_MG_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 788
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 792
CNSTF4 1082130432
ASGNF4
ADDRLP4 212
ADDRLP4 792
INDIRF4
ADDRLP4 792
INDIRF4
CNSTF4 1073741824
ADDRLP4 788
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4503
;4503:				u = SEALS_MG_DEFLECTION_RUNNING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_RUNNING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 796
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 800
CNSTF4 1082130432
ASGNF4
ADDRLP4 148
ADDRLP4 800
INDIRF4
ADDRLP4 800
INDIRF4
CNSTF4 1073741824
ADDRLP4 796
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4504
;4504:				break;
ADDRGP4 $2829
JUMPV
LABELV $2836
line 4506
;4505:			case SEALS_SPRINTING:
;4506:				r = SEALS_MG_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 804
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 808
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 808
INDIRF4
ADDRLP4 808
INDIRF4
CNSTF4 1073741824
ADDRLP4 804
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4507
;4507:				u = SEALS_MG_DEFLECTION_SPRINTING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_SPRINTING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 812
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 816
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 816
INDIRF4
ADDRLP4 816
INDIRF4
CNSTF4 1073741824
ADDRLP4 812
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4508
;4508:				break;
ADDRGP4 $2829
JUMPV
LABELV $2837
line 4510
;4509:			case SEALS_JUMPING:
;4510:				r = SEALS_MG_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 820
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 824
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 824
INDIRF4
ADDRLP4 824
INDIRF4
CNSTF4 1073741824
ADDRLP4 820
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4511
;4511:				u = SEALS_MG_DEFLECTION_JUMPING - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_JUMPING;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 828
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 832
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 832
INDIRF4
ADDRLP4 832
INDIRF4
CNSTF4 1073741824
ADDRLP4 828
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4512
;4512:				break;
ADDRGP4 $2829
JUMPV
LABELV $2828
line 4514
;4513:			default:
;4514:				r = SEALS_MG_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 836
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 840
CNSTF4 1084227584
ASGNF4
ADDRLP4 212
ADDRLP4 840
INDIRF4
ADDRLP4 840
INDIRF4
CNSTF4 1073741824
ADDRLP4 836
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4515
;4515:				u = SEALS_MG_DEFLECTION_OTHER - 2.0 * Q_random(seed) * SEALS_MG_DEFLECTION_OTHER;
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 844
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 848
CNSTF4 1084227584
ASGNF4
ADDRLP4 148
ADDRLP4 848
INDIRF4
ADDRLP4 848
INDIRF4
CNSTF4 1073741824
ADDRLP4 844
INDIRF4
MULF4
MULF4
SUBF4
ASGNF4
line 4516
;4516:				break;
LABELV $2829
line 4518
;4517:		}
;4518:	}
LABELV $2824
LABELV $2804
LABELV $2774
LABELV $2753
LABELV $2732
LABELV $2711
line 4523
;4519:
;4520:	//CG_Printf("client: %f %f\n", Q_random(seed), Q_random(seed));
;4521:
;4522:	// modify the according to the accuracy
;4523:	if (! SEALS_IS_SHOTGUN(cg.predictedPlayerState.weapon) ) {
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 19
EQI4 $2839
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 20
EQI4 $2839
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 21
EQI4 $2839
line 4524
;4524:		float acc = cg.snap->ps.persistant[PERS_ACCURACY];
ADDRLP4 260
ADDRGP4 cg+36
INDIRP4
CNSTI4 328
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 4526
;4525:
;4526:		r *=  SEALS_ACCURACY_MOD + (1.0 - SEALS_ACCURACY_MOD) * (1.0 - (acc-1.0)/9.0);
ADDRLP4 264
CNSTF4 1065353216
ASGNF4
ADDRLP4 212
ADDRLP4 212
INDIRF4
CNSTF4 1050253722
ADDRLP4 264
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 264
INDIRF4
SUBF4
CNSTF4 1091567616
DIVF4
SUBF4
MULF4
CNSTF4 1060320051
ADDF4
MULF4
ASGNF4
line 4527
;4527:		u *=  SEALS_ACCURACY_MOD + (1.0 - SEALS_ACCURACY_MOD) * (1.0 - (acc-1.0)/9.0);
ADDRLP4 268
CNSTF4 1065353216
ASGNF4
ADDRLP4 148
ADDRLP4 148
INDIRF4
CNSTF4 1050253722
ADDRLP4 268
INDIRF4
ADDRLP4 260
INDIRF4
ADDRLP4 268
INDIRF4
SUBF4
CNSTF4 1091567616
DIVF4
SUBF4
MULF4
CNSTF4 1060320051
ADDF4
MULF4
ASGNF4
line 4528
;4528:	}	
LABELV $2839
line 4531
;4529:	
;4530:	// modify if the weapon is in scope mode
;4531:	if (BG_IsZooming( cg.predictedPlayerState.stats[STAT_WEAPONMODE])) {
ADDRGP4 cg+107636+184+36
INDIRI4
ARGI4
ADDRLP4 260
ADDRGP4 BG_IsZooming
CALLI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
EQI4 $2848
line 4532
;4532:		r *= SEALS_WEAP_SCOPE_MOD;
ADDRLP4 212
CNSTF4 1017370378
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4533
;4533:		u *= SEALS_WEAP_SCOPE_MOD;
ADDRLP4 148
CNSTF4 1017370378
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4534
;4534:	}
LABELV $2848
line 4537
;4535:
;4536:	// modify if the weapon uses an attached laser and is a smg
;4537:	if ( BG_HasLaser(cg.predictedPlayerState.stats[STAT_WEAPONMODE]) && 
ADDRGP4 cg+107636+184+36
INDIRI4
ARGI4
ADDRLP4 264
ADDRGP4 BG_HasLaser
CALLI4
ASGNI4
ADDRLP4 264
INDIRI4
CNSTI4 0
EQI4 $2853
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 13
EQI4 $2868
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 14
EQI4 $2868
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 12
NEI4 $2853
LABELV $2868
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2853
line 4539
;4538:			 SEALS_IS_SMG(cg.predictedPlayerState.weapon) &&
;4539:			 ( cg.predictedPlayerState.stats[STAT_WEAPONMODE] & (1 << WM_LACTIVE) ) ) {
line 4540
;4540:		r *= SEALS_WEAP_LASER_MOD;
ADDRLP4 212
CNSTF4 1058642330
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4541
;4541:		u *= SEALS_WEAP_LASER_MOD;
ADDRLP4 148
CNSTF4 1058642330
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4542
;4542:	}
LABELV $2853
line 4545
;4543:
;4544:	// modify if the weapon uses an attached laser and is a pistol
;4545:	if ( BG_HasLaser(cg.predictedPlayerState.stats[STAT_WEAPONMODE]) && 
ADDRGP4 cg+107636+184+36
INDIRI4
ARGI4
ADDRLP4 268
ADDRGP4 BG_HasLaser
CALLI4
ASGNI4
ADDRLP4 268
INDIRI4
CNSTI4 0
EQI4 $2869
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 9
EQI4 $2893
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
EQI4 $2893
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 6
EQI4 $2893
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 8
EQI4 $2893
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 11
EQI4 $2893
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 10
NEI4 $2869
LABELV $2893
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2869
line 4547
;4546:			 SEALS_IS_PISTOL(cg.predictedPlayerState.weapon) &&
;4547:			 ( cg.predictedPlayerState.stats[STAT_WEAPONMODE] & (1 << WM_LACTIVE) ) ) {
line 4548
;4548:		r *= SEALS_WEAP_PISTOLLASER_MOD;
ADDRLP4 212
CNSTF4 1061997773
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4549
;4549:		u *= SEALS_WEAP_PISTOLLASER_MOD;
ADDRLP4 148
CNSTF4 1061997773
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4550
;4550:	}
LABELV $2869
line 4553
;4551:
;4552:	// modify if the weapon is a pdw in secondary mode
;4553:	if ( (cg.predictedPlayerState.stats[STAT_WEAPONMODE] & (1 << WM_WEAPONMODE2)) && (cg.predictedPlayerState.weapon == WP_PDW) ) {
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $2894
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 12
NEI4 $2894
line 4554
;4554:		r *= SEALS_WEAP_PDW_MOD;
ADDRLP4 212
CNSTF4 1063675494
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4555
;4555:		u *= SEALS_WEAP_PDW_MOD;
ADDRLP4 148
CNSTF4 1063675494
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4556
;4556:	}
LABELV $2894
line 4559
;4557:
;4558:	// modify if the weapon is shooted crouched
;4559:	if ( (cg.predictedPlayerState.viewheight == CROUCH_VIEWHEIGHT) &&
ADDRLP4 272
CNSTI4 12
ASGNI4
ADDRGP4 cg+107636+164
INDIRI4
ADDRLP4 272
INDIRI4
NEI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 19
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 20
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 21
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 9
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 7
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 6
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 8
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 11
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 10
EQI4 $2901
ADDRGP4 cg+107636+144
INDIRI4
ADDRLP4 272
INDIRI4
EQI4 $2901
line 4562
;4560:			 !SEALS_IS_SHOTGUN(cg.predictedPlayerState.weapon) &&
;4561:			 !SEALS_IS_PISTOL(cg.predictedPlayerState.weapon) &&
;4562:			 !(cg.predictedPlayerState.weapon == WP_PDW) ) {
line 4563
;4563:		r *= SEALS_WEAP_CROUCH_MOD;
ADDRLP4 212
CNSTF4 1060320051
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4564
;4564:		u *= SEALS_WEAP_CROUCH_MOD;
ADDRLP4 148
CNSTF4 1060320051
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4565
;4565:	}
LABELV $2901
line 4568
;4566:
;4567:	// modifiy if the weapon has a duckbill
;4568:	if ( SEALS_IS_SHOTGUN(cg.predictedPlayerState.weapon) && ( cg.predictedPlayerState.stats[STAT_WEAPONMODE] & ( 1 << WM_DUCKBILL ) ) ) { 
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 19
EQI4 $2937
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 20
EQI4 $2937
ADDRGP4 cg+107636+144
INDIRI4
CNSTI4 21
NEI4 $2925
LABELV $2937
ADDRGP4 cg+107636+184+36
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $2925
line 4569
;4569:      r *= SEALS_DUCKBILL_HOR_MOD;
ADDRLP4 212
CNSTF4 1069547520
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 4570
;4570:      u *= SEALS_DUCKBILL_VER_MOD;
ADDRLP4 148
CNSTF4 1050253722
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 4571
;4571:    }
LABELV $2925
line 4576
;4572:
;4573:
;4574:
;4575:	// copy viewangles to end
;4576:	VectorCopy(cg.predictedPlayerState.viewangles, end);
ADDRLP4 56
ADDRGP4 cg+107636+152
INDIRB
ASGNB 12
line 4578
;4577:	// modify viewangles if recoil should be added
;4578:	if ( r || u ) {
ADDRLP4 276
CNSTF4 0
ASGNF4
ADDRLP4 212
INDIRF4
ADDRLP4 276
INDIRF4
NEF4 $2942
ADDRLP4 148
INDIRF4
ADDRLP4 276
INDIRF4
EQF4 $2940
LABELV $2942
line 4579
;4579:		end[YAW] += r;
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 212
INDIRF4
ADDF4
ASGNF4
line 4580
;4580:		end[PITCH] += u;
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 148
INDIRF4
ADDF4
ASGNF4
line 4581
;4581:	}
LABELV $2940
line 4583
;4582:
;4583:	AngleVectors( end, forward, right, up );
ADDRLP4 56
ARGP4
ADDRLP4 160
ARGP4
ADDRLP4 176
ARGP4
ADDRLP4 188
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 4585
;4584:
;4585: 	VectorCopy( cg.predictedPlayerState.origin, start );
ADDRLP4 220
ADDRGP4 cg+107636+20
INDIRB
ASGNB 12
line 4586
;4586: 	start[2] += cg.predictedPlayerState.viewheight;
ADDRLP4 220+8
ADDRLP4 220+8
INDIRF4
ADDRGP4 cg+107636+164
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 4588
;4587:
;4588:	VectorMA (start, max_range, forward, end);
ADDRLP4 56
ADDRLP4 220
INDIRF4
ADDRLP4 160
INDIRF4
ADDRLP4 232
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 220+4
INDIRF4
ADDRLP4 160+4
INDIRF4
ADDRLP4 232
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 220+8
INDIRF4
ADDRLP4 160+8
INDIRF4
ADDRLP4 232
INDIRF4
MULF4
ADDF4
ASGNF4
line 4590
;4589:	
;4590: 	VectorCopy ( start,tracefrom);
ADDRLP4 136
ADDRLP4 220
INDIRB
ASGNB 12
line 4594
;4591:
;4592://	CG_Printf("Lead: Predicting bullet seed: %f\n", Q_crandom( seed ) );
;4593:
;4594:	firstshot = qtrue;
ADDRGP4 firstshot
CNSTI4 1
ASGNI4
LABELV $2955
line 4596
;4595:
;4596:	do {
line 4599
;4597:		//savedent = 0;
;4598:
;4599:		CG_Trace (&trace, tracefrom, NULL, NULL, end, ignoreent, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRLP4 136
ARGP4
ADDRLP4 284
CNSTP4 0
ASGNP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 204
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4600
;4600:		if ( trace.entityNum >= ENTITYNUM_MAX_NORMAL ) 
ADDRLP4 0+52
INDIRI4
CNSTI4 1022
LTI4 $2958
line 4601
;4601:		{
line 4602
;4602:			if (trace.surfaceFlags & SURF_SKY)
ADDRLP4 0+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $2961
line 4603
;4603:				break; 
ADDRGP4 $2957
JUMPV
LABELV $2961
line 4604
;4604:			if (trace.allsolid || trace.startsolid)// it should start free
ADDRLP4 288
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 288
INDIRI4
NEI4 $2967
ADDRLP4 0+4
INDIRI4
ADDRLP4 288
INDIRI4
EQI4 $2964
LABELV $2967
line 4605
;4605:				break;
ADDRGP4 $2957
JUMPV
LABELV $2964
line 4606
;4606:			if (wallhits >= bulletHits)
ADDRLP4 208
INDIRI4
ADDRLP4 216
INDIRI4
LTI4 $2968
line 4607
;4607:				break;
ADDRGP4 $2957
JUMPV
LABELV $2968
line 4609
;4608:			// gone?
;4609:			if ( trace.fraction >= 1 )
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
LTF4 $2970
line 4610
;4610:				break;
ADDRGP4 $2957
JUMPV
LABELV $2970
line 4614
;4611:
;4612://			CG_Printf("Lead: Render FX at: %s\n", vtos(trace.endpos) );
;4613:			// hit! now render the effect
;4614:			CG_Bullet( trace.endpos,
ADDRLP4 0+44
INDIRI4
ARGI4
ADDRLP4 292
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 0+12
ARGP4
ADDRLP4 136
ARGP4
ADDRGP4 cg+107636+140
INDIRI4
ARGI4
ADDRLP4 0+24
ARGP4
ADDRLP4 296
CNSTI4 0
ASGNI4
ADDRLP4 296
INDIRI4
ARGI4
CNSTI4 -1
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 296
INDIRI4
ARGI4
ADDRLP4 292
INDIRI4
ARGI4
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRGP4 CG_Bullet
CALLV
pop
line 4623
;4615:					 tracefrom,
;4616:					 cg.predictedPlayerState.clientNum,
;4617:					 trace.plane.normal,
;4618:					 qfalse,-1,10,0,
;4619:					 NS_BulletHoleTypeForSurface( trace.surfaceFlags ),
;4620:					 cg.predictedPlayerState.weapon );
;4621:
;4622:			// only 9mm bounces off the wall, and not every projectile
;4623:			if ( trace.surfaceFlags & SURF_METALSTEPS && 
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2980
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 300
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 0
NEI4 $2980
ADDRLP4 152
INDIRI4
CNSTI4 5
EQI4 $2986
ADDRLP4 152
INDIRI4
CNSTI4 2
EQI4 $2986
ADDRLP4 152
INDIRI4
CNSTI4 3
NEI4 $2980
LABELV $2986
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 308
INDIRF4
CNSTF4 1056964608
GEF4 $2980
line 4626
;4624:				!BG_IsShotgun( cg.predictedPlayerState.weapon ) &&
;4625:				( caliber == AM_SMG || caliber == AM_LIGHT_PISTOL || caliber == AM_MEDIUM_PISTOL )  && Q_crandom( seed ) < 0.5f )
;4626:			{ 
line 4627
;4627:				VectorCopy( trace.endpos, temp);
ADDRLP4 124
ADDRLP4 0+12
INDIRB
ASGNB 12
line 4629
;4628:
;4629:				CG_BounceProjectile( tracefrom, temp,  trace.plane.normal, end );
ADDRLP4 136
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 56
ARGP4
ADDRGP4 CG_BounceProjectile
CALLV
pop
line 4630
;4630:				VectorCopy( temp, tracefrom );
ADDRLP4 136
ADDRLP4 124
INDIRB
ASGNB 12
line 4631
;4631:				VectorSubtract( end, temp, forward );
ADDRLP4 160
ADDRLP4 56
INDIRF4
ADDRLP4 124
INDIRF4
SUBF4
ASGNF4
ADDRLP4 160+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 124+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 160+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 124+8
INDIRF4
SUBF4
ASGNF4
line 4632
;4632:				VectorNormalize(forward);
ADDRLP4 160
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4634
;4633:				// now you can hit yourself with your projectile
;4634:				ignoreent = ENTITYNUM_NONE;					
ADDRLP4 204
CNSTI4 1023
ASGNI4
line 4635
;4635:				wallhits++;  
ADDRLP4 208
ADDRLP4 208
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4638
;4636:				
;4637:				// after rebounced... break, this won't go through metal then...
;4638:				continue; 
ADDRGP4 $2956
JUMPV
LABELV $2980
line 4642
;4639:			} 
;4640:  
;4641:			// 9mm only goes through 'soft' materials like dirt/snow/wood etc.
;4642:			if ( BG_IsShotgun( cg.predictedPlayerState.weapon ) )
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 312
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 0
EQI4 $2995
line 4643
;4643:				break;
ADDRGP4 $2957
JUMPV
LABELV $2995
line 4644
;4644:			if (  ( caliber == AM_SMG || caliber == AM_LIGHT_PISTOL || caliber == AM_MEDIUM_PISTOL ) && !(trace.surfaceFlags & SURF_WOODSTEPS) && !(trace.surfaceFlags & SURF_SOFTSTEPS) && !(trace.surfaceFlags & SURF_GLASS) 
ADDRLP4 152
INDIRI4
CNSTI4 5
EQI4 $3008
ADDRLP4 152
INDIRI4
CNSTI4 2
EQI4 $3008
ADDRLP4 152
INDIRI4
CNSTI4 3
NEI4 $2999
LABELV $3008
ADDRLP4 320
CNSTI4 0
ASGNI4
ADDRLP4 0+44
INDIRI4
CNSTI4 1048576
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
ADDRLP4 0+44
INDIRI4
CNSTI4 33554432
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
ADDRLP4 0+44
INDIRI4
CNSTI4 16777216
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
ADDRLP4 0+44
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
ADDRLP4 0+44
INDIRI4
CNSTI4 4194304
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
ADDRLP4 0+44
INDIRI4
CNSTI4 8388608
BANDI4
ADDRLP4 320
INDIRI4
NEI4 $2999
line 4646
;4645:				 && !(trace.surfaceFlags & SURF_DIRTSTEPS) && !(trace.surfaceFlags & SURF_SNOWSTEPS) && !(trace.surfaceFlags & SURF_SANDSTEPS) )
;4646:				 break;
ADDRGP4 $2957
JUMPV
LABELV $2999
line 4653
;4647:  
;4648:			/*
;4649:			============
;4650:			Break through wall ~ get break value
;4651:			============
;4652:			*/
;4653:			bulletThickn = BG_LeadGetBreakValueForSurface( &trace );// ;
ADDRLP4 0
ARGP4
ADDRLP4 324
ADDRGP4 BG_LeadGetBreakValueForSurface
CALLF4
ASGNF4
ADDRLP4 172
ADDRLP4 324
INDIRF4
ASGNF4
line 4655
;4654:
;4655:			switch (cg.predictedPlayerState.weapon) 
ADDRLP4 328
ADDRGP4 cg+107636+144
INDIRI4
ASGNI4
ADDRLP4 328
INDIRI4
CNSTI4 17
LTI4 $3010
ADDRLP4 328
INDIRI4
CNSTI4 24
GTI4 $3010
ADDRLP4 328
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $3015-68
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $3015
address $3014
address $3013
address $3010
address $3010
address $3010
address $3014
address $3010
address $3014
code
line 4656
;4656:			{
LABELV $3013
line 4658
;4657:				case WP_MACMILLAN:
;4658:					bulletThickn *= 1.75; // uber tuff :>
ADDRLP4 172
CNSTF4 1071644672
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
line 4659
;4659:					break;
ADDRGP4 $3010
JUMPV
LABELV $3014
line 4663
;4660:				case WP_M14:
;4661:				case WP_PSG1:
;4662:				case WP_SL8SD:
;4663:					bulletThickn *= 1.5; // really tuff 
ADDRLP4 172
CNSTF4 1069547520
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
line 4664
;4664:					break;
line 4666
;4665:				default:
;4666:					break;
LABELV $3010
line 4668
;4667:			}
;4668:			VectorMA (trace.endpos, bulletThickn, forward, temp);   
ADDRLP4 124
ADDRLP4 0+12
INDIRF4
ADDRLP4 160
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 0+12+4
INDIRF4
ADDRLP4 160+4
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 0+12+8
INDIRF4
ADDRLP4 160+8
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
line 4671
;4669:
;4670:			// stuck in a wall?
;4671:			if ( CG_PointContents( temp, -1 ) & CONTENTS_SOLID )
ADDRLP4 124
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 336
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 336
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $3026
line 4672
;4672:				break;
ADDRGP4 $2957
JUMPV
LABELV $3026
line 4675
;4673:
;4674:			// get exit position...
;4675:			CG_Trace (&trace2, temp, NULL, NULL, trace.endpos, ignoreent, MASK_SOLID );
ADDRLP4 68
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 340
CNSTP4 0
ASGNP4
ADDRLP4 340
INDIRP4
ARGP4
ADDRLP4 340
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRLP4 204
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4678
;4676:			
;4677:			// get the point where the bullet leaves the wall
;4678:			VectorCopy (trace2.endpos, tracefrom);
ADDRLP4 136
ADDRLP4 68+12
INDIRB
ASGNB 12
line 4681
;4679:
;4680:			// we actually found a plane that might be a window
;4681:			if(trace2.entityNum < ENTITYNUM_MAX_NORMAL)
ADDRLP4 68+52
INDIRI4
CNSTI4 1022
GEI4 $3030
line 4682
;4682:			{
line 4684
;4683:				// do a trace back again, but this time ignore the entity.
;4684:				CG_Trace (&trace2, temp, NULL, NULL, trace.endpos, trace2.entityNum, MASK_SOLID );
ADDRLP4 68
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 344
CNSTP4 0
ASGNP4
ADDRLP4 344
INDIRP4
ARGP4
ADDRLP4 344
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRLP4 68+52
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4687
;4685:			
;4686:				// get the point where the bullet leaves the wall
;4687:				VectorCopy (trace2.endpos, tracefrom);	
ADDRLP4 136
ADDRLP4 68+12
INDIRB
ASGNB 12
line 4688
;4688:			}
LABELV $3030
line 4691
;4689:
;4690:			// deflect the bullet
;4691:			VectorSubtract(end, tracefrom, temp);
ADDRLP4 124
ADDRLP4 56
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 136+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 136+8
INDIRF4
SUBF4
ASGNF4
line 4692
;4692:			r = VectorLength(temp);
ADDRLP4 124
ARGP4
ADDRLP4 344
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 212
ADDRLP4 344
INDIRF4
ASGNF4
line 4694
;4693:			// by right/up direction (maximum of 5 degrees (5*2*PI)/360)
;4694:			u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 348
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 348
INDIRF4
MULF4
SUBF4
ASGNF4
line 4695
;4695:			VectorMA(end, u, right, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 176
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 176+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 176+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4696
;4696:			u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 356
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 356
INDIRF4
MULF4
SUBF4
ASGNF4
line 4697
;4697:			VectorMA(end, u, up, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 188
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 188+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 188+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4700
;4698:			
;4699:			
;4700:			wallhits ++;
ADDRLP4 208
ADDRLP4 208
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4702
;4701:  
;4702:			CG_MissileHitWall( cg.predictedPlayerState.weapon,cg.predictedPlayerState.clientNum,
ADDRLP4 0+44
INDIRI4
ARGI4
ADDRLP4 364
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRGP4 cg+107636+140
INDIRI4
ARGI4
ADDRLP4 68+12
ARGP4
ADDRLP4 68+24
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 364
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4705
;4703:				trace2.endpos, trace2.plane.normal, 0, NS_BulletHoleTypeForSurface(trace.surfaceFlags) );
;4704:		 	
;4705:			continue;
ADDRGP4 $2956
JUMPV
LABELV $2958
line 4708
;4706:		}   
;4707:
;4708:		wallhits++;
ADDRLP4 208
ADDRLP4 208
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4710
;4709:
;4710:		if ( cg_entities[trace.entityNum].currentState.eType == ET_PLAYER )		
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $3061
line 4711
;4711:		{
line 4715
;4712:			// (FIX ME?) NO BLOOD FX
;4713:
;4714:			// these weapons don't go through bodies
;4715:			if ( caliber == AM_SMG || caliber == AM_LIGHT_PISTOL || caliber == AM_MEDIUM_PISTOL || 
ADDRLP4 152
INDIRI4
CNSTI4 5
EQI4 $3071
ADDRLP4 152
INDIRI4
CNSTI4 2
EQI4 $3071
ADDRLP4 152
INDIRI4
CNSTI4 3
EQI4 $3071
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 292
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 292
INDIRI4
CNSTI4 0
EQI4 $3065
LABELV $3071
line 4717
;4716:				BG_IsShotgun( cg.predictedPlayerState.weapon ) ) 
;4717:				break;
ADDRGP4 $2957
JUMPV
LABELV $3065
line 4719
;4718:
;4719:			ignoreent = trace.entityNum; // ignore this entity
ADDRLP4 204
ADDRLP4 0+52
INDIRI4
ASGNI4
line 4722
;4720:
;4721:			// deflect the bullet
;4722:			VectorSubtract(end, tracefrom, temp);
ADDRLP4 124
ADDRLP4 56
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 136+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 136+8
INDIRF4
SUBF4
ASGNF4
line 4723
;4723:			r = VectorLength(temp);
ADDRLP4 124
ARGP4
ADDRLP4 296
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 212
ADDRLP4 296
INDIRF4
ASGNF4
line 4725
;4724:			// by right/up direction (maximum of 5 degrees (5*2*PI)/360)
;4725:			u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 300
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 300
INDIRF4
MULF4
SUBF4
ASGNF4
line 4726
;4726:			VectorMA(end, u, right, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 176
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 176+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 176+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4727
;4727:			u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 308
INDIRF4
MULF4
SUBF4
ASGNF4
line 4728
;4728:			VectorMA(end, u, up, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 188
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 188+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 188+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4730
;4729:			
;4730:			continue;
ADDRGP4 $2956
JUMPV
LABELV $3061
line 4733
;4731:		}
;4732: 
;4733:		entityNum = trace.entityNum;
ADDRLP4 156
ADDRLP4 0+52
INDIRI4
ASGNI4
line 4736
;4734:
;4735: 		// fixme add player
;4736:		if ( cg_entities[trace.entityNum].currentState.eType == ET_MOVER || 
ADDRLP4 288
CNSTI4 728
ASGNI4
ADDRLP4 288
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 4
EQI4 $3098
ADDRLP4 288
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 15
NEI4 $3092
LABELV $3098
line 4738
;4737:			cg_entities[trace.entityNum].currentState.eType == ET_DOOR )
;4738:		{
line 4740
;4739:		
;4740:			entityNum = 0;
ADDRLP4 156
CNSTI4 0
ASGNI4
line 4741
;4741:		}
ADDRGP4 $3093
JUMPV
LABELV $3092
line 4742
;4742:		else if ( cg_entities[trace.entityNum].currentState.eType != ET_FUNCEXPLOSIVE )
CNSTI4 728
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 16
EQI4 $3099
line 4743
;4743:			break; 
ADDRGP4 $2957
JUMPV
LABELV $3099
LABELV $3093
line 4750
;4744:  	 	 
;4745:		//G_Printf("hitted enitity: %i[%i]\n", entityNum, trace.entityNum ); 
;4746:
;4747:		//CG_Printf("tracefrom %s\n", vtos( tracefrom ) );
;4748:
;4749:		// create FX
;4750:		CG_Bullet( trace.endpos,
ADDRLP4 0+44
INDIRI4
ARGI4
ADDRLP4 292
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 0+12
ARGP4
ADDRLP4 136
ARGP4
ADDRGP4 cg+107636+140
INDIRI4
ARGI4
ADDRLP4 0+24
ARGP4
CNSTI4 0
ARGI4
CNSTI4 -1
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 156
INDIRI4
ARGI4
ADDRLP4 292
INDIRI4
ARGI4
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRGP4 CG_Bullet
CALLV
pop
line 4760
;4751:					 tracefrom,
;4752:					 cg.predictedPlayerState.clientNum,
;4753:					 trace.plane.normal,
;4754:					 qfalse,-1,10,
;4755:					 entityNum,/* trace.entityNum ~ so the created marks will be removed */
;4756:					 NS_BulletHoleTypeForSurface( trace.surfaceFlags ),
;4757:					 cg.predictedPlayerState.weapon );
;4758:
;4759:		// only 9mm bounces off the wall, and not every projectile
;4760:		if ( trace.surfaceFlags & SURF_METALSTEPS && 
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $3110
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 296
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $3110
ADDRLP4 152
INDIRI4
CNSTI4 5
EQI4 $3116
ADDRLP4 152
INDIRI4
CNSTI4 2
EQI4 $3116
ADDRLP4 152
INDIRI4
CNSTI4 3
NEI4 $3110
LABELV $3116
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 304
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 304
INDIRF4
CNSTF4 1056964608
GEF4 $3110
line 4763
;4761:			!BG_IsShotgun( cg.predictedPlayerState.weapon ) &&
;4762:			( caliber == AM_SMG || caliber == AM_LIGHT_PISTOL || caliber == AM_MEDIUM_PISTOL )  && Q_crandom( seed ) < 0.5f )
;4763:		{ 
line 4764
;4764:			VectorCopy( trace.endpos, temp);
ADDRLP4 124
ADDRLP4 0+12
INDIRB
ASGNB 12
line 4765
;4765:			CG_BounceProjectile( tracefrom, temp,  trace.plane.normal, end );
ADDRLP4 136
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 56
ARGP4
ADDRGP4 CG_BounceProjectile
CALLV
pop
line 4766
;4766:			VectorCopy( temp, tracefrom );
ADDRLP4 136
ADDRLP4 124
INDIRB
ASGNB 12
line 4767
;4767:			VectorSubtract( end, temp, forward );
ADDRLP4 160
ADDRLP4 56
INDIRF4
ADDRLP4 124
INDIRF4
SUBF4
ASGNF4
ADDRLP4 160+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 124+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 160+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 124+8
INDIRF4
SUBF4
ASGNF4
line 4768
;4768:			VectorNormalize(forward);
ADDRLP4 160
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4770
;4769:			// now you can hit yourself with your projectile 
;4770:			ignoreent = trace.entityNum;					
ADDRLP4 204
ADDRLP4 0+52
INDIRI4
ASGNI4
line 4772
;4771:
;4772:			wallhits++; 
ADDRLP4 208
ADDRLP4 208
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4775
;4773:
;4774:			// after rebounced... break, this won't go through metal then...
;4775:			continue; 
ADDRGP4 $2956
JUMPV
LABELV $3110
line 4779
;4776:		} 
;4777:
;4778:		// 9mm / shotgun only goes through 'soft' materials like dirt/snow/wood etc.
;4779:		if (  ( caliber == AM_SMG || caliber == AM_LIGHT_PISTOL || caliber == AM_MEDIUM_PISTOL || 
ADDRLP4 152
INDIRI4
CNSTI4 5
EQI4 $3138
ADDRLP4 152
INDIRI4
CNSTI4 2
EQI4 $3138
ADDRLP4 152
INDIRI4
CNSTI4 3
EQI4 $3138
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRLP4 312
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 0
EQI4 $3126
LABELV $3138
ADDRLP4 316
CNSTI4 0
ASGNI4
ADDRLP4 0+44
INDIRI4
CNSTI4 1048576
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
ADDRLP4 0+44
INDIRI4
CNSTI4 33554432
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
ADDRLP4 0+44
INDIRI4
CNSTI4 16777216
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
ADDRLP4 0+44
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
ADDRLP4 0+44
INDIRI4
CNSTI4 4194304
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
ADDRLP4 0+44
INDIRI4
CNSTI4 8388608
BANDI4
ADDRLP4 316
INDIRI4
NEI4 $3126
line 4782
;4780:				BG_IsShotgun( cg.predictedPlayerState.weapon )  ) && !(trace.surfaceFlags & SURF_WOODSTEPS) && !(trace.surfaceFlags & SURF_SOFTSTEPS) && !(trace.surfaceFlags & SURF_GLASS) 
;4781:			 && !(trace.surfaceFlags & SURF_DIRTSTEPS) && !(trace.surfaceFlags & SURF_SNOWSTEPS) && !(trace.surfaceFlags & SURF_SANDSTEPS) )
;4782:			 break;
ADDRGP4 $2957
JUMPV
LABELV $3126
line 4789
;4783:
;4784:		/*
;4785:		============
;4786:		Break through wall ~ get break value
;4787:		============
;4788:		*/
;4789:		bulletThickn = BG_LeadGetBreakValueForSurface( &trace );// ;
ADDRLP4 0
ARGP4
ADDRLP4 320
ADDRGP4 BG_LeadGetBreakValueForSurface
CALLF4
ASGNF4
ADDRLP4 172
ADDRLP4 320
INDIRF4
ASGNF4
line 4791
;4790:
;4791:		switch (cg.predictedPlayerState.weapon) 
ADDRLP4 324
ADDRGP4 cg+107636+144
INDIRI4
ASGNI4
ADDRLP4 324
INDIRI4
CNSTI4 17
LTI4 $3140
ADDRLP4 324
INDIRI4
CNSTI4 24
GTI4 $3140
ADDRLP4 324
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $3145-68
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $3145
address $3144
address $3143
address $3140
address $3140
address $3140
address $3144
address $3140
address $3144
code
line 4792
;4792:		{
LABELV $3143
line 4794
;4793:			case WP_MACMILLAN:
;4794:				bulletThickn *= 1.75; // uber tuff :>
ADDRLP4 172
CNSTF4 1071644672
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
line 4795
;4795:				break;
ADDRGP4 $3140
JUMPV
LABELV $3144
line 4801
;4796:			case WP_M14:
;4797:			case WP_PSG1:
;4798:#ifdef SL8SD
;4799:			case WP_SL8SD:
;4800:#endif
;4801:				bulletThickn *= 1.5; // really tuff 
ADDRLP4 172
CNSTF4 1069547520
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
line 4802
;4802:				break;
line 4804
;4803:			default:
;4804:				break;
LABELV $3140
line 4807
;4805:		}
;4806:
;4807:  		VectorMA (trace.endpos, bulletThickn, forward, temp);   
ADDRLP4 124
ADDRLP4 0+12
INDIRF4
ADDRLP4 160
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 0+12+4
INDIRF4
ADDRLP4 160+4
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 0+12+8
INDIRF4
ADDRLP4 160+8
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
line 4810
;4808:
;4809:		// stuck in a wall?
;4810:		if ( CG_PointContents( temp, -1 ) & CONTENTS_SOLID && !(trace.surfaceFlags & SURF_GLASS) )
ADDRLP4 124
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 332
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 336
CNSTI4 0
ASGNI4
ADDRLP4 332
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 336
INDIRI4
EQI4 $3156
ADDRLP4 0+44
INDIRI4
CNSTI4 16777216
BANDI4
ADDRLP4 336
INDIRI4
NEI4 $3156
line 4811
;4811:			break;
ADDRGP4 $2957
JUMPV
LABELV $3156
line 4814
;4812:
;4813:		// get exit position...
;4814:		CG_Trace (&trace2, temp, NULL, NULL, trace.endpos, ignoreent, MASK_SOLID );
ADDRLP4 68
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 340
CNSTP4 0
ASGNP4
ADDRLP4 340
INDIRP4
ARGP4
ADDRLP4 340
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRLP4 204
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4817
;4815:		
;4816:		// get the point where the bullet leaves the wall
;4817:		VectorCopy (trace2.endpos, tracefrom);
ADDRLP4 136
ADDRLP4 68+12
INDIRB
ASGNB 12
line 4822
;4818: 
;4819:	//	CG_Printf("exit for entity: %i [exit ent: %i]\n", trace.entityNum, trace2.entityNum );
;4820: 		// we actually are free again, but we hit something different from our original entity?
;4821:		// go back ignore the current
;4822:		if(trace2.entityNum != trace.entityNum )
ADDRLP4 68+52
INDIRI4
ADDRLP4 0+52
INDIRI4
EQI4 $3161
line 4823
;4823:		{
line 4824
;4824:			int checks = 5;
ADDRLP4 344
CNSTI4 5
ASGNI4
ADDRGP4 $3166
JUMPV
LABELV $3165
line 4827
;4825:
;4826:			while ( checks > 0 )
;4827:			{
line 4829
;4828:			// do a trace back again, but this time ignore the entity.
;4829:			CG_Trace (&trace2, temp, NULL, NULL, trace.endpos, trace2.entityNum, MASK_SOLID );
ADDRLP4 68
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 348
CNSTP4 0
ASGNP4
ADDRLP4 348
INDIRP4
ARGP4
ADDRLP4 348
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRLP4 68+52
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 4832
;4830:		
;4831:			// get the point where the bullet leaves the wall
;4832:			VectorCopy (trace2.endpos, tracefrom);	
ADDRLP4 136
ADDRLP4 68+12
INDIRB
ASGNB 12
line 4834
;4833:
;4834:			if ( trace2.entityNum == entityNum )
ADDRLP4 68+52
INDIRI4
ADDRLP4 156
INDIRI4
NEI4 $3171
line 4835
;4835:				break;
ADDRGP4 $3167
JUMPV
LABELV $3171
line 4839
;4836:
;4837:		//	CG_Printf("new exit for entity: %i\n", trace2.entityNum ); 
;4838: 
;4839:			checks--;
ADDRLP4 344
ADDRLP4 344
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 4841
;4840:
;4841:			}
LABELV $3166
line 4826
ADDRLP4 344
INDIRI4
CNSTI4 0
GTI4 $3165
LABELV $3167
line 4844
;4842:			// something must have been terribly wrong, so now avoid spawning multiple effects
;4843:			// and consuming unneccesary cpu power
;4844:			if ( checks == 0 && trace2.entityNum != entityNum )
ADDRLP4 344
INDIRI4
CNSTI4 0
NEI4 $3174
ADDRLP4 68+52
INDIRI4
ADDRLP4 156
INDIRI4
EQI4 $3174
line 4845
;4845:				break;
ADDRGP4 $2957
JUMPV
LABELV $3174
line 4846
;4846:		} 
LABELV $3161
line 4848
;4847:		 
;4848:		CG_MissileHitWall( cg.predictedPlayerState.weapon,
ADDRLP4 68+44
INDIRI4
ARGI4
ADDRLP4 344
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRGP4 cg+107636+144
INDIRI4
ARGI4
ADDRGP4 cg+107636+140
INDIRI4
ARGI4
ADDRLP4 136
ARGP4
ADDRLP4 68+24
ARGP4
ADDRLP4 156
INDIRI4
ARGI4
ADDRLP4 344
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 4856
;4849:							cg.predictedPlayerState.clientNum,
;4850:							tracefrom, 
;4851:							trace2.plane.normal, 
;4852:							entityNum,
;4853:							NS_BulletHoleTypeForSurface(trace2.surfaceFlags) 
;4854:							);
;4855:
;4856: 		ignoreent = entityNum; 
ADDRLP4 204
ADDRLP4 156
INDIRI4
ASGNI4
line 4859
;4857:			
;4858:		// deflect the bullet
;4859:		VectorSubtract(end, tracefrom, temp);
ADDRLP4 124
ADDRLP4 56
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 136+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 136+8
INDIRF4
SUBF4
ASGNF4
line 4860
;4860:		r = VectorLength(temp);
ADDRLP4 124
ARGP4
ADDRLP4 348
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 212
ADDRLP4 348
INDIRF4
ASGNF4
line 4862
;4861:		// by right/up direction (maximum of 5 degrees (5*2*PI)/360)
;4862:		u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 352
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 352
INDIRF4
MULF4
SUBF4
ASGNF4
line 4863
;4863:		VectorMA(end, u, right, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 176
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 176+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 176+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4864
;4864:		u = 0.086 - 0.172 * Q_random(seed);
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 360
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 148
CNSTF4 1034952901
CNSTF4 1043341509
ADDRLP4 360
INDIRF4
MULF4
SUBF4
ASGNF4
line 4865
;4865:		VectorMA(end, u, up, end);
ADDRLP4 56
ADDRLP4 56
INDIRF4
ADDRLP4 188
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
ADDRLP4 188+4
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
ADDRLP4 188+8
INDIRF4
ADDRLP4 148
INDIRF4
MULF4
ADDF4
ASGNF4
line 4867
;4866:			
;4867:	} while ( wallhits < bulletHits );
LABELV $2956
ADDRLP4 208
INDIRI4
ADDRLP4 216
INDIRI4
LTI4 $2955
LABELV $2957
line 4869
;4868: 
;4869:}
LABELV $2691
endproc CG_PredictFireLead 852 40
export CG_PredictFireShotgun
proc CG_PredictFireShotgun 16 0
line 4872
;4870:
;4871:void CG_PredictFireShotgun( void )
;4872:{
line 4873
;4873:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 4875
;4874:	int pellets;
;4875:	int weapon = cg.predictedPlayerState.weapon;
ADDRLP4 8
ADDRGP4 cg+107636+144
INDIRI4
ASGNI4
line 4877
;4876:	
;4877:	switch ( weapon ) {
ADDRLP4 12
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 19
EQI4 $3208
ADDRLP4 12
INDIRI4
CNSTI4 20
EQI4 $3207
ADDRLP4 12
INDIRI4
CNSTI4 21
EQI4 $3206
ADDRGP4 $3204
JUMPV
LABELV $3206
line 4879
;4878:		case WP_SPAS15:
;4879:			pellets = SPAS15_PELLETS;
ADDRLP4 4
CNSTI4 8
ASGNI4
line 4880
;4880:			break;
ADDRGP4 $3205
JUMPV
LABELV $3207
line 4882
;4881:		case WP_M590:
;4882:			pellets = M590_PELLETS;
ADDRLP4 4
CNSTI4 8
ASGNI4
line 4883
;4883:			break;
ADDRGP4 $3205
JUMPV
LABELV $3208
LABELV $3204
line 4886
;4884:		case WP_870:
;4885:		default:
;4886:			pellets = M870_PELLETS;
ADDRLP4 4
CNSTI4 8
ASGNI4
line 4887
;4887:			break;
LABELV $3205
line 4890
;4888:	}
;4889:
;4890:	for ( i=0; i<pellets; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $3212
JUMPV
LABELV $3209
line 4891
;4891:	{
line 4892
;4892:		CG_PredictFireLead( );
ADDRGP4 CG_PredictFireLead
CALLV
pop
line 4893
;4893:	}
LABELV $3210
line 4890
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $3212
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $3209
line 4894
;4894:}
LABELV $3201
endproc CG_PredictFireShotgun 16 0
proc CG_ShotgunPattern 80 16
line 4903
;4895:/*
;4896:================
;4897:CG_ShotgunPattern
;4898:
;4899:Perform the same traces the server did to locate the
;4900:hit splashes (FIXME: ranom seed isn't synce anymore)
;4901:================
;4902:*/
;4903:static void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int otherEntNum, int spread, int count, int u2,int r2 ) {
line 4911
;4904:	int			i;
;4905:	float		r, u;
;4906:	vec3_t		end;
;4907:	vec3_t		forward, right, up;
;4908:
;4909:	// derive the right and up vectors from the forward vector, because
;4910:	// the client won't have any other information
;4911:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 4912
;4912:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 4913
;4913:	CrossProduct( forward, right, up );
ADDRLP4 12
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 4916
;4914:
;4915:	// generate the "random" spread pattern
;4916:	for ( i = 0 ; i < count ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 $3217
JUMPV
LABELV $3214
line 4917
;4917:		if ( u2 && r2 )
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRFP4 20
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $3218
ADDRFP4 24
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $3218
line 4918
;4918:		{
line 4919
;4919:			r = crandom() * (spread*r2);
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRFP4 12
INDIRI4
ADDRFP4 24
INDIRI4
MULI4
CVIF4 4
MULF4
ASGNF4
line 4920
;4920:			u = crandom() * (spread/u2);
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRFP4 12
INDIRI4
ADDRFP4 20
INDIRI4
DIVI4
CVIF4 4
MULF4
ASGNF4
line 4921
;4921:		}
ADDRGP4 $3219
JUMPV
LABELV $3218
line 4923
;4922:		else 
;4923:		{
line 4924
;4924:			r = crandom() * spread;
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRFP4 12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 4925
;4925:			u = crandom() * spread;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRFP4 12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 4926
;4926:		}
LABELV $3219
line 4927
;4927:		VectorMA( origin, 8192, forward, end);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
CNSTF4 1174405120
ASGNF4
ADDRLP4 0
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 68
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 64
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 68
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4928
;4928:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 4929
;4929:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
line 4931
;4930:
;4931:		CG_ShotgunPellet( origin, end, forward, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 4932
;4932:	}
LABELV $3215
line 4916
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $3217
ADDRLP4 56
INDIRI4
ADDRFP4 16
INDIRI4
LTI4 $3214
line 4933
;4933:}
LABELV $3213
endproc CG_ShotgunPattern 80 16
export CG_ShotgunFire
proc CG_ShotgunFire 56 48
line 4940
;4934:
;4935:/*
;4936:==============
;4937:CG_ShotgunFire
;4938:==============
;4939:*/
;4940:void CG_ShotgunFire( entityState_t *es ) {
line 4944
;4941:	vec3_t	v;
;4942:	int		contents;
;4943:
;4944:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4945
;4945:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4946
;4946:	VectorScale( v, 32, v );
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1107296256
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 4947
;4947:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 4948
;4948:	if ( cgs.glconfig.hardwareType != GLHW_RAGEPRO ) {
ADDRGP4 cgs+20100+11288
INDIRI4
CNSTI4 3
EQI4 $3247
line 4952
;4949:		// ragepro can't alpha fade, so don't even bother with smoke
;4950:		vec3_t			up;
;4951:
;4952:		contents = trap_CM_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 4953
;4953:		if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $3251
line 4954
;4954:			VectorSet( up, 0, 0, 8 );
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 32
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 32+8
CNSTF4 1090519040
ASGNF4
line 4956
;4955:			
;4956:			CG_SmokePuff( v, up, 32, 1, 1, 1, 0.5, cg_gunSmokeTime.integer, cg.time,0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 52
CNSTF4 1065353216
ASGNF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
CNSTF4 1056964608
ARGF4
ADDRGP4 cg_gunSmokeTime+12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+205084+112
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 4957
;4957:		}
LABELV $3251
line 4958
;4958:	}
LABELV $3247
line 4959
;4959:	if ( es->frame && es->otherEntityNum2 )
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $3259
ADDRLP4 32
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $3259
line 4960
;4960:		CG_ShotgunPattern( es->pos.trBase, es->origin2, es->otherEntityNum, es->eventParm, es->generic1, es->frame, es->otherEntityNum2  );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
ADDRGP4 $3260
JUMPV
LABELV $3259
line 4962
;4961:	else
;4962:		CG_ShotgunPattern( es->pos.trBase, es->origin2, es->otherEntityNum, es->eventParm, es->generic1, 0, 0 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
LABELV $3260
line 4963
;4963:}
LABELV $3236
endproc CG_ShotgunFire 56 48
export CG_Tracer
proc CG_Tracer 404 12
line 4979
;4964:
;4965:/*
;4966:============================================================================
;4967:
;4968:BULLETS
;4969:
;4970:============================================================================
;4971:*/
;4972:
;4973: 
;4974:/*
;4975:===============
;4976:CG_Tracer
;4977:===============
;4978:*/ 
;4979:void CG_Tracer( vec3_t source, vec3_t dest, float width, qhandle_t shader, vec4_t rgba ) {
line 4988
;4980:	vec3_t		forward, right;
;4981:	polyVert_t	verts[4];
;4982:	vec3_t		line;
;4983:	float		len, begin, end;
;4984:	vec3_t		start, finish;
;4985://	vec3_t		midpoint;
;4986:
;4987:	// tracer
;4988:	VectorSubtract( dest, source, forward );
ADDRLP4 168
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 168
INDIRP4
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 176
CNSTI4 4
ASGNI4
ADDRLP4 108+4
ADDRLP4 168
INDIRP4
ADDRLP4 176
INDIRI4
ADDP4
INDIRF4
ADDRLP4 172
INDIRP4
ADDRLP4 176
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 180
CNSTI4 8
ASGNI4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
ADDRLP4 180
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 180
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4989
;4989:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 184
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 184
INDIRF4
ASGNF4
line 4993
;4990:
;4991:	// start at least a little ways from the muzzle
;4992:	// begin = width * -0.5;
;4993:	begin = width * -0.5; // put 1 meter in front of the attacker
ADDRLP4 156
CNSTF4 3204448256
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 4994
;4994:	end = len + width * 0.5;
ADDRLP4 160
ADDRLP4 164
INDIRF4
CNSTF4 1056964608
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4996
;4995:
;4996:	VectorMA( source, begin, forward, start );
ADDRLP4 188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 188
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 188
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 4997
;4997:	VectorMA( source, end, forward, finish );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 196
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 196
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 4998
;4998:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109044+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109044+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109044+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 4999
;4999:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5001
;5000:
;5001:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+109044+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109044+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109044+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 5002
;5002:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 204
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+109044+36+24
INDIRF4
ADDRLP4 204
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+109044+36+24+4
INDIRF4
ADDRLP4 204
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+109044+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 5003
;5003:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 5005
;5004:
;5005:	VectorMA( finish, width, right, verts[0].xyz );
ADDRLP4 208
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 208
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5006
;5006:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 5007
;5007:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 5008
;5008:	verts[0].modulate[0] = 255 * rgba[0];
ADDRLP4 216
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 220
CNSTF4 1325400064
ASGNF4
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
LTF4 $3341
ADDRLP4 212
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3342
JUMPV
LABELV $3341
ADDRLP4 212
ADDRLP4 216
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3342
ADDRLP4 0+20
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
line 5009
;5009:	verts[0].modulate[1] = 255 * rgba[1];
ADDRLP4 228
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 232
CNSTF4 1325400064
ASGNF4
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
LTF4 $3346
ADDRLP4 224
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3347
JUMPV
LABELV $3346
ADDRLP4 224
ADDRLP4 228
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3347
ADDRLP4 0+20+1
ADDRLP4 224
INDIRU4
CVUU1 4
ASGNU1
line 5010
;5010:	verts[0].modulate[2] = 255 * rgba[2];
ADDRLP4 240
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $3351
ADDRLP4 236
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3352
JUMPV
LABELV $3351
ADDRLP4 236
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3352
ADDRLP4 0+20+2
ADDRLP4 236
INDIRU4
CVUU1 4
ASGNU1
line 5011
;5011:	verts[0].modulate[3] = 255 * rgba[3];
ADDRLP4 252
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 256
CNSTF4 1325400064
ASGNF4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
LTF4 $3356
ADDRLP4 248
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3357
JUMPV
LABELV $3356
ADDRLP4 248
ADDRLP4 252
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3357
ADDRLP4 0+20+3
ADDRLP4 248
INDIRU4
CVUU1 4
ASGNU1
line 5013
;5012:	
;5013:	VectorMA( finish, -width, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 5014
;5014:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 5015
;5015:	verts[1].st[1] = 1;
ADDRLP4 0+24+12+4
CNSTF4 1065353216
ASGNF4
line 5016
;5016:	verts[1].modulate[0] = 255 * rgba[0];
ADDRLP4 264
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 268
CNSTF4 1325400064
ASGNF4
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
LTF4 $3375
ADDRLP4 260
ADDRLP4 264
INDIRF4
ADDRLP4 268
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3376
JUMPV
LABELV $3375
ADDRLP4 260
ADDRLP4 264
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3376
ADDRLP4 0+24+20
ADDRLP4 260
INDIRU4
CVUU1 4
ASGNU1
line 5017
;5017:	verts[1].modulate[1] = 255 * rgba[1];
ADDRLP4 276
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 280
CNSTF4 1325400064
ASGNF4
ADDRLP4 276
INDIRF4
ADDRLP4 280
INDIRF4
LTF4 $3381
ADDRLP4 272
ADDRLP4 276
INDIRF4
ADDRLP4 280
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3382
JUMPV
LABELV $3381
ADDRLP4 272
ADDRLP4 276
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3382
ADDRLP4 0+24+20+1
ADDRLP4 272
INDIRU4
CVUU1 4
ASGNU1
line 5018
;5018:	verts[1].modulate[2] = 255 * rgba[2];
ADDRLP4 288
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 292
CNSTF4 1325400064
ASGNF4
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
LTF4 $3387
ADDRLP4 284
ADDRLP4 288
INDIRF4
ADDRLP4 292
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3388
JUMPV
LABELV $3387
ADDRLP4 284
ADDRLP4 288
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3388
ADDRLP4 0+24+20+2
ADDRLP4 284
INDIRU4
CVUU1 4
ASGNU1
line 5019
;5019:	verts[1].modulate[3] = 255 * rgba[3];
ADDRLP4 300
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 304
CNSTF4 1325400064
ASGNF4
ADDRLP4 300
INDIRF4
ADDRLP4 304
INDIRF4
LTF4 $3393
ADDRLP4 296
ADDRLP4 300
INDIRF4
ADDRLP4 304
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3394
JUMPV
LABELV $3393
ADDRLP4 296
ADDRLP4 300
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3394
ADDRLP4 0+24+20+3
ADDRLP4 296
INDIRU4
CVUU1 4
ASGNU1
line 5021
;5020:
;5021:	VectorMA( start, -width, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 5022
;5022:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 5023
;5023:	verts[2].st[1] = 0;
ADDRLP4 0+48+12+4
CNSTF4 0
ASGNF4
line 5024
;5024:	verts[2].modulate[0] = 255 * rgba[0];
ADDRLP4 312
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 316
CNSTF4 1325400064
ASGNF4
ADDRLP4 312
INDIRF4
ADDRLP4 316
INDIRF4
LTF4 $3412
ADDRLP4 308
ADDRLP4 312
INDIRF4
ADDRLP4 316
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3413
JUMPV
LABELV $3412
ADDRLP4 308
ADDRLP4 312
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3413
ADDRLP4 0+48+20
ADDRLP4 308
INDIRU4
CVUU1 4
ASGNU1
line 5025
;5025:	verts[2].modulate[1] = 255 * rgba[1];
ADDRLP4 324
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 328
CNSTF4 1325400064
ASGNF4
ADDRLP4 324
INDIRF4
ADDRLP4 328
INDIRF4
LTF4 $3418
ADDRLP4 320
ADDRLP4 324
INDIRF4
ADDRLP4 328
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3419
JUMPV
LABELV $3418
ADDRLP4 320
ADDRLP4 324
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3419
ADDRLP4 0+48+20+1
ADDRLP4 320
INDIRU4
CVUU1 4
ASGNU1
line 5026
;5026:	verts[2].modulate[2] = 255 * rgba[2];
ADDRLP4 336
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 340
CNSTF4 1325400064
ASGNF4
ADDRLP4 336
INDIRF4
ADDRLP4 340
INDIRF4
LTF4 $3424
ADDRLP4 332
ADDRLP4 336
INDIRF4
ADDRLP4 340
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3425
JUMPV
LABELV $3424
ADDRLP4 332
ADDRLP4 336
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3425
ADDRLP4 0+48+20+2
ADDRLP4 332
INDIRU4
CVUU1 4
ASGNU1
line 5027
;5027:	verts[2].modulate[3] = 255 * rgba[3];
ADDRLP4 348
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 352
CNSTF4 1325400064
ASGNF4
ADDRLP4 348
INDIRF4
ADDRLP4 352
INDIRF4
LTF4 $3430
ADDRLP4 344
ADDRLP4 348
INDIRF4
ADDRLP4 352
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3431
JUMPV
LABELV $3430
ADDRLP4 344
ADDRLP4 348
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3431
ADDRLP4 0+48+20+3
ADDRLP4 344
INDIRU4
CVUU1 4
ASGNU1
line 5029
;5028:
;5029:	VectorMA( start, width, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5030
;5030:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 5031
;5031:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 5032
;5032:	verts[3].modulate[0] = 255 * rgba[0];
ADDRLP4 360
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 364
CNSTF4 1325400064
ASGNF4
ADDRLP4 360
INDIRF4
ADDRLP4 364
INDIRF4
LTF4 $3449
ADDRLP4 356
ADDRLP4 360
INDIRF4
ADDRLP4 364
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3450
JUMPV
LABELV $3449
ADDRLP4 356
ADDRLP4 360
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3450
ADDRLP4 0+72+20
ADDRLP4 356
INDIRU4
CVUU1 4
ASGNU1
line 5033
;5033:	verts[3].modulate[1] = 255 * rgba[1];
ADDRLP4 372
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 376
CNSTF4 1325400064
ASGNF4
ADDRLP4 372
INDIRF4
ADDRLP4 376
INDIRF4
LTF4 $3455
ADDRLP4 368
ADDRLP4 372
INDIRF4
ADDRLP4 376
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3456
JUMPV
LABELV $3455
ADDRLP4 368
ADDRLP4 372
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3456
ADDRLP4 0+72+20+1
ADDRLP4 368
INDIRU4
CVUU1 4
ASGNU1
line 5034
;5034:	verts[3].modulate[2] = 255 * rgba[2];
ADDRLP4 384
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 388
CNSTF4 1325400064
ASGNF4
ADDRLP4 384
INDIRF4
ADDRLP4 388
INDIRF4
LTF4 $3461
ADDRLP4 380
ADDRLP4 384
INDIRF4
ADDRLP4 388
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3462
JUMPV
LABELV $3461
ADDRLP4 380
ADDRLP4 384
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3462
ADDRLP4 0+72+20+2
ADDRLP4 380
INDIRU4
CVUU1 4
ASGNU1
line 5035
;5035:	verts[3].modulate[3] = 255 * rgba[3];
ADDRLP4 396
CNSTF4 1132396544
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 400
CNSTF4 1325400064
ASGNF4
ADDRLP4 396
INDIRF4
ADDRLP4 400
INDIRF4
LTF4 $3467
ADDRLP4 392
ADDRLP4 396
INDIRF4
ADDRLP4 400
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $3468
JUMPV
LABELV $3467
ADDRLP4 392
ADDRLP4 396
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $3468
ADDRLP4 0+72+20+3
ADDRLP4 392
INDIRU4
CVUU1 4
ASGNU1
line 5037
;5036:
;5037:	trap_R_AddPolyToScene( shader, 4, verts );
ADDRFP4 12
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 5039
;5038:
;5039:}
LABELV $3261
endproc CG_Tracer 404 12
export CG_Bullet
proc CG_Bullet 184 28
line 5048
;5040:
;5041:/*
;5042:======================
;5043:CG_Bullet
;5044:
;5045:Renders bullet effects.
;5046:======================
;5047:*/ 
;5048:void CG_Bullet( vec3_t end, vec3_t start, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum, int damage, int soundtype, int bholetype, int weapon ) {
line 5055
;5049:	trace_t trace;
;5050:	int sourceContentType, destContentType;
;5051:	centity_t	*cent;
;5052:	vec3_t up;
;5053: 	vec4_t rgba;
;5054:
;5055:	rgba[0] = rgba[1] = rgba[2] = rgba[3] = 1;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+12
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 96
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 96
INDIRF4
ASGNF4
line 5057
;5056:
;5057:	up[0] = up[1] = 0;
ADDRLP4 100
CNSTF4 0
ASGNF4
ADDRLP4 16+4
ADDRLP4 100
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 100
INDIRF4
ASGNF4
line 5058
;5058:	up[2] = 2;
ADDRLP4 16+8
CNSTF4 1073741824
ASGNF4
line 5060
;5059:
;5060:	cent = &cg_entities[sourceEntityNum];
ADDRLP4 28
CNSTI4 728
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 5062
;5061:
;5062:	if ( random() < cg_tracerChance.value &&
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $3475
ADDRLP4 108
ADDRFP4 36
INDIRI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 16
EQI4 $3480
ADDRLP4 108
INDIRI4
CNSTI4 15
EQI4 $3480
ADDRLP4 108
INDIRI4
CNSTI4 22
EQI4 $3480
ADDRLP4 108
INDIRI4
CNSTI4 23
NEI4 $3475
LABELV $3480
line 5064
;5063:		( weapon == WP_M4 || weapon == WP_AK47 || weapon == WP_M14 || weapon == WP_M249 ) )
;5064:	{  
line 5069
;5065:		vec3_t right,up,forward;
;5066:
;5067:					
;5068:		// tracer 
;5069:		if ( sourceEntityNum == cg.clientNum && firstshot )
ADDRFP4 8
INDIRI4
ADDRGP4 cg+4
INDIRI4
NEI4 $3481
ADDRGP4 firstshot
INDIRI4
CNSTI4 0
EQI4 $3481
line 5070
;5070:		{
line 5072
;5071:
;5072:			AngleVectors( cg.refdefViewAngles, forward,right,up );
ADDRGP4 cg+109412
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 124
ARGP4
ADDRLP4 136
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 5074
;5073:			
;5074:			VectorMA( start, 30, forward, start );
ADDRLP4 148
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 112+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 156
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 112+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5075
;5075:			VectorMA( start, 2.0f, right, start );
ADDRLP4 160
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 124
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 164
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 124+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 168
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 124+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5076
;5076:			VectorMA( start, -3.0f, up, start ); 
ADDRLP4 172
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
CNSTF4 3225419776
ADDRLP4 136
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
CNSTF4 3225419776
ADDRLP4 136+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 180
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
CNSTF4 3225419776
ADDRLP4 136+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5084
;5077:
;5078:/*			if ( cg_smallGuns.integer || cg_drawGun.integer == 3 || cg_drawGun.integer == 4 ) {
;5079:				VectorMA( start, -2.5f, up, start );
;5080:				VectorMA( start, 2.6, forward, start ); 
;5081:				VectorMA( start, 0.2, right, start );
;5082:			}*/
;5083:
;5084:			firstshot = qfalse;
ADDRGP4 firstshot
CNSTI4 0
ASGNI4
line 5085
;5085:		} else {
ADDRGP4 $3482
JUMPV
LABELV $3481
line 5089
;5086:
;5087:			// BLUTENGEL: 
;5088:			// put tracer lil bit to front
;5089:			VectorSubtract(end, start, forward);
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 152
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 156
CNSTI4 4
ASGNI4
ADDRLP4 112+4
ADDRLP4 148
INDIRP4
ADDRLP4 156
INDIRI4
ADDP4
INDIRF4
ADDRLP4 152
INDIRP4
ADDRLP4 156
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 160
CNSTI4 8
ASGNI4
ADDRLP4 112+8
ADDRFP4 0
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 5090
;5090:			VectorNormalize(forward);
ADDRLP4 112
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 5091
;5091:			VectorMA(start, 28.0, forward, start);
ADDRLP4 164
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 168
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRLP4 112+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 172
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
CNSTF4 1105199104
ADDRLP4 112+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 5092
;5092:			start[2] -= 3.0;
ADDRLP4 176
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
CNSTF4 1077936128
SUBF4
ASGNF4
line 5094
;5093:
;5094:		}
LABELV $3482
line 5096
;5095:
;5096:		CG_SpawnTracer( start, end ); 
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SpawnTracer
CALLV
pop
line 5097
;5097:	}
LABELV $3475
line 5101
;5098:
;5099:	// if the shooter is currently valid, calc a source point and possibly
;5100:	// do trail effects
;5101:	if ( /*start[0] != 0 && start[1] != 0 && start[2] != 0*/ 1 )
line 5102
;5102:	{
line 5103
;5103:		if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 8
INDIRI4
CNSTI4 0
LTI4 $3497
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $3497
line 5105
;5104:	//	if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
;5105:			sourceContentType = trap_CM_PointContents( start, 0 );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 112
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 112
INDIRI4
ASGNI4
line 5106
;5106:			destContentType = trap_CM_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 116
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 116
INDIRI4
ASGNI4
line 5109
;5107:
;5108:			// do a complete bubble trail if necessary
;5109:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 120
ADDRLP4 32
INDIRI4
ASGNI4
ADDRLP4 120
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $3500
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $3500
line 5110
;5110:				CG_BubbleTrail( start, end, 8 );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 5111
;5111:			}
ADDRGP4 $3501
JUMPV
LABELV $3500
line 5113
;5112:			// bubble trail from water into air
;5113:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 32
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $3502
line 5114
;5114:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 40
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 124
CNSTP4 0
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 5115
;5115:				CG_BubbleTrail( start, trace.endpos, 8 );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40+12
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 5116
;5116: 			}
ADDRGP4 $3503
JUMPV
LABELV $3502
line 5118
;5117:			// bubble trail from air into water
;5118:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 36
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $3505
line 5119
;5119:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 40
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 124
CNSTP4 0
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 5120
;5120:				CG_BubbleTrail( end, trace.endpos, 8 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40+12
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 5121
;5121: 			} 
LABELV $3505
LABELV $3503
LABELV $3501
line 5122
;5122:		}
LABELV $3497
line 5123
;5123:	} 
LABELV $3495
line 5129
;5124:	
;5125://	if (  trace.surfaceFlags & SURF_NOIMPACT ) 
;5126://		return; 
;5127:
;5128:	// impact splash and mark
;5129:	if ( flesh ) { 
ADDRFP4 16
INDIRI4
CNSTI4 0
EQI4 $3508
line 5130
;5130:		int r = (int)(random()*3);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 112
CNSTF4 1077936128
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
ASGNI4
line 5132
;5131: 
;5132:		CG_PlayerBleed( cent->currentState.weapon, cent->currentState.clientNum, damage, end, normal );		
ADDRLP4 120
ADDRLP4 28
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 120
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
ARGI4
ADDRFP4 24
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 CG_PlayerBleed
CALLV
pop
line 5134
;5133:
;5134:		if ((cg.DeafTime < cg.time)) trap_S_StartSound (end, fleshEntityNum, CHAN_AUTO, cgs.media.bulletHitFlesh[r] );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $3509
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 20
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 112
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+972
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 5136
;5135:		
;5136:	} else {   
ADDRGP4 $3509
JUMPV
LABELV $3508
line 5137
;5137:		CG_MissileHitWall( weapon, 0,end,  normal, soundtype, bholetype );
ADDRFP4 36
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 28
INDIRI4
ARGI4
ADDRFP4 32
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 5138
;5138:	}
LABELV $3509
line 5140
;5139:
;5140:}
LABELV $3469
endproc CG_Bullet 184 28
export CG_StringToAnimation
proc CG_StringToAnimation 100 8
line 5151
;5141: 
;5142:
;5143:animation_t	weaponAnimations[WP_NUM_WEAPONS*2][MAX_WEAPON_ANIMATIONS];
;5144://weaponframestuff_t	weaponStuff[MAX_WEAPONS];
;5145:
;5146://
;5147:// rather important :D
;5148://
;5149:
;5150:int CG_StringToAnimation( char *token )
;5151:{
line 5152
;5152:	if ( !Q_stricmp( token, "WANIM_IDLE" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3519
ARGP4
ADDRLP4 0
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $3517
line 5153
;5153:		return WANIM_IDLE;
CNSTI4 6
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3517
line 5154
;5154:	else if ( !Q_stricmp( token, "WANIM_ATTACK" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3522
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $3520
line 5155
;5155:		return WANIM_ATTACK;
CNSTI4 2
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3520
line 5156
;5156:	else if ( !Q_stricmp( token, "WANIM_PUTAWAY" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3525
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $3523
line 5157
;5157:		return WANIM_PUTAWAY;
CNSTI4 1
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3523
line 5158
;5158:	else if ( !Q_stricmp( token, "WANIM_PUTUP" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3528
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $3526
line 5159
;5159:		return WANIM_PUTUP;
CNSTI4 0
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3526
line 5160
;5160:	else if ( !Q_stricmp( token, "WANIM_RELOAD" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3531
ARGP4
ADDRLP4 16
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $3529
line 5161
;5161:		return WANIM_RELOAD;
CNSTI4 8
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3529
line 5162
;5162:	else if ( !Q_stricmp( token, "WANIM_LASTRND" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3534
ARGP4
ADDRLP4 20
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $3532
line 5163
;5163:		return WANIM_LASTRND;
CNSTI4 5
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3532
line 5164
;5164:	else if ( !Q_stricmp( token, "WANIM_ATTACK2" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3537
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $3535
line 5165
;5165:		return WANIM_ATTACK2;
CNSTI4 3
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3535
line 5166
;5166:	else if ( !Q_stricmp( token, "WANIM_ATTACK3" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3540
ARGP4
ADDRLP4 28
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $3538
line 5167
;5167:		return WANIM_ATTACK3;
CNSTI4 4
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3538
line 5168
;5168:	else if ( !Q_stricmp( token, "WANIM_SPIN1" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3543
ARGP4
ADDRLP4 32
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $3541
line 5169
;5169:		return WANIM_SPIN1;
CNSTI4 12
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3541
line 5170
;5170:	else if ( !Q_stricmp( token, "WANIM_SPIN2" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3546
ARGP4
ADDRLP4 36
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $3544
line 5171
;5171:		return WANIM_SPIN2;
CNSTI4 15
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3544
line 5172
;5172:	else if ( !Q_stricmp( token, "WANIM_THROW" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3549
ARGP4
ADDRLP4 40
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $3547
line 5173
;5173:		return WANIM_THROW;
CNSTI4 14
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3547
line 5174
;5174:	else if ( !Q_stricmp( token, "WANIM_IDLE_EMPTY" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3552
ARGP4
ADDRLP4 44
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $3550
line 5175
;5175:		return WANIM_IDLE_EMPTY;
CNSTI4 7
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3550
line 5176
;5176:	else if ( !Q_stricmp( token, "WANIM_RELOAD_EMPTY" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3555
ARGP4
ADDRLP4 48
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $3553
line 5177
;5177:		return WANIM_RELOAD_EMPTY;
CNSTI4 9
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3553
line 5178
;5178:	else if ( !Q_stricmp( token, "WANIM_RELOAD_CYCLE" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3558
ARGP4
ADDRLP4 52
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $3556
line 5179
;5179:		return WANIM_RELOAD_CYCLE;
CNSTI4 10
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3556
line 5180
;5180:	else if ( !Q_stricmp( token, "WANIM_MELEE" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3561
ARGP4
ADDRLP4 56
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $3559
line 5181
;5181:		return WANIM_MELEE;
CNSTI4 13
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3559
line 5182
;5182:	else if ( !Q_stricmp( token, "WANIM_RELOAD_STOP" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3564
ARGP4
ADDRLP4 60
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $3562
line 5183
;5183:		return WANIM_RELOAD_STOP;
CNSTI4 11
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3562
line 5184
;5184:	else if ( !Q_stricmp( token, "WANIM_ATTACKMODE21" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3567
ARGP4
ADDRLP4 64
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $3565
line 5185
;5185:		return WANIM_ATTACKMODE21;
CNSTI4 16
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3565
line 5186
;5186:	else if ( !Q_stricmp( token, "WANIM_ATTACKMODE22" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3570
ARGP4
ADDRLP4 68
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
NEI4 $3568
line 5187
;5187:		return WANIM_ATTACKMODE22;
CNSTI4 17
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3568
line 5188
;5188:	else if ( !Q_stricmp( token, "WANIM_ATTACKMODE23" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3573
ARGP4
ADDRLP4 72
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 0
NEI4 $3571
line 5189
;5189:		return WANIM_ATTACKMODE23;
CNSTI4 18
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3571
line 5191
;5190:
;5191:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHT_UP" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3576
ARGP4
ADDRLP4 76
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $3574
line 5192
;5192:		return WANIM_IRONSIGHT_UP;
CNSTI4 19
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3574
line 5193
;5193:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHT_DN" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3579
ARGP4
ADDRLP4 80
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $3577
line 5194
;5194:		return WANIM_IRONSIGHT_DN;
CNSTI4 21
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3577
line 5195
;5195:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHTIDLE" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3582
ARGP4
ADDRLP4 84
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $3580
line 5196
;5196:		return WANIM_IRONSIGHTIDLE;
CNSTI4 20
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3580
line 5198
;5197:
;5198:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHT_ATK1" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3585
ARGP4
ADDRLP4 88
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $3583
line 5199
;5199:		return WANIM_IRONSIGHT_ATK1;
CNSTI4 22
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3583
line 5200
;5200:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHT_ATK2" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3588
ARGP4
ADDRLP4 92
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $3586
line 5201
;5201:		return WANIM_IRONSIGHT_ATK2;
CNSTI4 23
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3586
line 5202
;5202:	else if ( !Q_stricmp( token, "WANIM_IRONSIGHT_ATK3" ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $3591
ARGP4
ADDRLP4 96
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $3589
line 5203
;5203:		return WANIM_IRONSIGHT_ATK3;
CNSTI4 24
RETI4
ADDRGP4 $3516
JUMPV
LABELV $3589
line 5205
;5204:   
;5205:	return WANIM_UNKNOWN;
CNSTI4 25
RETI4
LABELV $3516
endproc CG_StringToAnimation 100 8
export CG_ParseWeaponAnimationFile
proc CG_ParseWeaponAnimationFile 20100 12
line 5218
;5206:}
;5207:
;5208:vec3_t	weaponOffsets[WP_NUM_WEAPONS*2];
;5209:
;5210:/*
;5211:======================
;5212:CG_ParseWeaponAnimationFile
;5213:
;5214:Read a configuration file containing animation coutns and rates
;5215:models/players/visor/animation.cfg, etc
;5216:======================
;5217:*/
;5218:qboolean	CG_ParseWeaponAnimationFile( const char *filename, int weapon_num ) {
line 5227
;5219:	char		*text_p;
;5220:	int			len;
;5221://	int			lines = 0;
;5222:	char		*token;
;5223:	float		fps;
;5224:	int			skip;
;5225:	char		text[20000];
;5226:	fileHandle_t	f;	
;5227:	int animation = WANIM_UNKNOWN;
ADDRLP4 8
CNSTI4 25
ASGNI4
line 5230
;5228:
;5229:	// load the file
;5230:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20020
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 20028
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20028
INDIRI4
ASGNI4
line 5231
;5231:	if ( len <= 0 ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
GTI4 $3593
line 5232
;5232:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $3592
JUMPV
LABELV $3593
line 5234
;5233:	}
;5234:	if ( len >= sizeof( text ) - 1 ) {
ADDRLP4 16
INDIRI4
CVIU4 4
CNSTU4 19999
LTU4 $3595
line 5235
;5235:		CG_Printf( "File %s too long\n", filename );
ADDRGP4 $3597
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 5236
;5236:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $3592
JUMPV
LABELV $3595
line 5238
;5237:	}
;5238:	trap_FS_Read( text, len, f );
ADDRLP4 20
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20020
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 5239
;5239:	text[len] = 0;
ADDRLP4 16
INDIRI4
ADDRLP4 20
ADDP4
CNSTI1 0
ASGNI1
line 5240
;5240:	trap_FS_FCloseFile( f );
ADDRLP4 20020
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 5243
;5241:
;5242:	// parse the text
;5243:	text_p = text;
ADDRLP4 4
ADDRLP4 20
ASGNP4
line 5244
;5244:	skip = 0;	// quite the compiler warning
ADDRLP4 20024
CNSTI4 0
ASGNI4
line 5247
;5245: 
;5246:	// clear diz
;5247:	VectorClear( weaponOffsets[weapon_num] );
ADDRLP4 20032
CNSTI4 12
ADDRFP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 20036
CNSTF4 0
ASGNF4
ADDRLP4 20032
INDIRI4
ADDRGP4 weaponOffsets+8
ADDP4
ADDRLP4 20036
INDIRF4
ASGNF4
ADDRLP4 20032
INDIRI4
ADDRGP4 weaponOffsets+4
ADDP4
ADDRLP4 20036
INDIRF4
ASGNF4
ADDRLP4 20032
INDIRI4
ADDRGP4 weaponOffsets
ADDP4
ADDRLP4 20036
INDIRF4
ASGNF4
ADDRGP4 $3601
JUMPV
LABELV $3600
line 5251
;5248:	
;5249:
;5250:	// parse animation information
;5251:	while ( 1 ) { 
line 5254
;5252:
;5253:		// first thing we do, read which animation it's for
;5254:		token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20040
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20040
INDIRP4
ASGNP4
line 5257
;5255:
;5256:		// no token? stop parsing...
;5257:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3603
line 5258
;5258:			break;
ADDRGP4 $3602
JUMPV
LABELV $3603
line 5261
;5259:		}
;5260:
;5261:		if ( !Q_stricmp( token, "W_OFFSET" ) && weaponOffsets[weapon_num][0] == 0 && weaponOffsets[weapon_num][1] == 0 && weaponOffsets[weapon_num][2] == 0 ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $3607
ARGP4
ADDRLP4 20044
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 20044
INDIRI4
CNSTI4 0
NEI4 $3605
ADDRLP4 20048
CNSTI4 12
ADDRFP4 4
INDIRI4
MULI4
ASGNI4
ADDRLP4 20052
CNSTF4 0
ASGNF4
ADDRLP4 20048
INDIRI4
ADDRGP4 weaponOffsets
ADDP4
INDIRF4
ADDRLP4 20052
INDIRF4
NEF4 $3605
ADDRLP4 20048
INDIRI4
ADDRGP4 weaponOffsets+4
ADDP4
INDIRF4
ADDRLP4 20052
INDIRF4
NEF4 $3605
ADDRLP4 20048
INDIRI4
ADDRGP4 weaponOffsets+8
ADDP4
INDIRF4
ADDRLP4 20052
INDIRF4
NEF4 $3605
line 5264
;5262:			vec3_t offset;
;5263:
;5264:			VectorClear(offset);
ADDRLP4 20068
CNSTF4 0
ASGNF4
ADDRLP4 20056+8
ADDRLP4 20068
INDIRF4
ASGNF4
ADDRLP4 20056+4
ADDRLP4 20068
INDIRF4
ASGNF4
ADDRLP4 20056
ADDRLP4 20068
INDIRF4
ASGNF4
line 5266
;5265:
;5266:			token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20072
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20072
INDIRP4
ASGNP4
line 5268
;5267:
;5268:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3612
line 5269
;5269:				VectorClear(offset);
ADDRLP4 20076
CNSTF4 0
ASGNF4
ADDRLP4 20056+8
ADDRLP4 20076
INDIRF4
ASGNF4
ADDRLP4 20056+4
ADDRLP4 20076
INDIRF4
ASGNF4
ADDRLP4 20056
ADDRLP4 20076
INDIRF4
ASGNF4
line 5270
;5270:				break;
ADDRGP4 $3602
JUMPV
LABELV $3612
line 5273
;5271:			}
;5272:
;5273:			offset[0] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20076
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 20056
ADDRLP4 20076
INDIRF4
ASGNF4
line 5275
;5274:
;5275:			token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20080
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20080
INDIRP4
ASGNP4
line 5277
;5276:
;5277:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3616
line 5278
;5278:				VectorClear(offset);
ADDRLP4 20084
CNSTF4 0
ASGNF4
ADDRLP4 20056+8
ADDRLP4 20084
INDIRF4
ASGNF4
ADDRLP4 20056+4
ADDRLP4 20084
INDIRF4
ASGNF4
ADDRLP4 20056
ADDRLP4 20084
INDIRF4
ASGNF4
line 5279
;5279:				break;
ADDRGP4 $3602
JUMPV
LABELV $3616
line 5281
;5280:			}
;5281:			offset[1] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20084
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 20056+4
ADDRLP4 20084
INDIRF4
ASGNF4
line 5283
;5282:
;5283:			token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20088
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20088
INDIRP4
ASGNP4
line 5285
;5284:
;5285:			if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3621
line 5286
;5286:				VectorClear(offset);
ADDRLP4 20092
CNSTF4 0
ASGNF4
ADDRLP4 20056+8
ADDRLP4 20092
INDIRF4
ASGNF4
ADDRLP4 20056+4
ADDRLP4 20092
INDIRF4
ASGNF4
ADDRLP4 20056
ADDRLP4 20092
INDIRF4
ASGNF4
line 5287
;5287:				break;
ADDRGP4 $3602
JUMPV
LABELV $3621
line 5290
;5288:			}
;5289:
;5290:			offset[2] = atof(token);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20092
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 20056+8
ADDRLP4 20092
INDIRF4
ASGNF4
line 5292
;5291:
;5292:			VectorCopy( offset, weaponOffsets[weapon_num] );
CNSTI4 12
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponOffsets
ADDP4
ADDRLP4 20056
INDIRB
ASGNB 12
line 5294
;5293:
;5294:			token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20096
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20096
INDIRP4
ASGNP4
line 5297
;5295:
;5296://			Com_Printf("parsed weaponoffset %s for weapon %i\n", vtos(offset),weapon_num );
;5297:		}
LABELV $3605
line 5300
;5298:
;5299:		// if found the end string
;5300:		if (token[0] == '$' && token[1] == 'E' )
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 36
NEI4 $3626
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 69
NEI4 $3626
line 5301
;5301:			break; // stop parsing
ADDRGP4 $3602
JUMPV
LABELV $3626
line 5304
;5302:
;5303:		// good token? then set it as current anim.
;5304:		animation = CG_StringToAnimation(token); 
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20060
ADDRGP4 CG_StringToAnimation
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 20060
INDIRI4
ASGNI4
line 5307
;5305:
;5306:		// check if it's valid
;5307:		if (animation == WANIM_UNKNOWN)
ADDRLP4 8
INDIRI4
CNSTI4 25
NEI4 $3628
line 5308
;5308:		{
line 5309
;5309:			Com_Printf( "unknown animation '%s' in %s\n", token, filename );
ADDRGP4 $3630
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_Printf
CALLV
pop
line 5310
;5310:			break;
ADDRGP4 $3602
JUMPV
LABELV $3628
line 5314
;5311:		}
;5312:
;5313:		// then loadup everything into the current animation
;5314:		token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20064
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20064
INDIRP4
ASGNP4
line 5316
;5315:
;5316:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3631
line 5317
;5317:			break;
ADDRGP4 $3602
JUMPV
LABELV $3631
line 5319
;5318:		}
;5319:		weaponAnimations[weapon_num][animation].firstFrame = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20068
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
ADDRLP4 20068
INDIRI4
ASGNI4
line 5322
;5320: 
;5321:
;5322:		token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20072
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20072
INDIRP4
ASGNP4
line 5323
;5323:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3633
line 5324
;5324:			break;
ADDRGP4 $3602
JUMPV
LABELV $3633
line 5326
;5325:		}
;5326:		weaponAnimations[weapon_num][animation].numFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20076
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
CNSTI4 4
ADDP4
ADDRLP4 20076
INDIRI4
ASGNI4
line 5328
;5327:
;5328:		token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20080
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20080
INDIRP4
ASGNP4
line 5329
;5329:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3635
line 5330
;5330:			break;
ADDRGP4 $3602
JUMPV
LABELV $3635
line 5332
;5331:		}
;5332:		weaponAnimations[weapon_num][animation].loopFrames = atoi( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20084
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 28
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
CNSTI4 8
ADDP4
ADDRLP4 20084
INDIRI4
ASGNI4
line 5334
;5333:
;5334:		token = COM_Parse( &text_p );
ADDRLP4 4
ARGP4
ADDRLP4 20088
ADDRGP4 COM_Parse
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20088
INDIRP4
ASGNP4
line 5335
;5335:		if ( !token ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3637
line 5336
;5336:			break;
ADDRGP4 $3602
JUMPV
LABELV $3637
line 5338
;5337:		}
;5338:		fps = atof( token );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20092
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 20092
INDIRF4
ASGNF4
line 5341
;5339:
;5340:		// default frames per second to zero
;5341:		if ( fps == 0 ) {
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $3639
line 5342
;5342:			fps = 1;
ADDRLP4 12
CNSTF4 1065353216
ASGNF4
line 5343
;5343:		}
LABELV $3639
line 5344
;5344:		weaponAnimations[weapon_num][animation].frameLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
CNSTI4 12
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 5345
;5345:		weaponAnimations[weapon_num][animation].initialLerp = 1000 / fps;
CNSTI4 28
ADDRLP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
CNSTI4 16
ADDP4
CNSTF4 1148846080
ADDRLP4 12
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 5346
;5346:	}  
LABELV $3601
line 5251
ADDRGP4 $3600
JUMPV
LABELV $3602
line 5349
;5347:
;5348://	weaponOffsets[weapon_num][0] -= 5;
;5349:	return qtrue;
CNSTI4 1
RETI4
LABELV $3592
endproc CG_ParseWeaponAnimationFile 20100 12
export CG_SetWeaponLerpFrameAnimation
proc CG_SetWeaponLerpFrameAnimation 12 8
line 5359
;5350:}
;5351:
;5352:/*
;5353:===============
;5354:CG_SetWeaponLerpFrameAnimation
;5355:
;5356:may include ANIM_TOGGLEBIT
;5357:===============
;5358:*/
;5359:void CG_SetWeaponLerpFrameAnimation( lerpFrame_t *lf, int weapon_num, int newAnimation ) {
line 5362
;5360:	animation_t	*anim;
;5361:
;5362:	lf->animationNumber = newAnimation;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 5363
;5363:	newAnimation &= ~ANIM_TOGGLEBIT;
ADDRFP4 8
ADDRFP4 8
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 5365
;5364:
;5365:	if ( newAnimation < 0 || newAnimation >= MAX_WEAPON_ANIMATIONS ) {
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $3644
ADDRLP4 4
INDIRI4
CNSTI4 26
LTI4 $3642
LABELV $3644
line 5366
;5366:		CG_Error( "Bad animation number: %i", newAnimation );
ADDRGP4 $3645
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 5367
;5367:	}
LABELV $3642
line 5369
;5368:
;5369:	anim = &weaponAnimations[weapon_num][ newAnimation ];
ADDRLP4 0
CNSTI4 28
ADDRFP4 8
INDIRI4
MULI4
CNSTI4 728
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 weaponAnimations
ADDP4
ADDP4
ASGNP4
line 5371
;5370:
;5371:	lf->animation = anim;
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 5372
;5372:	lf->animationTime = lf->frameTime + anim->initialLerp;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDI4
ASGNI4
line 5374
;5373:
;5374:	if ( cg_debugAnim.integer == -1 ) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 -1
NEI4 $3646
line 5375
;5375:		CG_Printf( "Setted WeaponAnim: %i\n", newAnimation );
ADDRGP4 $3649
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 5376
;5376:	}
LABELV $3646
line 5377
;5377:}
LABELV $3641
endproc CG_SetWeaponLerpFrameAnimation 12 8
export CG_GetSpeedScaleForWeaponSwitch
proc CG_GetSpeedScaleForWeaponSwitch 20 4
line 5418
;5378:
;5379:// old
;5380:#if 0
;5381:/*
;5382:===============
;5383:CG_CheckPause
;5384:
;5385:Checks for a Pause , if correct frame, it makes a random break
;5386:===============
;5387:*/
;5388:static qboolean CG_CheckPause ( int cur_frame, int weapon_num )
;5389:{
;5390:	int i = 0;
;5391:
;5392:	for ( i = 0 ; i < weaponStuff[weapon_num].num_pauseframes ; i++ )
;5393:	{
;5394:		if (cur_frame == weaponStuff[weapon_num].pauseframes[i] )
;5395:		{
;5396:			if (random() < 0.3) {
;5397:#if 0
;5398:				CG_Printf("Breaking...\n");
;5399:#endif
;5400:				return qtrue;
;5401:			}
;5402:		}
;5403:	}
;5404:	return qfalse;
;5405:
;5406:}
;5407:#endif
;5408:
;5409:
;5410:/*
;5411:===============
;5412:CG_GetSpeedScaleForWeaponSwitch
;5413:
;5414:returns the speedscale for the weaponswitching based on
;5415:the techincal level of the player
;5416:===============
;5417:*/
;5418:float	CG_GetSpeedScaleForWeaponSwitch( playerState_t *ps, centity_t *cent ) {
line 5419
;5419:	int weapAnim = cent->pe.weapAnim;	
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ASGNI4
line 5420
;5420:	int	techLevel = ps->persistant[PERS_TECHNICAL];
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
line 5421
;5421:	float	speedMod = 1.0f;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 5423
;5422:	
;5423:	if ( weapAnim != WANIM_PUTUP && weapAnim != WANIM_PUTAWAY )
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $3651
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $3651
line 5424
;5424:		return 1.0f;
CNSTF4 1065353216
RETF4
ADDRGP4 $3650
JUMPV
LABELV $3651
line 5427
;5425:
;5426:
;5427:	speedMod = 1.0f + ( 1.0f - BG_GetSpeedMod( techLevel ) ) * 2;
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_GetSpeedMod
CALLF4
ASGNF4
ADDRLP4 4
CNSTF4 1073741824
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 5431
;5428:
;5429://	CG_Printf("speed mod: %3f tech: %i\n", speedMod, techLevel );
;5430:
;5431:	return speedMod;
ADDRLP4 4
INDIRF4
RETF4
LABELV $3650
endproc CG_GetSpeedScaleForWeaponSwitch 20 4
export CG_RunWeaponLerpFrame
proc CG_RunWeaponLerpFrame 40 12
line 5442
;5432:}
;5433:
;5434:/*
;5435:===============
;5436:CG_RunWeaponLerpFrame
;5437:
;5438:Sets cg.snap, cg.oldFrame, and cg.backlerp
;5439:cg.time should be between oldFrameTime and frameTime after exit
;5440:===============
;5441:*/
;5442:void CG_RunWeaponLerpFrame( clientInfo_t *ci, lerpFrame_t *lf, int weapon_num, int newAnimation, float speedScale, playerState_t *ps ,centity_t	*cent) {
line 5444
;5443:	int			f;
;5444:	qboolean	loopanim = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 5448
;5445:	animation_t	*anim;
;5446:
;5447:	// debugging tool to get no animations
;5448:	if ( cg_animSpeed.integer == 0 ) {
ADDRGP4 cg_animSpeed+12
INDIRI4
CNSTI4 0
NEI4 $3654
line 5449
;5449:		lf->oldFrame = lf->frame = lf->backlerp = 0;
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 20
ADDRLP4 16
INDIRF4
CVFI4 4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ASGNI4
line 5450
;5450:		return;
ADDRGP4 $3653
JUMPV
LABELV $3654
line 5453
;5451:	}
;5452:
;5453:	if ( cg_animSpeed.value != 1.0f ) {
ADDRGP4 cg_animSpeed+8
INDIRF4
CNSTF4 1065353216
EQF4 $3657
line 5454
;5454:		speedScale = cg_animSpeed.value;
ADDRFP4 16
ADDRGP4 cg_animSpeed+8
INDIRF4
ASGNF4
line 5455
;5455:	}
LABELV $3657
line 5462
;5456:/*	if ( CG_CheckPause(lf->frame, weapon_num) ) {		
;5457:		loopanim = qtrue;
;5458:		return;
;5459:	}
;5460:*/
;5461:	// see if the animation sequence is switching
;5462:	if ( newAnimation != lf->animationNumber || !lf->animation ) {
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 12
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
NEI4 $3663
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $3661
LABELV $3663
line 5466
;5463:#if 0
;5464:		CG_Printf("Animation Sequence Switching!\n");
;5465:#endif
;5466:		CG_SetWeaponLerpFrameAnimation( lf, weapon_num, newAnimation );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_SetWeaponLerpFrameAnimation
CALLV
pop
line 5467
;5467:	}
LABELV $3661
line 5471
;5468:
;5469:	// if we have passed the current frame, move it to
;5470:	// oldFrame and calculate a new frame
;5471:	if ( cg.time >= lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LTI4 $3664
line 5473
;5472:
;5473:		if (loopanim)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $3667
line 5474
;5474:			lf->frame--;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $3667
line 5476
;5475:
;5476:		lf->oldFrame = lf->frame;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 5477
;5477:		lf->oldFrameTime = lf->frameTime;
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 5480
;5478:
;5479:		// get the next frame based on the animation
;5480:		anim = lf->animation;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRP4
ASGNP4
line 5481
;5481:		if ( !anim->frameLerp ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $3669
line 5482
;5482:			return;		// shouldn't happen
ADDRGP4 $3653
JUMPV
LABELV $3669
line 5484
;5483:		}
;5484:		if ( cg.time < lf->animationTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
GEI4 $3671
line 5485
;5485:			lf->frameTime = lf->animationTime;		// initial lerp
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 5486
;5486:		} else {
ADDRGP4 $3672
JUMPV
LABELV $3671
line 5487
;5487:			lf->frameTime = lf->oldFrameTime + anim->frameLerp;
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
CNSTI4 12
ASGNI4
ADDRLP4 28
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 5488
;5488:		}
LABELV $3672
line 5489
;5489:		f = ( lf->frameTime - lf->animationTime ) / anim->frameLerp;
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
CNSTI4 12
ASGNI4
ADDRLP4 4
ADDRLP4 28
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRI4
DIVI4
ASGNI4
line 5490
;5490:		f *= speedScale;		// adjust for haste, etc
ADDRLP4 4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRFP4 16
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 5491
;5491:		if ( f >= anim->numFrames ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $3674
line 5492
;5492:			f -= anim->numFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 5493
;5493:			if ( anim->loopFrames ) {
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
EQI4 $3676
line 5494
;5494:				f %= anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
MODI4
ASGNI4
line 5495
;5495:				f += anim->numFrames - anim->loopFrames;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
ADDI4
ASGNI4
line 5496
;5496:			} else {
ADDRGP4 $3677
JUMPV
LABELV $3676
line 5497
;5497:				f = anim->numFrames - 1;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 5500
;5498:				// the animation is stuck at the end, so it
;5499:				// can immediately transition to another sequence
;5500:				lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 5502
;5501:		 
;5502:			}
LABELV $3677
line 5503
;5503:		}
LABELV $3674
line 5505
;5504:		
;5505:		lf->frame = anim->firstFrame + f;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 5507
;5506:
;5507:		if ( cg.time > lf->frameTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
LEI4 $3679
line 5508
;5508:			lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 5509
;5509:			if ( cg_debugAnim.integer == -1) {
ADDRGP4 cg_debugAnim+12
INDIRI4
CNSTI4 -1
NEI4 $3683
line 5510
;5510:				CG_Printf( "Clamp lf->frameTime\n");
ADDRGP4 $3686
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 5511
;5511:			}
LABELV $3683
line 5512
;5512:		}
LABELV $3679
line 5513
;5513:	}
LABELV $3664
line 5515
;5514:
;5515:	if ( lf->frameTime > cg.time + 200 ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 200
ADDI4
LEI4 $3687
line 5516
;5516:		lf->frameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 5517
;5517:	}
LABELV $3687
line 5519
;5518:
;5519:	if ( lf->oldFrameTime > cg.time ) {
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
LEI4 $3691
line 5520
;5520:		lf->oldFrameTime = cg.time;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 5521
;5521:	}
LABELV $3691
line 5523
;5522:	// calculate current lerp value
;5523:	if ( lf->frameTime == lf->oldFrameTime ) {
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
NEI4 $3695
line 5524
;5524:		lf->backlerp = 0;
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 0
ASGNF4
line 5525
;5525:	} else {
ADDRGP4 $3696
JUMPV
LABELV $3695
line 5526
;5526:		lf->backlerp = 1.0 - (float)( cg.time - lf->oldFrameTime ) / ( lf->frameTime - lf->oldFrameTime );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 16
ADDP4
CNSTF4 1065353216
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 5527
;5527:	}
LABELV $3696
line 5528
;5528:} 
LABELV $3653
endproc CG_RunWeaponLerpFrame 40 12
export AxistoAngles
proc AxistoAngles 56 8
line 5542
;5529:/*
;5530:===============
;5531:CG_WeaponAnimation
;5532:===============
;5533:*/ 
;5534:/*
;5535:=================
;5536:AxistoAngles
;5537:TA: takes an axis (forward + right + up)
;5538:    and returns angles -- including a roll
;5539:=================
;5540:*/
;5541:void AxistoAngles( vec3_t axis[3], vec3_t angles ) 
;5542:{
line 5546
;5543:	float length1;
;5544:	float yaw, pitch, roll;
;5545:
;5546:	roll = pitch = yaw = 0;
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 16
INDIRF4
ASGNF4
line 5548
;5547:
;5548:	if ( axis[0][1] == 0 && axis[0][0] == 0 ) 
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
NEF4 $3699
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 24
INDIRF4
NEF4 $3699
line 5549
;5549:	{
line 5551
;5550:		
;5551:		if ( axis[0][2] > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 0
LEF4 $3701
line 5552
;5552:			pitch = 90;
ADDRLP4 0
CNSTF4 1119092736
ASGNF4
line 5553
;5553:		}
ADDRGP4 $3700
JUMPV
LABELV $3701
line 5554
;5554:		else {
line 5555
;5555:			pitch = 270;
ADDRLP4 0
CNSTF4 1132920832
ASGNF4
line 5556
;5556:		}
line 5557
;5557:	}
ADDRGP4 $3700
JUMPV
LABELV $3699
line 5558
;5558:	else {
line 5559
;5559:		if ( axis[0][0] ) {
ADDRFP4 0
INDIRP4
INDIRF4
CNSTF4 0
EQF4 $3703
line 5560
;5560:			yaw = ( atan2 ( axis[0][1], axis[0][0] ) * 180 / M_PI );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 4
CNSTF4 1127481344
ADDRLP4 32
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
ASGNF4
line 5561
;5561:		}
ADDRGP4 $3704
JUMPV
LABELV $3703
line 5562
;5562:		else if ( axis[0][1] > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $3705
line 5563
;5563:			yaw = 90;
ADDRLP4 4
CNSTF4 1119092736
ASGNF4
line 5564
;5564:		}
ADDRGP4 $3706
JUMPV
LABELV $3705
line 5565
;5565:		else {
line 5566
;5566:			yaw = 270;
ADDRLP4 4
CNSTF4 1132920832
ASGNF4
line 5567
;5567:		}
LABELV $3706
LABELV $3704
line 5568
;5568:		if ( yaw < 0 ) {
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $3707
line 5569
;5569:			yaw += 360;
ADDRLP4 4
ADDRLP4 4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 5570
;5570:		}
LABELV $3707
line 5572
;5571:
;5572:		length1 = sqrt ( axis[0][0]*axis[0][0] + axis[0][1]*axis[0][1] );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 36
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDRLP4 36
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 40
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 40
INDIRF4
ASGNF4
line 5573
;5573:		pitch = ( atan2(axis[0][2], length1) * 180 / M_PI );
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 44
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1127481344
ADDRLP4 44
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
ASGNF4
line 5575
;5574:
;5575:		if ( pitch < 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $3709
line 5576
;5576:			pitch += 360;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 5577
;5577:		}
LABELV $3709
line 5579
;5578:
;5579:		roll = ( atan2( axis[1][2], axis[2][2] ) * 180 / M_PI );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ARGF4
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 atan2
CALLF4
ASGNF4
ADDRLP4 8
CNSTF4 1127481344
ADDRLP4 52
INDIRF4
MULF4
CNSTF4 1078530011
DIVF4
ASGNF4
line 5580
;5580:		if ( roll < 0 ) 
ADDRLP4 8
INDIRF4
CNSTF4 0
GEF4 $3711
line 5581
;5581:		{
line 5582
;5582:			roll += 360;
ADDRLP4 8
ADDRLP4 8
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 5583
;5583:		}
LABELV $3711
line 5584
;5584:	}
LABELV $3700
line 5586
;5585:
;5586:	angles[PITCH] = -pitch;
ADDRFP4 4
INDIRP4
ADDRLP4 0
INDIRF4
NEGF4
ASGNF4
line 5587
;5587:	angles[YAW] = yaw;
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 5588
;5588:	angles[ROLL] = roll;
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 5589
;5589:} 
LABELV $3698
endproc AxistoAngles 56 8
export CG_SetupRender
proc CG_SetupRender 0 12
line 5598
;5590:
;5591:/*
;5592:================
;5593:CG_SetupRender
;5594:
;5595:  sets up explicit weapon rendering
;5596:================
;5597:*/
;5598:qboolean CG_SetupRender( void ) { 
line 5601
;5599:
;5600:#ifdef SAME_WEAPONPIPE
;5601:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $3713
JUMPV
line 5605
;5602:#endif
;5603:
;5604: 	// copy values from cg.refdef to cg.weaponrefdef
;5605:	memset( &cg.weaponrefdef, 0, sizeof( cg.weaponrefdef ) );
ADDRGP4 cg+109424
ARGP4
CNSTI4 0
ARGI4
CNSTI4 368
ARGI4
ADDRGP4 memset
CALLP4
pop
line 5608
;5606:
;5607:	// setup refdef
;5608:	cg.weaponrefdef.fov_x = cg_correctgunFov.value;
ADDRGP4 cg+109424+16
ADDRGP4 cg_correctgunFov+8
INDIRF4
ASGNF4
line 5609
;5609:	cg.weaponrefdef.fov_y = cg_correctgunFov.value;
ADDRGP4 cg+109424+20
ADDRGP4 cg_correctgunFov+8
INDIRF4
ASGNF4
line 5610
;5610:	cg.weaponrefdef.height = cg.refdef.height;
ADDRGP4 cg+109424+12
ADDRGP4 cg+109044+12
INDIRI4
ASGNI4
line 5611
;5611:	cg.weaponrefdef.width = cg.refdef.width;
ADDRGP4 cg+109424+8
ADDRGP4 cg+109044+8
INDIRI4
ASGNI4
line 5612
;5612:	cg.weaponrefdef.x = 0;
ADDRGP4 cg+109424
CNSTI4 0
ASGNI4
line 5613
;5613:	cg.weaponrefdef.y = 0;
ADDRGP4 cg+109424+4
CNSTI4 0
ASGNI4
line 5615
;5614:
;5615:	cg.weaponrefdef.rdflags = RDF_NOWORLDMODEL;;
ADDRGP4 cg+109424+76
CNSTI4 1
ASGNI4
line 5619
;5616:
;5617:	
;5618://	cg.weaponrefdef.text  
;5619:	VectorCopy( cg.refdef.vieworg , cg.weaponrefdef.vieworg );
ADDRGP4 cg+109424+24
ADDRGP4 cg+109044+24
INDIRB
ASGNB 12
line 5620
;5620:	AxisCopy( cg.refdef.viewaxis, cg.weaponrefdef.viewaxis ); 
ADDRGP4 cg+109044+36
ARGP4
ADDRGP4 cg+109424+36
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 5622
;5621:
;5622: 	cg.weaponrefdef.time = cg.time;
ADDRGP4 cg+109424+72
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 5624
;5623:   
;5624:	trap_R_ClearScene();
ADDRGP4 trap_R_ClearScene
CALLV
pop
line 5625
;5625:	return qtrue;
CNSTI4 1
RETI4
LABELV $3713
endproc CG_SetupRender 0 12
export CG_RenderWeapon
proc CG_RenderWeapon 0 4
line 5628
;5626:}
;5627:void CG_RenderWeapon( void )
;5628:{
line 5629
;5629:	trap_R_RenderScene( &cg.weaponrefdef );
ADDRGP4 cg+109424
ARGP4
ADDRGP4 trap_R_RenderScene
CALLV
pop
line 5630
;5630:}
LABELV $3746
endproc CG_RenderWeapon 0 4
export CG_WeaponAnimation
proc CG_WeaponAnimation 1428 48
line 5632
;5631:
;5632:void CG_WeaponAnimation( playerState_t *ps ) {
line 5646
;5633:	refEntity_t	hand;
;5634:	centity_t	*cent;
;5635:	clientInfo_t	*ci;
;5636:	float		fovOffset;
;5637:	vec3_t		angles;
;5638:	weaponInfo_t	*weapon;
;5639: 	refEntity_t	flash, silencer, scope, lasersight,bayonet;
;5640:	int	weaponNum;
;5641:	centity_t	*nonPredictedCent;
;5642:	vec3_t	origin;
;5643:	vec3_t		weaponMod;
;5644:
;5645:	// 
;5646:	if ( ps->pm_type == PM_INTERMISSION || ps->pm_type == PM_NOCLIP || ps->pm_type == PM_SPECTATOR )
ADDRLP4 900
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 900
INDIRI4
CNSTI4 5
EQI4 $3752
ADDRLP4 900
INDIRI4
CNSTI4 1
EQI4 $3752
ADDRLP4 900
INDIRI4
CNSTI4 2
NEI4 $3749
LABELV $3752
line 5647
;5647:		return;
ADDRGP4 $3748
JUMPV
LABELV $3749
line 5650
;5648:
;5649:	// no gun if bandaging
;5650:	if ( ps->weaponstate == WEAPON_BANDAGING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $3753
line 5651
;5651:		return;
ADDRGP4 $3748
JUMPV
LABELV $3753
line 5654
;5652:
;5653:	// no gun if in third person view
;5654:	if ( cg.renderingThirdPerson )
ADDRGP4 cg+107628
INDIRI4
CNSTI4 0
EQI4 $3755
line 5655
;5655:		return;
ADDRGP4 $3748
JUMPV
LABELV $3755
line 5658
;5656:
;5657:	// don't draw if testing a gun model
;5658:	if ( cg.testGun )
ADDRGP4 cg+115612
INDIRI4
CNSTI4 0
EQI4 $3758
line 5659
;5659:		return;
ADDRGP4 $3748
JUMPV
LABELV $3758
line 5661
;5660:
;5661:	if ( !cg_drawGun.integer )
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $3761
line 5662
;5662:		return;
ADDRGP4 $3748
JUMPV
LABELV $3761
line 5664
;5663:
;5664:	if (  cg_viewsize.integer < 100 )
ADDRGP4 cg_viewsize+12
INDIRI4
CNSTI4 100
GEI4 $3764
line 5665
;5665:		return;
ADDRGP4 $3748
JUMPV
LABELV $3764
line 5668
;5666:
;5667:	// no weapon if we're at a camera.
;5668:	if ( cg.cameraActive )
ADDRGP4 cg+116652
INDIRI4
CNSTI4 0
EQI4 $3767
line 5669
;5669:		return;
ADDRGP4 $3748
JUMPV
LABELV $3767
line 5672
;5670:	
;5671:	// drop gun lower at higher fov
;5672:	if ( cg_fov.integer > 90 ) {
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
LEI4 $3770
line 5673
;5673:		fovOffset = -0.2 * ( cg_fov.integer - 90 );
ADDRLP4 884
CNSTF4 3192704205
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
SUBI4
CVIF4 4
MULF4
ASGNF4
line 5674
;5674:	} else {
ADDRGP4 $3771
JUMPV
LABELV $3770
line 5675
;5675:		fovOffset = 0;
ADDRLP4 884
CNSTF4 0
ASGNF4
line 5676
;5676:	}
LABELV $3771
line 5678
;5677:
;5678:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 280
ADDRGP4 cg+108104
ASGNP4
line 5680
;5679:	// CG_RegisterWeapon( ps->weapon );
;5680:	weapon = &cg_weapons[ ps->weapon ];
ADDRLP4 284
CNSTI4 296
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 5682
;5681:
;5682:	memset (&hand, 0, sizeof(hand));
ADDRLP4 140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 5685
;5683:
;5684: 	// set up gun position
;5685:	CG_CalculateWeaponPosition( hand.origin, angles ); 
ADDRLP4 140+68
ARGP4
ADDRLP4 428
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 5687
;5686:
;5687:	if ( cg.ladderWeaponTime == 23 ) 
ADDRGP4 cg+116380
INDIRI4
CNSTI4 23
NEI4 $3776
line 5688
;5688:		return; 
ADDRGP4 $3748
JUMPV
LABELV $3776
line 5690
;5689:
;5690:	VectorClear( weaponMod );
ADDRLP4 904
CNSTF4 0
ASGNF4
ADDRLP4 864+8
ADDRLP4 904
INDIRF4
ASGNF4
ADDRLP4 864+4
ADDRLP4 904
INDIRF4
ASGNF4
ADDRLP4 864
ADDRLP4 904
INDIRF4
ASGNF4
line 5710
;5691:
;5692: // BLUTENGEL 20040206 DEMOCRITUS
;5693: // REMOVING AS DEMOCRITUS REQUESTED for
;5694: // modelling the new weapon positions
;5695:/*#ifdef SAME_WEAPONPIPE
;5696:	weaponMod[0] = -4;
;5697:	weaponMod[1] = -3;
;5698:#endif */
;5699:/*	if ( cg_smallGuns.integer || cg_drawGun.integer == 3 || cg_drawGun.integer == 4 )
;5700:	{
;5701:		weaponMod[0] = 2.5f;
;5702:		weaponMod[1] = 0.0f;
;5703:		weaponMod[2] = -2.5f;
;5704:
;5705:		VectorMA( hand.origin, weaponMod[0], cg.refdef.viewaxis[0], hand.origin);
;5706:		VectorMA( hand.origin, weaponMod[1], cg.refdef.viewaxis[1], hand.origin);
;5707:		VectorMA( hand.origin, weaponMod[2], cg.refdef.viewaxis[2], hand.origin);
;5708:	}*/
;5709:  
;5710:	AnglesToAxis( angles, hand.axis );
ADDRLP4 428
ARGP4
ADDRLP4 140+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 5714
;5711:
;5712:	// map torso animations to weapon animations
;5713:	// get clientinfo for animation map
;5714:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];		
ADDRLP4 876
CNSTI4 2484
ADDRLP4 280
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+38664
ADDP4
ASGNP4
line 5716
;5715: 
;5716:	if ( ps->weaponstate == WEAPON_READY && ( BG_IsPistol(ps->weapon) ) && ps->stats[STAT_ROUNDS] <= 0)
ADDRLP4 908
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 908
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $3783
ADDRLP4 908
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 912
ADDRGP4 BG_IsPistol
CALLI4
ASGNI4
ADDRLP4 916
CNSTI4 0
ASGNI4
ADDRLP4 912
INDIRI4
ADDRLP4 916
INDIRI4
EQI4 $3783
ADDRFP4 0
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ADDRLP4 916
INDIRI4
GTI4 $3783
line 5717
;5717:		cent->pe.weapAnim = WANIM_IDLE_EMPTY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 7
ASGNI4
ADDRGP4 $3784
JUMPV
LABELV $3783
line 5718
;5718: 	else if (ps->weaponstate == WEAPON_READY)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $3785
line 5719
;5719:		cent->pe.weapAnim = WANIM_IDLE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 6
ASGNI4
ADDRGP4 $3786
JUMPV
LABELV $3785
line 5720
;5720:	else if (ps->weaponstate == WEAPON_RAISING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $3787
line 5721
;5721:		cent->pe.weapAnim = WANIM_PUTUP;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $3788
JUMPV
LABELV $3787
line 5722
;5722:	else if (ps->weaponstate == WEAPON_DROPPING || ps->weaponstate == WEAPON_BANDAGING_START)
ADDRLP4 920
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 920
INDIRI4
CNSTI4 2
EQI4 $3791
ADDRLP4 920
INDIRI4
CNSTI4 12
NEI4 $3789
LABELV $3791
line 5723
;5723:		cent->pe.weapAnim = WANIM_PUTAWAY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $3790
JUMPV
LABELV $3789
line 5724
;5724:	else if (ps->weaponstate == WEAPON_FIRING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3792
line 5725
;5725:		cent->pe.weapAnim = WANIM_ATTACK;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 2
ASGNI4
ADDRGP4 $3793
JUMPV
LABELV $3792
line 5726
;5726:	else if (ps->weaponstate == WEAPON_FIRING2)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 4
NEI4 $3794
line 5727
;5727:		cent->pe.weapAnim = WANIM_ATTACK2;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 3
ASGNI4
ADDRGP4 $3795
JUMPV
LABELV $3794
line 5728
;5728:	else if (ps->weaponstate == WEAPON_FIRING3)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $3796
line 5729
;5729:		cent->pe.weapAnim = WANIM_ATTACK3;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 4
ASGNI4
ADDRGP4 $3797
JUMPV
LABELV $3796
line 5730
;5730:	else if (ps->weaponstate == WEAPON_FIREEMPTY)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 6
NEI4 $3798
line 5731
;5731:		cent->pe.weapAnim = WANIM_LASTRND;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $3799
JUMPV
LABELV $3798
line 5732
;5732:	else if (ps->weaponstate == WEAPON_LASTRND)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 11
NEI4 $3800
line 5733
;5733:		cent->pe.weapAnim = WANIM_LASTRND;	
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $3801
JUMPV
LABELV $3800
line 5734
;5734:	else if (ps->weaponstate == WEAPON_RELOADING_EMPTY)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 10
NEI4 $3802
line 5735
;5735:		cent->pe.weapAnim = WANIM_RELOAD_EMPTY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 9
ASGNI4
ADDRGP4 $3803
JUMPV
LABELV $3802
line 5736
;5736:	else if (ps->weaponstate == WEAPON_RELOADING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 7
NEI4 $3804
line 5737
;5737:		cent->pe.weapAnim = WANIM_RELOAD;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 8
ASGNI4
ADDRGP4 $3805
JUMPV
LABELV $3804
line 5738
;5738:	else if (ps->weaponstate == WEAPON_LASTRND)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 11
NEI4 $3806
line 5739
;5739:		cent->pe.weapAnim = WANIM_LASTRND;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $3807
JUMPV
LABELV $3806
line 5740
;5740:	else if (ps->weaponstate == WEAPON_HOLSTERING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 21
NEI4 $3808
line 5741
;5741:		cent->pe.weapAnim = WANIM_PUTAWAY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $3809
JUMPV
LABELV $3808
line 5742
;5742:	else if (ps->weaponstate == WEAPON_RELOADING_STOP)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 9
NEI4 $3810
line 5743
;5743:		cent->pe.weapAnim = WANIM_RELOAD_STOP;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 11
ASGNI4
ADDRGP4 $3811
JUMPV
LABELV $3810
line 5744
;5744:	else if (ps->weaponstate == WEAPON_RELOADING_CYCLE)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 8
NEI4 $3812
line 5745
;5745:		cent->pe.weapAnim = WANIM_RELOAD_CYCLE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 10
ASGNI4
ADDRGP4 $3813
JUMPV
LABELV $3812
line 5746
;5746:	else if (ps->weaponstate == WEAPON_MELEE )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 15
NEI4 $3814
line 5747
;5747:		cent->pe.weapAnim = WANIM_MELEE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 13
ASGNI4
ADDRGP4 $3815
JUMPV
LABELV $3814
line 5749
;5748: 	else
;5749:		cent->pe.weapAnim = WANIM_IDLE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 6
ASGNI4
LABELV $3815
LABELV $3813
LABELV $3811
LABELV $3809
LABELV $3807
LABELV $3805
LABELV $3803
LABELV $3801
LABELV $3799
LABELV $3797
LABELV $3795
LABELV $3793
LABELV $3790
LABELV $3788
LABELV $3786
LABELV $3784
line 5754
;5750:
;5751:	
;5752:
;5753:	// c4 special handling
;5754:	if ( ps->weapon == WP_C4 && ps->pm_flags & PMF_BOMBCASE )
ADDRLP4 924
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 924
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3816
ADDRLP4 924
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $3816
line 5755
;5755:	{ 
line 5756
;5756:		switch (ps->weaponstate) {
ADDRLP4 928
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 928
INDIRI4
CNSTI4 11
LTI4 $3818
ADDRLP4 928
INDIRI4
CNSTI4 18
GTI4 $3818
ADDRLP4 928
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $3829-44
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $3829
address $3821
address $3822
address $3823
address $3824
address $3825
address $3826
address $3827
address $3828
code
LABELV $3821
line 5758
;5757:			case WEAPON_LASTRND:
;5758:				cent->pe.weapAnim = WANIM_IDLE_EMPTY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 7
ASGNI4
line 5759
;5759:				break;
ADDRGP4 $3819
JUMPV
LABELV $3822
line 5761
;5760:			case WEAPON_BANDAGING_START:
;5761:				cent->pe.weapAnim = WANIM_SPIN1;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 12
ASGNI4
line 5762
;5762:				break;
ADDRGP4 $3819
JUMPV
LABELV $3823
line 5764
;5763:			case WEAPON_BANDAGING_END:
;5764:				cent->pe.weapAnim = WANIM_SPIN2;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 15
ASGNI4
line 5765
;5765:				break;
ADDRGP4 $3819
JUMPV
LABELV $3824
line 5767
;5766:			case WEAPON_BANDAGING:
;5767:				cent->pe.weapAnim = WANIM_ATTACKMODE23;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 18
ASGNI4
line 5768
;5768:				break;
ADDRGP4 $3819
JUMPV
LABELV $3825
line 5770
;5769:			case WEAPON_MELEE:
;5770:				cent->pe.weapAnim = WANIM_MELEE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 13
ASGNI4
line 5771
;5771:				break;
ADDRGP4 $3819
JUMPV
LABELV $3826
line 5773
;5772:			case WEAPON_THROW:
;5773:				cent->pe.weapAnim = WANIM_THROW;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 14
ASGNI4
line 5774
;5774:				break;
ADDRGP4 $3819
JUMPV
LABELV $3827
line 5776
;5775:			case WEAPON_FIRING21:
;5776:				cent->pe.weapAnim = WANIM_ATTACKMODE21;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 16
ASGNI4
line 5777
;5777:				break;
ADDRGP4 $3819
JUMPV
LABELV $3828
line 5779
;5778:			case WEAPON_FIRING22:
;5779:				cent->pe.weapAnim = WANIM_ATTACKMODE22;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 17
ASGNI4
line 5780
;5780:				break;
LABELV $3818
LABELV $3819
line 5783
;5781:		}
;5782:
;5783:	}
LABELV $3816
line 5786
;5784:
;5785:	// pdw special handling
;5786:	if ( ps->weapon == WP_PDW )
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 12
NEI4 $3831
line 5787
;5787:	{
line 5788
;5788:		if (ps->weaponstate == WEAPON_RELOADING_CYCLE && ps->weapon == WP_PDW )
ADDRLP4 928
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 928
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 8
NEI4 $3833
ADDRLP4 928
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 12
NEI4 $3833
line 5789
;5789:			cent->pe.weapAnim = WANIM_THROW;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 14
ASGNI4
ADDRGP4 $3834
JUMPV
LABELV $3833
line 5790
;5790:		else if (ps->weaponstate == WEAPON_RELOADING_STOP && ps->weapon == WP_PDW )
ADDRLP4 932
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 932
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 9
NEI4 $3835
ADDRLP4 932
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 12
NEI4 $3835
line 5791
;5791:			cent->pe.weapAnim = WANIM_MELEE; 
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 13
ASGNI4
ADDRGP4 $3836
JUMPV
LABELV $3835
line 5792
;5792:		else if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ) )
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $3837
line 5793
;5793:		{
line 5794
;5794:			if ( ps->weaponstate == WEAPON_FIRING )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3839
line 5795
;5795:				cent->pe.weapAnim = WANIM_ATTACKMODE21;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $3840
JUMPV
LABELV $3839
line 5796
;5796:			else if ( ps->weaponstate == WEAPON_FIRING2 )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 4
NEI4 $3841
line 5797
;5797:				cent->pe.weapAnim = WANIM_ATTACKMODE22;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 17
ASGNI4
ADDRGP4 $3842
JUMPV
LABELV $3841
line 5798
;5798:			else if ( ps->weaponstate == WEAPON_FIRING3 )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $3843
line 5799
;5799:				cent->pe.weapAnim = WANIM_ATTACKMODE23;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 18
ASGNI4
ADDRGP4 $3844
JUMPV
LABELV $3843
line 5800
;5800:			else if ( ps->weaponstate == WEAPON_READY )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $3845
line 5801
;5801:				cent->pe.weapAnim = WANIM_IDLE_EMPTY;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 7
ASGNI4
LABELV $3845
LABELV $3844
LABELV $3842
LABELV $3840
line 5802
;5802:		}
LABELV $3837
LABELV $3836
LABELV $3834
line 5803
;5803:	}
LABELV $3831
line 5806
;5804:
;5805:	// grenadelauncher requires special handling
;5806:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) )
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $3847
line 5807
;5807:	{ 
line 5809
;5808:		// gl attached.
;5809:		if (ps->weaponstate == WEAPON_RELOADING_STOP )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 9
NEI4 $3849
line 5810
;5810:			cent->pe.weapAnim = WANIM_SPIN2; // back to normal mode
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 15
ASGNI4
ADDRGP4 $3850
JUMPV
LABELV $3849
line 5811
;5811:		else if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ) )
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $3851
line 5812
;5812:		{		
line 5813
;5813:			if ( ps->weaponstate == WEAPON_READY )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $3853
line 5814
;5814:				cent->pe.weapAnim = WANIM_IDLE_EMPTY; // idle gl
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 7
ASGNI4
ADDRGP4 $3854
JUMPV
LABELV $3853
line 5815
;5815:			else if (ps->weaponstate == WEAPON_RELOADING_CYCLE ) 
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 8
NEI4 $3855
line 5816
;5816:				cent->pe.weapAnim = WANIM_THROW;	// to gl
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 14
ASGNI4
ADDRGP4 $3856
JUMPV
LABELV $3855
line 5817
;5817:			else if (ps->weaponstate == WEAPON_RELOADING )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 7
NEI4 $3857
line 5818
;5818:				cent->pe.weapAnim = WANIM_SPIN1; // reload gl
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 12
ASGNI4
ADDRGP4 $3858
JUMPV
LABELV $3857
line 5819
;5819:			else if (ps->weaponstate == WEAPON_FIRING )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3859
line 5820
;5820:				cent->pe.weapAnim = WANIM_ATTACKMODE23; // fire gl
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 18
ASGNI4
LABELV $3859
LABELV $3858
LABELV $3856
LABELV $3854
line 5821
;5821:		} 
LABELV $3851
LABELV $3850
line 5822
;5822:	}
LABELV $3847
line 5828
;5823:
;5824:	//
;5825:	// dead... no render for weaponmodel - this is also a cheap fix for corrupt
;5826:	// weapon frames in the idleframes.
;5827:	//
;5828:	if ( ps->stats[STAT_HEALTH] <= 0 ) { 
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $3861
line 5829
;5829:		cent->pe.weapAnim = WANIM_PUTAWAY;		
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 1
ASGNI4
line 5830
;5830:	}
LABELV $3861
line 5832
;5831:
;5832:	if ( cg.ns_ironsightState == IS_PUTUP || cg.ns_ironsightState == IS_PUTAWAY )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 1
EQI4 $3867
ADDRGP4 cg+116688
INDIRI4
CNSTI4 2
NEI4 $3863
LABELV $3867
line 5833
;5833:	{
line 5835
;5834:		// time to switch to next state
;5835:		if ( cg.ns_ironsightTimer < cg.time )
ADDRGP4 cg+116716
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $3864
line 5836
;5836:		{
line 5837
;5837:			switch ( cg.ns_ironsightState ) {
ADDRLP4 928
ADDRGP4 cg+116688
INDIRI4
ASGNI4
ADDRLP4 928
INDIRI4
CNSTI4 1
EQI4 $3875
ADDRLP4 928
INDIRI4
CNSTI4 2
EQI4 $3877
ADDRGP4 $3864
JUMPV
LABELV $3875
line 5839
;5838:			case IS_PUTUP:
;5839:				cg.ns_ironsightState = IS_IDLE;
ADDRGP4 cg+116688
CNSTI4 3
ASGNI4
line 5840
;5840:				break;
ADDRGP4 $3864
JUMPV
LABELV $3877
line 5842
;5841:			case IS_PUTAWAY:
;5842:				cg.ns_ironsightState = IS_NONE;
ADDRGP4 cg+116688
CNSTI4 0
ASGNI4
line 5843
;5843:				break;
line 5845
;5844:			default:
;5845:				break;
line 5847
;5846:			}
;5847:		}
line 5848
;5848:	}
ADDRGP4 $3864
JUMPV
LABELV $3863
line 5849
;5849:	else if ( cg.ns_ironsightState == IS_IDLE )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 3
NEI4 $3879
line 5850
;5850:	{
line 5851
;5851:		if ( ps->weaponstate == WEAPON_RELOADING || ps->weaponstate == WEAPON_RELOADING_EMPTY )
ADDRLP4 928
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 928
INDIRI4
CNSTI4 7
EQI4 $3884
ADDRLP4 928
INDIRI4
CNSTI4 10
NEI4 $3882
LABELV $3884
line 5852
;5852:		{
line 5854
;5853:
;5854:		}
LABELV $3882
line 5856
;5855:		// somebody is trying to deactivate me.
;5856:		if ( cg.ns_ironsightDeactivate )
ADDRGP4 cg+116720
INDIRI4
CNSTI4 0
EQI4 $3885
line 5857
;5857:		{
line 5858
;5858:			cg.ns_ironsightState = IS_PUTAWAY;
ADDRGP4 cg+116688
CNSTI4 2
ASGNI4
line 5860
;5859:
;5860:			if ( BG_IsRifle( ps->weapon ) )
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 932
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 932
INDIRI4
CNSTI4 0
EQI4 $3889
line 5861
;5861:				cg.ns_ironsightTimer = cg.time + IS_RIFLE_TIME;
ADDRGP4 cg+116716
ADDRGP4 cg+107604
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
ADDRGP4 $3890
JUMPV
LABELV $3889
line 5863
;5862:			else
;5863:				cg.ns_ironsightTimer = cg.time + IS_TIME;
ADDRGP4 cg+116716
ADDRGP4 cg+107604
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
LABELV $3890
line 5864
;5864:		}
LABELV $3885
line 5865
;5865:	} 
LABELV $3879
LABELV $3864
line 5867
;5866:
;5867:	if ( cg.ns_ironsightState == IS_PUTUP || cg.ns_ironsightState == IS_PUTAWAY || cg.ns_ironsightState == IS_IDLE )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 1
EQI4 $3901
ADDRGP4 cg+116688
INDIRI4
CNSTI4 2
EQI4 $3901
ADDRGP4 cg+116688
INDIRI4
CNSTI4 3
NEI4 $3895
LABELV $3901
line 5868
;5868:	{
line 5869
;5869:		if ( cg.ns_ironsightState == IS_PUTUP )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 1
NEI4 $3902
line 5870
;5870:			cent->pe.weapAnim = WANIM_IRONSIGHT_UP;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 19
ASGNI4
ADDRGP4 $3903
JUMPV
LABELV $3902
line 5871
;5871:		else if ( cg.ns_ironsightState == IS_PUTAWAY )
ADDRGP4 cg+116688
INDIRI4
CNSTI4 2
NEI4 $3905
line 5872
;5872:			cent->pe.weapAnim = WANIM_IRONSIGHT_DN;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 21
ASGNI4
ADDRGP4 $3906
JUMPV
LABELV $3905
line 5873
;5873:		else if (ps->weaponstate == WEAPON_FIRING)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3908
line 5874
;5874:			cent->pe.weapAnim = WANIM_IRONSIGHT_ATK1;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 22
ASGNI4
ADDRGP4 $3909
JUMPV
LABELV $3908
line 5875
;5875:		else if (ps->weaponstate == WEAPON_FIRING2)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 4
NEI4 $3910
line 5876
;5876:			cent->pe.weapAnim = WANIM_IRONSIGHT_ATK2;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 23
ASGNI4
ADDRGP4 $3911
JUMPV
LABELV $3910
line 5877
;5877:		else if (ps->weaponstate == WEAPON_FIRING3)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $3912
line 5878
;5878:			cent->pe.weapAnim = WANIM_IRONSIGHT_ATK3;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 24
ASGNI4
ADDRGP4 $3913
JUMPV
LABELV $3912
line 5881
;5879:
;5880:		else
;5881:			cent->pe.weapAnim = WANIM_IRONSIGHTIDLE;
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 20
ASGNI4
LABELV $3913
LABELV $3911
LABELV $3909
LABELV $3906
LABELV $3903
line 5882
;5882:	}
LABELV $3895
line 5885
;5883:
;5884:
;5885:	if ( ps->weapon == WP_C4 && ps->pm_flags & PMF_BOMBCASE )
ADDRLP4 928
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 928
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3914
ADDRLP4 928
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $3914
line 5886
;5886:	{
line 5888
;5887:
;5888:		CG_RunWeaponLerpFrame ( ci, &cent->pe.hand_weapon, 28, cent->pe.weapAnim, 1.0f, ps, cent);
ADDRLP4 876
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 576
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ARGF4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRGP4 CG_RunWeaponLerpFrame
CALLV
pop
line 5889
;5889:		hand.hModel = cgs.media.bombCaseModel;
ADDRLP4 140+8
ADDRGP4 cgs+205084+960
INDIRI4
ASGNI4
line 5890
;5890:	}
ADDRGP4 $3915
JUMPV
LABELV $3914
line 5891
;5891:	else if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $3919
line 5892
;5892:	{
line 5893
;5893:		CG_RunWeaponLerpFrame ( ci, &cent->pe.hand_weapon, ps->weapon, cent->pe.weapAnim, CG_GetSpeedScaleForWeaponSwitch(ps, cent), ps, cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 932
ADDRGP4 CG_GetSpeedScaleForWeaponSwitch
CALLF4
ASGNF4
ADDRLP4 876
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 576
ADDP4
ARGP4
ADDRLP4 940
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 940
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRLP4 932
INDIRF4
ARGF4
ADDRLP4 940
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRGP4 CG_RunWeaponLerpFrame
CALLV
pop
line 5894
;5894:		hand.hModel = weapon->glModel;
ADDRLP4 140+8
ADDRLP4 284
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
line 5895
;5895:	}
ADDRGP4 $3920
JUMPV
LABELV $3919
line 5897
;5896:	else
;5897:	{
line 5899
;5898:		
;5899:		CG_RunWeaponLerpFrame ( ci, &cent->pe.hand_weapon, ps->weapon, cent->pe.weapAnim, CG_GetSpeedScaleForWeaponSwitch(ps, cent), ps, cent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 932
ADDRGP4 CG_GetSpeedScaleForWeaponSwitch
CALLF4
ASGNF4
ADDRLP4 876
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
CNSTI4 576
ADDP4
ARGP4
ADDRLP4 940
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 940
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 280
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRLP4 932
INDIRF4
ARGF4
ADDRLP4 940
INDIRP4
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRGP4 CG_RunWeaponLerpFrame
CALLV
pop
line 5900
;5900:		hand.hModel = weapon->handsModel;		/////////////	
ADDRLP4 140+8
ADDRLP4 284
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 5901
;5901:	}
LABELV $3920
LABELV $3915
line 5903
;5902:
;5903:	hand.frame = cent->pe.hand_weapon.frame;
ADDRLP4 140+80
ADDRLP4 280
INDIRP4
CNSTI4 584
ADDP4
INDIRI4
ASGNI4
line 5904
;5904:	hand.oldframe = cent->pe.hand_weapon.oldFrame;
ADDRLP4 140+96
ADDRLP4 280
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
ASGNI4
line 5905
;5905: 	hand.backlerp = cent->pe.hand_weapon.backlerp;
ADDRLP4 140+100
ADDRLP4 280
INDIRP4
CNSTI4 592
ADDP4
INDIRF4
ASGNF4
line 5906
;5906:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_LIGHTING_ORIGIN | RF_NOSHADOW;
ADDRLP4 140+4
CNSTI4 204
ASGNI4
line 5907
;5907:	VectorCopy( cg.predictedPlayerState.origin , hand.lightingOrigin );
ADDRLP4 140+12
ADDRGP4 cg+107636+20
INDIRB
ASGNB 12
line 5908
;5908:	VectorCopy( hand.origin, hand.oldorigin );
ADDRLP4 140+84
ADDRLP4 140+68
INDIRB
ASGNB 12
line 5909
;5909:	weaponNum = cent->currentState.weapon;
ADDRLP4 440
ADDRLP4 280
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 5914
;5910:					
;5911:	//
;5912:	// apply tango skin
;5913:	//
;5914:	if ( !cg_disableTangoHandSkin.integer )
ADDRGP4 cg_disableTangoHandSkin+12
INDIRI4
CNSTI4 0
NEI4 $3932
line 5915
;5915:	{
line 5916
;5916:		if ( ps->persistant[PERS_TEAM] == TEAM_BLUE )
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 2
NEI4 $3935
line 5917
;5917:			hand.customSkin = weapon->t_viewweaponSkin;  
ADDRLP4 140+108
ADDRLP4 284
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $3936
JUMPV
LABELV $3935
line 5918
;5918:		else if ( weaponNum == WP_M249 )
ADDRLP4 440
INDIRI4
CNSTI4 23
NEI4 $3938
line 5919
;5919:		{
line 5920
;5920:			hand.customSkin = trap_R_RegisterSkin("models/weapons/m249/m249.skin");
ADDRGP4 $3941
ARGP4
ADDRLP4 932
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 140+108
ADDRLP4 932
INDIRI4
ASGNI4
line 5921
;5921:		}
LABELV $3938
LABELV $3936
line 5924
;5922:
;5923:
;5924:		if ( ps->persistant[PERS_TEAM] == TEAM_BLUE && hand.hModel == cgs.media.bombCaseModel )
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 2
NEI4 $3942
ADDRLP4 140+8
INDIRI4
ADDRGP4 cgs+205084+960
INDIRI4
NEI4 $3942
line 5925
;5925:			hand.customSkin = cgs.media.bombCaseTangoSkin;
ADDRLP4 140+108
ADDRGP4 cgs+205084+964
INDIRI4
ASGNI4
LABELV $3942
line 5929
;5926:
;5927:		// we're caching this here because it's only one weapon that uses this
;5928:		// it's not worth adding a _v.skin for every weapon
;5929:		if ( ps->eFlags & EF_VIP && BG_IsPistol( weaponNum ) )
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $3950
ADDRLP4 440
INDIRI4
ARGI4
ADDRLP4 932
ADDRGP4 BG_IsPistol
CALLI4
ASGNI4
ADDRLP4 932
INDIRI4
CNSTI4 0
EQI4 $3950
line 5930
;5930:		{
line 5934
;5931:			char			path[MAX_QPATH];
;5932:			gitem_t			*item;
;5933:
;5934:			item = BG_FindItemForWeapon( weaponNum );
ADDRLP4 440
INDIRI4
ARGI4
ADDRLP4 1004
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 1000
ADDRLP4 1004
INDIRP4
ASGNP4
line 5936
;5935:
;5936:			if ( item )
ADDRLP4 1000
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $3952
line 5937
;5937:			{
line 5938
;5938:				strcpy( path, item->world_model[0] );
ADDRLP4 936
ARGP4
ADDRLP4 1000
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
line 5939
;5939:				COM_StripExtension( path, path );
ADDRLP4 936
ARGP4
ADDRLP4 936
ARGP4
ADDRGP4 COM_StripExtension
CALLV
pop
line 5940
;5940:				strcat( path, "_v.skin" );
ADDRLP4 936
ARGP4
ADDRGP4 $1048
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 5942
;5941:
;5942:				hand.customSkin =  trap_R_RegisterSkin( path );
ADDRLP4 936
ARGP4
ADDRLP4 1008
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 140+108
ADDRLP4 1008
INDIRI4
ASGNI4
line 5943
;5943:			}
LABELV $3952
line 5944
;5944:		}
LABELV $3950
line 5947
;5945:
;5946:
;5947:	}
LABELV $3932
line 5952
;5948:
;5949:	//
;5950:	// if we're scoping forget calculating handmodel
;5951:	//
;5952: 	if ( (BG_IsZooming( ps->stats[STAT_WEAPONMODE] ) ) && 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 932
ADDRGP4 BG_IsZooming
CALLI4
ASGNI4
ADDRLP4 936
CNSTI4 0
ASGNI4
ADDRLP4 932
INDIRI4
ADDRLP4 936
INDIRI4
EQI4 $3955
ADDRLP4 940
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 940
INDIRI4
ADDRLP4 936
INDIRI4
EQI4 $3960
ADDRLP4 940
INDIRI4
CNSTI4 3
EQI4 $3960
ADDRLP4 940
INDIRI4
CNSTI4 4
EQI4 $3960
ADDRLP4 940
INDIRI4
CNSTI4 5
EQI4 $3960
ADDRLP4 940
INDIRI4
CNSTI4 11
NEI4 $3955
LABELV $3960
line 5958
;5953:		( ps->weaponstate == WEAPON_READY || 
;5954:		ps->weaponstate == WEAPON_FIRING ||
;5955:		ps->weaponstate == WEAPON_FIRING2 || 
;5956:		ps->weaponstate == WEAPON_FIRING3 || 
;5957:		ps->weaponstate == WEAPON_LASTRND ) )
;5958:		return;
ADDRGP4 $3748
JUMPV
LABELV $3955
line 5961
;5959:
;5960:
;5961:	if (!hand.hModel) {
ADDRLP4 140+8
INDIRI4
CNSTI4 0
NEI4 $3961
line 5962
;5962:		return;
ADDRGP4 $3748
JUMPV
LABELV $3961
line 5965
;5963:	}
;5964:
;5965:	CG_SetupRender(); 
ADDRGP4 CG_SetupRender
CALLI4
pop
line 5967
;5966:
;5967:	if ( ps->weapon == WP_C4 && ps->pm_flags & PMF_BOMBCASE )
ADDRLP4 944
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 944
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $3964
ADDRLP4 944
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $3964
line 5968
;5968:	{
line 5974
;5969:		refEntity_t	model;
;5970:		int i;
;5971:  		int			mins, seconds, tens;
;5972:		int			msec;
;5973:
;5974:		msec = ( cgs.levelBombStartTime + 1000 ) - cg.time;
ADDRLP4 1104
ADDRGP4 cgs+214104
INDIRI4
CNSTI4 1000
ADDI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 5976
;5975:
;5976:		seconds = msec / 1000;
ADDRLP4 1092
ADDRLP4 1104
INDIRI4
CNSTI4 1000
DIVI4
ASGNI4
line 5977
;5977:		mins = seconds / 60;
ADDRLP4 1096
ADDRLP4 1092
INDIRI4
CNSTI4 60
DIVI4
ASGNI4
line 5978
;5978:		seconds -= mins * 60;
ADDRLP4 1092
ADDRLP4 1092
INDIRI4
CNSTI4 60
ADDRLP4 1096
INDIRI4
MULI4
SUBI4
ASGNI4
line 5979
;5979:		tens = seconds / 10;
ADDRLP4 1100
ADDRLP4 1092
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 5980
;5980:		seconds -= tens * 10; 
ADDRLP4 1092
ADDRLP4 1092
INDIRI4
CNSTI4 10
ADDRLP4 1100
INDIRI4
MULI4
SUBI4
ASGNI4
line 5982
;5981:
;5982:		if( mins <= 0 )
ADDRLP4 1096
INDIRI4
CNSTI4 0
GTI4 $3968
line 5983
;5983:			mins = 0;
ADDRLP4 1096
CNSTI4 0
ASGNI4
LABELV $3968
line 5984
;5984:		if ( seconds <= 0 )
ADDRLP4 1092
INDIRI4
CNSTI4 0
GTI4 $3970
line 5985
;5985:			seconds = 0;
ADDRLP4 1092
CNSTI4 0
ASGNI4
LABELV $3970
line 5986
;5986:		if ( tens <= 0 )
ADDRLP4 1100
INDIRI4
CNSTI4 0
GTI4 $3972
line 5987
;5987:			tens = 0;
ADDRLP4 1100
CNSTI4 0
ASGNI4
LABELV $3972
line 5989
;5988:
;5989:		memset( &model, 0, sizeof( model ) );
ADDRLP4 952
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 5994
;5990:		//VectorCopy( hand.lightingOrigin, model.lightingOrigin );
;5991:		//model.shadowPlane = hand.shadowPlane;
;5992:
;5993:		// i gave it a minlight so the wires are always visible
;5994:		model.renderfx = RF_MINLIGHT | RF_DEPTHHACK | RF_FIRST_PERSON | RF_NOSHADOW;// | RF_MINLIGHT;
ADDRLP4 952+4
CNSTI4 77
ASGNI4
line 5998
;5995:	
;5996:	//	model.renderfx = hand.renderfx;
;5997:
;5998:		CG_PositionEntityOnTag( &model, &hand, hand.hModel,"tag_weapon");  
ADDRLP4 952
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6000
;5999:    
;6000:		VectorCopy( model.origin, model.oldorigin );
ADDRLP4 952+84
ADDRLP4 952+68
INDIRB
ASGNB 12
line 6002
;6001:
;6002:		for ( i = 0; i < 8; i++ )
ADDRLP4 948
CNSTI4 0
ASGNI4
LABELV $3978
line 6003
;6003:		{
line 6004
;6004:			model.hModel = cgs.media.bombCaseWireModels[i];
ADDRLP4 952+8
ADDRLP4 948
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+916
ADDP4
INDIRI4
ASGNI4
line 6006
;6005:			
;6006:			if ( cg.bombcaseWires[i] == -1 )
ADDRLP4 948
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116320
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $3985
line 6007
;6007:				model.customShader = cgs.media.bombCaseWireShaders[1];
ADDRLP4 952+112
ADDRGP4 cgs+205084+948+4
INDIRI4
ASGNI4
ADDRGP4 $3986
JUMPV
LABELV $3985
line 6008
;6008:			else if ( cg.bombcaseWires[i] == 1 )
ADDRLP4 948
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+116320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $3992
line 6009
;6009:				model.customShader = cgs.media.bombCaseWireShaders[2];
ADDRLP4 952+112
ADDRGP4 cgs+205084+948+8
INDIRI4
ASGNI4
ADDRGP4 $3993
JUMPV
LABELV $3992
line 6011
;6010:			else
;6011:				model.customShader = cgs.media.bombCaseWireShaders[0];
ADDRLP4 952+112
ADDRGP4 cgs+205084+948
INDIRI4
ASGNI4
LABELV $3993
LABELV $3986
line 6013
;6012:
;6013:			trap_R_AddRefEntityToScene( &model );
ADDRLP4 952
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6014
;6014:		}
LABELV $3979
line 6002
ADDRLP4 948
ADDRLP4 948
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 948
INDIRI4
CNSTI4 8
LTI4 $3978
line 6016
;6015:
;6016:		model.hModel = cgs.media.bombCaseDigitModels[0];		
ADDRLP4 952+8
ADDRGP4 cgs+205084+860
INDIRI4
ASGNI4
line 6017
;6017:		model.customShader = cgs.media.digitalNumberShaders[mins];
ADDRLP4 952+112
ADDRLP4 1096
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+500
ADDP4
INDIRI4
ASGNI4
line 6018
;6018:		trap_R_AddRefEntityToScene( &model );
ADDRLP4 952
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6020
;6019:
;6020:		model.hModel = cgs.media.bombCaseDigitModels[1];
ADDRLP4 952+8
ADDRGP4 cgs+205084+860+4
INDIRI4
ASGNI4
line 6021
;6021:		model.customShader = cgs.media.digitalNumberShaders[tens];
ADDRLP4 952+112
ADDRLP4 1100
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+500
ADDP4
INDIRI4
ASGNI4
line 6022
;6022:		trap_R_AddRefEntityToScene( &model );
ADDRLP4 952
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6024
;6023:
;6024:		model.hModel = cgs.media.bombCaseDigitModels[2];
ADDRLP4 952+8
ADDRGP4 cgs+205084+860+8
INDIRI4
ASGNI4
line 6025
;6025:		model.customShader = cgs.media.digitalNumberShaders[seconds];
ADDRLP4 952+112
ADDRLP4 1092
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+500
ADDP4
INDIRI4
ASGNI4
line 6026
;6026:		trap_R_AddRefEntityToScene( &model ); 
ADDRLP4 952
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6028
;6027:		
;6028:		trap_R_AddRefEntityToScene( &hand ); 
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6029
;6029:  		return;
ADDRGP4 $3748
JUMPV
LABELV $3964
line 6032
;6030:	}  
;6031:
;6032:	if ( cg_drawGun.integer != 2 && cg_drawGun.integer != 4 )
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 2
EQI4 $4022
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 4
EQI4 $4022
line 6033
;6033:		CG_AddRefEntityWithPowerups( &hand, &cent->currentState, ci->team ); 
ADDRLP4 140
ARGP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 876
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
LABELV $4022
line 6035
;6034:
;6035:	CG_AddWeaponParts( hand, weapon );
ADDRLP4 948
ADDRLP4 140
INDIRB
ASGNB 140
ADDRLP4 948
ARGP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRGP4 CG_AddWeaponParts
CALLV
pop
line 6040
;6036:
;6037:	//
;6038:	// add the silencer
;6039:	//
;6040:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) || ps->stats[STAT_WEAPONMODE] & ( 1 << WM_DUCKBILL ) ) 
ADDRLP4 1088
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1092
CNSTI4 0
ASGNI4
ADDRLP4 1088
INDIRI4
CNSTI4 32
BANDI4
ADDRLP4 1092
INDIRI4
NEI4 $4028
ADDRLP4 1088
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 1092
INDIRI4
EQI4 $4026
LABELV $4028
line 6041
;6041:	{
line 6042
;6042:		memset( &silencer, 0, sizeof( silencer ) );
ADDRLP4 444
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6043
;6043:		VectorCopy( hand.lightingOrigin, silencer.lightingOrigin );
ADDRLP4 444+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6044
;6044:		silencer.shadowPlane = hand.shadowPlane;
ADDRLP4 444+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6045
;6045:		silencer.renderfx = hand.renderfx;
ADDRLP4 444+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6047
;6046:
;6047:		silencer.hModel = weapon->silencerModel; 
ADDRLP4 444+8
ADDRLP4 284
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 6049
;6048:
;6049:		if ( hand.customSkin )
ADDRLP4 140+108
INDIRI4
CNSTI4 0
EQI4 $4036
line 6050
;6050:			silencer.customSkin = hand.customSkin;
ADDRLP4 444+108
ADDRLP4 140+108
INDIRI4
ASGNI4
LABELV $4036
line 6052
;6051:
;6052:		CG_PositionEntityOnTag( &silencer, &hand, hand.hModel,"tag_flash");  
ADDRLP4 444
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6054
;6053:
;6054:		if ( silencer.hModel )
ADDRLP4 444+8
INDIRI4
CNSTI4 0
EQI4 $4042
line 6055
;6055:			trap_R_AddRefEntityToScene( &silencer );
ADDRLP4 444
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $4042
line 6057
;6056:
;6057:	} 
LABELV $4026
line 6062
;6058:
;6059:	//
;6060:	// add the bayonet
;6061:	//
;6062:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_FLASHLIGHT ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $4045
line 6063
;6063:	{
line 6064
;6064:		memset( &bayonet, 0, sizeof( bayonet ) );
ADDRLP4 288
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6065
;6065:		VectorCopy( hand.lightingOrigin, bayonet.lightingOrigin );
ADDRLP4 288+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6066
;6066:		bayonet.shadowPlane = hand.shadowPlane;
ADDRLP4 288+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6067
;6067:		bayonet.renderfx = hand.renderfx;
ADDRLP4 288+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6069
;6068:
;6069:		bayonet.hModel = weapon->glModel; 
ADDRLP4 288+8
ADDRLP4 284
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ASGNI4
line 6071
;6070:
;6071:		if ( hand.customSkin )
ADDRLP4 140+108
INDIRI4
CNSTI4 0
EQI4 $4054
line 6072
;6072:			bayonet.customSkin = hand.customSkin;
ADDRLP4 288+108
ADDRLP4 140+108
INDIRI4
ASGNI4
LABELV $4054
line 6074
;6073:
;6074:		CG_PositionEntityOnTag( &bayonet, &hand, hand.hModel,"tag_weapon");  
ADDRLP4 288
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6076
;6075:
;6076:		if ( bayonet.hModel )
ADDRLP4 288+8
INDIRI4
CNSTI4 0
EQI4 $4060
line 6077
;6077:			trap_R_AddRefEntityToScene( &bayonet );
ADDRLP4 288
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $4060
line 6078
;6078:	} 
LABELV $4045
line 6083
;6079:
;6080:	//
;6081:	// add the bayonet
;6082:	//
;6083:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_BAYONET ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $4063
line 6084
;6084:	{
line 6085
;6085:		memset( &bayonet, 0, sizeof( bayonet ) );
ADDRLP4 288
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6086
;6086:		VectorCopy( hand.lightingOrigin, bayonet.lightingOrigin );
ADDRLP4 288+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6087
;6087:		bayonet.shadowPlane = hand.shadowPlane;
ADDRLP4 288+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6088
;6088:		bayonet.renderfx = hand.renderfx;
ADDRLP4 288+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6090
;6089:
;6090:		bayonet.hModel = weapon->bayonetModel; 
ADDRLP4 288+8
ADDRLP4 284
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 6092
;6091:
;6092:		if ( hand.customSkin )
ADDRLP4 140+108
INDIRI4
CNSTI4 0
EQI4 $4072
line 6093
;6093:			bayonet.customSkin = hand.customSkin;
ADDRLP4 288+108
ADDRLP4 140+108
INDIRI4
ASGNI4
LABELV $4072
line 6095
;6094:
;6095:		CG_PositionEntityOnTag( &bayonet, &hand, hand.hModel,"tag_weapon");  
ADDRLP4 288
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6097
;6096:
;6097:		if ( bayonet.hModel )
ADDRLP4 288+8
INDIRI4
CNSTI4 0
EQI4 $4078
line 6098
;6098:			trap_R_AddRefEntityToScene( &bayonet );
ADDRLP4 288
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $4078
line 6099
;6099:	} 
LABELV $4063
line 6104
;6100:
;6101:	//
;6102:	// Add Scope
;6103:	//
;6104:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SCOPE ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $4081
line 6105
;6105:	{
line 6106
;6106:		memset( &scope, 0, sizeof( scope ) );
ADDRLP4 584
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6107
;6107:		VectorCopy( hand.lightingOrigin, scope.lightingOrigin );
ADDRLP4 584+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6108
;6108:		scope.shadowPlane = hand.shadowPlane;
ADDRLP4 584+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6109
;6109:		scope.renderfx = hand.renderfx;
ADDRLP4 584+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6111
;6110:
;6111:		scope.hModel = weapon->scopeModel;
ADDRLP4 584+8
ADDRLP4 284
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 6113
;6112:		
;6113:		if ( hand.customSkin )
ADDRLP4 140+108
INDIRI4
CNSTI4 0
EQI4 $4090
line 6114
;6114:			scope.customSkin = hand.customSkin;
ADDRLP4 584+108
ADDRLP4 140+108
INDIRI4
ASGNI4
LABELV $4090
line 6116
;6115:
;6116:		CG_PositionEntityOnTag( &scope, &hand, hand.hModel,"tag_weapon");  
ADDRLP4 584
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6118
;6117:
;6118:		if ( scope.hModel )
ADDRLP4 584+8
INDIRI4
CNSTI4 0
EQI4 $4096
line 6119
;6119: 			trap_R_AddRefEntityToScene( &scope );
ADDRLP4 584
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $4096
line 6120
;6120:	}  
LABELV $4081
line 6125
;6121:
;6122:	//
;6123:	// add the lasersight
;6124:	//
;6125:	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_LASER ) ) 
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $4099
line 6126
;6126:	{
line 6127
;6127:		memset( &lasersight, 0, sizeof( lasersight ) );
ADDRLP4 724
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6128
;6128:		VectorCopy( hand.lightingOrigin, lasersight.lightingOrigin );
ADDRLP4 724+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6129
;6129:		lasersight.shadowPlane = hand.shadowPlane;
ADDRLP4 724+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6130
;6130:		lasersight.renderfx = hand.renderfx;
ADDRLP4 724+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6132
;6131:
;6132:		lasersight.hModel = weapon->lasersightModel;
ADDRLP4 724+8
ADDRLP4 284
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
line 6134
;6133:		
;6134:		if ( hand.customSkin )
ADDRLP4 140+108
INDIRI4
CNSTI4 0
EQI4 $4108
line 6135
;6135:			lasersight.customSkin = hand.customSkin;
ADDRLP4 724+108
ADDRLP4 140+108
INDIRI4
ASGNI4
LABELV $4108
line 6137
;6136:
;6137:		CG_PositionEntityOnTag( &lasersight, &hand, hand.hModel,"tag_weapon"); 
ADDRLP4 724
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $901
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6139
;6138:
;6139:		if ( lasersight.hModel )
ADDRLP4 724+8
INDIRI4
CNSTI4 0
EQI4 $4114
line 6140
;6140: 			trap_R_AddRefEntityToScene( &lasersight );
ADDRLP4 724
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
LABELV $4114
line 6141
;6141:	}
LABELV $4099
line 6144
;6142:
;6143:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;6144:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 880
CNSTI4 728
ADDRLP4 280
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 6149
;6145:
;6146:	// if the index of the nonPredictedCent is not the same as the clientNum
;6147:	// then this is a fake player (like on teh single player podiums), so
;6148:	// go ahead and use the cent
;6149:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 880
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 728
DIVI4
ADDRLP4 280
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
EQI4 $4117
line 6150
;6150:		nonPredictedCent = cent;
ADDRLP4 880
ADDRLP4 280
INDIRP4
ASGNP4
line 6151
;6151:	}
LABELV $4117
line 6156
;6152:	
;6153:	//
;6154:	// shell ejection
;6155:	// 	
;6156:	if ( cg_brassTime.value > 0 && cent->brassEjected > 0 ) 
ADDRGP4 cg_brassTime+8
INDIRF4
CNSTF4 0
LEF4 $4119
ADDRLP4 280
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 0
LEI4 $4119
line 6157
;6157:	{ 
line 6158
;6158:		if ( weaponNum == WP_SW629 && cg.time - cent->muzzleFlashTime < ( SW629_BRASS_EJECTTIME+MUZZLE_FLASH_TIME ) )
ADDRLP4 440
INDIRI4
CNSTI4 11
NEI4 $4122
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 280
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 1565
GEI4 $4122
line 6159
;6159:			;
ADDRGP4 $4123
JUMPV
LABELV $4122
line 6160
;6160:		else if ( weaponNum == WP_MACMILLAN && cg.time - cent->muzzleFlashTime < MACMILLAN_BRASS_EJECTTIME )
ADDRLP4 440
INDIRI4
CNSTI4 18
NEI4 $4125
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 280
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
GEI4 $4125
line 6161
;6161:			;
ADDRGP4 $4126
JUMPV
LABELV $4125
line 6162
;6162:		else {
line 6163
;6163:			CG_GetOriginFromTag( &hand, weapon->handsModel, "tag_ejection", origin );		
ADDRLP4 140
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1166
ARGP4
ADDRLP4 888
ARGP4
ADDRGP4 CG_GetOriginFromTag
CALLV
pop
line 6165
;6164:
;6165:			CG_EjectBrass( cent, origin , weapon->ejectBrassType, qtrue );
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 888
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_EjectBrass
CALLV
pop
line 6167
;6166:
;6167:			cent->brassEjected--;
ADDRLP4 1096
ADDRLP4 280
INDIRP4
CNSTI4 432
ADDP4
ASGNP4
ADDRLP4 1096
INDIRP4
ADDRLP4 1096
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 6168
;6168:		}
LABELV $4126
LABELV $4123
line 6169
;6169:	}	
LABELV $4119
line 6174
;6170:
;6171:	//
;6172:	// Laser Beam
;6173:	//
;6174:	if ( cent->currentState.eFlags & EF_LASERSIGHT )
ADDRLP4 280
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $4128
line 6175
;6175:	{ 
line 6185
;6176:		trace_t		trace;
;6177:		vec3_t			muzzlePoint, endPoint;
;6178:   		refEntity_t		beam;
;6179:		vec3_t		angles;
;6180:		vec3_t		f_org;
;6181:		qhandle_t laser;
;6182:		vec4_t rgba;
;6183:		vec3_t forward;
;6184:
;6185:		rgba[0] = rgba[1] = rgba[2] = rgba[3] = 1;
ADDRLP4 1372
CNSTF4 1065353216
ASGNF4
ADDRLP4 1260+12
ADDRLP4 1372
INDIRF4
ASGNF4
ADDRLP4 1260+8
ADDRLP4 1372
INDIRF4
ASGNF4
ADDRLP4 1260+4
ADDRLP4 1372
INDIRF4
ASGNF4
ADDRLP4 1260
ADDRLP4 1372
INDIRF4
ASGNF4
line 6187
;6186:
;6187: 		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 1108
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6188
;6188:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6190
;6189:  
;6190:		CG_PositionEntityOnTag(&flash,&hand, hand.hModel ,"tag_laser"); 
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $1101
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 6193
;6191: 
;6192:		// find muzzle point for this frame
;6193:		VectorCopy ( flash.origin,muzzlePoint ); 
ADDRLP4 1276
ADDRLP4 0+68
INDIRB
ASGNB 12
line 6195
;6194:	  
;6195:		CG_CalculateWeaponPosition( f_org, angles ); 
ADDRLP4 1360
ARGP4
ADDRLP4 1344
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 6196
;6196:		AngleVectors( angles  , forward, NULL, NULL );
ADDRLP4 1344
ARGP4
ADDRLP4 1248
ARGP4
ADDRLP4 1376
CNSTP4 0
ASGNP4
ADDRLP4 1376
INDIRP4
ARGP4
ADDRLP4 1376
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 6199
;6197: 
;6198:		// FIXME: crouch
;6199:		VectorMA( cent->currentState.pos.trBase , 200, forward, endPoint );
ADDRLP4 1384
CNSTF4 1128792064
ASGNF4
ADDRLP4 1096
ADDRLP4 280
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1384
INDIRF4
ADDRLP4 1248
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+4
ADDRLP4 280
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 1384
INDIRF4
ADDRLP4 1248+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+8
ADDRLP4 280
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1128792064
ADDRLP4 1248+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 6200
;6200:		{
line 6203
;6201:			int anim;
;6202:
;6203:			anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 1388
ADDRLP4 280
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 6205
;6204:				
;6205:			if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR )
ADDRLP4 1392
ADDRLP4 1388
INDIRI4
ASGNI4
ADDRLP4 1392
INDIRI4
CNSTI4 42
EQI4 $4141
ADDRLP4 1392
INDIRI4
CNSTI4 41
NEI4 $4139
LABELV $4141
line 6206
;6206:				endPoint[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 1096+8
ADDRLP4 1096+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
ADDRGP4 $4140
JUMPV
LABELV $4139
line 6208
;6207:			else
;6208:				endPoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 1096+8
ADDRLP4 1096+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
LABELV $4140
line 6209
;6209:		}
line 6211
;6210:
;6211:		laser =  trap_R_RegisterShader( "gfx/misc/ns_laserbeam" ); 
ADDRGP4 $1113
ARGP4
ADDRLP4 1388
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 1356
ADDRLP4 1388
INDIRI4
ASGNI4
line 6213
;6212:		// see if it hit a wall
;6213:		CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 1288
ARGP4
ADDRLP4 1276
ARGP4
ADDRLP4 1392
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 1392
INDIRP4
ARGP4
ADDRLP4 1392
INDIRP4
ARGP4
ADDRLP4 1096
ARGP4
ADDRLP4 280
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 6216
;6214:			cent->currentState.number, MASK_SHOT ); 
;6215:
;6216:		VectorCopy( trace.endpos , endPoint );
ADDRLP4 1096
ADDRLP4 1288+12
INDIRB
ASGNB 12
line 6218
;6217:
;6218:		if (! (CG_PointContents( muzzlePoint, cent->currentState.number ) & CONTENTS_SOLID)
ADDRLP4 1276
ARGP4
ADDRLP4 280
INDIRP4
INDIRI4
ARGI4
ADDRLP4 1396
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 1400
CNSTI4 0
ASGNI4
ADDRLP4 1396
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 1400
INDIRI4
NEI4 $4145
ADDRLP4 1288+4
INDIRI4
ADDRLP4 1400
INDIRI4
NEI4 $4145
line 6221
;6219:			&&
;6220:			!trace.startsolid )
;6221:		{
line 6225
;6222:			vec3_t	angles;    
;6223:
;6224:			// draw the beam
;6225:			CG_Tracer( muzzlePoint, endPoint, 0.1f, laser , rgba );
ADDRLP4 1276
ARGP4
ADDRLP4 1096
ARGP4
CNSTF4 1036831949
ARGF4
ADDRLP4 1356
INDIRI4
ARGI4
ADDRLP4 1260
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 6228
;6226:
;6227:			// add the impact flare		
;6228:			beam.customShader = cgs.media.laserShader;
ADDRLP4 1108+112
ADDRGP4 cgs+205084+640
INDIRI4
ASGNI4
line 6229
;6229:			beam.reType = RT_SPRITE;
ADDRLP4 1108
CNSTI4 2
ASGNI4
line 6230
;6230:			beam.radius = 0.5;
ADDRLP4 1108+132
CNSTF4 1056964608
ASGNF4
line 6232
;6231:
;6232:			VectorMA( endPoint, -0.4, forward, beam.origin );
ADDRLP4 1108+68
ADDRLP4 1096
INDIRF4
CNSTF4 3201092813
ADDRLP4 1248
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1108+68+4
ADDRLP4 1096+4
INDIRF4
CNSTF4 3201092813
ADDRLP4 1248+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1108+68+8
ADDRLP4 1096+8
INDIRF4
CNSTF4 3201092813
ADDRLP4 1248+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 6235
;6233:
;6234:			// make a random orientation
;6235:			angles[0] = rand() % 360;
ADDRLP4 1416
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1404
ADDRLP4 1416
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 6236
;6236:			angles[1] = rand() % 360;
ADDRLP4 1420
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1404+4
ADDRLP4 1420
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 6237
;6237:			angles[2] = rand() % 360;
ADDRLP4 1424
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1404+8
ADDRLP4 1424
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 6238
;6238:			AnglesToAxis( angles, beam.axis );
ADDRLP4 1404
ARGP4
ADDRLP4 1108+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 6239
;6239:			trap_R_AddRefEntityToScene( &beam );
ADDRLP4 1108
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6240
;6240:		} 
LABELV $4145
line 6241
;6241:	}
LABELV $4128
line 6246
;6242:
;6243:	// 
;6244:	// Gun fire Puff
;6245:	//
;6246:	if ( cent->gunSmokePuff && cg_gunSmoke.integer == 1 )
ADDRLP4 280
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 0
EQI4 $4164
ADDRGP4 cg_gunSmoke+12
INDIRI4
CNSTI4 1
NEI4 $4164
line 6247
;6247:	{
line 6252
;6248: 		vec3_t up;
;6249:		localEntity_t *smoke;
;6250:		vec3_t forward;
;6251:
;6252:		memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6254
;6253: 
;6254:		VectorClear( up );
ADDRLP4 1124
CNSTF4 0
ASGNF4
ADDRLP4 1096+8
ADDRLP4 1124
INDIRF4
ASGNF4
ADDRLP4 1096+4
ADDRLP4 1124
INDIRF4
ASGNF4
ADDRLP4 1096
ADDRLP4 1124
INDIRF4
ASGNF4
line 6257
;6255:
;6256:		// find muzzle point for this frame  
;6257:		CG_CalculateWeaponPosition( flash.origin, angles ); 
ADDRLP4 0+68
ARGP4
ADDRLP4 428
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 6258
;6258:		AngleVectors( angles  , forward, NULL, NULL );
ADDRLP4 428
ARGP4
ADDRLP4 1108
ARGP4
ADDRLP4 1128
CNSTP4 0
ASGNP4
ADDRLP4 1128
INDIRP4
ARGP4
ADDRLP4 1128
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 6259
;6259:		VectorMA( up, 15, forward, up );
ADDRLP4 1132
CNSTF4 1097859072
ASGNF4
ADDRLP4 1096
ADDRLP4 1096
INDIRF4
ADDRLP4 1132
INDIRF4
ADDRLP4 1108
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+4
ADDRLP4 1096+4
INDIRF4
ADDRLP4 1132
INDIRF4
ADDRLP4 1108+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+8
ADDRLP4 1096+8
INDIRF4
CNSTF4 1097859072
ADDRLP4 1108+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 6261
;6260:
;6261:		up[2] = 5;
ADDRLP4 1096+8
CNSTF4 1084227584
ASGNF4
line 6263
;6262:
;6263:		if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) &&
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $4177
ADDRLP4 440
INDIRI4
CNSTI4 15
EQI4 $4177
ADDRLP4 440
INDIRI4
CNSTI4 16
EQI4 $4177
line 6265
;6264:			( weaponNum != WP_AK47 && weaponNum != WP_M4 ) )
;6265:			CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash2");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
ADDRGP4 $4178
JUMPV
LABELV $4177
line 6267
;6266:		else
;6267:			CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
LABELV $4178
line 6269
;6268:
;6269:		cent->gunSmokePuff = qfalse;
ADDRLP4 280
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 0
ASGNI4
line 6271
;6270:
;6271:		smoke = CG_SmokePuff( flash.origin, up, 7.5f,1,1,1,1,225,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
ADDRLP4 0+68
ARGP4
ADDRLP4 1096
ARGP4
CNSTF4 1089470464
ARGF4
ADDRLP4 1140
CNSTF4 1065353216
ASGNF4
ADDRLP4 1140
INDIRF4
ARGF4
ADDRLP4 1140
INDIRF4
ARGF4
ADDRLP4 1140
INDIRF4
ARGF4
ADDRLP4 1140
INDIRF4
ARGF4
CNSTF4 1130430464
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 1144
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 1120
ADDRLP4 1144
INDIRP4
ASGNP4
line 6272
;6272: 		smoke->leFlags |= LEF_3RDPERSON;
ADDRLP4 1148
ADDRLP4 1120
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1148
INDIRP4
ADDRLP4 1148
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 6274
;6273:
;6274:		smoke->refEntity.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_LIGHTING_ORIGIN | RF_NOSHADOW;
ADDRLP4 1120
INDIRP4
CNSTI4 156
ADDP4
CNSTI4 204
ASGNI4
line 6276
;6275:
;6276:	}
LABELV $4164
line 6281
;6277:#if 1
;6278:	//
;6279:	// Gunsmoke
;6280:	//
;6281:	if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME ) 
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 280
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
SUBI4
CNSTI4 20
LEI4 $4185
line 6282
;6282:	{
line 6319
;6283:
;6284:		/*
;6285:		if ( cent->gunSmokeTime - cg.time > 0 && 
;6286:			( !BG_IsGrenade(weaponNum) && !BG_IsMelee( weaponNum) && weaponNum != WP_C4 ) && cg_gunSmoke.integer > 0 )
;6287: 		{
;6288:			vec3_t up;
;6289:			localEntity_t *smoke;
;6290:
;6291:			memset( &flash, 0, sizeof( flash ) );
;6292:
;6293:			if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) )
;6294:				CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash2");
;6295:			else
;6296:				CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash");
;6297:
;6298:			up[0] = crandom()*5;
;6299:			up[1] = crandom()*5;
;6300:
;6301:			up[2] = 20 + crandom()*5;
;6302:
;6303:			if ( cent->gunSmokeTime - cg.time < 1000 )
;6304:			{
;6305:				float t;
;6306:
;6307:				t= (float)((float)( cent->gunSmokeTime - cg.time ) / 1000 );  //  / 2000
;6308:				
;6309:				smoke = CG_SmokePuff(  flash.origin, up, cg_gunSmokeTime.integer / 333 + 1,1,1,1,t,cg_gunSmokeTime.integer,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
;6310:
;6311:				
;6312:				//smoke = CG_SmokePuff(  flash.origin, up, 3,1,1,1,t,350,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
;6313:			}
;6314:			else
;6315:				smoke = CG_SmokePuff(  flash.origin, up, cg_gunSmokeTime.integer / 333 + 1,1,1,1,1,cg_gunSmokeTime.integer,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
;6316:				//smoke = CG_SmokePuff(  flash.origin, up, 3,1,1,1,0.5,350,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader );
;6317:			smoke->leFlags |= LEF_3RDPERSON;
;6318: 		}*/
;6319: 		return;
ADDRGP4 $3748
JUMPV
LABELV $4185
line 6323
;6320:	}
;6321:#endif
;6322:	// Got a silencer, no muzzle flash
;6323:	if ( ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) ||
ADDRLP4 1096
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1096
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $4190
ADDRLP4 1096
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 24
NEI4 $4188
LABELV $4190
ADDRLP4 1100
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1104
CNSTI4 0
ASGNI4
ADDRLP4 1100
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 1104
INDIRI4
EQI4 $4191
ADDRLP4 1100
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 1104
INDIRI4
NEI4 $4188
LABELV $4191
line 6327
;6324:		ps->weapon == WP_SL8SD ) &&
;6325:		!( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
;6326:		)
;6327:	{	
line 6328
;6328:		if ( cent->gunSmokePuff ) 
ADDRLP4 280
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 0
EQI4 $3748
line 6329
;6329:		{
line 6334
;6330:			vec3_t up;
;6331:			vec3_t forward;
;6332:			localEntity_t *smoke;
;6333:
;6334:			memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6337
;6335:
;6336:
;6337:			VectorClear( up );
ADDRLP4 1136
CNSTF4 0
ASGNF4
ADDRLP4 1108+8
ADDRLP4 1136
INDIRF4
ASGNF4
ADDRLP4 1108+4
ADDRLP4 1136
INDIRF4
ASGNF4
ADDRLP4 1108
ADDRLP4 1136
INDIRF4
ASGNF4
line 6339
;6338:			// find muzzle point for this frame  
;6339:			CG_CalculateWeaponPosition( flash.origin, angles ); 
ADDRLP4 0+68
ARGP4
ADDRLP4 428
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 6340
;6340:			AngleVectors( angles  , forward, NULL, NULL );
ADDRLP4 428
ARGP4
ADDRLP4 1120
ARGP4
ADDRLP4 1140
CNSTP4 0
ASGNP4
ADDRLP4 1140
INDIRP4
ARGP4
ADDRLP4 1140
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 6341
;6341:			VectorMA( up, 15, forward, up );
ADDRLP4 1144
CNSTF4 1097859072
ASGNF4
ADDRLP4 1108
ADDRLP4 1108
INDIRF4
ADDRLP4 1144
INDIRF4
ADDRLP4 1120
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1108+4
ADDRLP4 1108+4
INDIRF4
ADDRLP4 1144
INDIRF4
ADDRLP4 1120+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1108+8
ADDRLP4 1108+8
INDIRF4
CNSTF4 1097859072
ADDRLP4 1120+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 6343
;6342:
;6343:			up[2] = 5;
ADDRLP4 1108+8
CNSTF4 1084227584
ASGNF4
line 6345
;6344:
;6345:	 		if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_SILENCER ) && ( weaponNum != WP_AK47 && weaponNum != WP_M4 ) )
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $4204
ADDRLP4 440
INDIRI4
CNSTI4 15
EQI4 $4204
ADDRLP4 440
INDIRI4
CNSTI4 16
EQI4 $4204
line 6346
;6346:				CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash2");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
ADDRGP4 $4205
JUMPV
LABELV $4204
line 6348
;6347:			else
;6348:				CG_PositionRotatedEntityOnTag( &flash, &hand, hand.hModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 140+8
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
LABELV $4205
line 6350
;6349:
;6350:			cent->gunSmokePuff = qfalse;
ADDRLP4 280
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 0
ASGNI4
line 6352
;6351:
;6352:			smoke = CG_SmokePuff( flash.origin, up, 7.5f,1,1,1,1,225,cg.time,0,LE_MOVE_SCALE_FADE, cgs.media.smokePuffShader  );
ADDRLP4 0+68
ARGP4
ADDRLP4 1108
ARGP4
CNSTF4 1089470464
ARGF4
ADDRLP4 1152
CNSTF4 1065353216
ASGNF4
ADDRLP4 1152
INDIRF4
ARGF4
ADDRLP4 1152
INDIRF4
ARGF4
ADDRLP4 1152
INDIRF4
ARGF4
ADDRLP4 1152
INDIRF4
ARGF4
CNSTF4 1130430464
ARGF4
ADDRGP4 cg+107604
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+205084+104
INDIRI4
ARGI4
ADDRLP4 1156
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 1132
ADDRLP4 1156
INDIRP4
ASGNP4
line 6353
;6353: 			smoke->leFlags |= LEF_3RDPERSON;
ADDRLP4 1160
ADDRLP4 1132
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1160
INDIRP4
ADDRLP4 1160
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 6354
;6354:		}
line 6355
;6355: 		return; 
ADDRGP4 $3748
JUMPV
LABELV $4188
line 6362
;6356:	}
;6357:
;6358:
;6359:	//
;6360:	// impulse flash
;6361:	//
;6362:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 6363
;6363:	VectorCopy( hand.lightingOrigin, flash.lightingOrigin );
ADDRLP4 0+12
ADDRLP4 140+12
INDIRB
ASGNB 12
line 6364
;6364:	flash.shadowPlane = hand.shadowPlane;
ADDRLP4 0+24
ADDRLP4 140+24
INDIRF4
ASGNF4
line 6365
;6365:	flash.renderfx = hand.renderfx;
ADDRLP4 0+4
ADDRLP4 140+4
INDIRI4
ASGNI4
line 6367
;6366:
;6367:	flash.hModel = weapon->flashModel;
ADDRLP4 0+8
ADDRLP4 284
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 6369
;6368:
;6369:	if (!flash.hModel) { 		
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $4219
line 6370
;6370: 		return;
ADDRGP4 $3748
JUMPV
LABELV $4219
line 6373
;6371:	}
;6372: 
;6373:	angles[YAW] = 0;
ADDRLP4 428+4
CNSTF4 0
ASGNF4
line 6374
;6374:	angles[PITCH] = 0;
ADDRLP4 428
CNSTF4 0
ASGNF4
line 6375
;6375:	angles[ROLL] = 0;
ADDRLP4 428+8
CNSTF4 0
ASGNF4
line 6377
;6376:
;6377:	{
line 6382
;6378:		float size;
;6379:		int i;
;6380:		int a;
;6381:
;6382:		size = random() + 0.5f;
ADDRLP4 1120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 1116
ADDRLP4 1120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 6384
;6383:		
;6384:		if (!BG_IsRifle(weaponNum))
ADDRLP4 440
INDIRI4
ARGI4
ADDRLP4 1124
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 1124
INDIRI4
CNSTI4 0
NEI4 $4224
line 6385
;6385:			angles[ROLL] = rand() % 360;
ADDRLP4 1128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 428+8
ADDRLP4 1128
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
LABELV $4224
line 6387
;6386:
;6387:		AnglesToAxis( angles, flash.axis );
ADDRLP4 428
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 6389
;6388:
;6389:		if ( size > 1.50f )
ADDRLP4 1116
INDIRF4
CNSTF4 1069547520
LEF4 $4228
line 6390
;6390:			size = 1.50f;
ADDRLP4 1116
CNSTF4 1069547520
ASGNF4
LABELV $4228
line 6392
;6391:	
;6392:		for ( i = 0; i < 3; i++ )
ADDRLP4 1112
CNSTI4 0
ASGNI4
LABELV $4230
line 6393
;6393:			for ( a = 0; a < 3; a++ )
ADDRLP4 1108
CNSTI4 0
ASGNI4
LABELV $4234
line 6394
;6394:				flash.axis[i][a] *= size; 
ADDRLP4 1132
ADDRLP4 1108
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 12
ADDRLP4 1112
INDIRI4
MULI4
ADDRLP4 0+28
ADDP4
ADDP4
ASGNP4
ADDRLP4 1132
INDIRP4
ADDRLP4 1132
INDIRP4
INDIRF4
ADDRLP4 1116
INDIRF4
MULF4
ASGNF4
LABELV $4235
line 6393
ADDRLP4 1108
ADDRLP4 1108
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1108
INDIRI4
CNSTI4 3
LTI4 $4234
LABELV $4231
line 6392
ADDRLP4 1112
ADDRLP4 1112
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1112
INDIRI4
CNSTI4 3
LTI4 $4230
line 6395
;6395:	} 
line 6398
;6396:
;6397:
;6398: 	if ( ps->stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADELAUNCHER ) && ps->stats[STAT_WEAPONMODE] & ( 1 << WM_WEAPONMODE2 ))
ADDRLP4 1108
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1112
CNSTI4 0
ASGNI4
ADDRLP4 1108
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 1112
INDIRI4
EQI4 $4239
ADDRLP4 1108
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 1112
INDIRI4
EQI4 $4239
line 6399
;6399:		CG_PositionRotatedEntityOnTag( &flash, &hand, weapon->handsModel, "tag_flash2");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
ADDRGP4 $4240
JUMPV
LABELV $4239
line 6401
;6400:	else
;6401:		CG_PositionRotatedEntityOnTag( &flash, &hand, weapon->handsModel, "tag_flash");
ADDRLP4 0
ARGP4
ADDRLP4 140
ARGP4
ADDRLP4 284
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 $876
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
LABELV $4240
line 6403
;6402:
;6403:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 6406
;6404:
;6405:	// make a dlight for the flash
;6406:	if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 1120
CNSTF4 0
ASGNF4
ADDRLP4 284
INDIRP4
CNSTI4 172
ADDP4
INDIRF4
ADDRLP4 1120
INDIRF4
NEF4 $4244
ADDRLP4 284
INDIRP4
CNSTI4 176
ADDP4
INDIRF4
ADDRLP4 1120
INDIRF4
NEF4 $4244
ADDRLP4 284
INDIRP4
CNSTI4 180
ADDP4
INDIRF4
ADDRLP4 1120
INDIRF4
EQF4 $4241
LABELV $4244
line 6407
;6407:		trap_R_AddLightToScene( flash.origin, 200 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 1124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+68
ARGP4
ADDRLP4 1124
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 200
ADDI4
CVIF4 4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 172
ADDP4
INDIRF4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 176
ADDP4
INDIRF4
ARGF4
ADDRLP4 284
INDIRP4
CNSTI4 180
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 6409
;6408:			weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;6409:	}  
LABELV $4241
line 6410
;6410: }
LABELV $3748
endproc CG_WeaponAnimation 1428 48
bss
export weaponOffsets
align 4
LABELV weaponOffsets
skip 624
export weaponAnimations
align 4
LABELV weaponAnimations
skip 37856
import BG_MaximumWeaponRange
import CG_DirectImpactMark
import NS_BulletHoleTypeForSurface
import _CG_Flare
import cg_weaponRoll
import cg_weaponPitch
import cg_weaponYaw
import cg_isgun_step
import cg_isgun_pitch
import cg_isgun_yaw
import cg_isgun_roll
import cg_isgun_x
import cg_isgun_y
import cg_isgun_z
export firstshot
align 4
LABELV firstshot
skip 4
import cg_smallGuns
import ClientScript_Update
import ClientScript_Init
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import NS_CG_LaunchFuncExplosive
import CG_AddPlayerWeapon2
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_RemoveAllFragments
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $3941
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $3686
byte 1 67
byte 1 108
byte 1 97
byte 1 109
byte 1 112
byte 1 32
byte 1 108
byte 1 102
byte 1 45
byte 1 62
byte 1 102
byte 1 114
byte 1 97
byte 1 109
byte 1 101
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $3649
byte 1 83
byte 1 101
byte 1 116
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 65
byte 1 110
byte 1 105
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $3645
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $3630
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 39
byte 1 37
byte 1 115
byte 1 39
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $3607
byte 1 87
byte 1 95
byte 1 79
byte 1 70
byte 1 70
byte 1 83
byte 1 69
byte 1 84
byte 1 0
align 1
LABELV $3597
byte 1 70
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 111
byte 1 110
byte 1 103
byte 1 10
byte 1 0
align 1
LABELV $3591
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 95
byte 1 65
byte 1 84
byte 1 75
byte 1 51
byte 1 0
align 1
LABELV $3588
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 95
byte 1 65
byte 1 84
byte 1 75
byte 1 50
byte 1 0
align 1
LABELV $3585
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 95
byte 1 65
byte 1 84
byte 1 75
byte 1 49
byte 1 0
align 1
LABELV $3582
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 73
byte 1 68
byte 1 76
byte 1 69
byte 1 0
align 1
LABELV $3579
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 95
byte 1 68
byte 1 78
byte 1 0
align 1
LABELV $3576
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 82
byte 1 79
byte 1 78
byte 1 83
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 95
byte 1 85
byte 1 80
byte 1 0
align 1
LABELV $3573
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 50
byte 1 51
byte 1 0
align 1
LABELV $3570
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 50
byte 1 50
byte 1 0
align 1
LABELV $3567
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 77
byte 1 79
byte 1 68
byte 1 69
byte 1 50
byte 1 49
byte 1 0
align 1
LABELV $3564
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 82
byte 1 69
byte 1 76
byte 1 79
byte 1 65
byte 1 68
byte 1 95
byte 1 83
byte 1 84
byte 1 79
byte 1 80
byte 1 0
align 1
LABELV $3561
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 77
byte 1 69
byte 1 76
byte 1 69
byte 1 69
byte 1 0
align 1
LABELV $3558
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 82
byte 1 69
byte 1 76
byte 1 79
byte 1 65
byte 1 68
byte 1 95
byte 1 67
byte 1 89
byte 1 67
byte 1 76
byte 1 69
byte 1 0
align 1
LABELV $3555
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 82
byte 1 69
byte 1 76
byte 1 79
byte 1 65
byte 1 68
byte 1 95
byte 1 69
byte 1 77
byte 1 80
byte 1 84
byte 1 89
byte 1 0
align 1
LABELV $3552
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 68
byte 1 76
byte 1 69
byte 1 95
byte 1 69
byte 1 77
byte 1 80
byte 1 84
byte 1 89
byte 1 0
align 1
LABELV $3549
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 84
byte 1 72
byte 1 82
byte 1 79
byte 1 87
byte 1 0
align 1
LABELV $3546
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 83
byte 1 80
byte 1 73
byte 1 78
byte 1 50
byte 1 0
align 1
LABELV $3543
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 83
byte 1 80
byte 1 73
byte 1 78
byte 1 49
byte 1 0
align 1
LABELV $3540
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 51
byte 1 0
align 1
LABELV $3537
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 50
byte 1 0
align 1
LABELV $3534
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 76
byte 1 65
byte 1 83
byte 1 84
byte 1 82
byte 1 78
byte 1 68
byte 1 0
align 1
LABELV $3531
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 82
byte 1 69
byte 1 76
byte 1 79
byte 1 65
byte 1 68
byte 1 0
align 1
LABELV $3528
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 80
byte 1 85
byte 1 84
byte 1 85
byte 1 80
byte 1 0
align 1
LABELV $3525
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 80
byte 1 85
byte 1 84
byte 1 65
byte 1 87
byte 1 65
byte 1 89
byte 1 0
align 1
LABELV $3522
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 65
byte 1 84
byte 1 84
byte 1 65
byte 1 67
byte 1 75
byte 1 0
align 1
LABELV $3519
byte 1 87
byte 1 65
byte 1 78
byte 1 73
byte 1 77
byte 1 95
byte 1 73
byte 1 68
byte 1 76
byte 1 69
byte 1 0
align 1
LABELV $2401
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 109
byte 1 101
byte 1 116
byte 1 97
byte 1 108
byte 1 95
byte 1 114
byte 1 105
byte 1 99
byte 1 37
byte 1 105
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1993
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 105
byte 1 99
byte 1 108
byte 1 101
byte 1 95
byte 1 48
byte 1 56
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1850
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1830
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 45
byte 1 62
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 87
byte 1 80
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 95
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 0
align 1
LABELV $1653
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $1580
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1543
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 111
byte 1 112
byte 1 101
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1500
byte 1 105
byte 1 110
byte 1 118
byte 1 101
byte 1 110
byte 1 95
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 115
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 0
align 1
LABELV $1489
byte 1 105
byte 1 110
byte 1 118
byte 1 101
byte 1 110
byte 1 95
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $1478
byte 1 105
byte 1 110
byte 1 118
byte 1 101
byte 1 110
byte 1 95
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 95
byte 1 109
byte 1 107
byte 1 50
byte 1 54
byte 1 0
align 1
LABELV $1405
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 99
byte 1 108
byte 1 111
byte 1 115
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1389
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 104
byte 1 117
byte 1 100
byte 1 47
byte 1 115
byte 1 101
byte 1 108
byte 1 101
byte 1 99
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1381
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 111
byte 1 98
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 10
byte 1 0
align 1
LABELV $1324
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 105
byte 1 99
byte 1 111
byte 1 110
byte 1 95
byte 1 115
byte 1 117
byte 1 105
byte 1 116
byte 1 99
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $1200
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 0
align 1
LABELV $1181
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 50
byte 1 0
align 1
LABELV $1178
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 51
byte 1 0
align 1
LABELV $1175
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 52
byte 1 0
align 1
LABELV $1172
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 53
byte 1 0
align 1
LABELV $1169
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 54
byte 1 0
align 1
LABELV $1166
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1113
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 110
byte 1 115
byte 1 95
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 98
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $1101
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1048
byte 1 95
byte 1 118
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $1000
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 101
byte 1 108
byte 1 116
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $999
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $982
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $901
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $876
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $496
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 112
byte 1 97
byte 1 114
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $491
byte 1 95
byte 1 49
byte 1 115
byte 1 116
byte 1 112
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $490
byte 1 95
byte 1 37
byte 1 115
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $489
byte 1 37
byte 1 115
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 108
byte 1 101
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $481
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 47
byte 1 115
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 95
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $479
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 54
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 54
byte 1 95
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $477
byte 1 112
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $476
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 98
byte 1 97
byte 1 110
byte 1 103
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 98
byte 1 97
byte 1 110
byte 1 103
byte 1 95
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $473
byte 1 112
byte 1 117
byte 1 109
byte 1 112
byte 1 0
align 1
LABELV $472
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 56
byte 1 55
byte 1 48
byte 1 47
byte 1 99
byte 1 111
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $471
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 56
byte 1 55
byte 1 48
byte 1 47
byte 1 115
byte 1 104
byte 1 101
byte 1 108
byte 1 108
byte 1 105
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $470
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 56
byte 1 55
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $468
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 112
byte 1 97
byte 1 115
byte 1 49
byte 1 53
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $467
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 112
byte 1 97
byte 1 115
byte 1 49
byte 1 53
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $466
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 112
byte 1 97
byte 1 115
byte 1 49
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $465
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 112
byte 1 97
byte 1 115
byte 1 49
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $464
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 112
byte 1 97
byte 1 115
byte 1 49
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $462
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $461
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $460
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $459
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $458
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $457
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $456
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $455
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 52
byte 1 48
byte 1 116
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $453
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 100
byte 1 101
byte 1 97
byte 1 103
byte 1 108
byte 1 101
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $452
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 100
byte 1 101
byte 1 97
byte 1 103
byte 1 108
byte 1 101
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $451
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 100
byte 1 101
byte 1 97
byte 1 103
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $450
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 100
byte 1 101
byte 1 97
byte 1 103
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $449
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 100
byte 1 101
byte 1 97
byte 1 103
byte 1 108
byte 1 101
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $447
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $446
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 54
byte 1 50
byte 1 57
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $445
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 54
byte 1 50
byte 1 57
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $444
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 54
byte 1 50
byte 1 57
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $442
byte 1 98
byte 1 111
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $441
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $440
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $439
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $438
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $437
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $436
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $435
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 107
byte 1 50
byte 1 51
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $433
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 57
byte 1 115
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $432
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 57
byte 1 115
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $431
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 57
byte 1 115
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $430
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 57
byte 1 115
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $429
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 57
byte 1 115
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $427
byte 1 115
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $426
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $425
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $424
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $423
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $422
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $421
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $420
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 108
byte 1 111
byte 1 99
byte 1 107
byte 1 51
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $418
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $417
byte 1 109
byte 1 50
byte 1 48
byte 1 51
byte 1 0
align 1
LABELV $416
byte 1 109
byte 1 50
byte 1 48
byte 1 51
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $415
byte 1 109
byte 1 50
byte 1 48
byte 1 51
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 0
align 1
LABELV $414
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $413
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $412
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 103
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $411
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $410
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $409
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $407
byte 1 98
byte 1 101
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $406
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $405
byte 1 108
byte 1 105
byte 1 100
byte 1 0
align 1
LABELV $404
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $403
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $402
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $401
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $400
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 50
byte 1 52
byte 1 57
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $398
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 49
byte 1 52
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $397
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 49
byte 1 52
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $396
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 49
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $395
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 49
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $394
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 49
byte 1 52
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $392
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 95
byte 1 52
byte 1 48
byte 1 109
byte 1 109
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $391
byte 1 103
byte 1 108
byte 1 0
align 1
LABELV $390
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $389
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $388
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 103
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $387
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $386
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $385
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 107
byte 1 52
byte 1 55
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $383
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $382
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $381
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $380
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $379
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $378
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $377
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $376
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 112
byte 1 53
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $374
byte 1 99
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $373
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 100
byte 1 119
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $372
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 100
byte 1 119
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $371
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 100
byte 1 119
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $370
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 100
byte 1 119
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $369
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 100
byte 1 119
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $367
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $366
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $365
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $364
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $363
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $362
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $361
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $360
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 49
byte 1 48
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $358
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 115
byte 1 103
byte 1 45
byte 1 49
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $357
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 115
byte 1 103
byte 1 45
byte 1 49
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $356
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 115
byte 1 103
byte 1 45
byte 1 49
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $355
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 115
byte 1 103
byte 1 45
byte 1 49
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $354
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 115
byte 1 103
byte 1 45
byte 1 49
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $352
byte 1 99
byte 1 111
byte 1 99
byte 1 107
byte 1 50
byte 1 0
align 1
LABELV $351
byte 1 99
byte 1 111
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $350
byte 1 109
byte 1 97
byte 1 103
byte 1 101
byte 1 106
byte 1 101
byte 1 99
byte 1 116
byte 1 0
align 1
LABELV $349
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 108
byte 1 56
byte 1 115
byte 1 100
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 95
byte 1 101
byte 1 109
byte 1 112
byte 1 116
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $348
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 108
byte 1 56
byte 1 115
byte 1 100
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $347
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 108
byte 1 56
byte 1 115
byte 1 100
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $346
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 108
byte 1 56
byte 1 115
byte 1 100
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $345
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 108
byte 1 56
byte 1 115
byte 1 100
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $343
byte 1 109
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $342
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $341
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 109
byte 1 105
byte 1 108
byte 1 108
byte 1 97
byte 1 110
byte 1 47
byte 1 98
byte 1 111
byte 1 108
byte 1 116
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $340
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 109
byte 1 105
byte 1 108
byte 1 108
byte 1 97
byte 1 110
byte 1 47
byte 1 114
byte 1 101
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $339
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 109
byte 1 105
byte 1 108
byte 1 108
byte 1 97
byte 1 110
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $338
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 109
byte 1 105
byte 1 108
byte 1 108
byte 1 97
byte 1 110
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $337
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 109
byte 1 105
byte 1 108
byte 1 108
byte 1 97
byte 1 110
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $335
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 107
byte 1 110
byte 1 105
byte 1 102
byte 1 101
byte 1 115
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $334
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 107
byte 1 110
byte 1 105
byte 1 102
byte 1 101
byte 1 115
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $333
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 107
byte 1 110
byte 1 105
byte 1 102
byte 1 101
byte 1 115
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $329
byte 1 0
align 1
LABELV $328
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $321
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 86
byte 1 105
byte 1 101
byte 1 119
byte 1 32
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $318
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $317
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 32
byte 1 84
byte 1 97
byte 1 110
byte 1 103
byte 1 111
byte 1 32
byte 1 72
byte 1 97
byte 1 110
byte 1 100
byte 1 32
byte 1 83
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $314
byte 1 95
byte 1 116
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $310
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 49
byte 1 114
byte 1 100
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $307
byte 1 95
byte 1 49
byte 1 115
byte 1 116
byte 1 112
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $306
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 49
byte 1 114
byte 1 100
byte 1 32
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 91
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 93
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $303
byte 1 95
byte 1 49
byte 1 115
byte 1 116
byte 1 112
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 95
byte 1 98
byte 1 111
byte 1 100
byte 1 121
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $300
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 71
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 76
byte 1 97
byte 1 117
byte 1 110
byte 1 99
byte 1 104
byte 1 101
byte 1 114
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $297
byte 1 95
byte 1 98
byte 1 103
byte 1 49
byte 1 53
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $296
byte 1 95
byte 1 109
byte 1 50
byte 1 48
byte 1 51
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $293
byte 1 95
byte 1 98
byte 1 103
byte 1 49
byte 1 53
byte 1 95
byte 1 49
byte 1 115
byte 1 116
byte 1 112
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $292
byte 1 95
byte 1 109
byte 1 50
byte 1 48
byte 1 51
byte 1 95
byte 1 49
byte 1 115
byte 1 116
byte 1 112
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $287
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 66
byte 1 97
byte 1 121
byte 1 111
byte 1 110
byte 1 101
byte 1 116
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $284
byte 1 95
byte 1 98
byte 1 97
byte 1 121
byte 1 111
byte 1 110
byte 1 101
byte 1 116
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $283
byte 1 95
byte 1 98
byte 1 97
byte 1 121
byte 1 111
byte 1 110
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $280
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 68
byte 1 117
byte 1 99
byte 1 107
byte 1 98
byte 1 105
byte 1 108
byte 1 108
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $277
byte 1 95
byte 1 100
byte 1 117
byte 1 99
byte 1 107
byte 1 98
byte 1 105
byte 1 108
byte 1 108
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $276
byte 1 95
byte 1 100
byte 1 117
byte 1 99
byte 1 107
byte 1 98
byte 1 105
byte 1 108
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $273
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $270
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $269
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $266
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 83
byte 1 105
byte 1 108
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 114
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $263
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 114
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $262
byte 1 95
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $259
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 76
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 115
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $256
byte 1 95
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $255
byte 1 95
byte 1 108
byte 1 97
byte 1 115
byte 1 101
byte 1 114
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $252
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 83
byte 1 99
byte 1 111
byte 1 112
byte 1 101
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $249
byte 1 95
byte 1 115
byte 1 99
byte 1 111
byte 1 112
byte 1 101
byte 1 95
byte 1 118
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $248
byte 1 95
byte 1 115
byte 1 99
byte 1 111
byte 1 112
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $245
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 32
byte 1 77
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 40
byte 1 102
byte 1 111
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 41
byte 1 10
byte 1 0
align 1
LABELV $242
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $238
byte 1 67
byte 1 111
byte 1 117
byte 1 108
byte 1 100
byte 1 110
byte 1 39
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 110
byte 1 100
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 32
byte 1 37
byte 1 105
byte 1 0
