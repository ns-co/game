export CG_InitLocalEntities
code
proc CG_InitLocalEntities 12 12
file "../cg_localents.c"
line 28
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:// cg_localents.c -- every frame, generate renderer commands for locally
;5:// processed entities, like smoke puffs, gibs, shells, etc.
;6:
;7:// every line of code that differs from the quake3:arena SDK
;8:// is property of manfred nerurkar
;9:// no commercial explotation allowed
;10:// you are only allowed to use this code in navy seals: covert operations 
;11:// a quake3 arena modifiation
;12:// defcon-x@ns-co.net
;13:
;14:#include "cg_local.h"
;15:
;16:#define	MAX_LOCAL_ENTITIES	512
;17:localEntity_t	cg_localEntities[MAX_LOCAL_ENTITIES];
;18:localEntity_t	cg_activeLocalEntities;		// double linked list
;19:localEntity_t	*cg_freeLocalEntities;		// single linked list
;20:
;21:/*
;22:===================
;23:CG_InitLocalEntities
;24:
;25:This is called at startup and for tournement restarts
;26:===================
;27:*/
;28:void	CG_InitLocalEntities( void ) {
line 31
;29:	int		i;
;30:
;31:	memset( cg_localEntities, 0, sizeof( cg_localEntities ) );
ADDRGP4 cg_localEntities
ARGP4
CNSTI4 0
ARGI4
CNSTI4 149504
ARGI4
ADDRGP4 memset
CALLP4
pop
line 32
;32:	cg_activeLocalEntities.next = &cg_activeLocalEntities;
ADDRGP4 cg_activeLocalEntities+4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 33
;33:	cg_activeLocalEntities.prev = &cg_activeLocalEntities;
ADDRLP4 4
ADDRGP4 cg_activeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 34
;34:	cg_freeLocalEntities = cg_localEntities;
ADDRGP4 cg_freeLocalEntities
ADDRGP4 cg_localEntities
ASGNP4
line 35
;35:	for ( i = 0 ; i < MAX_LOCAL_ENTITIES - 1 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $86
line 37
;36:		
;37:		cg_localEntities[i].next = &cg_localEntities[i+1];
ADDRLP4 8
CNSTI4 292
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_localEntities+4
ADDP4
ADDRLP4 8
INDIRI4
ADDRGP4 cg_localEntities+292
ADDP4
ASGNP4
line 38
;38:	}
LABELV $87
line 35
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 511
LTI4 $86
line 39
;39:}
LABELV $84
endproc CG_InitLocalEntities 12 12
export CG_FreeLocalEntity
proc CG_FreeLocalEntity 12 4
line 47
;40:
;41:
;42:/*
;43:==================
;44:CG_FreeLocalEntity
;45:==================
;46:*/
;47:void CG_FreeLocalEntity( localEntity_t *le ) {
line 48
;48:	if ( !le->prev ) {
ADDRFP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $93
line 49
;49:		CG_Error( "CG_FreeLocalEntity: not active" );
ADDRGP4 $95
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 50
;50:	}
LABELV $93
line 53
;51:
;52:	// remove from the doubly linked active list
;53:	le->prev->next = le->next;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRP4
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 54
;54:	le->next->prev = le->prev;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ADDRLP4 8
INDIRP4
INDIRP4
ASGNP4
line 57
;55:
;56:	// the free list is only singly linked
;57:	le->next = cg_freeLocalEntities;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 58
;58:	cg_freeLocalEntities = le;
ADDRGP4 cg_freeLocalEntities
ADDRFP4 0
INDIRP4
ASGNP4
line 59
;59:}
LABELV $92
endproc CG_FreeLocalEntity 12 4
export CG_AllocLocalEntity
proc CG_AllocLocalEntity 12 12
line 68
;60:
;61:/*
;62:===================
;63:CG_AllocLocalEntity
;64:
;65:Will allways succeed, even if it requires freeing an old active entity
;66:===================
;67:*/
;68:localEntity_t	*CG_AllocLocalEntity( void ) {
line 71
;69:	localEntity_t	*le;
;70:
;71:	if ( !cg_freeLocalEntities ) {
ADDRGP4 cg_freeLocalEntities
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $97
line 74
;72:		// no free entities, so free the one at the end of the chain
;73:		// remove the oldest active entity
;74:		CG_FreeLocalEntity( cg_activeLocalEntities.prev );
ADDRGP4 cg_activeLocalEntities
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 75
;75:	}
LABELV $97
line 77
;76:
;77:	le = cg_freeLocalEntities;
ADDRLP4 0
ADDRGP4 cg_freeLocalEntities
INDIRP4
ASGNP4
line 78
;78:	cg_freeLocalEntities = cg_freeLocalEntities->next;
ADDRLP4 4
ADDRGP4 cg_freeLocalEntities
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ASGNP4
line 80
;79:
;80:	memset( le, 0, sizeof( *le ) );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 292
ARGI4
ADDRGP4 memset
CALLP4
pop
line 83
;81:
;82:	// link into the active list
;83:	le->next = cg_activeLocalEntities.next;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ASGNP4
line 84
;84:	le->prev = &cg_activeLocalEntities;
ADDRLP4 0
INDIRP4
ADDRGP4 cg_activeLocalEntities
ASGNP4
line 87
;85:
;86:	// make sure it gets rendered correctly
;87:	le->leFlags &= ~LEF_3RDPERSON;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 89
;88:
;89:	cg_activeLocalEntities.next->prev = le;
ADDRGP4 cg_activeLocalEntities+4
INDIRP4
ADDRLP4 0
INDIRP4
ASGNP4
line 90
;90:	cg_activeLocalEntities.next = le;
ADDRGP4 cg_activeLocalEntities+4
ADDRLP4 0
INDIRP4
ASGNP4
line 91
;91:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $96
endproc CG_AllocLocalEntity 12 12
export CG_AddRefEntity
proc CG_AddRefEntity 0 4
line 110
;92:}
;93:
;94:
;95:/*
;96:====================================================================================
;97:
;98:FRAGMENT PROCESSING
;99:
;100:A fragment localentity interacts with the environment in some way (hitting walls),
;101:or generates more localentities along a trail.
;102:
;103:====================================================================================
;104:*/
;105:/*
;106:===================
;107:CG_AddRefEntity
;108:===================
;109:*/
;110:void CG_AddRefEntity( localEntity_t *le ) {
line 111
;111:	if (le->endTime < cg.time) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $103
line 112
;112:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 113
;113:		return;
ADDRGP4 $102
JUMPV
LABELV $103
line 115
;114:	}
;115:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 116
;116:}
LABELV $102
endproc CG_AddRefEntity 0 4
export CG_BloodTrail
proc CG_BloodTrail 68 48
line 125
;117:
;118:/*
;119:================
;120:CG_BloodTrail
;121:
;122:Leave expanding blood puffs behind gibs
;123:================
;124:*/
;125:void CG_BloodTrail( localEntity_t *le ) {
line 127
;126:	int		t;
;127:	int		b = (int)random()*5;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTI4 5
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CVFI4 4
MULI4
ASGNI4
line 134
;128:	float	size;
;129:	int		t2;
;130:	int		step;
;131:	vec3_t	newOrigin;
;132:	localEntity_t	*blood;
;133:
;134:	step = 50;
ADDRLP4 24
CNSTI4 50
ASGNI4
line 135
;135:	t = step * ( (cg.time - cg.frametime + step ) / step );
ADDRLP4 0
ADDRLP4 24
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
ADDRLP4 24
INDIRI4
ADDI4
ADDRLP4 24
INDIRI4
DIVI4
MULI4
ASGNI4
line 136
;136:	t2 = step * ( cg.time / step );
ADDRLP4 32
ADDRLP4 24
INDIRI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 24
INDIRI4
DIVI4
MULI4
ASGNI4
ADDRGP4 $111
JUMPV
LABELV $110
line 139
;137:
;138:	while ( b>4)
;139:		b=(int)random()*5;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTI4 5
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CVFI4 4
MULI4
ASGNI4
LABELV $111
line 138
ADDRLP4 4
INDIRI4
CNSTI4 4
GTI4 $110
line 141
;140:
;141:	size = 1 + random()*2;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1073741824
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 143
;142:
;143:	for ( ; t <= t2; t += step ) {
ADDRGP4 $116
JUMPV
LABELV $113
line 144
;144:		BG_EvaluateTrajectory( &le->pos, t, newOrigin );  
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 146
;145:// Navy Seals ++
;146:		blood = CG_SmokePuff( newOrigin, vec3_origin, 
ADDRLP4 12
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
ADDRLP4 56
INDIRF4
ARGF4
CNSTF4 1060320051
ARGF4
CNSTF4 1157234688
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+688
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 64
INDIRP4
ASGNP4
line 157
;147:					  size,		// radius
;148:					  1, 1, 1, 0.7f,	// color
;149:					  2000,		// trailTime
;150:					  t,		// startTime
;151:					  0,		// fadeInTime
;152:					  0,		// flags 
;153:					  cgs.media.bloodparticleShaders[b] );
;154:
;155:// Navy Seals --
;156:		// use the optimized version
;157:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 159
;158:		// drop a total of 40 units over its lifetime
;159:		blood->pos.trDelta[2] = 40;
ADDRLP4 8
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1109393408
ASGNF4
line 160
;160:	}
LABELV $114
line 143
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
LABELV $116
ADDRLP4 0
INDIRI4
ADDRLP4 32
INDIRI4
LEI4 $113
line 161
;161:}
LABELV $106
endproc CG_BloodTrail 68 48
export CG_FragmentBounceMark
proc CG_FragmentBounceMark 76 48
line 171
;162:
;163: void CG_DirectImpactMark( qhandle_t markShader, const vec3_t origin, const vec3_t dir, 
;164:				   float orientation, float red, float green, float blue, float alpha,
;165:				   qboolean alphaFade, float radius, qboolean temporary, int entityNum );
;166:/*
;167:================
;168:CG_FragmentBounceMark
;169:================
;170:*/
;171:void CG_FragmentBounceMark( localEntity_t *le, trace_t *trace ) {
line 175
;172:	float			radius;
;173:	int i;
;174:	qhandle_t shader;
;175:	int max = 14;
ADDRLP4 4
CNSTI4 14
ASGNI4
line 177
;176:
;177:	if ( le->leMarkType == LEMT_BLOOD ||
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 3
EQI4 $122
ADDRLP4 16
INDIRI4
CNSTI4 2
NEI4 $120
LABELV $122
line 179
;178:		le->leMarkType == LEMT_BLEEDER )
;179:		radius = 0.75 + random()*2.5 + random()*2.5  + random();
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
CNSTF4 1075838976
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1061158912
ADDF4
CNSTF4 1075838976
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDF4
ASGNF4
LABELV $120
line 182
;180:
;181:
;182:	i = random()*max;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 184
;183:
;184:	if (i>max)
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $123
line 185
;185:		i=max;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $123
line 187
;186:	
;187:	if (i<0)
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $125
line 188
;188:		i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $125
line 190
;189:
;190:	if ( le->radius <= 5 )	
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1084227584
GTF4 $127
line 191
;191:	{
line 192
;192:		max = 4;
ADDRLP4 4
CNSTI4 4
ASGNI4
line 194
;193:
;194:		i = random()*max;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 196
;195:
;196:		if (i>max)
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LEI4 $129
line 197
;197:			i=max;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
LABELV $129
line 199
;198:
;199:		shader = cgs.media.ns_bloodStainSmall[i]; 
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+384
ADDP4
INDIRI4
ASGNI4
line 200
;200:	}
ADDRGP4 $128
JUMPV
LABELV $127
line 202
;201:	else
;202:		shader = cgs.media.ns_bloodStain[i]; 
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+205084+324
ADDP4
INDIRI4
ASGNI4
LABELV $128
line 206
;203:
;204:
;205:
;206:	if ( le->leMarkType == LEMT_BLOOD ) {  
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $135
line 207
;207:		if ( trace->entityNum != ENTITYNUM_NONE )
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $137
line 208
;208:			CG_DirectImpactMark( shader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTF4 1135869952
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 48
CNSTF4 1065353216
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1058642330
ADDF4
ARGF4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 44
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
ADDRGP4 $136
JUMPV
LABELV $137
line 211
;209:				1,1,1,0.6 + random()/3, qfalse,  radius, qfalse,trace->entityNum );
;210:		else
;211:			CG_DirectImpactMark( shader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 64
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTF4 1135869952
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 68
CNSTF4 1065353216
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1058642330
ADDF4
ARGF4
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 72
INDIRI4
ARGI4
CNSTI4 -1
ARGI4
ADDRGP4 CG_DirectImpactMark
CALLV
pop
line 213
;212:				1,1,1,0.6 + random()/3, qfalse,  radius, qfalse, -1 );
;213:	}
ADDRGP4 $136
JUMPV
LABELV $135
line 214
;214:	else if ( le->leMarkType == LEMT_BLEEDER ) {
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
NEI4 $139
line 217
;215: 
;216:
;217:		CG_ImpactMark( shader, trace->endpos, trace->plane.normal, random()*360,
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTF4 1135869952
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 48
CNSTF4 1065353216
ASGNF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1077936128
DIVF4
CNSTF4 1058642330
ADDF4
ARGF4
CNSTI4 1
ARGI4
ADDRLP4 12
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 219
;218:			1,1,1,0.6 + random()/3, qtrue, radius , qfalse );
;219:	}
LABELV $139
LABELV $136
line 223
;220:
;221:	// don't allow a fragment to make multiple marks, or they
;222:	// pile up while settling
;223:	le->leMarkType = LEMT_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 224
;224:}
LABELV $119
endproc CG_FragmentBounceMark 76 48
export CG_FragmentBounceSound
proc CG_FragmentBounceSound 12 16
line 231
;225:
;226:/*
;227:================
;228:CG_FragmentBounceSound
;229:================
;230:*/
;231:void CG_FragmentBounceSound( localEntity_t *le, trace_t *trace ) {
line 232
;232:	if ( le->leBounceSoundType == LEBS_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $142
line 248
;233:		// half the gibs will make splat sounds
;234:		/*
;235:		if ( rand() & 1 ) {
;236:			int r = rand()&3;
;237:			sfxHandle_t	s;
;238:
;239:			if ( r < 2 ) {
;240:				s = cgs.media.gibBounce1Sound;
;241:			} else if ( r == 2 ) {
;242:				s = cgs.media.gibBounce2Sound;
;243:			} else {
;244:				s = cgs.media.gibBounce3Sound;
;245:			}
;246:			trap_S_StartSound( trace->endpos, ENTITYNUM_WORLD, CHAN_AUTO, s );
;247:		} */
;248:	} else if ( le->leBounceSoundType == LEBS_BRASS ) {
ADDRGP4 $143
JUMPV
LABELV $142
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $144
line 249
;249:		int r = rand()&3;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 252
;250:		sfxHandle_t	s;
;251:
;252:		if ( r < 2 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
GEI4 $146
line 253
;253:			s = cgs.media.sfxShellHitWall[0];
ADDRLP4 4
ADDRGP4 cgs+205084+1064
INDIRI4
ASGNI4
line 254
;254:		} else if ( r == 2 ) {
ADDRGP4 $147
JUMPV
LABELV $146
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $150
line 255
;255:			s = cgs.media.sfxShellHitWall[1];
ADDRLP4 4
ADDRGP4 cgs+205084+1064+4
INDIRI4
ASGNI4
line 256
;256:		} else {
ADDRGP4 $151
JUMPV
LABELV $150
line 257
;257:			s = cgs.media.sfxShellHitWall[2];
ADDRLP4 4
ADDRGP4 cgs+205084+1064+8
INDIRI4
ASGNI4
line 258
;258:		}
LABELV $151
LABELV $147
line 259
;259:		if ((cg.DeafTime < cg.time)) trap_S_StartSound( trace->endpos, ENTITYNUM_WORLD, CHAN_AUTO, s );
ADDRGP4 cg+116292
INDIRI4
ADDRGP4 cg+107604
INDIRI4
GEI4 $158
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 1022
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
LABELV $158
line 261
;260:
;261:	}
LABELV $144
LABELV $143
line 265
;262:
;263:	// don't allow a fragment to make multiple bounce sounds,
;264:	// or it gets too noisy as they settle
;265:	le->leBounceSoundType = LEBS_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 266
;266:}
LABELV $141
endproc CG_FragmentBounceSound 12 16
export CG_ReflectVelocity
proc CG_ReflectVelocity 56 12
line 274
;267:
;268:
;269:/*
;270:================
;271:CG_ReflectVelocity
;272:================
;273:*/
;274:void CG_ReflectVelocity( localEntity_t *le, trace_t *trace ) {
line 280
;275:	vec3_t	velocity;
;276:	float	dot;
;277:	int		hitTime;
;278:
;279:	// reflect the velocity on the trace plane
;280:	hitTime = cg.time - cg.frametime + cg.frametime * trace->fraction;
ADDRLP4 16
ADDRGP4 cg+107604
INDIRI4
ADDRGP4 cg+107600
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cg+107600
INDIRI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 281
;281:	BG_EvaluateTrajectoryDelta( &le->pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 282
;282:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 283
;283:	VectorMA( velocity, -2*dot, trace->plane.normal, le->pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 285
;284:
;285:	VectorScale( le->pos.trDelta, le->bounceFactor, le->pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
MULF4
ASGNF4
line 287
;286:
;287:	VectorCopy( trace->endpos, le->pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 288
;288:	le->pos.trTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+107604
INDIRI4
ASGNI4
line 292
;289:
;290:
;291:	// check for stop, making sure that even on low FPS systems it doesn't bobble
;292:	if ( trace->allsolid || 
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $175
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $171
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
ASGNF4
ADDRLP4 52
INDIRF4
CNSTF4 1109393408
LTF4 $175
ADDRLP4 52
INDIRF4
ADDRGP4 cg+107600
INDIRI4
NEGI4
CVIF4 4
ADDRLP4 52
INDIRF4
MULF4
GEF4 $171
LABELV $175
line 294
;293:		( trace->plane.normal[2] > 0 && 
;294:		( le->pos.trDelta[2] < 40 || le->pos.trDelta[2] < -cg.frametime * le->pos.trDelta[2] ) ) ) {
line 295
;295:		le->pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 0
ASGNI4
line 296
;296:	} else {
LABELV $171
line 298
;297:
;298:	}
LABELV $172
line 299
;299:}
LABELV $162
endproc CG_ReflectVelocity 56 12
export CG_AddFragment
proc CG_AddFragment 100 28
line 306
;300:
;301:/*
;302:================
;303:CG_AddFragment
;304:================
;305:*/
;306:void CG_AddFragment( localEntity_t *le ) {
line 311
;307:	vec3_t	newOrigin;
;308:	trace_t	trace;
;309:
;310:	// so it looks like things get spawned correctly :)
;311:	if ( ( cg.time > ( le->startTime + 300 ) ) &&
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTI4 16
ASGNI4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 68
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRI4
CNSTI4 300
ADDI4
LEI4 $177
ADDRLP4 68
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
BANDI4
CNSTI4 0
EQI4 $177
line 314
;312:		le->leFlags & LEF_3RDPERSON
;313:		)
;314:		le->leFlags &= ~LEF_3RDPERSON;
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
LABELV $177
line 317
;315:
;316:
;317:	if ( le->pos.trType == TR_STATIONARY ) {
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CNSTI4 0
NEI4 $180
line 322
;318:		// sink into the ground if near the removal time
;319:		int		t;
;320:		float	oldZ;
;321:		
;322:		t = le->endTime - cg.time;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
ASGNI4
line 323
;323:		if ( t < SINK_TIME ) {
ADDRLP4 80
INDIRI4
CNSTI4 250
GEI4 $183
line 327
;324:			// we must use an explicit lighting origin, otherwise the
;325:			// lighting would be lost as soon as the origin went
;326:			// into the ground
;327:			VectorCopy( le->refEntity.origin, le->refEntity.lightingOrigin );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 220
ADDP4
INDIRB
ASGNB 12
line 328
;328:			le->refEntity.renderfx |= RF_LIGHTING_ORIGIN;
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 329
;329:			oldZ = le->refEntity.origin[2];
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
INDIRF4
ASGNF4
line 330
;330:			le->refEntity.origin[2] -= 16 * ( 1.0 - (float)t / SINK_TIME );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTF4 1098907648
CNSTF4 1065353216
ADDRLP4 80
INDIRI4
CVIF4 4
CNSTF4 1132068864
DIVF4
SUBF4
MULF4
SUBF4
ASGNF4
line 331
;331:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 332
;332:			le->refEntity.origin[2] = oldZ;
ADDRFP4 0
INDIRP4
CNSTI4 228
ADDP4
ADDRLP4 84
INDIRF4
ASGNF4
line 333
;333:		} else {
ADDRGP4 $176
JUMPV
LABELV $183
line 334
;334:			trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 335
;335:		}
line 337
;336:
;337:		return;
ADDRGP4 $176
JUMPV
LABELV $180
line 342
;338:	}
;339:
;340:
;341:	// calculate new position
;342:	BG_EvaluateTrajectory( &le->pos, cg.time, newOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 345
;343:
;344:	// trace a line from previous position to new position
;345:	CG_Trace( &trace, le->refEntity.origin, NULL, NULL, newOrigin, -1, CONTENTS_SOLID );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
ADDRLP4 80
CNSTP4 0
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 56
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 346
;346:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $186
line 348
;347:		// still in free fall
;348:		VectorCopy( newOrigin, le->refEntity.origin );
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 56
INDIRB
ASGNB 12
line 350
;349:
;350:		if ( le->leFlags & LEF_TUMBLE ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $189
line 353
;351:			vec3_t angles;
;352:
;353:			BG_EvaluateTrajectory( &le->angles, cg.time, angles );
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 84
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 354
;354:			AnglesToAxis( angles, le->refEntity.axis );
ADDRLP4 84
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 355
;355:		}
LABELV $189
line 357
;356:
;357:		trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 360
;358:
;359:		// add a blood trail
;360:		if ( le->leBounceSoundType == LEBS_BLOOD ) 
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $192
line 361
;361:			CG_BloodTrail( le ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_BloodTrail
CALLV
pop
ADDRGP4 $176
JUMPV
LABELV $192
line 362
;362:		else if ( le->leBounceSoundType == LEBS_BLEEDER)
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
NEI4 $194
line 363
;363:			CG_BleederTrail ( le ); // smaller!
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_BleederTrail
CALLV
pop
ADDRGP4 $176
JUMPV
LABELV $194
line 364
;364:		else if ( le->leBounceSoundType == LEBS_SPARK )
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 4
NEI4 $176
line 365
;365:			CG_SparkTrail( le );	
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SparkTrail
CALLV
pop
line 367
;366:		
;367:		return;
ADDRGP4 $176
JUMPV
LABELV $186
line 373
;368:	}
;369:
;370:	// if it is in a nodrop zone, remove it
;371:	// this keeps gibs from waiting at the bottom of pits of death
;372:	// and floating levels
;373:	if ( trap_CM_PointContents( trace.endpos, 0 ) & CONTENTS_NODROP ) {
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 trap_CM_PointContents
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $198
line 374
;374:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 375
;375:		return;
ADDRGP4 $176
JUMPV
LABELV $198
line 379
;376:	}
;377:
;378:	// leave a mark
;379:	CG_FragmentBounceMark( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 382
;380:
;381:	// do a bouncy sound
;382:	CG_FragmentBounceSound( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_FragmentBounceSound
CALLV
pop
line 385
;383:
;384:	// reflect the velocity on the trace plane
;385:	CG_ReflectVelocity( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 387
;386:
;387:	trap_R_AddRefEntityToScene( &le->refEntity );
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 388
;388:}
LABELV $176
endproc CG_AddFragment 100 28
data
export pMins
align 4
LABELV pMins
byte 4 3204448256
byte 4 3204448256
byte 4 3204448256
export pMaxs
align 4
LABELV pMaxs
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
code
proc CG_AddParticle 144 28
line 399
;389:
;390:// Navy Seals ++
;391: 
;392:/*
;393:==================
;394:CG_AddParticle
;395:==================
;396:*/
;397:vec3_t pMins = { -0.5,-0.5,-0.5 };
;398:vec3_t pMaxs = {  0.5, 0.5, 0.5 };
;399:static void CG_AddParticle ( localEntity_t *le ) {
line 405
;400:	refEntity_t	*re;
;401:	float		c; 
;402:	trace_t	trace;
;403:	vec3_t	oldOrigin;
;404:
;405:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 407
;406:
;407:	if ( le->fadeInTime > le->startTime && cg.time < le->fadeInTime ) {
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 76
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LEI4 $202
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 80
INDIRI4
GEI4 $202
line 409
;408:		// fade / grow time
;409:		c = 1.0 - (float) ( le->fadeInTime - cg.time ) / ( le->fadeInTime - le->startTime );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
ADDRLP4 84
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 88
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 88
INDIRI4
ADDRLP4 84
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 410
;410:	}
ADDRGP4 $203
JUMPV
LABELV $202
line 411
;411:	else {
line 413
;412:		// fade / grow time
;413:		c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 84
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 84
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 414
;414:	}
LABELV $203
line 416
;415:
;416:	re->shaderRGBA[0] = 255 * le->color[0];
ADDRLP4 88
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 92
CNSTF4 1325400064
ASGNF4
ADDRLP4 88
INDIRF4
ADDRLP4 92
INDIRF4
LTF4 $208
ADDRLP4 84
ADDRLP4 88
INDIRF4
ADDRLP4 92
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $209
JUMPV
LABELV $208
ADDRLP4 84
ADDRLP4 88
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $209
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 84
INDIRU4
CVUU1 4
ASGNU1
line 417
;417:	re->shaderRGBA[1] = 255 * le->color[1];
ADDRLP4 100
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $211
ADDRLP4 96
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $212
JUMPV
LABELV $211
ADDRLP4 96
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $212
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 96
INDIRU4
CVUU1 4
ASGNU1
line 418
;418:	re->shaderRGBA[2] = 255 * le->color[2];
ADDRLP4 112
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 116
CNSTF4 1325400064
ASGNF4
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRF4
LTF4 $214
ADDRLP4 108
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $215
JUMPV
LABELV $214
ADDRLP4 108
ADDRLP4 112
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $215
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 419
;419:	re->shaderRGBA[3] = 255 * c;// * c;// * le->color[3];
ADDRLP4 124
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 128
CNSTF4 1325400064
ASGNF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRF4
LTF4 $217
ADDRLP4 120
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $218
JUMPV
LABELV $217
ADDRLP4 120
ADDRLP4 124
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $218
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 120
INDIRU4
CVUU1 4
ASGNU1
line 421
;420:
;421:	if ( !( le->leFlags & LEF_PUFF_DONT_SCALE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $219
line 422
;422:		re->radius = le->radius * ( (/*1.0 -*/ c ) );
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 423
;423:	}
ADDRGP4 $220
JUMPV
LABELV $219
line 424
;424:	else if ( re->radius <= 0 || !re->radius )
ADDRLP4 132
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ASGNF4
ADDRLP4 136
CNSTF4 0
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LEF4 $223
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
NEF4 $221
LABELV $223
line 425
;425:		re->radius = le->radius;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ASGNF4
LABELV $221
LABELV $220
line 428
;426:  
;427:	// early start ( might be stuck in a wall - no coldet)
;428:	if ( cg.time < le->startTime + 50 )
ADDRGP4 cg+107604
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 50
ADDI4
GEI4 $224
line 429
;429:	{
line 430
;430:		BG_EvaluateTrajectory( &le->pos, cg.time, re->origin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 431
;431:	} else {
ADDRGP4 $225
JUMPV
LABELV $224
line 433
;432:		// new position this frame
;433:		BG_EvaluateTrajectory( &le->pos, cg.time, oldOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 64
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 435
;434:		// trace a line from previous position to new position 
;435:		CG_Trace(&trace, le->refEntity.origin, NULL, NULL, oldOrigin , -1, MASK_SOLID );
ADDRLP4 8
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
ARGP4
ADDRLP4 140
CNSTP4 0
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 64
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 437
;436:		// if touched ground
;437:		if ( trace.fraction == 1 )
ADDRLP4 8+8
INDIRF4
CNSTF4 1065353216
NEF4 $229
line 438
;438:		{ 
line 439
;439:			VectorCopy( oldOrigin, re->origin );
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 64
INDIRB
ASGNB 12
line 440
;440:		}
ADDRGP4 $230
JUMPV
LABELV $229
line 442
;441:		else		
;442:		{
line 443
;443:			if ( le->leMarkType != LEMT_NONE )
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 0
EQI4 $232
line 444
;444:			{  
line 445
;445:				CG_FragmentBounceMark( le, &trace ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 446
;446:			}
LABELV $232
line 448
;447:
;448:			CG_ReflectVelocity( le, &trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 449
;449:		}
LABELV $230
line 450
;450:	}
LABELV $225
line 452
;451:
;452:	trap_R_AddRefEntityToScene( &le->refEntity );	 
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 453
;453:}
LABELV $201
endproc CG_AddParticle 144 28
proc CG_AddShrapnel 316 28
line 460
;454:
;455:/*
;456:==================
;457:CG_AddShrapnel
;458:==================
;459:*/
;460:static void CG_AddShrapnel( localEntity_t *le ) {
line 464
;461:	vec3_t		org, org2;
;462:	trace_t		tr;
;463:	vec4_t		rgba;
;464:	float	c = ( le->endTime - cg.time ) / ( float ) ( le->endTime - le->startTime );
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 104
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 104
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 466
;465:
;466:	if ( c > 1 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1065353216
LEF4 $236
line 467
;467:		c = 1.0;	// can happen during connection problems
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
line 468
;468:	}
LABELV $236
line 471
;469:
;470:	// fade / grow time
;471:	rgba[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 472
;472:	rgba[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 473
;473:	rgba[2] = 1;
ADDRLP4 4+8
CNSTF4 1065353216
ASGNF4
line 474
;474:	rgba[3] = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+12
ADDRLP4 108
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 108
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 477
;475:
;476:	// this is similar to the laserbeam in q2
;477:	BG_EvaluateTrajectory( &le->pos, cg.time, org );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 76
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 480
;478:
;479:	// so they don't get stuck i a wall
;480:	if ( cg.time - le->startTime < 50 && le->leMarkType != LEMT_BLOOD )
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CNSTI4 50
GEI4 $243
ADDRLP4 112
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
EQI4 $243
line 481
;481:		return;
ADDRGP4 $234
JUMPV
LABELV $243
line 483
;482: 
;483:	if ( le->leFlags == cgs.media.metalsparkShader ) 
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+1084
INDIRI4
NEI4 $246
line 484
;484:		BG_EvaluateTrajectory( &le->pos, cg.time - 50/*( ( cg.time - cg.oldTime )*1.5f )*/ , org2 );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 50
SUBI4
ARGI4
ADDRLP4 88
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
ADDRGP4 $247
JUMPV
LABELV $246
line 486
;485:	else
;486:		BG_EvaluateTrajectory( &le->pos, cg.time - 30/*( ( cg.time - cg.oldTime )*1.25f )*/, org2 );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
CNSTI4 30
SUBI4
ARGI4
ADDRLP4 88
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
LABELV $247
line 489
;487:
;488:
;489:	CG_Trace(&tr, org, vec3_origin, vec3_origin, org2, -1, MASK_SOLID);
ADDRLP4 20
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 116
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 88
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 500
;490:
;491:	// if we're in a sky remove us
;492:	/*
;493:	if ( tr.surfaceFlags & SURF_SKY )
;494:	{
;495:		CG_FreeLocalEntity( le );
;496:		return;
;497:	}*/
;498:
;499:	// if we hit something reflect our velocity on plane
;500: 	if ( ( tr.fraction < 1 ) && le->bounceFactor > 0)
ADDRLP4 20+8
INDIRF4
CNSTF4 1065353216
GEF4 $252
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
CNSTF4 0
LEF4 $252
line 501
;501:	{	  
line 502
;502:		if ( le->leMarkType == LEMT_BLOOD )
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $255
line 503
;503:		{		
line 504
;504:			CG_FragmentBounceMark( le, &tr ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_FragmentBounceMark
CALLV
pop
line 506
;505:					
;506:			CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 507
;507:			return;
ADDRGP4 $234
JUMPV
LABELV $255
line 510
;508:		}
;509:		else
;510:		{
line 511
;511:			CG_ReflectVelocity( le, &tr ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 CG_ReflectVelocity
CALLV
pop
line 512
;512:		}    
line 513
;513:	}
LABELV $252
line 515
;514:
;515:	if (le->leFlags == cgs.media.metalsparkShader && le->radius < 0 )
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+1084
INDIRI4
NEI4 $257
ADDRLP4 120
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
GEF4 $257
line 516
;516:	{
line 518
;517:		refEntity_t			ent; 
;518:		float rad = -le->radius;
ADDRLP4 272
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
NEGF4
ASGNF4
line 523
;519:
;520:
;521:		float	r,g,b;
;522:
;523:		memset( &ent, 0, sizeof( ent ) );
ADDRLP4 124
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 524
;524:		ent.reType = RT_SPRITE;
ADDRLP4 124
CNSTI4 2
ASGNI4
line 525
;525:		VectorCopy(tr.endpos, ent.origin );
ADDRLP4 124+68
ADDRLP4 20+12
INDIRB
ASGNB 12
line 528
;526:
;527:		// scale out 
;528:		ent.radius = rad * 5 * c;
ADDRLP4 124+132
CNSTF4 1084227584
ADDRLP4 272
INDIRF4
MULF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 530
;529: 
;530:		ent.customShader = cgs.media.smallFlare;//le->leFlags; 
ADDRLP4 124+112
ADDRGP4 cgs+205084+724
INDIRI4
ASGNI4
line 532
;531:
;532:		g = 255 * ( 1.0f - c );
ADDRLP4 264
CNSTF4 1132396544
CNSTF4 1065353216
ADDRLP4 0
INDIRF4
SUBF4
MULF4
ASGNF4
line 533
;533:		r = g;
ADDRLP4 276
ADDRLP4 264
INDIRF4
ASGNF4
line 534
;534:		b = 50 + 400 * ( c/2 );
ADDRLP4 268
CNSTF4 1137180672
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 536
;535:
;536:		if ( g < 0 )
ADDRLP4 264
INDIRF4
CNSTF4 0
GEF4 $267
line 537
;537:			g = 0;
ADDRLP4 264
CNSTF4 0
ASGNF4
LABELV $267
line 538
;538:		if ( b < 50 )
ADDRLP4 268
INDIRF4
CNSTF4 1112014848
GEF4 $269
line 539
;539:			b = 50;
ADDRLP4 268
CNSTF4 1112014848
ASGNF4
LABELV $269
line 542
;540:
;541:		// fade out
;542:		ent.shaderRGBA[0] = r;// * c;
ADDRLP4 284
ADDRLP4 276
INDIRF4
ASGNF4
ADDRLP4 288
CNSTF4 1325400064
ASGNF4
ADDRLP4 284
INDIRF4
ADDRLP4 288
INDIRF4
LTF4 $273
ADDRLP4 280
ADDRLP4 284
INDIRF4
ADDRLP4 288
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $274
JUMPV
LABELV $273
ADDRLP4 280
ADDRLP4 284
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $274
ADDRLP4 124+116
ADDRLP4 280
INDIRU4
CVUU1 4
ASGNU1
line 543
;543:		ent.shaderRGBA[1] = g;
ADDRLP4 296
ADDRLP4 264
INDIRF4
ASGNF4
ADDRLP4 300
CNSTF4 1325400064
ASGNF4
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
LTF4 $278
ADDRLP4 292
ADDRLP4 296
INDIRF4
ADDRLP4 300
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $279
JUMPV
LABELV $278
ADDRLP4 292
ADDRLP4 296
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $279
ADDRLP4 124+116+1
ADDRLP4 292
INDIRU4
CVUU1 4
ASGNU1
line 544
;544:		ent.shaderRGBA[2] = b;
ADDRLP4 308
ADDRLP4 268
INDIRF4
ASGNF4
ADDRLP4 312
CNSTF4 1325400064
ASGNF4
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
LTF4 $283
ADDRLP4 304
ADDRLP4 308
INDIRF4
ADDRLP4 312
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $284
JUMPV
LABELV $283
ADDRLP4 304
ADDRLP4 308
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $284
ADDRLP4 124+116+2
ADDRLP4 304
INDIRU4
CVUU1 4
ASGNU1
line 545
;545:		ent.shaderRGBA[3] = 255 ;//* c;
ADDRLP4 124+116+3
CNSTU1 255
ASGNU1
line 547
;546:
;547:		trap_R_AddRefEntityToScene(&ent); 
ADDRLP4 124
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 549
;548: 
;549:		return;
ADDRGP4 $234
JUMPV
LABELV $257
line 552
;550:	}
;551:
;552:	if ( le->leFlags == cgs.media.waterBubbleShader ) 
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRGP4 cgs+205084+116
INDIRI4
NEI4 $287
line 553
;553:	{
line 556
;554: 		refEntity_t			ent; 
;555:
;556:		memset( &ent, 0, sizeof( ent ) );
ADDRLP4 124
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 557
;557:		ent.reType = RT_SPRITE;
ADDRLP4 124
CNSTI4 2
ASGNI4
line 558
;558:		VectorCopy(tr.endpos, ent.origin );
ADDRLP4 124+68
ADDRLP4 20+12
INDIRB
ASGNB 12
line 561
;559:
;560:		// scale out
;561:		ent.radius = le->radius * 5 * c;
ADDRLP4 124+132
CNSTF4 1084227584
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 563
;562: 
;563:		ent.customShader = le->leFlags;//le->leFlags; 
ADDRLP4 124+112
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 566
;564:
;565:		// fade out
;566:		ent.shaderRGBA[0] = 0 * c;
ADDRLP4 268
CNSTF4 0
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 272
CNSTF4 1325400064
ASGNF4
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
LTF4 $297
ADDRLP4 264
ADDRLP4 268
INDIRF4
ADDRLP4 272
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $298
JUMPV
LABELV $297
ADDRLP4 264
ADDRLP4 268
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $298
ADDRLP4 124+116
ADDRLP4 264
INDIRU4
CVUU1 4
ASGNU1
line 567
;567:		ent.shaderRGBA[1] = 0 * c;
ADDRLP4 280
CNSTF4 0
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 284
CNSTF4 1325400064
ASGNF4
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
LTF4 $302
ADDRLP4 276
ADDRLP4 280
INDIRF4
ADDRLP4 284
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $303
JUMPV
LABELV $302
ADDRLP4 276
ADDRLP4 280
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $303
ADDRLP4 124+116+1
ADDRLP4 276
INDIRU4
CVUU1 4
ASGNU1
line 568
;568:		ent.shaderRGBA[2] = 255 * c;
ADDRLP4 292
CNSTF4 1132396544
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 296
CNSTF4 1325400064
ASGNF4
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
LTF4 $307
ADDRLP4 288
ADDRLP4 292
INDIRF4
ADDRLP4 296
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $308
JUMPV
LABELV $307
ADDRLP4 288
ADDRLP4 292
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $308
ADDRLP4 124+116+2
ADDRLP4 288
INDIRU4
CVUU1 4
ASGNU1
line 569
;569:		ent.shaderRGBA[3] = 300 * c;
ADDRLP4 304
CNSTF4 1133903872
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 308
CNSTF4 1325400064
ASGNF4
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
LTF4 $312
ADDRLP4 300
ADDRLP4 304
INDIRF4
ADDRLP4 308
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $313
JUMPV
LABELV $312
ADDRLP4 300
ADDRLP4 304
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $313
ADDRLP4 124+116+3
ADDRLP4 300
INDIRU4
CVUU1 4
ASGNU1
line 571
;570:
;571:		trap_R_AddRefEntityToScene(&ent); 
ADDRLP4 124
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 572
;572:	}
ADDRGP4 $288
JUMPV
LABELV $287
line 573
;573:	else if (le->leMarkType == LEMT_BLOOD ) {
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 3
NEI4 $314
line 576
;574:	 	refEntity_t			ent; 
;575: 
;576:		memset( &ent, 0, sizeof( ent ) );
ADDRLP4 124
ARGP4
CNSTI4 0
ARGI4
CNSTI4 140
ARGI4
ADDRGP4 memset
CALLP4
pop
line 577
;577:		ent.reType = RT_SPRITE;
ADDRLP4 124
CNSTI4 2
ASGNI4
line 578
;578:		VectorCopy(org, ent.origin );
ADDRLP4 124+68
ADDRLP4 76
INDIRB
ASGNB 12
line 580
;579:
;580:		ent.radius = le->radius * c;
ADDRLP4 124+132
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 582
;581: 		 
;582:		ent.customShader = le->leFlags;
ADDRLP4 124+112
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 584
;583: 
;584:		trap_R_AddRefEntityToScene(&ent); 
ADDRLP4 124
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 585
;585:	}
ADDRGP4 $315
JUMPV
LABELV $314
line 587
;586:	else
;587:		CG_Tracer(org, tr.endpos, le->radius, le->leFlags  , rgba); // flags is shader
ADDRLP4 76
ARGP4
ADDRLP4 20+12
ARGP4
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ARGF4
ADDRLP4 124
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
LABELV $315
LABELV $288
line 591
;588: 
;589: 
;590:
;591:}
LABELV $234
endproc CG_AddShrapnel 316 28
proc CG_AddTracer 32 20
line 601
;592:
;593:
;594:/*
;595:==================
;596:CG_AddTracer
;597:==================
;598:*/
;599:#define TRACER_LENGTH	100
;600:
;601:static void CG_AddTracer( localEntity_t *le ) { 
line 603
;602:	vec4_t		rgba;
;603:	float		c = (float)( le->endTime - cg.time ) * le->lifeRate; 
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 606
;604:
;605:	// fade out 
;606:	rgba[0] = rgba[1] = rgba[2] = 1;
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
ADDRLP4 0+8
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ASGNF4
line 607
;607:	rgba[3] = c; 
ADDRLP4 0+12
ADDRLP4 16
INDIRF4
ASGNF4
line 609
;608:
;609:	CG_Tracer( le->pos.trBase, le->angles.trBase, cg_tracerWidth.value, le->leFlags, rgba ); // flags is shader 
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 80
ADDP4
ARGP4
ADDRGP4 cg_tracerWidth+8
INDIRF4
ARGF4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 610
;610:}
LABELV $320
endproc CG_AddTracer 32 20
export CG_AddFadeRGB
proc CG_AddFadeRGB 60 4
line 627
;611:
;612:// Navy Seals --
;613:/*
;614:=====================================================================
;615:
;616:TRIVIAL LOCAL ENTITIES
;617:
;618:These only do simple scaling or modulation before passing to the renderer
;619:=====================================================================
;620:*/
;621:
;622:/*
;623:====================
;624:CG_AddFadeRGB
;625:====================
;626:*/
;627:void CG_AddFadeRGB( localEntity_t *le ) {
line 631
;628:	refEntity_t *re;
;629:	float c;
;630:
;631:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 633
;632:
;633:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 634
;634:	c *= 0xff;
ADDRLP4 4
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 636
;635:
;636:	re->shaderRGBA[0] = le->color[0] * c;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 20
CNSTF4 1325400064
ASGNF4
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
LTF4 $329
ADDRLP4 12
ADDRLP4 16
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $330
JUMPV
LABELV $329
ADDRLP4 12
ADDRLP4 16
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $330
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 12
INDIRU4
CVUU1 4
ASGNU1
line 637
;637:	re->shaderRGBA[1] = le->color[1] * c;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
CNSTF4 1325400064
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LTF4 $332
ADDRLP4 24
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $333
JUMPV
LABELV $332
ADDRLP4 24
ADDRLP4 28
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $333
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 24
INDIRU4
CVUU1 4
ASGNU1
line 638
;638:	re->shaderRGBA[2] = le->color[2] * c;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44
CNSTF4 1325400064
ASGNF4
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
LTF4 $335
ADDRLP4 36
ADDRLP4 40
INDIRF4
ADDRLP4 44
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $336
JUMPV
LABELV $335
ADDRLP4 36
ADDRLP4 40
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $336
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 36
INDIRU4
CVUU1 4
ASGNU1
line 639
;639:	re->shaderRGBA[3] = le->color[3] * c;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 56
CNSTF4 1325400064
ASGNF4
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
LTF4 $338
ADDRLP4 48
ADDRLP4 52
INDIRF4
ADDRLP4 56
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $339
JUMPV
LABELV $338
ADDRLP4 48
ADDRLP4 52
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $339
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 48
INDIRU4
CVUU1 4
ASGNU1
line 641
;640:
;641:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 642
;642:}
LABELV $326
endproc CG_AddFadeRGB 60 4
proc CG_AddMoveScaleFade 28 12
line 649
;643:
;644:/*
;645:==================
;646:CG_AddMoveScaleFade
;647:==================
;648:*/
;649:static void CG_AddMoveScaleFade( localEntity_t *le ) {
line 655
;650:	refEntity_t	*re;
;651:	float		c;
;652://	vec3_t		delta;
;653://	float		len;
;654:
;655:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 657
;656:
;657:	if ( le->fadeInTime > le->startTime && cg.time < le->fadeInTime ) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LEI4 $341
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 12
INDIRI4
GEI4 $341
line 659
;658:		// fade / grow time
;659:		c = 1.0 - (float) ( le->fadeInTime - cg.time ) / ( le->fadeInTime - le->startTime );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
CNSTF4 1065353216
ADDRLP4 20
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 20
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 660
;660:	}
ADDRGP4 $342
JUMPV
LABELV $341
line 661
;661:	else {
line 663
;662:		// fade / grow time
;663:		c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 664
;664:	}
LABELV $342
line 666
;665:
;666:	if ( !( le->leFlags & LEF_PUFF_DONT_FADE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $346
line 667
;667:		re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 20
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $349
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $350
JUMPV
LABELV $349
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $350
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 668
;668:	}
ADDRGP4 $347
JUMPV
LABELV $346
line 670
;669:	else
;670:	{
line 671
;671:		re->shaderRGBA[3] = 0xff * le->color[3];
ADDRLP4 20
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $352
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $353
JUMPV
LABELV $352
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $353
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 672
;672:	}
LABELV $347
line 674
;673:
;674:	if ( !( le->leFlags & LEF_PUFF_DONT_SCALE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $354
line 675
;675:		re->radius = le->radius * ( 1.0 - c ) ;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
MULF4
ASGNF4
line 676
;676:	}
LABELV $354
line 678
;677:
;678:	BG_EvaluateTrajectory( &le->pos, cg.time, re->origin );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 cg+107604
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 689
;679:
;680:	// if the view would be "inside" the sprite, kill the sprite
;681:	// so it doesn't add too much overdraw
;682:/*	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
;683:	len = VectorLength( delta );
;684:	if ( len < le->radius ) {
;685:		CG_FreeLocalEntity( le );
;686:		return;
;687:	}*/
;688:
;689:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 690
;690:}
LABELV $340
endproc CG_AddMoveScaleFade 28 12
proc CG_AddScaleFade 48 4
line 702
;691:
;692:
;693:/*
;694:===================
;695:CG_AddScaleFade
;696:
;697:For rocket smokes that hang in place, fade out, and are
;698:removed if the view passes through them.
;699:There are often many of these, so it needs to be simple.
;700:===================
;701:*/
;702:static void CG_AddScaleFade( localEntity_t *le ) {
line 708
;703:	refEntity_t	*re;
;704:	float		c;
;705:	vec3_t		delta;
;706:	float		len;
;707:
;708:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 711
;709:
;710:	// fade / grow time
;711:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 713
;712:
;713:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 16
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $360
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $361
JUMPV
LABELV $360
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $361
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 714
;714:	re->radius = le->radius * ( 1.0 - c ) + 8;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 16
INDIRF4
SUBF4
MULF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 718
;715:
;716:	// if the view would be "inside" the sprite, kill the sprite
;717:	// so it doesn't add too much overdraw
;718:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109044+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109044+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109044+24+8
INDIRF4
SUBF4
ASGNF4
line 719
;719:	len = VectorLength( delta );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 720
;720:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $372
line 721
;721:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 722
;722:		return;
ADDRGP4 $357
JUMPV
LABELV $372
line 725
;723:	}
;724:
;725:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 726
;726:}
LABELV $357
endproc CG_AddScaleFade 48 4
proc CG_AddFallScaleFade 52 4
line 739
;727:
;728:
;729:/*
;730:=================
;731:CG_AddFallScaleFade
;732:
;733:This is just an optimized CG_AddMoveScaleFade
;734:For blood mists that drift down, fade out, and are
;735:removed if the view passes through them.
;736:There are often 100+ of these, so it needs to be simple.
;737:=================
;738:*/
;739:static void CG_AddFallScaleFade( localEntity_t *le ) {
line 745
;740:	refEntity_t	*re;
;741:	float		c;
;742:	vec3_t		delta;
;743:	float		len;
;744:
;745:	re = &le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 748
;746:
;747:	// fade time
;748:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 750
;749:
;750:	re->shaderRGBA[3] = 0xff * c * le->color[3];
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 4
INDIRF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $377
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $378
JUMPV
LABELV $377
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $378
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 752
;751:
;752:	re->origin[2] = le->pos.trBase[2] - ( 1.0 - c ) * le->pos.trDelta[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
ADDRLP4 40
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 754
;753:
;754:	re->radius = le->radius * ( 1.0 - c ) + 16;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 4
INDIRF4
SUBF4
MULF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 758
;755:
;756:	// if the view would be "inside" the sprite, kill the sprite
;757:	// so it doesn't add too much overdraw
;758:	VectorSubtract( re->origin, cg.refdef.vieworg, delta );
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
ADDRGP4 cg+109044+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
ADDRGP4 cg+109044+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
ADDRGP4 cg+109044+24+8
INDIRF4
SUBF4
ASGNF4
line 759
;759:	len = VectorLength( delta );
ADDRLP4 8
ARGP4
ADDRLP4 48
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 760
;760:	if ( len < le->radius ) {
ADDRLP4 20
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
GEF4 $389
line 761
;761:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 762
;762:		return;
ADDRGP4 $374
JUMPV
LABELV $389
line 765
;763:	}
;764:
;765:	trap_R_AddRefEntityToScene( re );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 766
;766:}
LABELV $374
endproc CG_AddFallScaleFade 52 4
proc CG_AddExplosion 144 20
line 780
;767:
;768:
;769:
;770:/*
;771:================
;772:CG_AddExplosion
;773:================
;774:*/
;775:/*
;776:================
;777:CG_AddExplosion
;778:================
;779:*/
;780:static void CG_AddExplosion( localEntity_t *ex ) {
line 784
;781:	refEntity_t	*ent;
;782:	int r;
;783:	float radius;	
;784:	ent = &ex->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 786
;785:
;786:	if(ent->radius)
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CNSTF4 0
EQF4 $392
line 787
;787:		radius = ent->radius / 8.0;/// 8.0;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CNSTF4 1090519040
DIVF4
ASGNF4
ADDRGP4 $393
JUMPV
LABELV $392
line 789
;788:	else
;789:		radius = 8.0;
ADDRLP4 4
CNSTF4 1090519040
ASGNF4
LABELV $393
line 791
;790:
;791:	r = ent->renderfx & RF_EXPANDING;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
ASGNI4
line 792
;792:	ent->renderfx &= ~RF_EXPANDING;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 -32769
BANDI4
ASGNI4
line 795
;793:
;794:	// add the entity
;795:	if(r)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $394
line 796
;796:	{
line 798
;797:		int i, j;
;798:		float dt = ((float) (cg.time - ex->startTime)) / ((float) ( ex->endTime - ex->startTime ));
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 800
;799:		vec3_t r;
;800:		r[0] = ent->oldorigin[0] * dt;
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 801
;801:		r[1] = ent->oldorigin[1] * dt;
ADDRLP4 28+4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 802
;802:		r[2] = ent->oldorigin[2] * dt;
ADDRLP4 28+8
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
line 805
;803:		//AnglesToAxis(r, ent->axis);		
;804:		//VectorScale(cg.refdef.viewaxis[0], -1, ent->axis[0]);
;805:		VectorSubtract(cg.refdef.vieworg, ent->origin, ent->axis[0]);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDRGP4 cg+109044+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRGP4 cg+109044+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+109044+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
SUBF4
ASGNF4
line 806
;806:		VectorNormalize(ent->axis[0]);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 807
;807:		VectorScale(cg.refdef.viewaxis[1], -1, ent->axis[1]);		
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 3212836864
ADDRGP4 cg+109044+36+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 3212836864
ADDRGP4 cg+109044+36+12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 3212836864
ADDRGP4 cg+109044+36+12+8
INDIRF4
MULF4
ASGNF4
line 808
;808:		VectorNormalize(ent->axis[1]);
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 809
;809:		ProjectPointOnPlane(ent->axis[1], ent->axis[1], ent->axis[0]);
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 ProjectPointOnPlane
CALLV
pop
line 810
;810:		CrossProduct(ent->axis[0], ent->axis[1], ent->axis[2]);//VectorScale(cg.refdef.viewaxis[2], -1, ent->axis[2]);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 811
;811:		for(i = 0; i < 3; i++)
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $418
line 812
;812:			for(j = 0; j < 3; j++)
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $422
line 813
;813:				ent->axis[i][j] *= radius * sqrt(dt);
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 72
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 76
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 12
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
ADDP4
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
MULF4
ASGNF4
LABELV $423
line 812
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 3
LTI4 $422
LABELV $419
line 811
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 3
LTI4 $418
line 814
;814:		ent->shaderRGBA[0] = 255 - (255 * dt);		
ADDRLP4 84
CNSTF4 1132396544
ASGNF4
ADDRLP4 88
ADDRLP4 84
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
SUBF4
ASGNF4
ADDRLP4 92
CNSTF4 1325400064
ASGNF4
ADDRLP4 88
INDIRF4
ADDRLP4 92
INDIRF4
LTF4 $427
ADDRLP4 80
ADDRLP4 88
INDIRF4
ADDRLP4 92
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $428
JUMPV
LABELV $427
ADDRLP4 80
ADDRLP4 88
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $428
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 80
INDIRU4
CVUU1 4
ASGNU1
line 815
;815:		ent->shaderRGBA[1] = 255 - (255 * dt);
ADDRLP4 100
CNSTF4 1132396544
ASGNF4
ADDRLP4 104
ADDRLP4 100
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
SUBF4
ASGNF4
ADDRLP4 108
CNSTF4 1325400064
ASGNF4
ADDRLP4 104
INDIRF4
ADDRLP4 108
INDIRF4
LTF4 $430
ADDRLP4 96
ADDRLP4 104
INDIRF4
ADDRLP4 108
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $431
JUMPV
LABELV $430
ADDRLP4 96
ADDRLP4 104
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $431
ADDRLP4 0
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 96
INDIRU4
CVUU1 4
ASGNU1
line 816
;816:		ent->shaderRGBA[2] = 255 - (255 * dt);
ADDRLP4 116
CNSTF4 1132396544
ASGNF4
ADDRLP4 120
ADDRLP4 116
INDIRF4
ADDRLP4 116
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
SUBF4
ASGNF4
ADDRLP4 124
CNSTF4 1325400064
ASGNF4
ADDRLP4 120
INDIRF4
ADDRLP4 124
INDIRF4
LTF4 $433
ADDRLP4 112
ADDRLP4 120
INDIRF4
ADDRLP4 124
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $434
JUMPV
LABELV $433
ADDRLP4 112
ADDRLP4 120
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $434
ADDRLP4 0
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 112
INDIRU4
CVUU1 4
ASGNU1
line 817
;817:		ent->shaderRGBA[3] = 255 - (255 * dt);
ADDRLP4 132
CNSTF4 1132396544
ASGNF4
ADDRLP4 136
ADDRLP4 132
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
SUBF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $436
ADDRLP4 128
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $437
JUMPV
LABELV $436
ADDRLP4 128
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $437
ADDRLP4 0
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 128
INDIRU4
CVUU1 4
ASGNU1
line 819
;818:		//VectorMA(ex->pos.trBase, -8, ent->axis[2], ent->origin);
;819:	}
LABELV $394
line 821
;820:	
;821:	trap_R_AddRefEntityToScene(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 822
;822:	ent->renderfx |= r;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
BORI4
ASGNI4
line 824
;823:	// add the dlight
;824:	if ( ex->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $438
line 827
;825:		float		light;
;826:
;827:		light = (float)( cg.time - ex->startTime ) / ( ex->endTime - ex->startTime );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 828
;828:		if ( light < 0.5 ) {
ADDRLP4 20
INDIRF4
CNSTF4 1056964608
GEF4 $441
line 829
;829:			light = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 830
;830:		} else {
ADDRGP4 $442
JUMPV
LABELV $441
line 831
;831:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 20
CNSTF4 1065353216
CNSTF4 1073741824
ADDRLP4 20
INDIRF4
CNSTF4 1056964608
SUBF4
MULF4
SUBF4
ASGNF4
line 832
;832:		}
LABELV $442
line 833
;833:		light = ex->light * light;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ASGNF4
line 834
;834:		trap_R_AddLightToScene(ent->origin, light, ex->lightColor[0], ex->lightColor[1], ex->lightColor[2] );
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
ARGP4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 835
;835:	}
LABELV $438
line 836
;836:}
LABELV $391
endproc CG_AddExplosion 144 20
proc CG_AddSpriteExplosion 180 20
line 844
;837:
;838:
;839:/*
;840:================
;841:CG_AddSpriteExplosion
;842:================
;843:*/
;844:static void CG_AddSpriteExplosion( localEntity_t *le ) {
line 848
;845:	refEntity_t	re;
;846:	float c;
;847:
;848:	re = le->refEntity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRB
ASGNB 140
line 850
;849:
;850:	c = ( le->endTime - cg.time ) / ( float ) ( le->endTime - le->startTime );
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
ADDRLP4 144
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
ADDRLP4 140
ADDRLP4 148
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 148
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 851
;851:	if ( c > 1 ) {
ADDRLP4 140
INDIRF4
CNSTF4 1065353216
LEF4 $445
line 852
;852:		c = 1.0;	// can happen during connection problems
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
line 853
;853:	}
LABELV $445
line 855
;854:
;855:	re.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 856
;856:	re.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 857
;857:	re.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 858
;858:	re.shaderRGBA[3] = 0xff * c * 0.33;
ADDRLP4 156
CNSTF4 1051260355
CNSTF4 1132396544
ADDRLP4 140
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 160
CNSTF4 1325400064
ASGNF4
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
LTF4 $455
ADDRLP4 152
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $456
JUMPV
LABELV $455
ADDRLP4 152
ADDRLP4 156
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $456
ADDRLP4 0+116+3
ADDRLP4 152
INDIRU4
CVUU1 4
ASGNU1
line 860
;859:
;860:	re.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 861
;861:	re.radius = 42 * ( 1.0 - c ) + 30;
ADDRLP4 0+132
CNSTF4 1109917696
CNSTF4 1065353216
ADDRLP4 140
INDIRF4
SUBF4
MULF4
CNSTF4 1106247680
ADDF4
ASGNF4
line 863
;862:
;863:	trap_R_AddRefEntityToScene( &re );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 866
;864:
;865:	// add the dlight
;866:	if ( le->light ) {
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $458
line 869
;867:		float		light;
;868:
;869:		light = (float)( cg.time - le->startTime ) / ( le->endTime - le->startTime );
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 172
ADDRLP4 168
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 164
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 172
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 168
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 870
;870:		if ( light < 0.5 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1056964608
GEF4 $461
line 871
;871:			light = 1.0;
ADDRLP4 164
CNSTF4 1065353216
ASGNF4
line 872
;872:		} else {
ADDRGP4 $462
JUMPV
LABELV $461
line 873
;873:			light = 1.0 - ( light - 0.5 ) * 2;
ADDRLP4 164
CNSTF4 1065353216
CNSTF4 1073741824
ADDRLP4 164
INDIRF4
CNSTF4 1056964608
SUBF4
MULF4
SUBF4
ASGNF4
line 874
;874:		}
LABELV $462
line 875
;875:		light = le->light * light;
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ASGNF4
line 876
;876:		trap_R_AddLightToScene(re.origin, light, le->lightColor[0], le->lightColor[1], le->lightColor[2] );
ADDRLP4 0+68
ARGP4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 877
;877:	}
LABELV $458
line 878
;878:}
LABELV $443
endproc CG_AddSpriteExplosion 180 20
lit
align 4
LABELV $465
byte 4 0
byte 4 0
byte 4 1065353216
export CG_AddScorePlum
code
proc CG_AddScorePlum 168 12
line 887
;879: 
;880:/*
;881:===================
;882:CG_AddScorePlum
;883:===================
;884:*/
;885:#define NUMBER_SIZE		8
;886:
;887:void CG_AddScorePlum( localEntity_t *le ) {
line 889
;888:	refEntity_t	*re;
;889:	vec3_t		origin, delta, dir, vec, up = {0, 0, 1};
ADDRLP4 112
ADDRGP4 $465
INDIRB
ASGNB 12
line 893
;890:	float		c, len;
;891:	int			i, score, digits[10], numdigits, negative;
;892:
;893:	re = &le->refEntity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
line 895
;894:
;895:	c = ( le->endTime - cg.time ) * le->lifeRate;
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 128
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRGP4 cg+107604
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 128
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ASGNF4
line 897
;896:
;897:	score = le->radius;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 898
;898:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $467
line 899
;899:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 900
;900:		re->shaderRGBA[1] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 17
ASGNU1
line 901
;901:		re->shaderRGBA[2] = 0x11;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 17
ASGNU1
line 902
;902:	}
ADDRGP4 $468
JUMPV
LABELV $467
line 903
;903:	else {
line 904
;904:		re->shaderRGBA[0] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 905
;905:		re->shaderRGBA[1] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 906
;906:		re->shaderRGBA[2] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 907
;907:		if (score >= 50) {
ADDRLP4 12
INDIRI4
CNSTI4 50
LTI4 $469
line 908
;908:			re->shaderRGBA[1] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 0
ASGNU1
line 909
;909:		} else if (score >= 20) {
ADDRGP4 $470
JUMPV
LABELV $469
ADDRLP4 12
INDIRI4
CNSTI4 20
LTI4 $471
line 910
;910:			re->shaderRGBA[0] = re->shaderRGBA[1] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 911
;911:		} else if (score >= 10) {
ADDRGP4 $472
JUMPV
LABELV $471
ADDRLP4 12
INDIRI4
CNSTI4 10
LTI4 $473
line 912
;912:			re->shaderRGBA[2] = 0;
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 0
ASGNU1
line 913
;913:		} else if (score >= 2) {
ADDRGP4 $474
JUMPV
LABELV $473
ADDRLP4 12
INDIRI4
CNSTI4 2
LTI4 $475
line 914
;914:			re->shaderRGBA[0] = re->shaderRGBA[2] = 0;
ADDRLP4 136
CNSTU1 0
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
ADDRLP4 8
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 136
INDIRU1
ASGNU1
line 915
;915:		}
LABELV $475
LABELV $474
LABELV $472
LABELV $470
line 917
;916:
;917:	}
LABELV $468
line 918
;918:	if (c < 0.25)
ADDRLP4 80
INDIRF4
CNSTF4 1048576000
GEF4 $477
line 919
;919:		re->shaderRGBA[3] = 0xff * 4 * c;
ADDRLP4 136
CNSTF4 1149173760
ADDRLP4 80
INDIRF4
MULF4
ASGNF4
ADDRLP4 140
CNSTF4 1325400064
ASGNF4
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
LTF4 $480
ADDRLP4 132
ADDRLP4 136
INDIRF4
ADDRLP4 140
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $481
JUMPV
LABELV $480
ADDRLP4 132
ADDRLP4 136
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $481
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
ADDRLP4 132
INDIRU4
CVUU1 4
ASGNU1
ADDRGP4 $478
JUMPV
LABELV $477
line 921
;920:	else
;921:		re->shaderRGBA[3] = 0xff;
ADDRLP4 8
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
LABELV $478
line 923
;922:
;923:	re->radius = NUMBER_SIZE / 2;
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1082130432
ASGNF4
line 925
;924:
;925:	VectorCopy(le->pos.trBase, origin);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRB
ASGNB 12
line 926
;926:	origin[2] += 110 - c * 100;
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
CNSTF4 1121714176
CNSTF4 1120403456
ADDRLP4 80
INDIRF4
MULF4
SUBF4
ADDF4
ASGNF4
line 928
;927:
;928:	VectorSubtract(cg.refdef.vieworg, origin, dir);
ADDRLP4 96
ADDRGP4 cg+109044+24
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+109044+24+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+109044+24+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 929
;929:	CrossProduct(dir, up, vec);
ADDRLP4 96
ARGP4
ADDRLP4 112
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 930
;930:	VectorNormalize(vec);
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 932
;931:
;932:	VectorMA(origin, -10 + 20 * sin(c * 2 * M_PI), vec, origin);
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1101004800
ADDRLP4 144
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 148
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1101004800
ADDRLP4 148
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
CNSTF4 1078530011
CNSTF4 1073741824
ADDRLP4 80
INDIRF4
MULF4
MULF4
ARGF4
ADDRLP4 152
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 152
INDIRF4
MULF4
CNSTF4 3240099840
ADDF4
MULF4
ADDF4
ASGNF4
line 936
;933:
;934:	// if the view would be "inside" the sprite, kill the sprite
;935:	// so it doesn't add too much overdraw
;936:	VectorSubtract( origin, cg.refdef.vieworg, delta );
ADDRLP4 84
ADDRLP4 16
INDIRF4
ADDRGP4 cg+109044+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+4
ADDRLP4 16+4
INDIRF4
ADDRGP4 cg+109044+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84+8
ADDRLP4 16+8
INDIRF4
ADDRGP4 cg+109044+24+8
INDIRF4
SUBF4
ASGNF4
line 937
;937:	len = VectorLength( delta );
ADDRLP4 84
ARGP4
ADDRLP4 156
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 124
ADDRLP4 156
INDIRF4
ASGNF4
line 938
;938:	if ( len < 20 ) {
ADDRLP4 124
INDIRF4
CNSTF4 1101004800
GEF4 $513
line 939
;939:		CG_FreeLocalEntity( le );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 940
;940:		return;
ADDRGP4 $464
JUMPV
LABELV $513
line 943
;941:	}
;942:
;943:	negative = qfalse;
ADDRLP4 108
CNSTI4 0
ASGNI4
line 944
;944:	if (score < 0) {
ADDRLP4 12
INDIRI4
CNSTI4 0
GEI4 $515
line 945
;945:		negative = qtrue;
ADDRLP4 108
CNSTI4 1
ASGNI4
line 946
;946:		score = -score;
ADDRLP4 12
ADDRLP4 12
INDIRI4
NEGI4
ASGNI4
line 947
;947:	}
LABELV $515
line 949
;948:
;949:	for (numdigits = 0; !(numdigits && !score); numdigits++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $520
JUMPV
LABELV $517
line 950
;950:		digits[numdigits] = score % 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 951
;951:		score = score / 10;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 10
DIVI4
ASGNI4
line 952
;952:	}
LABELV $518
line 949
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $520
ADDRLP4 160
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 160
INDIRI4
EQI4 $517
ADDRLP4 12
INDIRI4
ADDRLP4 160
INDIRI4
NEI4 $517
line 954
;953:
;954:	if (negative) {
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $521
line 955
;955:		digits[numdigits] = 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 40
ADDP4
CNSTI4 10
ASGNI4
line 956
;956:		numdigits++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 957
;957:	}
LABELV $521
line 959
;958:
;959:	for (i = 0; i < numdigits; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $526
JUMPV
LABELV $523
line 960
;960:		VectorMA(origin, (float) (((float) numdigits / 2) - i) * NUMBER_SIZE, vec, re->origin);
ADDRLP4 8
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
CNSTF4 1090519040
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
DIVF4
ADDRLP4 4
INDIRI4
CVIF4 4
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 961
;961:		re->customShader = cgs.media.numberShaders[digits[numdigits-1-i]];
ADDRLP4 164
CNSTI4 2
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ADDRLP4 4
INDIRI4
SUBI4
ADDRLP4 164
INDIRI4
LSHI4
ADDRLP4 40
ADDP4
INDIRI4
ADDRLP4 164
INDIRI4
LSHI4
ADDRGP4 cgs+205084+120
ADDP4
INDIRI4
ASGNI4
line 962
;962:		trap_R_AddRefEntityToScene( re );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 963
;963:	}
LABELV $524
line 959
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $526
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LTI4 $523
line 964
;964:}
LABELV $464
endproc CG_AddScorePlum 168 12
export CG_RemoveAllFragments
proc CG_RemoveAllFragments 8 4
line 975
;965:
;966:
;967:/*
;968:===================
;969:CG_RemoveAllFragments
;970:
;971:	removes all fragments in game
;972:===================
;973:*/
;974:void CG_RemoveAllFragments( void )
;975:{
line 980
;976:	localEntity_t	*le, *next;
;977:
;978:	// walk the list backwards, so any new local entities generated
;979:	// (trails, marks, etc) will be revmoed this frame
;980:	le = cg_activeLocalEntities.prev;
ADDRLP4 0
ADDRGP4 cg_activeLocalEntities
INDIRP4
ASGNP4
line 981
;981:	for ( ; le != &cg_activeLocalEntities ; le = next ) {
ADDRGP4 $537
JUMPV
LABELV $534
line 984
;982:		// grab next now, so if the local entity is freed we
;983:		// still have it
;984:		next = le->prev;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 987
;985:
;986:		// no fragment? then leave
;987:		if ( le->leType != LE_FRAGMENT )
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 3
EQI4 $538
line 988
;988:			continue;
ADDRGP4 $535
JUMPV
LABELV $538
line 990
;989:
;990:		CG_FreeLocalEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 991
;991:	}
LABELV $535
line 981
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $537
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeLocalEntities
CVPU4 4
NEU4 $534
line 992
;992:}
LABELV $533
endproc CG_RemoveAllFragments 8 4
export CG_AddLocalEntities
proc CG_AddLocalEntities 16 8
line 1002
;993://==============================================================================
;994:
;995:/*
;996:===================
;997:CG_AddLocalEntities
;998:
;999:  qboolean thirdperson ? renders thirdperson items only (with different fov)
;1000:===================
;1001:*/
;1002:void CG_AddLocalEntities( qboolean thirdperson ) {
line 1007
;1003:	localEntity_t	*le, *next;
;1004:
;1005:	// walk the list backwards, so any new local entities generated
;1006:	// (trails, marks, etc) will be present this frame
;1007:	le = cg_activeLocalEntities.prev;
ADDRLP4 0
ADDRGP4 cg_activeLocalEntities
INDIRP4
ASGNP4
line 1008
;1008:	for ( ; le != &cg_activeLocalEntities ; le = next ) {
ADDRGP4 $544
JUMPV
LABELV $541
line 1011
;1009:		// grab next now, so if the local entity is freed we
;1010:		// still have it
;1011:		next = le->prev;
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRP4
ASGNP4
line 1013
;1012:
;1013:		if ( cg.time >= le->endTime ) {
ADDRGP4 cg+107604
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
LTI4 $545
line 1014
;1014:			CG_FreeLocalEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_FreeLocalEntity
CALLV
pop
line 1015
;1015:			continue;
ADDRGP4 $542
JUMPV
LABELV $545
line 1035
;1016:		}
;1017:
;1018:#ifndef SAME_WEAPONPIPE
;1019:		// because these got the leFlags reservd for other things
;1020:		if ( le->leType != LE_SHRAPNEL )
;1021:		{
;1022:			if ( !thirdperson && (le->leFlags & LEF_3RDPERSON) )
;1023:				continue;
;1024:
;1025:			if ( thirdperson && !(le->leFlags & LEF_3RDPERSON) )
;1026:				continue;
;1027:		}
;1028:		else
;1029:		{
;1030:			if ( thirdperson )
;1031:				continue;
;1032:		}
;1033:#endif
;1034:
;1035:		switch ( le->leType ) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $548
ADDRLP4 8
INDIRI4
CNSTI4 12
GTI4 $548
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $565
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $565
address $549
address $557
address $556
address $558
address $559
address $561
address $560
address $562
address $563
address $555
address $553
address $554
address $564
code
LABELV $548
line 1037
;1036:		default:
;1037:			CG_Error( "Bad leType: %i", le->leType );
ADDRGP4 $551
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1038
;1038:			break;
ADDRGP4 $549
JUMPV
line 1041
;1039:
;1040:		case LE_MARK:
;1041:			break;
LABELV $553
line 1043
;1042:		case LE_PARTICLE:
;1043:			CG_AddParticle( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddParticle
CALLV
pop
line 1044
;1044:			break;
ADDRGP4 $549
JUMPV
LABELV $554
line 1047
;1045:// Navy Seals ++
;1046:		case LE_TRACER:
;1047:			CG_AddTracer( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddTracer
CALLV
pop
line 1048
;1048:			break;
ADDRGP4 $549
JUMPV
LABELV $555
line 1050
;1049:		case LE_SHRAPNEL:
;1050:			CG_AddShrapnel( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddShrapnel
CALLV
pop
line 1051
;1051:			break;		
ADDRGP4 $549
JUMPV
LABELV $556
line 1054
;1052:// Navy Seals --
;1053:		case LE_SPRITE_EXPLOSION:
;1054:			CG_AddSpriteExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddSpriteExplosion
CALLV
pop
line 1055
;1055:			break;
ADDRGP4 $549
JUMPV
LABELV $557
line 1058
;1056:
;1057:		case LE_EXPLOSION:
;1058:			CG_AddExplosion( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddExplosion
CALLV
pop
line 1059
;1059:			break;
ADDRGP4 $549
JUMPV
LABELV $558
line 1062
;1060:
;1061:		case LE_FRAGMENT:			// gibs and brass
;1062:			CG_AddFragment( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFragment
CALLV
pop
line 1063
;1063:			break;
ADDRGP4 $549
JUMPV
LABELV $559
line 1066
;1064:
;1065:		case LE_MOVE_SCALE_FADE:		// water bubbles
;1066:			CG_AddMoveScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddMoveScaleFade
CALLV
pop
line 1067
;1067:			break;
ADDRGP4 $549
JUMPV
LABELV $560
line 1070
;1068:
;1069:		case LE_FADE_RGB:				// teleporters, railtrails
;1070:			CG_AddFadeRGB( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFadeRGB
CALLV
pop
line 1071
;1071:			break;
ADDRGP4 $549
JUMPV
LABELV $561
line 1074
;1072:
;1073:		case LE_FALL_SCALE_FADE: // gib blood trails
;1074:			CG_AddFallScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddFallScaleFade
CALLV
pop
line 1075
;1075:			break;
ADDRGP4 $549
JUMPV
LABELV $562
line 1078
;1076:
;1077:		case LE_SCALE_FADE:		// rocket trails
;1078:			CG_AddScaleFade( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScaleFade
CALLV
pop
line 1079
;1079:			break;
ADDRGP4 $549
JUMPV
LABELV $563
line 1082
;1080:
;1081:		case LE_SCOREPLUM:
;1082:			CG_AddScorePlum( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddScorePlum
CALLV
pop
line 1083
;1083:			break;
ADDRGP4 $549
JUMPV
LABELV $564
line 1086
;1084:			
;1085:		case LE_SHOWREFENTITY:
;1086:			CG_AddRefEntity( le );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddRefEntity
CALLV
pop
line 1087
;1087:			break;
LABELV $549
line 1090
;1088: 
;1089:		}
;1090:	}
LABELV $542
line 1008
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
LABELV $544
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg_activeLocalEntities
CVPU4 4
NEU4 $541
line 1091
;1091:}
LABELV $540
endproc CG_AddLocalEntities 16 8
import CG_DirectImpactMark
bss
export cg_freeLocalEntities
align 4
LABELV cg_freeLocalEntities
skip 4
export cg_activeLocalEntities
align 4
LABELV cg_activeLocalEntities
skip 292
export cg_localEntities
align 4
LABELV cg_localEntities
skip 149504
import ClientScript_Update
import ClientScript_Init
import CG_LightParticles
import CG_Tracer
import CG_CalculateWeaponPosition
import vtos
import CG_GetOriginFromTag
import CG_AddAtmosphericEffects
import CG_InvenSelect
import CG_GetCamoStringForType
import CG_EnviromentParse
import CG_BloodPool
import CG_ParseBriefingFile
import CG_ExplosionSparks
import CG_ResetMonsterEntity
import CG_SparkTrail
import CG_Explosion
import NS_CG_LaunchFuncExplosive
import CG_WeaponAnimation
import CG_AddPlayerWeapon2
import CG_ParseWeaponAnimationFile
import CG_BleederTrail
import CG_LaunchParticle
import CG_ReloadClipWarning
import CG_BloodOnWallMark
import CG_CreateBleeder
import CG_CacheAllModels
import CG_LoadingBarSetMax
import CG_LoadingBarUpdate
import CG_LoadBarInit
import i_Menu
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddAdditiveLightToScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_ProcessSnapshots
import CG_MakeExplosion
import CG_Bleed
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponSelect
import CG_GrappleTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_InitMemory
import CG_Alloc
import CG_GameMem_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawTinyStringColor
import CG_DrawStringOutline
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawBigString
import CG_DrawStringExt2
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_ForceCvar
import CG_BuildSpectatorString
import CG_GetSelectedScore
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_PrecacheWeapons
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import cg_lowAmmoWarning
import cg_crosshairFade
import cg_bulletpredict
import cg_qcmd_a
import cg_qcmd_b
import cg_qcmd_g
import cg_qcmd_r
import cg_qcmd_size
import cg_qcmd_dscr0
import cg_qcmd_dscr9
import cg_qcmd_dscr8
import cg_qcmd_dscr7
import cg_qcmd_dscr6
import cg_qcmd_dscr5
import cg_qcmd_dscr4
import cg_qcmd_dscr3
import cg_qcmd_dscr2
import cg_qcmd_dscr1
import cg_qcmd_cmd0
import cg_qcmd_cmd9
import cg_qcmd_cmd8
import cg_qcmd_cmd7
import cg_qcmd_cmd6
import cg_qcmd_cmd5
import cg_qcmd_cmd4
import cg_qcmd_cmd3
import cg_qcmd_cmd2
import cg_qcmd_cmd1
import cg_qcmd_posy
import cg_qcmd_posx
import cg_newbeeTime
import cg_autoReload
import cg_antiLag
import cg_goreLevel
import cg_chatBeep
import cg_showConsole
import cg_chatHeight
import cg_chatTime
import ui_friendlyfire
import ui_roundtime
import ui_timelimit
import ui_teampointlimit
import raise_tec
import raise_sta
import raise_stl
import raise_str
import raise_spd
import raise_acc
import cg_disableTangoHandSkin
import cg_disableHeadstuff
import cg_newbeeHeight
import cg_correctgunFov
import cg_grenadeSparks
import ui_gotbriefcase
import ui_isvip
import ui_gotbomb
import mi_assaultfield
import mi_blowup
import mi_viptime
import mi_viprescue
import cg_wakemarkDistantTime
import cg_wakemarkTime
import cg_bulletTracerWidth
import cg_bulletTracerLength
import ui_team
import char_xp
import char_strength
import char_technical
import char_accuracy
import char_speed
import char_stealth
import char_stamina
import cg_particleTime
import cg_gunSmokeTime
import cg_lowEffects
import cg_atmosphericEffects
import cg_enableTimeSelect
import cg_enableDust
import cg_enableBreath
import pmodel_o
import cg_gunSmoke
import test_w
import test_h
import test_y
import test_x
import cg_debugAlloc
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_msec
import pmove_fixed
import cg_smoothClients
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawAttacker
import cg_lagometer
import cg_stereoSeparation
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_autoswitch
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairHealth
import cg_crosshairSize
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawRewards
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawAmmoWarning
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_centertime
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import CG_ParseHelpFile
import CG_HandleHelp
import CG_NewbieMessage
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $551
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 108
byte 1 101
byte 1 84
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $95
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 114
byte 1 101
byte 1 101
byte 1 76
byte 1 111
byte 1 99
byte 1 97
byte 1 108
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 97
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 0
