data
align 4
LABELV $69
byte 4 1073741824
byte 4 1073741824
byte 4 1073741824
export G_TouchMissileTriggers
code
proc G_TouchMissileTriggers 4208 16
file "../g_missile.c"
line 30
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:
;4:// every line of code that differs from the quake3:arena SDK
;5:// is property of manfred nerurkar
;6:// no commercial explotation allowed
;7:// you are only allowed to use this code in navy seals: covert operations 
;8:// a quake3 arena modifiation
;9:// defcon-x@ns-co.net
;10:
;11:#include "g_local.h"
;12:
;13:#include "variables.h"
;14:
;15:#define	MISSILE_PRESTEP_TIME	100
;16:
;17:void Lead_Impact ( gentity_t *lead, trace_t *trace );
;18:void Touch_GlassTrigger (gentity_t *ent, gentity_t *other, trace_t *trace);
;19: void assault_link_all( qboolean unlink );
;20:
;21:
;22:/*
;23:============
;24:G_TouchMissileTriggers
;25:
;26:Find all trigger entities that ent's current position touches.
;27:Spectators will only interact with teleporters.
;28:============
;29:*/
;30:void	G_TouchMissileTriggers( gentity_t *ent ) {
line 40
;31:	int			i, num;
;32:	int			touch[MAX_GENTITIES];
;33:	gentity_t	*hit;
;34:	trace_t		trace;
;35:	vec3_t		mins, maxs;
;36:	static vec3_t	range = { 2, 2, 2 };
;37: 
;38: 
;39:
;40:	VectorSubtract( ent->r.currentOrigin, range, mins );
ADDRLP4 4188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 4188
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRGP4 $69
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+4
ADDRLP4 4188
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRGP4 $69+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRGP4 $69+8
INDIRF4
SUBF4
ASGNF4
line 41
;41:	VectorAdd( ent->r.currentOrigin, range, maxs );
ADDRLP4 4192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 4192
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRGP4 $69
INDIRF4
ADDF4
ASGNF4
ADDRLP4 76+4
ADDRLP4 4192
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRGP4 $69+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 76+8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRGP4 $69+8
INDIRF4
ADDF4
ASGNF4
line 43
;42:
;43:	num = trap_EntitiesInBox( mins, maxs, touch, MAX_GENTITIES );
ADDRLP4 64
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 92
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 4196
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 88
ADDRLP4 4196
INDIRI4
ASGNI4
line 47
;44: 
;45:
;46:
;47:	for ( i=0 ; i<num ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $81
JUMPV
LABELV $78
line 48
;48:		hit = &g_entities[touch[i]];
ADDRLP4 0
CNSTI4 1108
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 50
;49:
;50:		if ( !hit->touch   ) {
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $82
line 51
;51:			continue;
ADDRGP4 $79
JUMPV
LABELV $82
line 53
;52:		}
;53:		if ( !( hit->r.contents & CONTENTS_TRIGGER ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
CNSTI4 1073741824
BANDI4
CNSTI4 0
NEI4 $84
line 54
;54:			continue;
ADDRGP4 $79
JUMPV
LABELV $84
line 59
;55:		} 
;56:		
;57:		// use seperate code for determining if an item is picked up
;58:		// so you don't have to actually contact its bounding box 
;59:		if ( !trap_EntityContact( mins, maxs, hit ) ) {
ADDRLP4 64
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4200
ADDRGP4 trap_EntityContact
CALLI4
ASGNI4
ADDRLP4 4200
INDIRI4
CNSTI4 0
NEI4 $86
line 60
;60:			continue;
ADDRGP4 $79
JUMPV
LABELV $86
line 63
;61:		}
;62:		
;63:		memset( &trace, 0, sizeof(trace) );
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 56
ARGI4
ADDRGP4 memset
CALLP4
pop
line 65
;64: 
;65:		hit->touch (hit, ent, &trace); 
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 704
ADDP4
INDIRP4
CALLV
pop
line 66
;66:	} 
LABELV $79
line 47
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $81
ADDRLP4 4
INDIRI4
ADDRLP4 88
INDIRI4
LTI4 $78
line 67
;67:}
LABELV $68
endproc G_TouchMissileTriggers 4208 16
export G_BounceMissile
proc G_BounceMissile 92 12
line 75
;68:
;69:/*
;70:================
;71:G_BounceMissile
;72:
;73:================
;74:*/
;75:void G_BounceMissile( gentity_t *ent, trace_t *trace ) {
line 81
;76:	vec3_t	velocity;
;77:	float	dot;
;78:	int		hitTime;
;79:
;80:	// reflect the velocity on the trace plane
;81:	hitTime = level.previousTime + ( level.time - level.previousTime ) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 82
;82:	BG_EvaluateTrajectoryDelta( &ent->s.pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 83
;83:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 84
;84:	VectorMA( velocity, -2*dot, trace->plane.normal, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 86
;85:
;86:	ent->s.pos.trDelta[2] *= 0.5f;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1056964608
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ASGNF4
line 88
;87:
;88:	if ( trace->surfaceFlags & SURF_DIRTSTEPS || trace->surfaceFlags & SURF_SANDSTEPS || trace->surfaceFlags & SURF_SOFTSTEPS )
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 32
INDIRI4
NEI4 $99
ADDRLP4 28
INDIRI4
CNSTI4 8388608
BANDI4
ADDRLP4 32
INDIRI4
NEI4 $99
ADDRLP4 28
INDIRI4
CNSTI4 33554432
BANDI4
ADDRLP4 32
INDIRI4
EQI4 $96
LABELV $99
line 89
;89:		ent->s.pos.trDelta[2] *= 0.2f;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTF4 1045220557
ADDRLP4 36
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRGP4 $97
JUMPV
LABELV $96
line 90
;90:	else if ( trace->surfaceFlags & SURF_WOODSTEPS || trace->surfaceFlags & SURF_GLASS )
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 1048576
BANDI4
ADDRLP4 44
INDIRI4
NEI4 $102
ADDRLP4 40
INDIRI4
CNSTI4 16777216
BANDI4
ADDRLP4 44
INDIRI4
EQI4 $100
LABELV $102
line 91
;91:		ent->s.pos.trDelta[2] *= 0.5f;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTF4 1056964608
ADDRLP4 48
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRGP4 $101
JUMPV
LABELV $100
line 92
;92:	else if ( trace->surfaceFlags & SURF_METALSTEPS )
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $103
line 93
;93:		ent->s.pos.trDelta[2] *= 0.8f;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTF4 1061997773
ADDRLP4 52
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRGP4 $104
JUMPV
LABELV $103
line 94
;94:	else if ( trace->surfaceFlags & SURF_SNOWSTEPS )
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4194304
BANDI4
CNSTI4 0
EQI4 $105
line 95
;95:		ent->s.pos.trDelta[2] *= 0.1f;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTF4 1036831949
ADDRLP4 56
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRGP4 $106
JUMPV
LABELV $105
line 97
;96:	else
;97:		ent->s.pos.trDelta[2] *= 0.65f; 
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTF4 1059481190
ADDRLP4 60
INDIRP4
INDIRF4
MULF4
ASGNF4
LABELV $106
LABELV $104
LABELV $101
LABELV $97
line 99
;98:
;99:	ent->s.pos.trDelta[1] *= 0.8f; 
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTF4 1061997773
ADDRLP4 64
INDIRP4
INDIRF4
MULF4
ASGNF4
line 100
;100:	ent->s.pos.trDelta[0] *= 0.8f; 	
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTF4 1061997773
ADDRLP4 68
INDIRP4
INDIRF4
MULF4
ASGNF4
line 102
;101:
;102:	if ( ent->s.eFlags & EF_BOUNCE_HALF ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $107
line 103
;103:		int mindelta = 40;
ADDRLP4 72
CNSTI4 40
ASGNI4
line 105
;104:
;105:		if ( ent->fly_sound_debounce_time ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 0
EQI4 $109
line 106
;106:			VectorScale( ent->s.pos.trDelta, 0.80, ent->s.pos.trDelta );
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTF4 1061997773
ADDRLP4 76
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTF4 1061997773
ADDRLP4 80
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTF4 1061997773
ADDRLP4 84
INDIRP4
INDIRF4
MULF4
ASGNF4
line 108
;107:	//		G_Printf("delta: %f normal:%2f\n", VectorLength( ent->s.pos.trDelta ), trace->plane.normal[2] );
;108:		}
ADDRGP4 $110
JUMPV
LABELV $109
line 110
;109:		else
;110:			VectorScale( ent->s.pos.trDelta, 0.4, ent->s.pos.trDelta );
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTF4 1053609165
ADDRLP4 76
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTF4 1053609165
ADDRLP4 80
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTF4 1053609165
ADDRLP4 84
INDIRP4
INDIRF4
MULF4
ASGNF4
LABELV $110
line 112
;111:		// check for stop
;112:		if ( trace->plane.normal[2] > 0.2 && VectorLength( ent->s.pos.trDelta ) < mindelta ) {
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1045220557
LEF4 $111
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 88
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 88
INDIRF4
ADDRLP4 72
INDIRI4
CVIF4 4
GEF4 $111
line 113
;113:			G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 114
;114:			return;
ADDRGP4 $88
JUMPV
LABELV $111
line 116
;115:		}
;116:	}
LABELV $107
line 118
;117:
;118:	VectorAdd( ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 119
;119:	VectorCopy( ent->r.currentOrigin, ent->s.pos.trBase );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 120
;120:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 121
;121:}
LABELV $88
endproc G_BounceMissile 92 12
export G_FlashBangExplode
proc G_FlashBangExplode 168 28
line 129
;122:
;123:
;124:#define         FLASH_RADIUS                    200
;125:#define         BLIND_FLASH                     50      // Time of blindness in FRAMES
;126:
;127:qboolean pointinback( gentity_t *self, vec3_t point );
;128:
;129:qboolean G_FlashBangExplode ( vec3_t origin, gentity_t *self, gentity_t *attacker, int blindtime, float radius, gentity_t *ignore ) {
line 132
;130:	int			dist;
;131: 	int			i ;
;132:	qboolean	hitClient = qfalse;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 136
;133: 	gclient_t	*client;
;134:
;135:	// unlink all assault fields
;136:	assault_link_all( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 assault_link_all
CALLV
pop
line 138
;137: 
;138:	if ( radius < 1.0 ) {
ADDRFP4 16
INDIRF4
CNSTF4 1065353216
GEF4 $115
line 139
;139:		radius = 1.0;
ADDRFP4 16
CNSTF4 1065353216
ASGNF4
line 140
;140:	} 
LABELV $115
line 143
;141:
;142:	// org is in ground try to raise the flash org to center.
;143:	origin[2] += 10.0f;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1092616192
ADDF4
ASGNF4
ADDRGP4 $118
JUMPV
LABELV $117
line 147
;144:
;145:	// get a point that's not in any wall
;146:	while ( trap_PointContents( origin, self->s.number ) & CONTENTS_SOLID )
;147:	{
line 149
;148://		G_Printf("grenadepoint stuck. changing: %f\n", origin[2] );
;149:		origin[2] -= 2.0f;	
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 151
;150:
;151:		if ( origin[2] < self->r.currentOrigin[2] ) // don't get stuck in a loop
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
GEF4 $120
line 152
;152:		{
line 153
;153:			origin[2] = self->r.currentOrigin[2]; // don't put the flashbang into the floor
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ASGNF4
line 154
;154:			break;		
ADDRGP4 $119
JUMPV
LABELV $120
line 156
;155:		}
;156:	} 
LABELV $118
line 146
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $117
LABELV $119
line 159
;157:
;158:	// give any nearby players a flash event
;159:	for ( i = 0 ; i < level.maxclients ; i++ ) 
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $125
JUMPV
LABELV $122
line 160
;160:	{
line 166
;161:		vec3_t		delta;
;162:		float		len;
;163:		float		temp;
;164:		vec3_t		forward;
;165:		trace_t		tr;
;166:		qboolean	behindPlayer = qfalse;
ADDRLP4 124
CNSTI4 0
ASGNI4
line 169
;167:		vec3_t		org;
;168:
;169:		client = &level.clients[i];
ADDRLP4 0
CNSTI4 7668
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 171
;170:
;171:		if ( client == ignore->client ) {
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 20
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
NEU4 $127
line 172
;172:			continue;
ADDRGP4 $123
JUMPV
LABELV $127
line 174
;173:		}
;174:		if ( client->pers.connected == CON_DISCONNECTED ) {
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
INDIRI4
CNSTI4 0
NEI4 $129
line 175
;175:			continue;
ADDRGP4 $123
JUMPV
LABELV $129
line 177
;176:		}
;177:		if ( client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $131
line 178
;178:			continue;
ADDRGP4 $123
JUMPV
LABELV $131
line 180
;179:		}
;180:		if ( client->sess.waiting ) {
ADDRLP4 0
INDIRP4
CNSTI4 1828
ADDP4
INDIRI4
CNSTI4 0
EQI4 $133
line 181
;181:			continue;
ADDRGP4 $123
JUMPV
LABELV $133
line 184
;182:		}
;183:		if ( 
;184:				( ( level.time - client->respawnTime ) < RESPAWN_INVUNERABILITY_TIME ) &&
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 1920
ADDP4
INDIRI4
SUBI4
CNSTI4 4500
GEI4 $135
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $135
line 187
;185:				g_gametype.integer == GT_TEAM 
;186:			)
;187:			continue;
ADDRGP4 $123
JUMPV
LABELV $135
line 190
;188:  
;189:		// if too far away 
;190:		VectorSubtract( origin, client->ps.origin, delta );
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 128
INDIRP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 128
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 191
;191:		len = VectorNormalize( delta );
ADDRLP4 24
ARGP4
ADDRLP4 136
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 136
INDIRF4
ASGNF4
line 192
;192:		if ( len > radius ) {
ADDRLP4 48
INDIRF4
ADDRFP4 16
INDIRF4
LEF4 $141
line 193
;193:			continue;
ADDRGP4 $123
JUMPV
LABELV $141
line 197
;194:		}
;195:
;196:		// figure out if we're facing the bang
;197:		AngleVectors( client->ps.viewangles, forward, NULL, NULL );
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 140
CNSTP4 0
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 199
;198:
;199:		if ( DotProduct( delta, forward ) < 0.4 ) {
ADDRLP4 24
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 24+4
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
ADDRLP4 24+8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
CNSTF4 1053609165
GEF4 $143
line 200
;200:		 	behindPlayer = qtrue;
ADDRLP4 124
CNSTI4 1
ASGNI4
line 201
;201:		}
LABELV $143
line 204
;202:
;203:		// if not line of sight, no sound
;204:		VectorCopy( client->ps.origin, org );
ADDRLP4 52
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 205
;205:		org[2] += client->ps.viewheight;
ADDRLP4 52+8
ADDRLP4 52+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 207
;206:		
;207:		trap_Trace( &tr, org, NULL, NULL, origin, client->ps.clientNum, ( CONTENTS_SOLID | CONTENTS_BODY | CONTENTS_LAVA | CONTENTS_SLIME ) );
ADDRLP4 68
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 144
CNSTP4 0
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
CNSTI4 33554457
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 209
;208:	
;209:		if ( tr.fraction != 1.0 ) {
ADDRLP4 68+8
INDIRF4
CNSTF4 1065353216
EQF4 $150
line 210
;210:			continue;
ADDRGP4 $123
JUMPV
LABELV $150
line 213
;211:		}
;212: 		
;213:		hitClient = qtrue;
ADDRLP4 12
CNSTI4 1
ASGNI4
line 216
;214:
;215:		//  blindtime * ( radius - len ) / radius 
;216:		temp = (radius-len)/radius;
ADDRLP4 148
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 64
ADDRLP4 148
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
ADDRLP4 148
INDIRF4
DIVF4
ASGNF4
line 217
;217:		dist = blindtime * ( temp );
ADDRLP4 8
ADDRFP4 12
INDIRI4
CVIF4 4
ADDRLP4 64
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 221
;218:
;219:
;220:		// now let him flash
;221:		{
line 222
;222:			gentity_t *tent = G_TempEntity( origin, EV_FLASHBANG );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 97
ARGI4
ADDRLP4 156
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 152
ADDRLP4 156
INDIRP4
ASGNP4
line 224
;223:
;224:			tent->s.otherEntityNum = client->ps.clientNum;
ADDRLP4 160
CNSTI4 140
ASGNI4
ADDRLP4 152
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
ADDRLP4 0
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRI4
ASGNI4
line 225
;225: 			tent->s.frame = dist;
ADDRLP4 152
INDIRP4
CNSTI4 172
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 226
;226:			tent->s.eventParm = behindPlayer;
ADDRLP4 152
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 229
;227:
;228:			// make suire clients recieve this packet
;229:			tent->r.singleClient = client->ps.clientNum;
ADDRLP4 152
INDIRP4
CNSTI4 428
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 230
;230:			tent->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 164
ADDRLP4 152
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 231
;231:		}  
line 232
;232:	}
LABELV $123
line 159
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $125
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $122
line 234
;233:
;234:	assault_link_all( qfalse ); // relink all assaultfields
CNSTI4 0
ARGI4
ADDRGP4 assault_link_all
CALLV
pop
line 235
;235:	return hitClient;
ADDRLP4 12
INDIRI4
RETI4
LABELV $114
endproc G_FlashBangExplode 168 28
export G_ExplodeSmokenade
proc G_ExplodeSmokenade 168 28
line 238
;236:} 
;237:
;238:void G_ExplodeSmokenade( gentity_t *ent ) {
line 241
;239:
;240:	// clear the lower 16 bits (there will be the angle stored)
;241:	ent->s.frame &= SEALS_SMOKEMASK_FLAGS;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 65472
BANDI4
ASGNI4
line 243
;242:
;243:	ent->s.generic1 = MF_SMOKE;
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 1
ASGNI4
line 244
;244:	ent->r.svFlags |= SVF_BROADCAST;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 246
;245:
;246:	if (ent->count <= 0) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
GTI4 $154
line 249
;247:					
;248:		// after SEALS_SMOKENADETIME the smokegrenade vanishes
;249:		ent->nextthink = level.time + SEALS_SMOKENADETIME;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 250
;250:		ent->think = G_FreeEntity;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 252
;251:		
;252:	} else {
ADDRGP4 $155
JUMPV
LABELV $154
line 255
;253:
;254:		// check the area every 10 steps
;255:		if ((ent->count % 10) == 0) {
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 10
MODI4
CNSTI4 0
NEI4 $157
line 259
;256:			trace_t tr;
;257:			vec3_t start, end, dir;
;258:
;259:			VectorCopy(ent->r.currentOrigin, start);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRB
ASGNB 12
line 260
;260:			start[2]+=16.0;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 263
;261:			
;262:			// unlink all assault fields
;263:			assault_link_all( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 assault_link_all
CALLV
pop
ADDRGP4 $161
JUMPV
LABELV $160
line 266
;264: 
;265:			// get a point that's not in any wall
;266:			while ( trap_PointContents( start, ent->s.number ) & CONTENTS_SOLID ) {
line 267
;267:				start[2] -= 2.0f;	
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1073741824
SUBF4
ASGNF4
line 269
;268:
;269:				if ( start[2] < ent->r.currentOrigin[2] ) {
ADDRLP4 8+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
GEF4 $164
line 270
;270:					start[2] = ent->r.currentOrigin[2]; // don't put the flashbang into the floor
ADDRLP4 8+8
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ASGNF4
line 271
;271:					break;		
ADDRGP4 $162
JUMPV
LABELV $164
line 273
;272:				}
;273:			} 
LABELV $161
line 266
ADDRLP4 8
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $160
LABELV $162
line 276
;274:
;275:			// first clear the old the old directions
;276:			ent->s.frame &= ~SEALS_SMOKEMASK_FLAGS;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 -65473
BANDI4
ASGNI4
line 279
;277:
;278:			// check UP
;279:			dir[0] = 0.0;
ADDRLP4 20
CNSTF4 0
ASGNF4
line 280
;280:			dir[1] = 0.0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 281
;281:			dir[2] = 1.0;
ADDRLP4 20+8
CNSTF4 1065353216
ASGNF4
line 282
;282:			VectorMA( start, SEALS_SMOKENADE_DISTANCE, dir, end);
ADDRLP4 108
CNSTF4 1134559232
ASGNF4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1134559232
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 284
;283:			
;284:			trap_Trace( &tr, start, NULL, NULL, end, ent->s.number, MASK_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 112
CNSTP4 0
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 285
;285:			if (tr.fraction > 1.0) tr.fraction = 1.0;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
LEF4 $176
ADDRLP4 44+8
CNSTF4 1065353216
ASGNF4
LABELV $176
line 286
;286:			ent->s.frame |= ((int)(SEALS_SMOKEMASK_VALUE*tr.fraction)) << SEALS_SMOKEMASK_SUP;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTF4 1077936128
ADDRLP4 44+8
INDIRF4
MULF4
CVFI4 4
CNSTI4 14
LSHI4
BORI4
ASGNI4
line 289
;287:
;288:			// check LEFT
;289:			dir[0] = -1.0;
ADDRLP4 20
CNSTF4 3212836864
ASGNF4
line 290
;290:			dir[1] = 0.0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 291
;291:			dir[2] = 0.0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 292
;292:			VectorMA( start, SEALS_SMOKENADE_DISTANCE, dir, end);
ADDRLP4 120
CNSTF4 1134559232
ASGNF4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1134559232
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 294
;293:			
;294:			trap_Trace( &tr, start, NULL, NULL, end, ent->s.number, MASK_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 124
CNSTP4 0
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 295
;295:			if (tr.fraction > 1.0) tr.fraction = 1.0;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
LEF4 $189
ADDRLP4 44+8
CNSTF4 1065353216
ASGNF4
LABELV $189
line 296
;296:			ent->s.frame |= ((int)(SEALS_SMOKEMASK_VALUE*tr.fraction)) << SEALS_SMOKEMASK_SLEFT;
ADDRLP4 128
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI4
CNSTF4 1077936128
ADDRLP4 44+8
INDIRF4
MULF4
CVFI4 4
CNSTI4 8
LSHI4
BORI4
ASGNI4
line 299
;297:
;298:			// check RIGHT
;299:			dir[0] = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
line 300
;300:			dir[1] = 0.0;
ADDRLP4 20+4
CNSTF4 0
ASGNF4
line 301
;301:			dir[2] = 0.0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 302
;302:			VectorMA( start, SEALS_SMOKENADE_DISTANCE, dir, end);
ADDRLP4 132
CNSTF4 1134559232
ASGNF4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 132
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1134559232
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 304
;303:			
;304:			trap_Trace( &tr, start, NULL, NULL, end, ent->s.number, MASK_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 136
CNSTP4 0
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 305
;305:			if (tr.fraction > 1.0) tr.fraction = 1.0;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
LEF4 $202
ADDRLP4 44+8
CNSTF4 1065353216
ASGNF4
LABELV $202
line 306
;306:			ent->s.frame |= ((int)(SEALS_SMOKEMASK_VALUE*tr.fraction)) << SEALS_SMOKEMASK_SRIGHT;
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
CNSTF4 1077936128
ADDRLP4 44+8
INDIRF4
MULF4
CVFI4 4
CNSTI4 6
LSHI4
BORI4
ASGNI4
line 309
;307:
;308:			// check FORWARD
;309:			dir[0] = 0.0;
ADDRLP4 20
CNSTF4 0
ASGNF4
line 310
;310:			dir[1] = 1.0;
ADDRLP4 20+4
CNSTF4 1065353216
ASGNF4
line 311
;311:			dir[2] = 0.0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 312
;312:			VectorMA( start, SEALS_SMOKENADE_DISTANCE, dir, end);
ADDRLP4 144
CNSTF4 1134559232
ASGNF4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ADDRLP4 144
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 144
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1134559232
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 314
;313:			
;314:			trap_Trace( &tr, start, NULL, NULL, end, ent->s.number, MASK_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 148
CNSTP4 0
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 315
;315:			if (tr.fraction > 1.0) tr.fraction = 1.0;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
LEF4 $215
ADDRLP4 44+8
CNSTF4 1065353216
ASGNF4
LABELV $215
line 316
;316:			ent->s.frame |= ((int)(SEALS_SMOKEMASK_VALUE*tr.fraction)) << SEALS_SMOKEMASK_SFORWARD;
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
CNSTF4 1077936128
ADDRLP4 44+8
INDIRF4
MULF4
CVFI4 4
CNSTI4 12
LSHI4
BORI4
ASGNI4
line 319
;317:
;318:			// check BACKWARD
;319:			dir[0] = 0.0;
ADDRLP4 20
CNSTF4 0
ASGNF4
line 320
;320:			dir[1] = -1.0;
ADDRLP4 20+4
CNSTF4 3212836864
ASGNF4
line 321
;321:			dir[2] = 0.0;
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 322
;322:			VectorMA( start, SEALS_SMOKENADE_DISTANCE, dir, end);
ADDRLP4 156
CNSTF4 1134559232
ASGNF4
ADDRLP4 32
ADDRLP4 8
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1134559232
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 324
;323:			
;324:			trap_Trace( &tr, start, NULL, NULL, end, ent->s.number, MASK_SOLID);
ADDRLP4 44
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 160
CNSTP4 0
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 325
;325:			if (tr.fraction > 1.0) tr.fraction = 1.0;
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
LEF4 $228
ADDRLP4 44+8
CNSTF4 1065353216
ASGNF4
LABELV $228
line 326
;326:			ent->s.frame |= ((int)(SEALS_SMOKEMASK_VALUE*tr.fraction)) << SEALS_SMOKEMASK_SBACKWARD;
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRI4
CNSTF4 1077936128
ADDRLP4 44+8
INDIRF4
MULF4
CVFI4 4
CNSTI4 10
LSHI4
BORI4
ASGNI4
line 329
;327:
;328:			// relink all assault fields
;329:			assault_link_all( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 assault_link_all
CALLV
pop
line 331
;330: 
;331:		}
LABELV $157
line 333
;332:		
;333:		ent->count--;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 334
;334:		ent->nextthink = level.time + SEALS_SMOKENADETIME;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 335
;335:		ent->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 336
;336:	}
LABELV $155
line 339
;337:
;338:	// the same random seed for all players
;339:	ent->s.frame &= ~SEALS_SMOKEMASK_RNDNUM;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -64
BANDI4
ASGNI4
line 340
;340:	ent->s.frame |= ((int)(64*random())) & SEALS_SMOKEMASK_RNDNUM ;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTF4 1115684864
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CVFI4 4
CNSTI4 63
BANDI4
BORI4
ASGNI4
line 342
;341:
;342:	trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 343
;343:}
LABELV $153
endproc G_ExplodeSmokenade 168 28
export G_ExplodeMissile
proc G_ExplodeMissile 48 24
line 352
;344:
;345:/*
;346:================
;347:G_ExplodeMissile
;348:
;349:Explode a missile without an impact
;350:================
;351:*/
;352:void G_ExplodeMissile( gentity_t *ent ) {
line 356
;353:	vec3_t		dir;
;354:	vec3_t		origin;
;355:
;356:	ent->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 358
;357:
;358:	if ( !Q_stricmp( ent->classname , "smokegrenade" ) ||
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $237
ARGP4
ADDRLP4 24
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $238
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 25
NEI4 $235
LABELV $238
line 359
;359:		ent->s.weapon == WP_SMOKE ) {
line 361
;360:
;361:		if (ent->s.generic1 != MF_SMOKE) {
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 1
EQI4 $239
line 362
;362:			G_Sound( ent, CHAN_AUTO, G_SoundIndex("sound/misc/40mm_explode.wav") ); 
ADDRGP4 $241
ARGP4
ADDRLP4 28
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 363
;363:			ent->s.loopSound = G_SoundIndex( "sound/misc/40mm_gasloop.wav" );
ADDRGP4 $242
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 364
;364:		}
LABELV $239
line 366
;365:	
;366:		ent->nextthink = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 367
;367:		ent->think = G_ExplodeSmokenade;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeSmokenade
ASGNP4
line 369
;368:
;369:		ent->s.generic1 = MF_SMOKE;
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 1
ASGNI4
line 370
;370:		ent->r.svFlags |= SVF_BROADCAST;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 373
;371:
;372:	/* 	*/
;373:		return;
ADDRGP4 $234
JUMPV
LABELV $235
line 376
;374:	}	
;375:
;376:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 377
;377:	SnapVector( origin );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 378
;378:	G_SetOrigin( ent, origin );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 381
;379:
;380:	// we don't have a valid direction, so just point straight up
;381:	dir[0] = dir[1] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 12+4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 28
INDIRF4
ASGNF4
line 382
;382:	dir[2] = 1;
ADDRLP4 12+8
CNSTF4 1065353216
ASGNF4
line 384
;383:
;384:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 385
;385:	G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( dir ) );
ADDRLP4 12
ARGP4
ADDRLP4 32
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 58
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 387
;386:
;387:	ent->r.svFlags = SVF_BROADCAST;	// send to everyone
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 32
ASGNI4
line 388
;388:	ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 391
;389:
;390:
;391:	if ( ent->s.weapon == WP_FLASHBANG )
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 5
NEI4 $251
line 392
;392:	{
line 393
;393:		G_FlashBangExplode( ent->r.currentOrigin, ent, ent->parent, SEALS_FLASHBANGTIME , ent->splashRadius, ent );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
CNSTI4 9000
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 748
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 G_FlashBangExplode
CALLI4
pop
line 394
;394:		trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 395
;395:		return;
ADDRGP4 $234
JUMPV
LABELV $251
line 399
;396:	}
;397:
;398:	// splash damage
;399:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 0
EQI4 $253
line 400
;400:		if( G_RadiusDamage( ent->r.currentOrigin, ent->parent, ent->splashDamage, ent->splashRadius, ent, ent->splashMethodOfDeath ) ) {
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRP4
CNSTI4 748
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $255
line 401
;401:			g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 44
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+516
ADDP4
INDIRP4
CNSTI4 1904
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 402
;402:		}
LABELV $255
line 403
;403:	}
LABELV $253
line 405
;404:
;405:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 406
;406:}
LABELV $234
endproc G_ExplodeMissile 48 24
export G_FlashBangDie
proc G_FlashBangDie 0 0
line 408
;407: 
;408:void G_FlashBangDie( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 410
;409:
;410:        if (inflictor == self)
ADDRFP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $259
line 411
;411:                return;
ADDRGP4 $258
JUMPV
LABELV $259
line 413
;412:				
;413:        self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 414
;414: 	      self->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 415
;415:   	    self->nextthink = level.time + 150;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 150
ADDI4
ASGNI4
line 416
;416:}
LABELV $258
endproc G_FlashBangDie 0 0
export G_SmokeNadeDie
proc G_SmokeNadeDie 0 0
line 418
;417:
;418:void G_SmokeNadeDie( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 420
;419:
;420:        if (inflictor == self)
ADDRFP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $263
line 421
;421:                return;
ADDRGP4 $262
JUMPV
LABELV $263
line 423
;422:
;423:      	self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 424
;424:      	self->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 425
;425:      	self->nextthink = level.time + 150;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 150
ADDI4
ASGNI4
line 426
;426:}
LABELV $262
endproc G_SmokeNadeDie 0 0
export G_GrenadeDie
proc G_GrenadeDie 0 0
line 428
;427:
;428:void G_GrenadeDie( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 430
;429:
;430:        if (inflictor == self)
ADDRFP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $267
line 431
;431:                return;
ADDRGP4 $266
JUMPV
LABELV $267
line 433
;432:
;433:        self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 434
;434: 	      self->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 435
;435:   	    self->nextthink = level.time + 250;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 436
;436:}
LABELV $266
endproc G_GrenadeDie 0 0
export G_40MMGrenadeDie
proc G_40MMGrenadeDie 0 0
line 438
;437:
;438:void G_40MMGrenadeDie( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 440
;439:
;440:        if (inflictor == self)
ADDRFP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $271
line 441
;441:                return;
ADDRGP4 $270
JUMPV
LABELV $271
line 443
;442:
;443:        self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 444
;444: 	      self->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 445
;445:   	    self->nextthink = level.time + 250;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 446
;446:}
LABELV $270
endproc G_40MMGrenadeDie 0 0
export G_MissileImpact
proc G_MissileImpact 40 32
line 454
;447:
;448:
;449:/*
;450:================
;451:G_MissileImpact
;452:================
;453:*/
;454:void G_MissileImpact( gentity_t *ent, trace_t *trace ) {
line 456
;455:	gentity_t		*other;
;456:	qboolean		hitClient = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 458
;457: 
;458:	other = &g_entities[trace->entityNum];
ADDRLP4 0
CNSTI4 1108
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 463
;459:
;460:	// check for bounce
;461:	// Navy Seals ++
;462:
;463:	if ( !Q_stricmp( ent->classname, "reallead") )
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $277
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $275
line 464
;464:	{
line 465
;465:		Lead_Impact( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Lead_Impact
CALLV
pop
line 466
;466:		return;
ADDRGP4 $274
JUMPV
LABELV $275
line 469
;467:	} 
;468:
;469:	if (!Q_stricmp( ent->classname, "40mmgrenade") ) {
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $280
ARGP4
ADDRLP4 12
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $278
line 470
;470:		if ( (level.time > (ent->timestamp + SEALS_40MMGREN_ARMEDTIME)) && ent->count == 0) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
CNSTI4 350
ADDI4
LEI4 $281
ADDRLP4 16
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
NEI4 $281
line 471
;471:			ent->count = 1;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 1
ASGNI4
line 472
;472:			ent->nextthink = level.time + 10;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 473
;473:			ent->think = G_ExplodeMissile;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 474
;474:			ent->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 475
;475:		} else if (ent->count == 0) {
ADDRGP4 $282
JUMPV
LABELV $281
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 0
NEI4 $285
line 476
;476:			ent->count = 1;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 1
ASGNI4
line 477
;477:			ent->nextthink = level.time + 15000;
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 15000
ADDI4
ASGNI4
line 478
;478:			ent->think = G_FreeEntity;
ADDRFP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 479
;479:			ent->r.svFlags |= SVF_BROADCAST; 
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 480
;480:		} else {
ADDRGP4 $286
JUMPV
LABELV $285
line 481
;481:			ent->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 482
;482:		}
LABELV $286
LABELV $282
line 483
;483:	}
LABELV $278
line 485
;484:
;485:	if ( ( ent->s.eFlags & ( EF_BOUNCE | EF_BOUNCE_HALF ) ) )  {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 48
BANDI4
CNSTI4 0
EQI4 $288
line 487
;486:
;487:		G_BounceMissile( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_BounceMissile
CALLV
pop
line 490
;488:
;489:		// no sound, just idle
;490:		if ( ent->s.pos.trType == TR_STATIONARY )
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $290
line 491
;491:			return;
ADDRGP4 $274
JUMPV
LABELV $290
line 493
;492:
;493:		if ( ent->fly_sound_debounce_time ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 0
EQI4 $292
line 495
;494:			// so it won't produce a bounce event too often
;495:			if ( VectorLength( ent->s.pos.trDelta ) < 450 ) 
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 16
INDIRF4
CNSTF4 1138819072
GEF4 $294
line 496
;496:				return;
ADDRGP4 $274
JUMPV
LABELV $294
line 497
;497:		}		 
LABELV $292
line 498
;498:		G_AddEvent( ent, EV_GRENADE_BOUNCE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 51
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 499
;499:		return;
ADDRGP4 $274
JUMPV
LABELV $288
line 503
;500:	}
;501: 
;502:	// impact damage
;503:	if (other->takedamage) {
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
EQI4 $296
line 505
;504:		// FIXME: wrong damage direction?
;505:		if ( ent->damage ) {
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 0
EQI4 $298
line 508
;506:			vec3_t	velocity;
;507:
;508:			if( LogAccuracyHit( other, &g_entities[ent->r.ownerNum] ) ) {
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 28
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $300
line 509
;509:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 32
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+516
ADDP4
INDIRP4
CNSTI4 1904
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 510
;510:				hitClient = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 511
;511:			}
LABELV $300
line 512
;512:			BG_EvaluateTrajectoryDelta( &ent->s.pos, level.time, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 513
;513:			if ( VectorLength( velocity ) == 0 ) {
ADDRLP4 16
ARGP4
ADDRLP4 32
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
INDIRF4
CNSTF4 0
NEF4 $304
line 514
;514:				velocity[2] = 1;	// stepped on a grenade
ADDRLP4 16+8
CNSTF4 1065353216
ASGNF4
line 515
;515:			}
LABELV $304
line 516
;516:			G_Damage ( other, ent, &g_entities[ent->r.ownerNum], velocity,
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
CNSTI4 1108
ADDRLP4 36
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
ARGI4
CNSTI4 64
ARGI4
ADDRLP4 36
INDIRP4
CNSTI4 752
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLI4
pop
line 519
;517:				ent->s.origin, ent->damage, 
;518:				DAMAGE_NO_BLEEDING, ent->methodOfDeath);
;519:		}
LABELV $298
line 520
;520:	}
LABELV $296
line 537
;521: 
;522:/*	if ( !Q_stricmp( ent->classname , "40mmgrenade" ) )
;523:	{
;524:		G_BounceMissile( ent, trace );
;525:
;526:		// no sound, just idle
;527:		if ( ent->s.pos.trType == TR_STATIONARY )
;528:			return;
;529: 
;530:		G_AddEvent( ent, EV_GRENADE_BOUNCE, 0 );
;531:		return;
;532:	}*/
;533:
;534:	// is it cheaper in bandwidth to just remove this ent and create a new
;535:	// one, rather than changing the missile into the explosion?
;536:
;537:	if ( other->takedamage && other->client ) {
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
EQI4 $307
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $307
line 538
;538:		G_AddEvent( ent, EV_MISSILE_HIT, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 57
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 539
;539:		ent->s.otherEntityNum = other->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 540
;540:	} else if( trace->surfaceFlags & SURF_METALSTEPS ) {
ADDRGP4 $308
JUMPV
LABELV $307
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $309
line 541
;541:		G_AddEvent( ent, EV_MISSILE_MISS_METAL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 59
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 542
;542:	} else {
ADDRGP4 $310
JUMPV
LABELV $309
line 543
;543:		G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 58
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 544
;544:	}
LABELV $310
LABELV $308
line 547
;545:
;546:	// change over to a normal entity right at the point of impact
;547:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 549
;548:
;549:	SnapVectorTowards( trace->endpos, ent->s.pos.trBase );	// save net bandwidth
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 551
;550:
;551:	G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 554
;552:
;553:	// splash damage (doesn't apply to person directly hit)
;554:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CNSTI4 0
EQI4 $311
line 555
;555:		if( G_RadiusDamage( trace->endpos, ent->parent, ent->splashDamage, ent->splashRadius,ent, ent->splashMethodOfDeath ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 600
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRP4
CNSTI4 748
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 756
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $313
line 556
;556:			if( !hitClient ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $315
line 557
;557:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 28
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+516
ADDP4
INDIRP4
CNSTI4 1904
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 558
;558:			}
LABELV $315
line 559
;559:		}
LABELV $313
line 560
;560:	}
LABELV $311
line 562
;561:
;562:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 563
;563:}
LABELV $274
endproc G_MissileImpact 40 32
export G_RunMissile
proc G_RunMissile 132 28
line 570
;564:
;565:/*
;566:================
;567:G_RunMissile
;568:================
;569:*/
;570:void G_RunMissile( gentity_t *ent ) {
line 575
;571:	vec3_t		origin;
;572:	vec3_t save;
;573:	trace_t		tr;
;574:	int			passent;
;575:	qboolean	inwater = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 578
;576:
;577:	// get current position
;578:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 580
;579:
;580:	if (trap_PointContents(origin,-1) & MASK_WATER) 
ADDRLP4 56
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 88
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $320
line 581
;581:		inwater = qtrue;		
ADDRLP4 72
CNSTI4 1
ASGNI4
LABELV $320
line 597
;582: 
;583:	/*
;584:	if (inwater && !(!Q_stricmp(ent->classname , "reallead"))  )
;585:		VectorClear(ent->s.pos.trDelta ); // remove vector 
;586:	*/ 
;587:
;588:	// this is bullshit, only for nades to stay in air or have no bounding box
;589:	// sux ...
;590:	//if ( BG_IsGrenade( ent->s.weapon ) 
;591:	//	&& ( ent->timestamp + 500 < level.time ) 
;592:	//	&& ent->r.ownerNum != ENTITYNUM_NONE )
;593:	//{ 
;594:	//	ent->r.ownerNum = ENTITYNUM_NONE;
;595:	//}
;596:	// if this missile bounced off an invulnerability sphere
;597:	if ( ent->target_ent ) {
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $322
line 598
;598:		passent = ent->target_ent->s.number;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 599
;599:	} 
ADDRGP4 $323
JUMPV
LABELV $322
line 600
;600:	else {
line 602
;601:		// ignore interactions with the missile owner
;602:		passent = ent->r.ownerNum;
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ASGNI4
line 603
;603:	}
LABELV $323
line 607
;604:	
;605:
;606:	// trace a line from the previous position to the current position
;607:	trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 68
INDIRI4
ARGI4
ADDRLP4 92
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 609
;608:
;609:	if (tr.startsolid || tr.allsolid) {
ADDRLP4 96
CNSTI4 0
ASGNI4
ADDRLP4 0+4
INDIRI4
ADDRLP4 96
INDIRI4
NEI4 $327
ADDRLP4 0
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $324
LABELV $327
line 610
;610:		G_Printf("Entity: %s\n", g_entities[tr.entityNum].classname);
ADDRGP4 $328
ARGP4
CNSTI4 1108
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+524
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 612
;611:		// make sure the tr.entityNum is set to the entity we're stuck in
;612:		trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, ent->r.currentOrigin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 488
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 436
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 448
ADDP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 68
INDIRI4
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 572
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 614
;613:
;614:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 615
;615:	}
ADDRGP4 $325
JUMPV
LABELV $324
line 616
;616:	else {
line 617
;617:		VectorCopy( tr.endpos, ent->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 618
;618:	}
LABELV $325
line 620
;619:
;620:	trap_LinkEntity( ent ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 622
;621:   
;622:	if ( !Q_stricmp( ent->classname, "reallead") ) 
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $277
ARGP4
ADDRLP4 100
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
NEI4 $333
line 623
;623:		if ( ent->r.ownerNum != ENTITYNUM_NONE ) 
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $335
line 624
;624:			if ( Distance( g_entities[ent->r.ownerNum].r.currentOrigin , ent->r.currentOrigin ) > 50 )
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1108
ADDRLP4 104
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+208+280
ADDP4
ARGP4
ADDRLP4 104
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 108
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 108
INDIRF4
CNSTF4 1112014848
LEF4 $337
line 625
;625:				ent->r.ownerNum = ENTITYNUM_NONE;    
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 1023
ASGNI4
LABELV $337
LABELV $335
LABELV $333
line 627
;626:  
;627:	if ( tr.fraction != 1 ) { 
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $341
line 629
;628:		if (
;629:			( BG_IsGrenade( ent->s.weapon ) 
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $349
ADDRFP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $280
ARGP4
ADDRLP4 116
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $344
LABELV $349
CNSTI4 1108
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $348
ARGP4
ADDRLP4 120
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
NEI4 $344
line 634
;630:			|| !Q_stricmp( ent->classname, "40mmgrenade")
;631:			) &&  
;632:			!Q_stricmp( g_entities[tr.entityNum].classname, "func_explosive_glass") 
;633:			)
;634:		{
line 635
;635:			Touch_GlassTrigger( &g_entities[tr.entityNum], ent, &tr );
CNSTI4 1108
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 Touch_GlassTrigger
CALLV
pop
line 636
;636:			return;			
ADDRGP4 $318
JUMPV
LABELV $344
line 645
;637:		}
;638:
;639:		// never explode or bounce on sky
;640:		// BLUTENGEL_XXX: fixed it a strange way
;641:		// now nades can bounce from invisible walls over the skybox
;642:		// dunno if thats exactly what i want, but it's definitly better
;643:		// than before -> needs to be tested 
;644:		// only other solution: nades vanish if hitting skybox
;645:		if ( tr.surfaceFlags & SURF_NOIMPACT  &&
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $351
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 124
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 0
NEI4 $351
line 646
;646:			!BG_IsGrenade( ent->s.weapon ) ) { 
line 647
;647:			G_FreeEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 648
;648:			return;
ADDRGP4 $318
JUMPV
LABELV $351
line 649
;649:		} else if ( !(tr.surfaceFlags & SURF_SKY) || !BG_IsGrenade( ent->s.weapon) ){
ADDRLP4 0+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $357
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 128
ADDRGP4 BG_IsGrenade
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
NEI4 $354
LABELV $357
line 650
;650:			G_MissileImpact( ent, &tr );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_MissileImpact
CALLV
pop
line 651
;651:			if ( ent->s.eType != ET_MISSILE ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $358
line 652
;652:				return;		// exploded
ADDRGP4 $318
JUMPV
LABELV $358
line 654
;653:			} 
;654:		}
LABELV $354
line 655
;655:	}
LABELV $341
line 658
;656: 
;657:	// check think function after bouncing
;658:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 659
;659:}
LABELV $318
endproc G_RunMissile 132 28
export fire_grenade
proc fire_grenade 40 4
line 670
;660: 
;661:
;662://=============================================================================
;663:
;664:
;665:/*
;666:=================
;667:fire_grenade
;668:=================
;669:*/
;670:gentity_t *fire_grenade (gentity_t *self, vec3_t start, vec3_t dir, int firestrength) {
line 673
;671:	gentity_t	*bolt;
;672:
;673:	if ( firestrength < 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $361
line 674
;674:		firestrength *= -1;
ADDRFP4 12
CNSTI4 -1
ADDRFP4 12
INDIRI4
MULI4
ASGNI4
LABELV $361
line 676
;675:
;676:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 678
;677:
;678:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 679
;679:	bolt->classname = "grenade";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $363
ASGNP4
line 680
;680:	bolt->nextthink = level.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 683
;681:	 
;682:	// 3sec default priming
;683:	if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_SINGLE) )  
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $365
line 684
;684:		bolt->nextthink = level.time + 4000; // 3sec default priming
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 4000
ADDI4
ASGNI4
ADDRGP4 $366
JUMPV
LABELV $365
line 685
;685:	else if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $368
line 686
;686:		bolt->nextthink = level.time + 5000; 
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
LABELV $368
LABELV $366
line 688
;687:
;688:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 689
;689:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 690
;690:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 691
;691:	bolt->s.weapon = WP_GRENADE ;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 4
ASGNI4
line 692
;692:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
line 693
;693:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 694
;694:	bolt->timestamp = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 695
;695:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 696
;696:	bolt->damage = SEALS_GRENADEDAMAGE;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 160
ASGNI4
line 697
;697:	bolt->splashDamage = SEALS_GRENADESPLASHDAMAGE;
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 130
ASGNI4
line 698
;698:	bolt->splashRadius = SEALS_GRENADERADIUS;
ADDRLP4 0
INDIRP4
CNSTI4 748
ADDP4
CNSTI4 362
ASGNI4
line 699
;699:	bolt->methodOfDeath = MOD_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 4
ASGNI4
line 700
;700:	bolt->splashMethodOfDeath = MOD_GRENADE_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 5
ASGNI4
line 701
;701:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 702
;702:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 705
;703:
;704:	// shootable grenades
;705:	bolt->health = 4;
ADDRLP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 4
ASGNI4
line 706
;706:	bolt->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 707
;707:	bolt->r.contents = CONTENTS_BODY;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 33554432
ASGNI4
line 708
;708:	bolt->die = G_GrenadeDie;
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 G_GrenadeDie
ASGNP4
line 709
;709:	VectorSet(bolt->r.mins, -2, -2, 0);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 0
ASGNF4
line 710
;710:	VectorCopy(bolt->r.mins, bolt->r.absmin);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRB
ASGNB 12
line 711
;711:	VectorSet(bolt->r.maxs, 2, 2, 2);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1073741824
ASGNF4
line 712
;712:	VectorCopy(bolt->r.maxs, bolt->r.absmax);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
INDIRB
ASGNB 12
line 716
;713:	// /shootable grenades
;714:	
;715:
;716:	if ( self->client && self->client->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADEROLL ) )
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $372
ADDRLP4 24
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $372
line 717
;717:	{  
line 718
;718: 		start[2] -= 15; 
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 719
;719:		bolt->fly_sound_debounce_time = qtrue;//rolling
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 1
ASGNI4
line 720
;720:		VectorScale( dir, SEALS_BASEGRENRANGE_ROLL + 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 725
;721:			((float)(self->client->pers.nsPC.strength)/(10.0f) *
;722:			SEALS_BASEGRENRANGE_ROLL *
;723:			SEALS_BASEGRENRANGE_ADDSTRENGTH )
;724:			+ firestrength , bolt->s.pos.trDelta );
;725:	} else {
ADDRGP4 $373
JUMPV
LABELV $372
line 726
;726:		VectorScale( dir, SEALS_BASEGRENRANGE_THROW +
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 731
;727:			((float)(self->client->pers.nsPC.strength)/(10.0f) *
;728:			SEALS_BASEGRENRANGE_THROW *
;729:			SEALS_BASEGRENRANGE_ADDSTRENGTH ) +
;730:			firestrength , bolt->s.pos.trDelta );
;731:	}
LABELV $373
line 733
;732:
;733:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 734
;734:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 735
;735:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 736
;736:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 738
;737:
;738:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 740
;739:
;740:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $360
endproc fire_grenade 40 4
export fire_40mmgrenade
proc fire_40mmgrenade 28 4
line 747
;741:} 
;742:/*
;743:=================
;744:fire_40mmgrenade
;745:=================
;746:*/
;747:gentity_t *fire_40mmgrenade (gentity_t *self, vec3_t start, vec3_t dir, int speed) {
line 750
;748:	gentity_t	*bolt;
;749:
;750:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 752
;751:
;752:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 753
;753:	bolt->classname = "40mmgrenade";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $280
ASGNP4
line 754
;754:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 755
;755:	bolt->nextthink = level.time + 5000;	  // disappear after 3 seconds
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 757
;756:
;757:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 758
;758:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 759
;759:	bolt->s.weapon = WP_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 4
ASGNI4
line 760
;760:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
line 761
;761:	bolt->s.frame = self->s.weapon;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 762
;762:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 763
;763:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 764
;764:	bolt->takedamage = qfalse;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 0
ASGNI4
line 765
;765:	bolt->timestamp = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 766
;766:	bolt->damage = SEALS_40MMGRENDAMAGE;  
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 100
ASGNI4
line 767
;767:	bolt->splashDamage = SEALS_40MMGRENSPLASHDAMAGE;
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 130
ASGNI4
line 768
;768:	bolt->splashRadius = SEALS_40MMGRENRADIUS;
ADDRLP4 0
INDIRP4
CNSTI4 748
ADDP4
CNSTI4 224
ASGNI4
line 769
;769:	bolt->methodOfDeath = MOD_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 4
ASGNI4
line 770
;770:	bolt->splashMethodOfDeath = MOD_GRENADE_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 5
ASGNI4
line 771
;771:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 772
;772:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 773
;773:	bolt->count = 0;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 776
;774:
;775:	// shootable 40mmgrenade
;776:	bolt->health = 4;
ADDRLP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 4
ASGNI4
line 777
;777:	bolt->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 778
;778:	bolt->r.contents = CONTENTS_BODY;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 33554432
ASGNI4
line 779
;779:	bolt->die = G_40MMGrenadeDie;
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 G_40MMGrenadeDie
ASGNP4
line 780
;780:	VectorSet(bolt->r.mins, -1.5, -1.5, 0);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3217031168
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3217031168
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 0
ASGNF4
line 781
;781:	VectorCopy(bolt->r.mins, bolt->r.absmin);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRB
ASGNB 12
line 782
;782:	VectorSet(bolt->r.maxs, 1.5, 1.5, 1.5);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1069547520
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1069547520
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1069547520
ASGNF4
line 783
;783:	VectorCopy(bolt->r.maxs, bolt->r.absmax);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
INDIRB
ASGNB 12
line 786
;784:	// /shootable 40mmgrenade
;785:	
;786: 	VectorScale( dir, speed, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 788
;787: 
;788:	bolt->s.pos.trType = TR_MOREGRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 6
ASGNI4
line 789
;789:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 791
;790:
;791:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 792
;792:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 794
;793: 
;794:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 796
;795:
;796:	VectorCopy( start, bolt->pos1 );
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 800
;797:
;798:
;799:
;800:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $375
endproc fire_40mmgrenade 28 4
export fire_smoke
proc fire_smoke 40 4
line 807
;801:}
;802:/*
;803:=================
;804:fire_smoke
;805:=================
;806:*/
;807:gentity_t *fire_smoke (gentity_t *self, vec3_t start, vec3_t dir, int firestrength) {
line 810
;808:	gentity_t	*bolt;
;809:
;810:	if ( firestrength < 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $380
line 811
;811:		firestrength *= -1;
ADDRFP4 12
CNSTI4 -1
ADDRFP4 12
INDIRI4
MULI4
ASGNI4
LABELV $380
line 813
;812:
;813:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 815
;814:
;815:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 816
;816:	bolt->classname = "smokegrenade";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $237
ASGNP4
line 817
;817:	bolt->nextthink = level.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 820
;818:	 
;819:	// 3sec default priming
;820:	if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_SINGLE) )  
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $383
line 821
;821:		bolt->nextthink = level.time + 2000; // 3sec default priming
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
ADDRGP4 $384
JUMPV
LABELV $383
line 822
;822:	else if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $386
line 823
;823:		bolt->nextthink = level.time + 1000; 
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
LABELV $386
LABELV $384
line 825
;824:
;825:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 826
;826:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 827
;827:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 828
;828:	bolt->s.weapon = WP_SMOKE ;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 25
ASGNI4
line 829
;829:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
line 830
;830:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 831
;831:	bolt->timestamp = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 832
;832:	bolt->parent = self; 
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 833
;833:	bolt->methodOfDeath = MOD_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 4
ASGNI4
line 834
;834:	bolt->splashMethodOfDeath = MOD_GRENADE_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 5
ASGNI4
line 835
;835:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 836
;836:	bolt->count = SEALS_SMOKEPUFF_NUMBER;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 100
ASGNI4
line 837
;837:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 840
;838:
;839:	// shootable smokegrenade
;840:	bolt->health = 4;
ADDRLP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 4
ASGNI4
line 841
;841:	bolt->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 842
;842:	bolt->r.contents = CONTENTS_BODY;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 33554432
ASGNI4
line 843
;843:	bolt->die = G_SmokeNadeDie;
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 G_SmokeNadeDie
ASGNP4
line 844
;844:	VectorSet(bolt->r.mins, -2, -2, 0);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 0
ASGNF4
line 845
;845:	VectorCopy(bolt->r.mins, bolt->r.absmin);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRB
ASGNB 12
line 846
;846:	VectorSet(bolt->r.maxs, 2, 2, 2);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1073741824
ASGNF4
line 847
;847:	VectorCopy(bolt->r.maxs, bolt->r.absmax);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
INDIRB
ASGNB 12
line 850
;848:	// /shootable smokegrenade
;849:	
;850:	if ( self->client && self->client->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADEROLL ) )
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $390
ADDRLP4 24
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $390
line 851
;851:	{  
line 852
;852: 		start[2] -= 15; 
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 853
;853:		bolt->fly_sound_debounce_time = qtrue;//rolling
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 1
ASGNI4
line 854
;854:		VectorScale( dir, SEALS_BASEGRENRANGE_ROLL + 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 859
;855:			((float)(self->client->pers.nsPC.strength)/(10.0f) *
;856:			SEALS_BASEGRENRANGE_ROLL *
;857:			SEALS_BASEGRENRANGE_ADDSTRENGTH ) + 
;858:			firestrength , bolt->s.pos.trDelta );
;859:	} else {
ADDRGP4 $391
JUMPV
LABELV $390
line 860
;860:		VectorScale( dir, SEALS_BASEGRENRANGE_THROW + 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 865
;861:			((float)(self->client->pers.nsPC.strength)/(10.0f) *
;862:			SEALS_BASEGRENRANGE_THROW *
;863:			SEALS_BASEGRENRANGE_ADDSTRENGTH ) + 
;864:			firestrength , bolt->s.pos.trDelta );
;865:	}
LABELV $391
line 867
;866:
;867:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 868
;868:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 869
;869:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 870
;870:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 872
;871:
;872:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 874
;873:
;874:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $379
endproc fire_smoke 40 4
export fire_flashbang
proc fire_flashbang 40 4
line 881
;875:} 
;876:/*
;877:=================
;878:fire_flashbang
;879:=================
;880:*/
;881:gentity_t *fire_flashbang (gentity_t *self, vec3_t start, vec3_t dir, int firestrength) {
line 884
;882:	gentity_t	*bolt;
;883:
;884:	if ( firestrength < 0 )
ADDRFP4 12
INDIRI4
CNSTI4 0
GEI4 $394
line 885
;885:		firestrength *= -1 ;
ADDRFP4 12
CNSTI4 -1
ADDRFP4 12
INDIRI4
MULI4
ASGNI4
LABELV $394
line 889
;886:
;887://	G_Printf("firestrength: %i\n", firestrength );
;888:
;889:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 891
;890:
;891:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 892
;892:	bolt->classname = "flashbang";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $396
ASGNP4
line 895
;893:
;894:	// timer settings
;895:	bolt->nextthink = level.time + 3000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 898
;896:	
;897:	// 3sec default priming
;898:	if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_SINGLE) )  
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $398
line 899
;899:		bolt->nextthink = level.time + 2000; // 3sec default priming
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
ADDRGP4 $399
JUMPV
LABELV $398
line 900
;900:	else if ( self->client->ns.weaponmode[self->client->ps.weapon] & ( 1 << WM_WEAPONMODE2 ) )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $401
line 901
;901:		bolt->nextthink = level.time + 1000; 
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
LABELV $401
LABELV $399
line 903
;902:
;903:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 904
;904:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 905
;905:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 906
;906:	bolt->s.weapon = WP_FLASHBANG;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 5
ASGNI4
line 907
;907:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
line 908
;908:	bolt->timestamp = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 909
;909:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 910
;910:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 911
;911:	bolt->damage = 5;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 5
ASGNI4
line 912
;912:	bolt->splashDamage = 25;
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 25
ASGNI4
line 913
;913:	bolt->splashRadius = SEALS_FLASHBANGRADIUS;
ADDRLP4 0
INDIRP4
CNSTI4 748
ADDP4
CNSTI4 720
ASGNI4
line 914
;914:	bolt->methodOfDeath = MOD_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 4
ASGNI4
line 915
;915:	bolt->splashMethodOfDeath = MOD_GRENADE_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 5
ASGNI4
line 916
;916:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 917
;917:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 920
;918:
;919:	// shootable flashbang
;920:	bolt->health = 4;
ADDRLP4 0
INDIRP4
CNSTI4 732
ADDP4
CNSTI4 4
ASGNI4
line 921
;921:	bolt->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
CNSTI4 1
ASGNI4
line 922
;922:	bolt->r.contents = CONTENTS_BODY;
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
CNSTI4 33554432
ASGNI4
line 923
;923:	bolt->die = G_FlashBangDie;
ADDRLP4 0
INDIRP4
CNSTI4 716
ADDP4
ADDRGP4 G_FlashBangDie
ASGNP4
line 924
;924:	VectorSet(bolt->r.mins, -2, -2, 0);
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3221225472
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 0
ASGNF4
line 925
;925:	VectorCopy(bolt->r.mins, bolt->r.absmin);
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRB
ASGNB 12
line 926
;926:	VectorSet(bolt->r.maxs, 2, 2, 2);
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1073741824
ASGNF4
line 927
;927:	VectorCopy(bolt->r.maxs, bolt->r.absmax);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
INDIRB
ASGNB 12
line 930
;928:	// /shootable flashbang
;929:	
;930:	if ( self->client && self->client->ps.stats[STAT_WEAPONMODE] & ( 1 << WM_GRENADEROLL ) ) 	{  
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $405
ADDRLP4 24
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $405
line 931
;931:		start[2] -= 15; 
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 932
;932:		bolt->fly_sound_debounce_time = qtrue;//rolling
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 1
ASGNI4
line 933
;933:		VectorScale( dir, SEALS_BASEGRENRANGE_ROLL + 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1125515264
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 938
;934:			((float)(self->client->pers.nsPC.strength)/(10.0f) * 
;935:			SEALS_BASEGRENRANGE_ROLL *
;936:			SEALS_BASEGRENRANGE_ADDSTRENGTH ) + 
;937:			firestrength, bolt->s.pos.trDelta );
;938:	} else {
ADDRGP4 $406
JUMPV
LABELV $405
line 939
;939:		VectorScale( dir, SEALS_BASEGRENRANGE_THROW + 
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1056964608
CNSTF4 1135542272
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 1540
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1092616192
DIVF4
MULF4
MULF4
CNSTF4 1135542272
ADDF4
ADDRFP4 12
INDIRI4
CVIF4 4
ADDF4
MULF4
ASGNF4
line 944
;940:			((float)(self->client->pers.nsPC.strength)/(10.0f) * 
;941:			SEALS_BASEGRENRANGE_THROW *
;942:			SEALS_BASEGRENRANGE_ADDSTRENGTH ) + 
;943:			firestrength , bolt->s.pos.trDelta );
;944:	}
LABELV $406
line 946
;945:
;946:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 947
;947:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 948
;948:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 949
;949:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 28
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 32
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 36
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 951
;950:
;951:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 953
;952:
;953:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $393
endproc fire_flashbang 40 4
export fire_rocket
proc fire_rocket 20 4
line 963
;954:}
;955:
;956://=============================================================================
;957: 
;958:/*
;959:=================
;960:fire_rocket
;961:=================
;962:*/
;963:gentity_t *fire_rocket (gentity_t *self, vec3_t start, vec3_t dir) {
line 966
;964:	gentity_t	*bolt;
;965:
;966:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 968
;967:
;968:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 969
;969:	bolt->classname = "rocket";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $409
ASGNP4
line 970
;970:	bolt->nextthink = level.time + 15000;
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 15000
ADDI4
ASGNI4
line 971
;971:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 972
;972:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 973
;973:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 975
;974://	bolt->s.weapon = WP_ROCKET_LAUNCHER;
;975:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 976
;976:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 977
;977:	bolt->damage = 100;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTI4 100
ASGNI4
line 978
;978:	bolt->splashDamage = 100;
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 100
ASGNI4
line 979
;979:	bolt->splashRadius = 120;
ADDRLP4 0
INDIRP4
CNSTI4 748
ADDP4
CNSTI4 120
ASGNI4
line 980
;980:	bolt->methodOfDeath = MOD_ROCKET;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 6
ASGNI4
line 981
;981:	bolt->splashMethodOfDeath = MOD_ROCKET_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTI4 7
ASGNI4
line 982
;982:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 983
;983:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 985
;984:
;985:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 986
;986:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 987
;987:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 988
;988:	VectorScale( dir, 900, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1147207680
ADDRFP4 8
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1147207680
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1147207680
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 989
;989:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 990
;990:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 992
;991:
;992:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $408
endproc fire_rocket 20 4
export fire_ball
proc fire_ball 20 4
line 1000
;993:}
;994:  
;995:/*
;996:==========
;997:ball
;998:==========
;999:*/ 
;1000:gentity_t *fire_ball (gentity_t *self, vec3_t start, vec3_t dir) {
line 1003
;1001:	gentity_t	*bolt;
;1002:
;1003:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1005
;1004:
;1005:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1006
;1006:	bolt->classname = "ball";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $413
ASGNP4
line 1007
;1007:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1008
;1008:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 1009
;1009: 	bolt->s.weapon = WP_MP5;  
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 14
ASGNI4
line 1010
;1010:	bolt->clipmask = MASK_ALL;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 -1
ASGNI4
line 1011
;1011:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 1012
;1012:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
line 1014
;1013:
;1014:	bolt->r.mins[0] = -4;
ADDRLP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTF4 3229614080
ASGNF4
line 1015
;1015:	bolt->r.mins[1] = -4;
ADDRLP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTF4 3229614080
ASGNF4
line 1016
;1016:	bolt->r.mins[2] = -4;
ADDRLP4 0
INDIRP4
CNSTI4 444
ADDP4
CNSTF4 3229614080
ASGNF4
line 1018
;1017:
;1018:	bolt->r.maxs[0] = 4;
ADDRLP4 0
INDIRP4
CNSTI4 448
ADDP4
CNSTF4 1082130432
ASGNF4
line 1019
;1019:	bolt->r.maxs[1] = 8;
ADDRLP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1090519040
ASGNF4
line 1020
;1020:	bolt->r.maxs[2] = 4;
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTF4 1082130432
ASGNF4
line 1022
;1021:
;1022:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1023
;1023:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 1025
;1024:
;1025:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1026
;1026:	VectorScale( dir, 300, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1133903872
ADDRFP4 8
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1133903872
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1133903872
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 1027
;1027:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1028
;1028:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1031
;1029:
;1030:	// save start position
;1031:	VectorCopy( start, bolt->pos2 );
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1033
;1032:
;1033:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $412
endproc fire_ball 20 4
data
export lMins
align 4
LABELV lMins
byte 4 3204448256
byte 4 3204448256
byte 4 3204448256
export lMaxs
align 4
LABELV lMaxs
byte 4 1056964608
byte 4 1056964608
byte 4 1056964608
export Lead_Impact
code
proc Lead_Impact 240 32
line 1049
;1034:}
;1035:
;1036://///////           //
;1037://    //           //
;1038://////  e a l      //    e a d
;1039://  //            ///// 
;1040:gentity_t *fire_reallead (gentity_t *self, vec3_t start,vec3_t dir, int weapon, int caliber, int damage, float muzzlevelocity);
;1041:void G_BounceProjectile( vec3_t start, vec3_t impact, vec3_t dir, vec3_t endout );
;1042:
;1043:
;1044://#define DEBUG_LEAD
;1045:
;1046:vec3_t lMins = { -0.5, -0.5, -0.5 };
;1047:vec3_t lMaxs = { 0.5, 0.5, 0.5 };
;1048:void Lead_Impact ( gentity_t *lead, trace_t *trace )
;1049:{
line 1051
;1050:	gentity_t		*other, *tent,*tent2;
;1051:	qboolean		hitClient = qfalse;
ADDRLP4 104
CNSTI4 0
ASGNI4
line 1055
;1052:	trace_t			tr;
;1053: 	vec3_t			start;
;1054:	vec3_t			dir;
;1055:	qboolean		funcexplosive = qfalse;
ADDRLP4 84
CNSTI4 0
ASGNI4
line 1056
;1056:	int				dmg = 10;
ADDRLP4 88
CNSTI4 10
ASGNI4
line 1057
;1057:	int				weapon = lead->s.weapon;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
line 1059
;1058:
;1059:	other = &g_entities[trace->entityNum];
ADDRLP4 0
CNSTI4 1108
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1061
;1060:  
;1061:	memset( &tent, 0, sizeof(tent ) );
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1062
;1062:	memset( &tent2, 0, sizeof(tent2 ) );
ADDRLP4 8
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1067
;1063:
;1064://	G_Printf("weapon: %i ( %i %i )\n", weapon, WP_GRENADE, WP_FLASHBANG );
;1065:
;1066:
;1067:	if ( lead->fly_sound_debounce_time > 10 ) // if it's been here atleast 10 times
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
CNSTI4 10
LEI4 $416
line 1068
;1068:	{
line 1072
;1069:#ifdef DEBUG_LEAD
;1070:		G_Printf("Destroying lead %i because maximum hits reached\n", lead->s.number );
;1071:#endif
;1072:		G_FreeEntity(lead);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1073
;1073:		return;
ADDRGP4 $415
JUMPV
LABELV $416
line 1075
;1074:	}
;1075:	lead->fly_sound_debounce_time++;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1077
;1076:
;1077:	if ( lead->r.ownerNum != other->s.number && lead->splashDamage == other->s.number )
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 112
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
EQI4 $418
ADDRLP4 112
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
ADDRLP4 116
INDIRI4
NEI4 $418
line 1078
;1078:	{
line 1079
;1079:		G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1080
;1080:		return;
ADDRGP4 $415
JUMPV
LABELV $418
line 1083
;1081:	}
;1082:	// if we've been moving silently 
;1083: 	if ( lead->r.svFlags & SVF_NOCLIENT ) // set us to visible so that the effects are visible
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $420
line 1084
;1084:		lead->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
LABELV $420
line 1087
;1085:
;1086:	// stop here if we're a corspe, we can't recieve no damage
;1087:	if ( other->r.contents == CONTENTS_CORPSE && !(!Q_stricmp( other->classname, "player_bbox_head") ) )
ADDRLP4 0
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
CNSTI4 67108864
NEI4 $422
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $424
ARGP4
ADDRLP4 128
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
EQI4 $422
line 1088
;1088:	{
line 1089
;1089:		tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_FLESH );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 132
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 132
INDIRP4
ASGNP4
line 1090
;1090:		tent->s.eventParm = other->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 1091
;1091:		tent->s.torsoAnim = DirToByte( lead->movedir );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRLP4 136
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 1092
;1092:		tent->s.legsAnim = dmg; 
ADDRLP4 4
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 1094
;1093:
;1094:		G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1095
;1095:		return;
ADDRGP4 $415
JUMPV
LABELV $422
line 1099
;1096:	}
;1097:
;1098:	// if we hitted a  we can get hitted by our own missile
;1099:	lead->r.ownerNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 1023
ASGNI4
line 1102
;1100:
;1101:	
;1102:	if ( other && !Q_stricmp(other->classname , "reallead") )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $425
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $277
ARGP4
ADDRLP4 136
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 0
NEI4 $425
line 1103
;1103:	{
line 1107
;1104:#ifdef DEBUG_LEAD
;1105:		G_Printf("Destroying lead %i\n", lead->s.number );
;1106:#endif
;1107:		G_FreeEntity(lead);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1108
;1108:		return;
ADDRGP4 $415
JUMPV
LABELV $425
line 1110
;1109:	}
;1110:	if ( lead->timestamp < level.time && lead->s.powerups & ( 1 << 1 ) )
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 640
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $427
ADDRLP4 140
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $427
line 1111
;1111:	{
line 1115
;1112:#ifdef DEBUG_LEAD
;1113:		G_Printf("Removed trail for lead %i", lead->s.number );
;1114:#endif
;1115:		lead->s.powerups &=~(1<<1);
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 1116
;1116:	}
LABELV $427
line 1120
;1117:
;1118:
;1119:   	// impact damage
;1120:	if (other->takedamage /* && other->r.contents != CONTENTS_CORPSE*/ ) 
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
EQI4 $430
line 1121
;1121:	{
line 1122
;1122:		if ( lead->damage ) {  
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 0
EQI4 $432
line 1124
;1123:
;1124:			if( LogAccuracyHit( other, &g_entities[lead->s.otherEntityNum2-1] ) ) {
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities-1108
ADDP4
ARGP4
ADDRLP4 144
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 0
EQI4 $434
line 1125
;1125:				g_entities[lead->s.otherEntityNum2-1].client->accuracy_hits++;
ADDRLP4 148
CNSTI4 1108
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities-1108+516
ADDP4
INDIRP4
CNSTI4 1904
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1126
;1126:				hitClient = qtrue;
ADDRLP4 104
CNSTI4 1
ASGNI4
line 1127
;1127:			}
LABELV $434
line 1132
;1128:
;1129:#ifdef DEBUG_LEAD
;1130:		G_Printf("Lead %i inflicted %i damage on %i\n", lead->s.number, lead->damage, other->s.number );
;1131:#endif
;1132:			dmg = G_Damage (other, lead, &g_entities[lead->s.otherEntityNum2-1], lead->movedir,
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
CNSTI4 1108
ADDRLP4 148
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities-1108
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 148
INDIRP4
CNSTI4 752
ADDP4
INDIRI4
ARGI4
ADDRLP4 152
ADDRGP4 G_Damage
CALLI4
ASGNI4
ADDRLP4 88
ADDRLP4 152
INDIRI4
ASGNI4
line 1134
;1133:				trace->endpos, lead->damage,	0, lead->methodOfDeath);
;1134:		}
LABELV $432
line 1136
;1135:
;1136:		if ( is_func_explosive( other ) ) 
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 is_func_explosive
CALLI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 0
EQI4 $440
line 1137
;1137:		{   
line 1138
;1138:			tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 148
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 148
INDIRP4
ASGNP4
line 1139
;1139:			tent->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 152
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 1140
;1140:			tent->s.weapon = weapon;	
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1144
;1141:#ifdef DEBUG_LEAD
;1142:		G_Printf("Lead %i hitted func_explosive %i\n", lead->s.number, trace->entityNum );
;1143:#endif
;1144:			if ( !Q_stricmp( other->classname,"func_explosive_glass" ) && other->ns_flags > 0 )
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $348
ARGP4
ADDRLP4 156
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 160
CNSTI4 0
ASGNI4
ADDRLP4 156
INDIRI4
ADDRLP4 160
INDIRI4
NEI4 $442
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 160
INDIRI4
LEI4 $442
line 1145
;1145:				tent->s.generic1 = BHOLE_GLASS;
ADDRLP4 4
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $443
JUMPV
LABELV $442
line 1147
;1146:			else
;1147:				tent->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 164
INDIRI4
ASGNI4
LABELV $443
line 1149
;1148:
;1149:			if ( other->ns_flags > 0 && !other->fly_sound_debounce_time )
ADDRLP4 172
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
LEI4 $444
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
NEI4 $444
line 1150
;1150:				tent->s.otherEntityNum2 = trace->entityNum; 
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $445
JUMPV
LABELV $444
line 1152
;1151:			else
;1152:				tent->s.frame = 3; // leave no mark... if we're dead
ADDRLP4 4
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 3
ASGNI4
LABELV $445
line 1154
;1153:  
;1154:			if ( !Q_stricmp( other->classname,"func_explosive_glass" ) && other->ns_flags > 0 )
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $348
ARGP4
ADDRLP4 176
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 180
CNSTI4 0
ASGNI4
ADDRLP4 176
INDIRI4
ADDRLP4 180
INDIRI4
NEI4 $446
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 180
INDIRI4
LEI4 $446
line 1155
;1155:			{
line 1156
;1156:				int lastglass = 0;
ADDRLP4 184
CNSTI4 0
ASGNI4
line 1157
;1157:				int	checks = 10; // run atleast 10 checks
ADDRLP4 188
CNSTI4 10
ASGNI4
line 1161
;1158:
;1159:				vec3_t temp;
;1160:
;1161:				VectorCopy(trace->endpos , temp );
ADDRLP4 192
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1162
;1162:				VectorMA (temp, 300, lead->movedir, temp);   //a bullet will go through 3000qu glass
ADDRLP4 204
CNSTF4 1133903872
ASGNF4
ADDRLP4 208
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 192
ADDRLP4 192
INDIRF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+4
ADDRLP4 192+4
INDIRF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192+8
ADDRLP4 192+8
INDIRF4
CNSTF4 1133903872
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1164
;1163:
;1164:				if ( trap_PointContents( temp, lead->s.number ) & CONTENTS_SOLID )
ADDRLP4 192
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 212
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $452
line 1165
;1165:				{
line 1167
;1166:					// don't go further we're stuck in a wall
;1167:					G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1168
;1168:					return;
ADDRGP4 $415
JUMPV
LABELV $452
line 1171
;1169:				}
;1170:				else
;1171:				{
line 1172
;1172:					lead->wait++;
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
ADDRGP4 $455
JUMPV
LABELV $454
line 1175
;1173:
;1174:					while ( checks )
;1175:					{
line 1177
;1176:						// get exit position...
;1177:						trap_Trace (&tr, temp, NULL, NULL, trace->endpos, lastglass, MASK_SOLID );
ADDRLP4 24
ARGP4
ADDRLP4 192
ARGP4
ADDRLP4 220
CNSTP4 0
ASGNP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 184
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1180
;1178:							
;1179:						// get the point where the bullet leaves the wall						
;1180:						if ( tr.entityNum == trace->entityNum ) 
ADDRLP4 24+52
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
NEI4 $457
line 1181
;1181:							break; 
ADDRGP4 $456
JUMPV
LABELV $457
line 1183
;1182:
;1183:						lastglass = tr.entityNum;
ADDRLP4 184
ADDRLP4 24+52
INDIRI4
ASGNI4
line 1184
;1184:						VectorCopy(tr.endpos, temp);
ADDRLP4 192
ADDRLP4 24+12
INDIRB
ASGNB 12
line 1185
;1185:						checks--;
ADDRLP4 188
ADDRLP4 188
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1186
;1186:					}  
LABELV $455
line 1174
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $454
LABELV $456
line 1187
;1187:					tent2 = G_TempEntity( tr.endpos, EV_BULLET_HIT_WALL );
ADDRLP4 24+12
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 220
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 220
INDIRP4
ASGNP4
line 1188
;1188:					tent2->s.eventParm = DirToByte( tr.plane.normal );  
ADDRLP4 24+24
ARGP4
ADDRLP4 224
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 1189
;1189:					tent2->s.generic1 = BHOLE_GLASS;
ADDRLP4 8
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 1
ASGNI4
line 1190
;1190:					tent2->s.weapon = weapon;
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1192
;1191:
;1192:					if ( other->ns_flags > 0 && !other->fly_sound_debounce_time )
ADDRLP4 232
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRLP4 232
INDIRI4
LEI4 $464
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
ADDRLP4 232
INDIRI4
NEI4 $464
line 1193
;1193:						tent2->s.otherEntityNum2 = tr.entityNum; 
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 24+52
INDIRI4
ASGNI4
ADDRGP4 $465
JUMPV
LABELV $464
line 1195
;1194:					else
;1195:						tent2->s.frame = 3; // leave no mark... if we're dead 
ADDRLP4 8
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 3
ASGNI4
LABELV $465
line 1196
;1196:				}
line 1197
;1197:			}  
LABELV $446
line 1199
;1198: 
;1199:			if ( tent2 )
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $467
line 1200
;1200:				SnapVector( tent2->s.origin );
ADDRLP4 184
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 188
ADDRLP4 8
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 192
ADDRLP4 8
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
LABELV $467
line 1203
;1201:
;1202:			// if we're on a funcexplosive we don't have to leave marks.
;1203:			funcexplosive = qtrue;
ADDRLP4 84
CNSTI4 1
ASGNI4
line 1204
;1204:		}
ADDRGP4 $441
JUMPV
LABELV $440
line 1205
;1205:		else {    
line 1206
;1206:			int HitLocation = LOC_NULL;
ADDRLP4 148
CNSTI4 0
ASGNI4
line 1208
;1207:			
;1208:			if ( other->client )
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $469
line 1209
;1209:				HitLocation = NS_CheckLocationDamage( other, trace->endpos, WP_MK23 );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 152
ADDRGP4 NS_CheckLocationDamage
CALLI4
ASGNI4
ADDRLP4 148
ADDRLP4 152
INDIRI4
ASGNI4
LABELV $469
line 1215
;1210:	 		   
;1211:#ifdef DEBUG_LEAD
;1212:			G_Printf("Lead %i hitted player %i on %i\n", lead->s.number, other->s.number, HitLocation );
;1213:#endif
;1214:  	  		// covered by a vest?
;1215:			if ( ( HitLocation == LOC_BACK || HitLocation == LOC_STOMACH || HitLocation == LOC_CHEST ) && other->client && other->client->ps.powerups[PW_VEST] && !BG_IsRifle( weapon ) )
ADDRLP4 156
ADDRLP4 148
INDIRI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 5
EQI4 $474
ADDRLP4 156
INDIRI4
CNSTI4 4
EQI4 $474
ADDRLP4 156
INDIRI4
CNSTI4 3
NEI4 $471
LABELV $474
ADDRLP4 160
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $471
ADDRLP4 160
INDIRP4
CNSTI4 336
ADDP4
INDIRI4
CNSTI4 0
EQI4 $471
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $471
line 1216
;1216:			{ 
line 1217
;1217:				tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 168
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 168
INDIRP4
ASGNP4
line 1218
;1218:				tent->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 172
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 172
INDIRI4
ASGNI4
line 1219
;1219:				tent->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1220
;1220:				tent->s.weapon = weapon;
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1221
;1221:				tent->s.frame = 1; // kevlar vest  
ADDRLP4 4
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 1
ASGNI4
line 1222
;1222:			} // or even a helmet , call sparks then
ADDRGP4 $472
JUMPV
LABELV $471
line 1223
;1223:			else if ( ( HitLocation == LOC_HEAD || HitLocation == LOC_FACE ) && other->client && other->client->ps.powerups[PW_HELMET] )
ADDRLP4 168
ADDRLP4 148
INDIRI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 1
EQI4 $477
ADDRLP4 168
INDIRI4
CNSTI4 2
NEI4 $475
LABELV $477
ADDRLP4 172
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
ASGNP4
ADDRLP4 172
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $475
ADDRLP4 172
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $475
line 1224
;1224:			{
line 1225
;1225:				tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 176
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 176
INDIRP4
ASGNP4
line 1226
;1226:				tent->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 180
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 1227
;1227:				tent->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1228
;1228:				tent->s.weapon = weapon;
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1229
;1229:				tent->s.frame = 2; // helmet hit 
ADDRLP4 4
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 2
ASGNI4
line 1230
;1230:			} // call blood
ADDRGP4 $476
JUMPV
LABELV $475
line 1231
;1231:			else if ( other->takedamage && other->client ) 
ADDRLP4 0
INDIRP4
CNSTI4 736
ADDP4
INDIRI4
CNSTI4 0
EQI4 $478
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $478
line 1232
;1232:			{
line 1233
;1233:				tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_FLESH );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 55
ARGI4
ADDRLP4 180
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 180
INDIRP4
ASGNP4
line 1234
;1234:				tent->s.eventParm = other->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 1235
;1235:				tent->s.torsoAnim = DirToByte( lead->movedir );
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ARGP4
ADDRLP4 184
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 1236
;1236:				tent->s.legsAnim = dmg;
ADDRLP4 4
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 1239
;1237:
;1238:				// only if we're NOT going through a head
;1239:				if ( ( HitLocation != LOC_HEAD && HitLocation != LOC_FACE ) )
ADDRLP4 188
ADDRLP4 148
INDIRI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 1
EQI4 $479
ADDRLP4 188
INDIRI4
CNSTI4 2
EQI4 $479
line 1240
;1240:				{
line 1241
;1241:					lead->s.powerups |= ( 1 << 1 );
ADDRLP4 192
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1242
;1242:					lead->timestamp = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1243
;1243:				}
line 1244
;1244:			}
ADDRGP4 $479
JUMPV
LABELV $478
line 1246
;1245:			else // play default concrete...
;1246:			{
line 1247
;1247:				tent = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 180
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 180
INDIRP4
ASGNP4
line 1248
;1248:				tent->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 184
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 184
INDIRI4
ASGNI4
line 1249
;1249:				tent->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 4
INDIRP4
CNSTI4 140
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1250
;1250:				tent->s.weapon = weapon; 
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1251
;1251:				tent->s.frame = 0;
ADDRLP4 4
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 1252
;1252:			}
LABELV $479
LABELV $476
LABELV $472
line 1254
;1253:
;1254:			lead->wait--;
ADDRLP4 180
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 1256
;1255:			// ignore htis entity so we can't hit someone twice with one bullet.
;1256:			lead->r.ownerNum = trace->entityNum; 
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1258
;1257:
;1258:			if (tent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $483
line 1259
;1259:				SnapVector( tent->s.origin );
ADDRLP4 184
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 188
ADDRLP4 4
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 192
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
LABELV $483
line 1262
;1260:
;1261:			// 9mm & pistols don't go through ppls
;1262:			if ( lead->count == AM_LIGHT_PISTOL || lead->count == AM_MEDIUM_PISTOL || lead->count == AM_SMG )
ADDRLP4 184
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 2
EQI4 $488
ADDRLP4 184
INDIRI4
CNSTI4 3
EQI4 $488
ADDRLP4 184
INDIRI4
CNSTI4 5
NEI4 $415
LABELV $488
line 1263
;1263:			{
line 1264
;1264:				G_FreeEntity( lead ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1268
;1265:#ifdef DEBUG_LEAD
;1266:		G_Printf("Lead %i free after killing player.\n", lead->s.number );
;1267:#endif
;1268:			}  
line 1269
;1269:			return;
ADDRGP4 $415
JUMPV
LABELV $441
line 1271
;1270:		}   
;1271:	} 
LABELV $430
line 1273
;1272:	
;1273:	if ( other &&  
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $489
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $491
ARGP4
ADDRLP4 148
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 148
INDIRI4
CNSTI4 0
EQI4 $493
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
INDIRP4
ARGP4
ADDRGP4 $492
ARGP4
ADDRLP4 152
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 0
NEI4 $489
LABELV $493
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 156
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $494
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ARGI4
ADDRLP4 160
ADDRGP4 BG_IsPistol
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
EQI4 $489
LABELV $494
line 1277
;1274:		( !Q_stricmp( other->classname, "func_door" ) || !Q_stricmp( other->classname, "func_door_rotate" ) )  &&
;1275:		( BG_IsShotgun( lead->s.weapon ) || BG_IsPistol( lead->s.weapon ) )
;1276:		)
;1277:	{
line 1281
;1278:#ifdef DEBUG_LEAD
;1279:			G_Printf("Lead %i changed to FX\n", lead->s.number );
;1280:#endif
;1281:			G_AddEvent( lead, EV_BULLET_HIT_WALL, DirToByte( trace->plane.normal ) ); 
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 164
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 164
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1282
;1282: 			lead->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1283
;1283:			lead->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 1284
;1284:			VectorCopy( trace->endpos , lead->s.pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1287
;1285: 
;1286:			// change over to a normal entity right at the point of impact
;1287:			lead->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 1288
;1288:			lead->s.weapon = weapon;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1289
;1289:			lead->s.otherEntityNum2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 1290
;1290:			lead->s.frame = 0; 
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 1292
;1291:  
;1292:			SnapVector( lead->s.origin );
ADDRLP4 172
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 180
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1294
;1293:			// splash damage (doesn't apply to person directly hit) 
;1294:			trap_LinkEntity( lead ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1295
;1295:			return;
ADDRGP4 $415
JUMPV
LABELV $489
line 1299
;1296:	}
;1297: 
;1298:	// only 9mm bounces off the wall, and not every projectile
;1299:	if ( trace->surfaceFlags & SURF_METALSTEPS && 
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $495
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 5
EQI4 $498
ADDRLP4 164
INDIRI4
CNSTI4 2
EQI4 $498
ADDRLP4 164
INDIRI4
CNSTI4 3
NEI4 $495
LABELV $498
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
NEI4 $495
line 1305
;1300:		( lead->count == AM_SMG || 
;1301:		lead->count == AM_LIGHT_PISTOL || 
;1302:		lead->count == AM_MEDIUM_PISTOL  ) 
;1303:		&& !BG_IsShotgun( weapon ) 
;1304:		) 
;1305:	{
line 1309
;1306:		vec3_t temp;
;1307:		vec3_t end;
;1308:
;1309:		qboolean bounce = ( random() < 0.75 );
ADDRLP4 204
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1061158912
GEF4 $500
ADDRLP4 200
CNSTI4 1
ASGNI4
ADDRGP4 $501
JUMPV
LABELV $500
ADDRLP4 200
CNSTI4 0
ASGNI4
LABELV $501
ADDRLP4 184
ADDRLP4 200
INDIRI4
ASGNI4
line 1311
;1310:
;1311:		if ( bounce  )
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $502
line 1312
;1312:		{
line 1315
;1313:			gentity_t *new_lead;
;1314:		
;1315:			VectorCopy( trace->endpos, temp);
ADDRLP4 172
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1316
;1316:			G_BounceProjectile( lead->s.pos.trBase, temp,  trace->plane.normal, end );
ADDRLP4 212
CNSTI4 24
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 212
INDIRI4
ADDP4
ARGP4
ADDRLP4 172
ARGP4
ADDRFP4 4
INDIRP4
ADDRLP4 212
INDIRI4
ADDP4
ARGP4
ADDRLP4 188
ARGP4
ADDRGP4 G_BounceProjectile
CALLV
pop
line 1317
;1317:			VectorCopy( temp, start );
ADDRLP4 12
ADDRLP4 172
INDIRB
ASGNB 12
line 1318
;1318:			VectorSubtract( end, temp, dir );
ADDRLP4 92
ADDRLP4 188
INDIRF4
ADDRLP4 172
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92+4
ADDRLP4 188+4
INDIRF4
ADDRLP4 172+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92+8
ADDRLP4 188+8
INDIRF4
ADDRLP4 172+8
INDIRF4
SUBF4
ASGNF4
line 1319
;1319:			VectorNormalize(dir);
ADDRLP4 92
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1321
;1320:
;1321:			new_lead = fire_reallead( &g_entities[ lead->s.otherEntityNum2-1 ], start, dir, weapon, lead->count, lead->damage - 1, lead->moverState );
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
CNSTI4 1108
ADDRLP4 216
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities-1108
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 92
ARGP4
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 216
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
ARGI4
ADDRLP4 216
INDIRP4
CNSTI4 740
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRLP4 216
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 220
ADDRGP4 fire_reallead
CALLP4
ASGNP4
ADDRLP4 208
ADDRLP4 220
INDIRP4
ASGNP4
line 1324
;1322:			
;1323:			// move through original owner
;1324:			new_lead->r.ownerNum = ENTITYNUM_NONE; 
ADDRLP4 208
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 1023
ASGNI4
line 1326
;1325:			// inflict damage on parent
;1326:			new_lead->splashDamage = ENTITYNUM_NONE;
ADDRLP4 208
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 1023
ASGNI4
line 1331
;1327:
;1328:#ifdef DEBUG_LEAD
;1329:			G_Printf("Lead %i new bouncer spawned %i.\n", lead->s.number, new_lead->s.number );
;1330:#endif
;1331:			trap_LinkEntity( new_lead );
ADDRLP4 208
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1332
;1332:		}
LABELV $502
line 1335
;1333:		
;1334:		// transform current entity into hit wall and spawn a new bullet
;1335:		if ( funcexplosive )
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $511
line 1336
;1336:		{
line 1340
;1337:#ifdef DEBUG_LEAD
;1338:			G_Printf("Lead %i freed after bounce on func explosive.\n", lead->s.number );
;1339:#endif
;1340:			G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1341
;1341:		}
ADDRGP4 $415
JUMPV
LABELV $511
line 1342
;1342:		else {
line 1346
;1343:#ifdef DEBUG_LEAD
;1344:			G_Printf("Lead %i changed to FX\n", lead->s.number );
;1345:#endif
;1346:			G_AddEvent( lead, EV_BULLET_HIT_WALL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 208
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 208
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1347
;1347:			lead->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 212
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 212
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1348
;1348: 			lead->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1349
;1349:			lead->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 216
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 1350
;1350:			VectorCopy( trace->endpos , lead->s.pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1353
;1351: 
;1352:			// change over to a normal entity right at the point of impact
;1353:			lead->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 1354
;1354:			lead->s.weapon = weapon;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1355
;1355:			lead->s.otherEntityNum2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 1356
;1356:			lead->s.frame = 0;
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 1358
;1357:
;1358:			if ( is_func_explosive( other )  && !other->fly_sound_debounce_time )
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 is_func_explosive
CALLI4
ASGNI4
ADDRLP4 224
CNSTI4 0
ASGNI4
ADDRLP4 220
INDIRI4
ADDRLP4 224
INDIRI4
EQI4 $513
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
ADDRLP4 224
INDIRI4
NEI4 $513
line 1359
;1359:			{
line 1360
;1360:				lead->s.otherEntityNum2 = trace->entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1361
;1361:			}
LABELV $513
line 1363
;1362:  
;1363:			SnapVector( lead->s.origin );
ADDRLP4 228
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 228
INDIRP4
ADDRLP4 228
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 232
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 232
INDIRP4
ADDRLP4 232
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 236
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 236
INDIRP4
ADDRLP4 236
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1365
;1364:			// splash damage (doesn't apply to person directly hit) 
;1365:			trap_LinkEntity( lead ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1366
;1366:		} 
line 1368
;1367:		// after rebounced... break, this won't go through metal then...
;1368:		return;
ADDRGP4 $415
JUMPV
LABELV $495
line 1372
;1369:	} 
;1370:
;1371:	// check if the bullet could crash through the wall  
;1372:	{
line 1373
;1373:		float breakValue = BG_LeadGetBreakValueForSurface( trace );// ;
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 BG_LeadGetBreakValueForSurface
CALLF4
ASGNF4
ADDRLP4 172
ADDRLP4 176
INDIRF4
ASGNF4
line 1375
;1374:
;1375:		switch (weapon) 
ADDRLP4 80
INDIRI4
CNSTI4 17
LTI4 $516
ADDRLP4 80
INDIRI4
CNSTI4 24
GTI4 $516
ADDRLP4 80
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $519-68
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $519
address $518
address $517
address $516
address $516
address $516
address $518
address $516
address $518
code
line 1376
;1376:		{
LABELV $517
line 1378
;1377:			case WP_MACMILLAN:
;1378:				breakValue *= 2.75; // uber tuff :>
ADDRLP4 172
CNSTF4 1076887552
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
LABELV $518
line 1384
;1379:			case WP_M14:
;1380:			case WP_PSG1:
;1381:#ifdef SL8SD
;1382:			case WP_SL8SD:
;1383:#endif
;1384:				breakValue *= 2; // really tuff 
ADDRLP4 172
CNSTF4 1073741824
ADDRLP4 172
INDIRF4
MULF4
ASGNF4
line 1385
;1385:				break;
line 1387
;1386:			default:
;1387:				break;
LABELV $516
line 1391
;1388:		}
;1389:
;1390:		// get the point where the bullet leaves the wall
;1391:		VectorMA (trace->endpos, breakValue, lead->movedir, start);   
ADDRLP4 184
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 184
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 188
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 184
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 188
INDIRP4
CNSTI4 680
ADDP4
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 684
ADDP4
INDIRF4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ASGNF4
line 1394
;1392: 
;1393:		// stuck in a wall?
;1394:		if ( trap_PointContents( start, -1 ) & CONTENTS_SOLID || BG_IsShotgun(weapon) ||  lead->count == AM_SHOTGUNMAG ) 
ADDRLP4 12
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 196
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $526
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 200
ADDRGP4 BG_IsShotgun
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $526
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
INDIRI4
CNSTI4 1
NEI4 $523
LABELV $526
line 1395
;1395:		{   
line 1396
;1396:				if ( funcexplosive ) 
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $527
line 1397
;1397:				{	// already handled this brush
line 1401
;1398:#ifdef DEBUG_LEAD
;1399:					G_Printf("Lead %i freed because mark already spawned on func_explosive \n", lead->s.number );
;1400:#endif
;1401:					G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1402
;1402:					return;
ADDRGP4 $415
JUMPV
LABELV $527
line 1404
;1403:				}
;1404:				else if ( is_func_explosive( other )  && !other->fly_sound_debounce_time )
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 is_func_explosive
CALLI4
ASGNI4
ADDRLP4 208
CNSTI4 0
ASGNI4
ADDRLP4 204
INDIRI4
ADDRLP4 208
INDIRI4
EQI4 $529
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
NEI4 $529
line 1405
;1405:				{ 
line 1409
;1406:#ifdef DEBUG_LEAD
;1407:					G_Printf("Lead %i spawned mark on func_explosive\n", lead->s.number );
;1408:#endif
;1409:					G_AddEvent( lead, EV_BULLET_HIT_WALL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 212
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 212
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1410
;1410:					lead->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 216
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1411
;1411: 					lead->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1412
;1412:					lead->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 220
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 1413
;1413:		 			lead->s.otherEntityNum2 = trace->entityNum; 
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1414
;1414:					lead->s.frame = 0;
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 1415
;1415:					lead->s.weapon = weapon;					
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1416
;1416:				} 
ADDRGP4 $530
JUMPV
LABELV $529
line 1418
;1417:				else 
;1418:				{
line 1422
;1419:#ifdef DEBUG_LEAD
;1420:					G_Printf("Lead %i spawned mark\n", lead->s.number );
;1421:#endif
;1422:					G_AddEvent( lead, EV_BULLET_HIT_WALL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 212
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 212
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1423
;1423:					lead->s.otherEntityNum = lead->s.otherEntityNum2-1;
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
INDIRP4
CNSTI4 140
ADDP4
ADDRLP4 216
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1424
;1424: 					lead->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1425
;1425:					lead->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 220
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 1426
;1426:					lead->s.frame = 0;
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
CNSTI4 0
ASGNI4
line 1427
;1427:					lead->s.otherEntityNum2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 1428
;1428:					lead->s.weapon = weapon;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1429
;1429:				}
LABELV $530
line 1431
;1430:
;1431:				lead->s.modelindex = 0;
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
CNSTI4 0
ASGNI4
line 1434
;1432:
;1433:				// change over to a normal entity right at the point of impact
;1434:				lead->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 1436
;1435:
;1436:				G_SetOrigin( lead, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1438
;1437:
;1438:				SnapVector( lead->s.origin );
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 220
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1439
;1439:				SnapVector( lead->r.currentOrigin );
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 220
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1442
;1440:
;1441:				// splash damage (doesn't apply to person directly hit) 
;1442:				trap_LinkEntity( lead ); 
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1443
;1443:				return; 
ADDRGP4 $415
JUMPV
LABELV $523
line 1447
;1444:		}   
;1445:
;1446:		// some materials are also breakable for smaller calibers
;1447:		if (  trace->surfaceFlags & SURF_WOODSTEPS
ADDRLP4 204
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 208
CNSTI4 0
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 1048576
BANDI4
ADDRLP4 208
INDIRI4
NEI4 $537
ADDRLP4 204
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 208
INDIRI4
NEI4 $537
ADDRLP4 204
INDIRI4
CNSTI4 4194304
BANDI4
ADDRLP4 208
INDIRI4
NEI4 $537
ADDRLP4 204
INDIRI4
CNSTI4 8388608
BANDI4
ADDRLP4 208
INDIRI4
NEI4 $537
ADDRLP4 204
INDIRI4
CNSTI4 16777216
BANDI4
ADDRLP4 208
INDIRI4
NEI4 $537
ADDRLP4 204
INDIRI4
CNSTI4 33554432
BANDI4
ADDRLP4 208
INDIRI4
EQI4 $531
LABELV $537
line 1453
;1448:			|| trace->surfaceFlags & SURF_DIRTSTEPS
;1449:			|| trace->surfaceFlags & SURF_SNOWSTEPS
;1450:			|| trace->surfaceFlags & SURF_SANDSTEPS
;1451:			|| trace->surfaceFlags & SURF_GLASS	
;1452:			|| trace->surfaceFlags & SURF_SOFTSTEPS )
;1453:		{
line 1457
;1454:#ifdef DEBUG_LEAD
;1455:		G_Printf("Lead %i broke %i times through soft material\n", lead->s.number, lead->wait+1 );
;1456:#endif
;1457:			lead->wait++;
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1458
;1458:		}
LABELV $531
line 1462
;1459:
;1460:
;1461:		// get exit position...
;1462:		trap_Trace( &tr, start, lMins, lMaxs, trace->endpos, lead->s.number, MASK_SOLID );
ADDRLP4 24
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 lMins
ARGP4
ADDRGP4 lMaxs
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1465
;1463: 
;1464:		// we actually found a plane that might be a window 
;1465:	    if(tr.entityNum < ENTITYNUM_MAX_NORMAL && tr.entityNum != trace->entityNum ) // and our entrace may not be a func_explosive
ADDRLP4 24+52
INDIRI4
CNSTI4 1022
GEI4 $538
ADDRLP4 24+52
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
EQI4 $538
line 1466
;1466:		{
line 1468
;1467:			// do a trace back again, but this time ignore the entity.
;1468:			trap_Trace ( &tr, start, lMins, lMaxs, trace->endpos, tr.entityNum, MASK_SOLID );
ADDRLP4 24
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 lMins
ARGP4
ADDRGP4 lMaxs
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 24+52
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1471
;1469:
;1470:			// get the point where the bullet leaves the wall
;1471:			VectorCopy (tr.endpos, start);	
ADDRLP4 12
ADDRLP4 24+12
INDIRB
ASGNB 12
line 1472
;1472:		} 
ADDRGP4 $539
JUMPV
LABELV $538
line 1474
;1473:		else 
;1474:			VectorCopy (tr.endpos, start);
ADDRLP4 12
ADDRLP4 24+12
INDIRB
ASGNB 12
LABELV $539
line 1476
;1475:
;1476:		if ( VectorCompare( start, lead->s.pos.trBase ) )
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 212
ADDRGP4 VectorCompare
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
EQI4 $545
line 1477
;1477:		{
line 1481
;1478:#ifdef DEBUG_LEAD
;1479:			G_Printf("Lead %i couldn't break through surface\n", lead->s.number );
;1480:#endif 
;1481:			tent2 = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 216
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 216
INDIRP4
ASGNP4
line 1482
;1482:			tent2->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 220
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 1483
;1483:			tent2->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 224
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 1484
;1484:			tent2->freeAfterEvent = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1486
;1485:
;1486:			G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1487
;1487:			return;
ADDRGP4 $415
JUMPV
LABELV $545
line 1490
;1488:		}
;1489:
;1490:		VectorCopy ( start, lead->s.pos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRB
ASGNB 12
line 1491
;1491:		VectorCopy ( start, lead->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 12
INDIRB
ASGNB 12
line 1494
;1492:   
;1493:		
;1494:		if ( !funcexplosive ) 
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $547
line 1495
;1495:		{ 
line 1500
;1496:#ifdef DEBUG_LEAD
;1497:			G_Printf("Lead %i spawned FX \n", lead->s.number );
;1498:#endif
;1499:			
;1500:			tent2 = G_TempEntity( trace->endpos, EV_BULLET_HIT_WALL );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 216
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 216
INDIRP4
ASGNP4
line 1501
;1501:			tent2->s.eventParm = DirToByte( trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 220
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 1502
;1502:			tent2->s.generic1 = NS_BulletHoleTypeForSurface( trace->surfaceFlags );
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 224
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 1503
;1503:			tent2->freeAfterEvent = qtrue;
ADDRLP4 8
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1504
;1504:			tent2->s.weapon = weapon;
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1506
;1505:
;1506:			if ( lead->wait > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 1065353216
LEF4 $549
line 1507
;1507:				tent = G_TempEntity( tr.endpos, EV_BULLET_HIT_WALL );
ADDRLP4 24+12
ARGP4
CNSTI4 56
ARGI4
ADDRLP4 228
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 228
INDIRP4
ASGNP4
line 1508
;1508:				tent->s.eventParm = DirToByte( tr.plane.normal );
ADDRLP4 24+24
ARGP4
ADDRLP4 232
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 1509
;1509:				tent->s.weapon = weapon; 
ADDRLP4 4
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1510
;1510:				tent->s.generic1 = NS_BulletHoleTypeForSurface( tr.surfaceFlags );
ADDRLP4 24+44
INDIRI4
ARGI4
ADDRLP4 236
ADDRGP4 NS_BulletHoleTypeForSurface
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 236
INDIRI4
ASGNI4
line 1511
;1511:				tent->freeAfterEvent = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 556
ADDP4
CNSTI4 1
ASGNI4
line 1512
;1512:			}
LABELV $549
line 1516
;1513:
;1514:			// we didn't hit a funcexplosive that can take damage. but it might be 
;1515:			// a func_explosive
;1516:			if ( is_func_explosive( &g_entities[trace->entityNum]) && !g_entities[trace->entityNum].fly_sound_debounce_time ) 
CNSTI4 1108
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 228
ADDRGP4 is_func_explosive
CALLI4
ASGNI4
ADDRLP4 232
CNSTI4 0
ASGNI4
ADDRLP4 228
INDIRI4
ADDRLP4 232
INDIRI4
EQI4 $554
CNSTI4 1108
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+724
ADDP4
INDIRI4
ADDRLP4 232
INDIRI4
NEI4 $554
line 1517
;1517:			{
line 1518
;1518:				if ( tent )
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $557
line 1519
;1519:					tent->s.otherEntityNum2 = trace->entityNum;
ADDRLP4 4
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
LABELV $557
line 1520
;1520:				if ( tent2 )
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $559
line 1521
;1521:					tent2->s.otherEntityNum2 = trace->entityNum;
ADDRLP4 8
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
LABELV $559
line 1522
;1522:			}
LABELV $554
line 1523
;1523:		}
LABELV $547
line 1526
;1524:
;1525:		//  save net bandwidth
;1526:		if ( tent )
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $561
line 1527
;1527:			SnapVector( tent->s.origin );
ADDRLP4 216
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 220
ADDRLP4 4
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 224
ADDRLP4 4
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 224
INDIRP4
ADDRLP4 224
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
LABELV $561
line 1528
;1528:		if ( tent2 )
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $563
line 1529
;1529:			SnapVector( tent2->s.origin );
ADDRLP4 216
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 220
ADDRLP4 8
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 220
INDIRP4
ADDRLP4 220
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 224
ADDRLP4 8
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 224
INDIRP4
ADDRLP4 224
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
LABELV $563
line 1531
;1530:
;1531:		lead->wait--;
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 1534
;1532:
;1533:		// how often the bullet may crash through a wall...
;1534:		if ( lead->wait <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 796
ADDP4
INDIRF4
CNSTF4 0
GTF4 $565
line 1535
;1535:		{
line 1539
;1536:#ifdef DEBUG_LEAD
;1537:			G_Printf("Lead %i freed because too often hitted a wall\n", lead->s.number );
;1538:#endif
;1539:			G_FreeEntity( lead );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1540
;1540: 			return;
ADDRGP4 $415
JUMPV
LABELV $565
line 1542
;1541:		} 
;1542:	} 	
line 1543
;1543:	trap_LinkEntity( lead );  
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1544
;1544:}
LABELV $415
endproc Lead_Impact 240 32
export fire_reallead
proc fire_reallead 132 28
line 1551
;1545:
;1546:/*
;1547:=================
;1548:fire_bullet
;1549:=================
;1550:*/
;1551:gentity_t *fire_reallead (gentity_t *self, vec3_t start,vec3_t dir, int weapon, int caliber, int damage, float muzzlevelocity) {
line 1557
;1552:	gentity_t	*bolt;
;1553:	vec3_t		end;
;1554:	trace_t		tr;
;1555:	float		dist;
;1556:
;1557:	VectorMA( start, 8920, dir, end );
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 80
CNSTF4 1175150592
ASGNF4
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 4+4
ADDRLP4 76
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRLP4 4+8
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
CNSTF4 1175150592
ADDRFP4 8
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1558
;1558:	trap_Trace( &tr, start, NULL,NULL,end, self->s.number, MASK_SOLID );
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1560
;1559:
;1560:	dist = Distance( start, tr.endpos );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 16+12
ARGP4
ADDRLP4 100
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 72
ADDRLP4 100
INDIRF4
ASGNF4
line 1562
;1561:
;1562:	bolt = G_Spawn();
ADDRLP4 104
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 104
INDIRP4
ASGNP4
line 1567
;1563:#ifdef DEBUG_LEAD
;1564: 	G_Printf("firing bullet: %i %i %i %f %i %f range: %f\n", damage, weapon,caliber,muzzlevelocity, bolt->s.otherEntityNum , tr.fraction,  Distance(start, tr.endpos ) );
;1565:#endif
;1566:	
;1567:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1568
;1568:	bolt->classname = "reallead";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $277
ASGNP4
line 1569
;1569:	bolt->nextthink = level.time + 4500; // free after 41/2 seconds so camera won't chase it into nirvana
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 4500
ADDI4
ASGNI4
line 1570
;1570:	bolt->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 1571
;1571:	bolt->s.eType = ET_BULLET;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 14
ASGNI4
line 1572
;1572:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 1573
;1573: 	bolt->s.weapon = weapon;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 1574
;1574:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1575
;1575:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1576
;1576:	bolt->damage = damage;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1577
;1577:	bolt->methodOfDeath = MOD_LEAD;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 26
ASGNI4
line 1578
;1578:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 1579
;1579:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 1580
;1580:	bolt->count = caliber;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRFP4 16
INDIRI4
ASGNI4
line 1582
;1581:
;1582:	bolt->fly_sound_debounce_time = 0;
ADDRLP4 0
INDIRP4
CNSTI4 724
ADDP4
CNSTI4 0
ASGNI4
line 1583
;1583:	if ( BG_IsRifle( weapon ) )
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 BG_IsRifle
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $572
line 1584
;1584:		bolt->wait = 4;
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 1082130432
ASGNF4
ADDRGP4 $573
JUMPV
LABELV $572
line 1586
;1585:	else
;1586:		bolt->wait = 1;
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 1065353216
ASGNF4
LABELV $573
line 1588
;1587:
;1588:	if ( g_silentBullets.integer )
ADDRGP4 g_silentBullets+12
INDIRI4
CNSTI4 0
EQI4 $574
line 1589
;1589:		bolt->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
LABELV $574
line 1591
;1590:
;1591:	bolt->timestamp = level.time + 150;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 150
ADDI4
ASGNI4
line 1592
;1592:	bolt->splashDamage = self->s.number; // to prevent commited suicide bug
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1593
;1593:	bolt->s.otherEntityNum2 = self->s.number+1; // the person who fired it. +1 so we don't get to 0
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1594
;1594:	bolt->s.modelindex = G_ModelIndex( "models/misc/bullets/bullet_pistol.md3" );
ADDRGP4 $578
ARGP4
ADDRLP4 116
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 116
INDIRI4
ASGNI4
line 1595
;1595:	bolt->moverState = muzzlevelocity;
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
ADDRFP4 24
INDIRF4
CVFI4 4
ASGNI4
line 1596
;1596:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 1597
;1597:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 1598
;1598:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1599
;1599:	VectorScale( dir, muzzlevelocity, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
line 1600
;1600:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 128
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1601
;1601:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1603
;1602:
;1603:	VectorCopy ( dir,  bolt->movedir );
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1616
;1604:
;1605:	// if zooming and a great distance we CAN go into camera mode
;1606:	
;1607:	/*
;1608:
;1609:	if ( dist >= 1000 && BG_IsZooming( self->client->ns.weaponmode[self->s.weapon] ) && self->client->ps.weapon == WP_MACMILLAN )
;1610:		bolt->s.otherEntityNum = 1; // follow this bullet
;1611:	else
;1612:		bolt->s.otherEntityNum = 0; 
;1613:
;1614:	*/
;1615:
;1616:	trap_LinkEntity( bolt );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1618
;1617:
;1618: 	VectorAdd( bolt->s.pos.trDelta, self->client->ps.velocity, bolt->s.pos.trDelta );	// "real" physics
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 128
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1620
;1619:
;1620:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $567
endproc fire_reallead 132 28
export fire_realshotgun
proc fire_realshotgun 136 28
line 1629
;1621:}
;1622:
;1623:
;1624:/*
;1625:=================
;1626:fire_realshotgun
;1627:=================
;1628:*/
;1629:gentity_t *fire_realshotgun (gentity_t *self, vec3_t start,vec3_t dir, int weapon, int caliber, int damage, float muzzlevelocity) {
line 1635
;1630:	gentity_t	*bolt;
;1631:	vec3_t		end;
;1632:	trace_t		tr;
;1633:	float		dist;
;1634:
;1635:	VectorMA( start, 8920, dir, end );
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 80
CNSTF4 1175150592
ASGNF4
ADDRLP4 84
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 4+4
ADDRLP4 76
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRLP4 4+8
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
CNSTF4 1175150592
ADDRFP4 8
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1636
;1636:	trap_Trace( &tr, start, NULL,NULL,end, self->s.number, MASK_SOLID );
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1638
;1637:
;1638:	dist = Distance( start, tr.endpos );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 16+12
ARGP4
ADDRLP4 100
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 72
ADDRLP4 100
INDIRF4
ASGNF4
line 1640
;1639:
;1640:	bolt = G_Spawn();
ADDRLP4 104
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 104
INDIRP4
ASGNP4
line 1644
;1641:
;1642://	G_Printf("firing bullet: %i %i %i %f %i %f range: %f\n", damage, weapon,caliber,muzzlevelocity, bolt->s.otherEntityNum , tr.fraction,  Distance(start, tr.endpos ) );
;1643:	
;1644:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1645
;1645:	bolt->classname = "reallead";
ADDRLP4 0
INDIRP4
CNSTI4 524
ADDP4
ADDRGP4 $277
ASGNP4
line 1646
;1646:	bolt->nextthink = level.time + 2500; // free after 21/2 seconds so camera won't chase it into nirvana
ADDRLP4 0
INDIRP4
CNSTI4 688
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2500
ADDI4
ASGNI4
line 1647
;1647:	bolt->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 692
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 1648
;1648:	bolt->s.eType = ET_BULLET;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 14
ASGNI4
line 1649
;1649:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 128
ASGNI4
line 1652
;1650:
;1651://	if ( g_silentBullets.integer )
;1652:		bolt->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 108
ADDRLP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1654
;1653:
;1654: 	bolt->s.weapon = weapon;
ADDRLP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 1655
;1655:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 512
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1656
;1656:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 600
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1657
;1657:	bolt->damage = damage;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1658
;1658:	bolt->methodOfDeath = MOD_LEAD;
ADDRLP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTI4 26
ASGNI4
line 1659
;1659:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 572
ADDP4
CNSTI4 100663297
ASGNI4
line 1660
;1660:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 668
ADDP4
CNSTP4 0
ASGNP4
line 1661
;1661:	bolt->count = caliber;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRFP4 16
INDIRI4
ASGNI4
line 1663
;1662:
;1663:	bolt->wait = 0;
ADDRLP4 0
INDIRP4
CNSTI4 796
ADDP4
CNSTF4 0
ASGNF4
line 1665
;1664:
;1665:	bolt->s.frame = damage;
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
ADDRFP4 20
INDIRI4
ASGNI4
line 1666
;1666:	bolt->timestamp = level.time + 150;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 150
ADDI4
ASGNI4
line 1667
;1667:	bolt->s.otherEntityNum2 = self->s.number+1; // the person who fired it. +1 so we don't get to 0
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1668
;1668:	bolt->s.modelindex = G_ModelIndex( "models/misc/bullets/bullet_pistol.md3" );
ADDRGP4 $578
ARGP4
ADDRLP4 112
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 1669
;1669:	bolt->moverState = muzzlevelocity;
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
ADDRFP4 24
INDIRF4
CVFI4 4
ASGNI4
line 1670
;1670:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1671
;1671:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
line 1672
;1672:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1673
;1673:	VectorScale( dir, muzzlevelocity, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 24
INDIRF4
MULF4
ASGNF4
line 1674
;1674:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 120
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1675
;1675:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1677
;1676:
;1677:	VectorCopy ( dir,  bolt->movedir );
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1680
;1678:
;1679:	// if zooming and a great distance we CAN go into camera mode
;1680:	if ( dist >= 1000 && BG_IsZooming( self->client->ns.weaponmode[self->s.weapon] ) && self->client->ps.weapon == WP_MACMILLAN )
ADDRLP4 72
INDIRF4
CNSTF4 1148846080
LTF4 $587
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 116
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 3180
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 120
ADDRGP4 BG_IsZooming
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
EQI4 $587
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 18
NEI4 $587
line 1681
;1681:		bolt->s.otherEntityNum = 1; // follow this bullet
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $588
JUMPV
LABELV $587
line 1683
;1682:	else
;1683:		bolt->s.otherEntityNum = 0; 
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTI4 0
ASGNI4
LABELV $588
line 1685
;1684:
;1685:	trap_LinkEntity( bolt );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1687
;1686:
;1687: 	VectorAdd( bolt->s.pos.trDelta, self->client->ps.velocity, bolt->s.pos.trDelta );	// "real" physics
ADDRLP4 124
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 128
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 132
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1689
;1688:
;1689:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $580
endproc fire_realshotgun 136 28
import G_BounceProjectile
import assault_link_all
import Touch_GlassTrigger
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import LTS_Rounds
import i_sCountDown
import b_sWaitingForPlayers
import i_sNextWaitPrint
import g_antilag
import g_squadAssault
import g_minPlayers
import g_testSmoke
import g_teamlockcamera
import g_shotgunleedvelocity
import g_leedvelocity
import g_teamRespawn
import g_teamXp
import g_baseXp
import g_roundTime
import g_maxTeamKill
import g_allowKnifes
import g_logradio
import g_proxMineTimeout
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import Svcmd_AbortPodium_f
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import respawn
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamCount
import Weapon_HookThink
import CheckMeleeAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import fire_grapple
import fire_bfg
import fire_plasma
import fire_blaster
import TossClientCubes
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_Damage
import CanDamage
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vectoyaw
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_Sound
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import Team_SetFlagStatus
import ElevatorReset
import NS_GetTime
import NS_RestoreHitboxes
import NS_FixHitboxes
import NS_SendMessageToTeam
import NS_InitHeadGear
import NS_GetMapName
import NS_ActiveRound
import Think_SetupTrainTargets
import NS_RecalcCharacter
import NS_ValidatePlayerLooks
import NS_CalculateRadar
import G_ApplyAntiLag
import G_UndoAntiLag
import G_UpdateClientAntiLag
import NS_FreeXP
import NS_TeamKill
import NS_GiveReward
import NS_SetClientCrosshairState
import PrintMsgToAllAlive
import NS_PlayerAnimation
import Use_BinaryMover
import Use_BinaryMover2
import CenterPrintAll
import G_Say
import PrintMsg
import BodySink
import CopyToBodyQue
import NS_GetNameForClass
import Drop_Weapon
import fire_smoke_grenade
import NS_FindRadius
import SelectTeamSpawnPoint
import NS_HandlePlayerMenu
import NS_HandleCreateClassMenu
import NS_HandleEquipmentMenu
import NS_HandleRadioMenu
import NS_HandleClassMenu
import NS_HandleCharacterMenu
import NS_HandleAmmoMenu
import NS_HandleMainMenu
import NS_HandleSecondaryWeaponMenu
import NS_HandleTeamMenu
import NS_HandlePrimaryWeaponMenu
import SetClass
import NS_OpenPlayerMenu
import NS_OpenCreateClassMenu
import NS_OpenEquipmentMenu
import NS_OpenSpectatorMenu
import NS_OpenPrimaryWeaponMenu
import NS_OpenRadioMenu
import NS_OpenMainMenu
import NS_OpenClassMenu
import NS_OpenTeamMenu
import NS_MenuSelect
import pointinback
import is_func_explosive
import DoorRotating_ResetState
import TriggerToggle_ResetState
import Door_ResetState
import Think_Goal
import Touch_Goal
import Laser_Gen
import CheckTeamplay
import NS_CalcWeight
import NS_CheckEndRound
import bomb_explode
import bomb_drop
import bomb_explode_instantly
import bomb_defused
import bomb_checkremovewire
import NS_GotEnoughXPfornextLevel
import NS_BombExistForTeam
import NS_CalcSpeed
import AliveTeamCount
import NS_CalculateStartingXP
import NS_CalcDamageOnRange
import NS_BulletHoleTypeForSurface
import NS_GotWounds
import BG_GetMaxRoundForWeapon
import NS_GetRounds
import NS_CheckLocationDamage
import BG_MaximumWeaponRange
import NS_GetAccuracy
import NS_GetPrevMap
import NS_GetNextMap
import NS_InitMapCycle
import assault_field_stopall
import NS_ModifyClientBBox
import NS_InitHeadBBoxes
import G_SetupServerInfo
import NS_RaiseCharacterLevel
import NS_PlayerInventory
import NS_SpawnFlare
import Pick_Item
import NS_KillMenu
import G_LocalSound
import NS_DirectMenuSelect
import NS_AdjustClientVWeap
import NS_Gesture
import NS_EndRoundForTeam
import NS_OpenDoor
import NS_HolsterWeapon
import Reset_Briefcase
import NS_EndRound
import NS_WeaponMode
import NS_GiveXP
import NS_WonRound
import NS_ClearInventory
import NS_RemoveItems
import NS_DropWeapon
import NS_StartBandage
import NS_Bandaging
import NS_NavySeals_ClientInit
import NS_CauseBleeding
import NS_SprayBlood
import Cmd_Reload_f
import NS_SetSecondary
import NS_SetPrimary
import G_RunActor
import NS_CheckRemoveTeamKill
import Fire_Lead
import BG_GotSecondary
import NS_IsVipAlive
import NS_CanShotgunBlowHead
import NS_GotPowerup
import Is_OnBrushTeam
import NS_IsBot
import Is_Spectator
import PI_CheckWeapon
import Weapon_C4
import RadioBroadcast
import Cmd_Radio_power_f
import Cmd_Radioteam_f
import RadioThink
import PrecacheRadioSounds
import Pickup_Briefcase
import NS_Itsame
import NS_TMequip
import NS_SetGameState
import lastvip
import GameState
import g_LockXP
import g_matchLockXP
import g_mapcycle
import g_firstCountdown
import g_TeamKillRemoveTime
import g_TeamScores
import g_TeamPlayers
import g_updateServerInfoTime
import g_allowTeampointlimitVote
import g_allowTimelimitVote
import g_allowKickVote
import g_allowMapVote
import g_noGrenades
import g_noSecondary
import g_noPrimary
import g_realLead
import g_silentBullets
import g_snipermod
import g_pistolmod
import g_riflemod
import g_bombTime
import g_invenTime
import g_aimCorrect
import g_overrideGoals
import g_keepCharacter
import BG_GotWeapon
import BG_RemoveWeapon
import BG_ClearWeapons
import BG_PackWeapon
import BG_WeaponMods
import BG_GetSpeedMod
import BG_CalcSpeed
import BG_IsInGLMode
import BG_IsShotgun
import BG_HasLaser
import BG_IsZooming
import BG_IsGrenade
import BG_IsSMG
import BG_IsSecondary
import BG_IsPrimary
import BG_GotPrimary
import BG_IsPistol
import BG_IsMelee
import BG_IsSmg
import BG_IsRifle
import BG_IsSemiAutomatic
import BG_LeadGetBreakValueForSurface
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_CanItemBeGrabbed
import BG_SurfaceToString
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import colorLtBlue
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Swap_Init
import LittleFloat
import BigFloat
import LittleLong64
import BigLong64
import LittleLong
import BigLong
import LittleShort
import BigShort
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorInverse
import VectorNormalize2
import VectorNormalizeFast
import VectorNormalize
import CrossProduct
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $578
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 95
byte 1 112
byte 1 105
byte 1 115
byte 1 116
byte 1 111
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $492
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 95
byte 1 114
byte 1 111
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $491
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $424
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 95
byte 1 98
byte 1 98
byte 1 111
byte 1 120
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $413
byte 1 98
byte 1 97
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $409
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $396
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 98
byte 1 97
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $363
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $348
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 118
byte 1 101
byte 1 95
byte 1 103
byte 1 108
byte 1 97
byte 1 115
byte 1 115
byte 1 0
align 1
LABELV $328
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $280
byte 1 52
byte 1 48
byte 1 109
byte 1 109
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $277
byte 1 114
byte 1 101
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $242
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 52
byte 1 48
byte 1 109
byte 1 109
byte 1 95
byte 1 103
byte 1 97
byte 1 115
byte 1 108
byte 1 111
byte 1 111
byte 1 112
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $241
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 52
byte 1 48
byte 1 109
byte 1 109
byte 1 95
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $237
byte 1 115
byte 1 109
byte 1 111
byte 1 107
byte 1 101
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 0
